
micro_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a8a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  0801aa70  0801aa70  0001ba70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be00  0801be00  0001d254  2**0
                  CONTENTS
  4 .ARM          00000008  0801be00  0801be00  0001ce00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be08  0801be08  0001d254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801be08  0801be08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be14  0801be14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0801be18  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010dc0  20000258  0801c06c  0001d258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011018  0801c06c  0001e018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023798  00000000  00000000  0001d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000514d  00000000  00000000  00040a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00045b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001582  00000000  00000000  00047730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299b8  00000000  00000000  00048cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ede  00000000  00000000  0007266a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb829  00000000  00000000  00096548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00181d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008634  00000000  00000000  00181de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0018a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801aa58 	.word	0x0801aa58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0801aa58 	.word	0x0801aa58

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d06:	f000 b9b5 	b.w	8001074 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f84d 	bl	8000db8 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f840 	bl	8000db8 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f82f 	bl	8000db8 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f821 	bl	8000db8 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d9c:	f000 b96a 	b.w	8001074 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d14e      	bne.n	8000e62 <__udivmoddi4+0xaa>
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	458c      	cmp	ip, r1
 8000dc8:	4686      	mov	lr, r0
 8000dca:	fab2 f282 	clz	r2, r2
 8000dce:	d962      	bls.n	8000e96 <__udivmoddi4+0xde>
 8000dd0:	b14a      	cbz	r2, 8000de6 <__udivmoddi4+0x2e>
 8000dd2:	f1c2 0320 	rsb	r3, r2, #32
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	4319      	orrs	r1, r3
 8000de2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f f68c 	uxth.w	r6, ip
 8000dee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000df2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfe:	fb04 f106 	mul.w	r1, r4, r6
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d90a      	bls.n	8000e1c <__udivmoddi4+0x64>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e0e:	f080 8112 	bcs.w	8001036 <__udivmoddi4+0x27e>
 8000e12:	4299      	cmp	r1, r3
 8000e14:	f240 810f 	bls.w	8001036 <__udivmoddi4+0x27e>
 8000e18:	3c02      	subs	r4, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	fa1f f38e 	uxth.w	r3, lr
 8000e22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e26:	fb07 1110 	mls	r1, r7, r0, r1
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f606 	mul.w	r6, r0, r6
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x94>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e3e:	f080 80fc 	bcs.w	800103a <__udivmoddi4+0x282>
 8000e42:	429e      	cmp	r6, r3
 8000e44:	f240 80f9 	bls.w	800103a <__udivmoddi4+0x282>
 8000e48:	4463      	add	r3, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11d      	cbz	r5, 8000e5e <__udivmoddi4+0xa6>
 8000e56:	40d3      	lsrs	r3, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d905      	bls.n	8000e72 <__udivmoddi4+0xba>
 8000e66:	b10d      	cbz	r5, 8000e6c <__udivmoddi4+0xb4>
 8000e68:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e7f5      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d146      	bne.n	8000f08 <__udivmoddi4+0x150>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xcc>
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	f0c0 80f0 	bcc.w	8001064 <__udivmoddi4+0x2ac>
 8000e84:	1a86      	subs	r6, r0, r2
 8000e86:	eb64 0303 	sbc.w	r3, r4, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d0e6      	beq.n	8000e5e <__udivmoddi4+0xa6>
 8000e90:	e9c5 6300 	strd	r6, r3, [r5]
 8000e94:	e7e3      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	f040 8090 	bne.w	8000fbc <__udivmoddi4+0x204>
 8000e9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000eb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eba:	fb07 f006 	mul.w	r0, r7, r6
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x11c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x11a>
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	f200 80cd 	bhi.w	800106c <__udivmoddi4+0x2b4>
 8000ed2:	4626      	mov	r6, r4
 8000ed4:	1a1c      	subs	r4, r3, r0
 8000ed6:	fa1f f38e 	uxth.w	r3, lr
 8000eda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ede:	fb08 4410 	mls	r4, r8, r0, r4
 8000ee2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ee6:	fb00 f707 	mul.w	r7, r0, r7
 8000eea:	429f      	cmp	r7, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x148>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x146>
 8000ef8:	429f      	cmp	r7, r3
 8000efa:	f200 80b0 	bhi.w	800105e <__udivmoddi4+0x2a6>
 8000efe:	4620      	mov	r0, r4
 8000f00:	1bdb      	subs	r3, r3, r7
 8000f02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f06:	e7a5      	b.n	8000e54 <__udivmoddi4+0x9c>
 8000f08:	f1c1 0620 	rsb	r6, r1, #32
 8000f0c:	408b      	lsls	r3, r1
 8000f0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f12:	431f      	orrs	r7, r3
 8000f14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f18:	fa04 f301 	lsl.w	r3, r4, r1
 8000f1c:	ea43 030c 	orr.w	r3, r3, ip
 8000f20:	40f4      	lsrs	r4, r6
 8000f22:	fa00 f801 	lsl.w	r8, r0, r1
 8000f26:	0c38      	lsrs	r0, r7, #16
 8000f28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f30:	fa1f fc87 	uxth.w	ip, r7
 8000f34:	fb00 441e 	mls	r4, r0, lr, r4
 8000f38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f40:	45a1      	cmp	r9, r4
 8000f42:	fa02 f201 	lsl.w	r2, r2, r1
 8000f46:	d90a      	bls.n	8000f5e <__udivmoddi4+0x1a6>
 8000f48:	193c      	adds	r4, r7, r4
 8000f4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f4e:	f080 8084 	bcs.w	800105a <__udivmoddi4+0x2a2>
 8000f52:	45a1      	cmp	r9, r4
 8000f54:	f240 8081 	bls.w	800105a <__udivmoddi4+0x2a2>
 8000f58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	eba4 0409 	sub.w	r4, r4, r9
 8000f62:	fa1f f983 	uxth.w	r9, r3
 8000f66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f76:	45a4      	cmp	ip, r4
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x1d2>
 8000f7a:	193c      	adds	r4, r7, r4
 8000f7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f80:	d267      	bcs.n	8001052 <__udivmoddi4+0x29a>
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d965      	bls.n	8001052 <__udivmoddi4+0x29a>
 8000f86:	3b02      	subs	r3, #2
 8000f88:	443c      	add	r4, r7
 8000f8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f92:	eba4 040c 	sub.w	r4, r4, ip
 8000f96:	429c      	cmp	r4, r3
 8000f98:	46ce      	mov	lr, r9
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	d351      	bcc.n	8001042 <__udivmoddi4+0x28a>
 8000f9e:	d04e      	beq.n	800103e <__udivmoddi4+0x286>
 8000fa0:	b155      	cbz	r5, 8000fb8 <__udivmoddi4+0x200>
 8000fa2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fa6:	eb64 040c 	sbc.w	r4, r4, ip
 8000faa:	fa04 f606 	lsl.w	r6, r4, r6
 8000fae:	40cb      	lsrs	r3, r1
 8000fb0:	431e      	orrs	r6, r3
 8000fb2:	40cc      	lsrs	r4, r1
 8000fb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fb8:	2100      	movs	r1, #0
 8000fba:	e750      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000fbc:	f1c2 0320 	rsb	r3, r2, #32
 8000fc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fcc:	4094      	lsls	r4, r2
 8000fce:	430c      	orrs	r4, r1
 8000fd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fd8:	fa1f f78c 	uxth.w	r7, ip
 8000fdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fe0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fe4:	0c23      	lsrs	r3, r4, #16
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f107 	mul.w	r1, r0, r7
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x24c>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ffa:	d22c      	bcs.n	8001056 <__udivmoddi4+0x29e>
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d92a      	bls.n	8001056 <__udivmoddi4+0x29e>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1a5b      	subs	r3, r3, r1
 8001006:	b2a4      	uxth	r4, r4
 8001008:	fbb3 f1f8 	udiv	r1, r3, r8
 800100c:	fb08 3311 	mls	r3, r8, r1, r3
 8001010:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001014:	fb01 f307 	mul.w	r3, r1, r7
 8001018:	42a3      	cmp	r3, r4
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x276>
 800101c:	eb1c 0404 	adds.w	r4, ip, r4
 8001020:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001024:	d213      	bcs.n	800104e <__udivmoddi4+0x296>
 8001026:	42a3      	cmp	r3, r4
 8001028:	d911      	bls.n	800104e <__udivmoddi4+0x296>
 800102a:	3902      	subs	r1, #2
 800102c:	4464      	add	r4, ip
 800102e:	1ae4      	subs	r4, r4, r3
 8001030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001034:	e739      	b.n	8000eaa <__udivmoddi4+0xf2>
 8001036:	4604      	mov	r4, r0
 8001038:	e6f0      	b.n	8000e1c <__udivmoddi4+0x64>
 800103a:	4608      	mov	r0, r1
 800103c:	e706      	b.n	8000e4c <__udivmoddi4+0x94>
 800103e:	45c8      	cmp	r8, r9
 8001040:	d2ae      	bcs.n	8000fa0 <__udivmoddi4+0x1e8>
 8001042:	ebb9 0e02 	subs.w	lr, r9, r2
 8001046:	eb63 0c07 	sbc.w	ip, r3, r7
 800104a:	3801      	subs	r0, #1
 800104c:	e7a8      	b.n	8000fa0 <__udivmoddi4+0x1e8>
 800104e:	4631      	mov	r1, r6
 8001050:	e7ed      	b.n	800102e <__udivmoddi4+0x276>
 8001052:	4603      	mov	r3, r0
 8001054:	e799      	b.n	8000f8a <__udivmoddi4+0x1d2>
 8001056:	4630      	mov	r0, r6
 8001058:	e7d4      	b.n	8001004 <__udivmoddi4+0x24c>
 800105a:	46d6      	mov	lr, sl
 800105c:	e77f      	b.n	8000f5e <__udivmoddi4+0x1a6>
 800105e:	4463      	add	r3, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e74d      	b.n	8000f00 <__udivmoddi4+0x148>
 8001064:	4606      	mov	r6, r0
 8001066:	4623      	mov	r3, r4
 8001068:	4608      	mov	r0, r1
 800106a:	e70f      	b.n	8000e8c <__udivmoddi4+0xd4>
 800106c:	3e02      	subs	r6, #2
 800106e:	4463      	add	r3, ip
 8001070:	e730      	b.n	8000ed4 <__udivmoddi4+0x11c>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4619      	mov	r1, r3
 8001086:	2007      	movs	r0, #7
 8001088:	f000 fd28 	bl	8001adc <bno055_writeData>
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4619      	mov	r1, r3
 80010a2:	203d      	movs	r0, #61	@ 0x3d
 80010a4:	f000 fd1a 	bl	8001adc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80010ae:	2013      	movs	r0, #19
 80010b0:	f000 fd08 	bl	8001ac4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80010b4:	e002      	b.n	80010bc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80010b6:	2007      	movs	r0, #7
 80010b8:	f000 fd04 	bl	8001ac4 <bno055_delay>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff ffe3 	bl	8001094 <bno055_setOperationMode>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80010d6:	200c      	movs	r0, #12
 80010d8:	f7ff ffdc 	bl	8001094 <bno055_setOperationMode>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80010e4:	2120      	movs	r1, #32
 80010e6:	203f      	movs	r0, #63	@ 0x3f
 80010e8:	f000 fcf8 	bl	8001adc <bno055_writeData>
  bno055_delay(700);
 80010ec:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80010f0:	f000 fce8 	bl	8001ac4 <bno055_delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  bno055_reset();
 80010fe:	f7ff ffef 	bl	80010e0 <bno055_reset>

  uint8_t id = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fdd1 	bl	8001cb4 <bno055_readData>
  if (id != BNO055_ID) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2ba0      	cmp	r3, #160	@ 0xa0
 8001116:	d004      	beq.n	8001122 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <bno055_setup+0x4c>)
 800111e:	f017 f9a3 	bl	8018468 <iprintf>
  }
  bno055_setPage(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ffa8 	bl	8001078 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001128:	2100      	movs	r1, #0
 800112a:	203f      	movs	r0, #63	@ 0x3f
 800112c:	f000 fcd6 	bl	8001adc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001130:	f7ff ffc8 	bl	80010c4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 fcc5 	bl	8001ac4 <bno055_delay>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0801aa70 	.word	0x0801aa70

08001148 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800114c:	b09e      	sub	sp, #120	@ 0x78
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ff8e 	bl	8001078 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001160:	2b20      	cmp	r3, #32
 8001162:	d108      	bne.n	8001176 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001164:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116c:	2208      	movs	r2, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fda0 	bl	8001cb4 <bno055_readData>
 8001174:	e007      	b.n	8001186 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001176:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800117a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800117e:	2206      	movs	r2, #6
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fd97 	bl	8001cb4 <bno055_readData>

  double scale = 1;
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b8b      	ldr	r3, [pc, #556]	@ (80013b8 <bno055_getVector+0x270>)
 800118c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001194:	2b0e      	cmp	r3, #14
 8001196:	d109      	bne.n	80011ac <bno055_getVector+0x64>
    scale = magScale;
 8001198:	4b88      	ldr	r3, [pc, #544]	@ (80013bc <bno055_getVector+0x274>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_ui2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011aa:	e03e      	b.n	800122a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d007      	beq.n	80011c4 <bno055_getVector+0x7c>
 80011b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b8:	2b28      	cmp	r3, #40	@ 0x28
 80011ba:	d003      	beq.n	80011c4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80011c2:	d109      	bne.n	80011d8 <bno055_getVector+0x90>
    scale = accelScale;
 80011c4:	4b7e      	ldr	r3, [pc, #504]	@ (80013c0 <bno055_getVector+0x278>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9cb 	bl	8000564 <__aeabi_ui2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011d6:	e028      	b.n	800122a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011dc:	2b14      	cmp	r3, #20
 80011de:	d109      	bne.n	80011f4 <bno055_getVector+0xac>
    scale = angularRateScale;
 80011e0:	4b78      	ldr	r3, [pc, #480]	@ (80013c4 <bno055_getVector+0x27c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9bd 	bl	8000564 <__aeabi_ui2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011f2:	e01a      	b.n	800122a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011f8:	2b1a      	cmp	r3, #26
 80011fa:	d109      	bne.n	8001210 <bno055_getVector+0xc8>
    scale = eulerScale;
 80011fc:	4b72      	ldr	r3, [pc, #456]	@ (80013c8 <bno055_getVector+0x280>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9af 	bl	8000564 <__aeabi_ui2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800120e:	e00c      	b.n	800122a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001214:	2b20      	cmp	r3, #32
 8001216:	d108      	bne.n	800122a <bno055_getVector+0xe2>
    scale = quaScale;
 8001218:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <bno055_getVector+0x284>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_ui2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800122a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122e:	2220      	movs	r2, #32
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f017 faf6 	bl	8018824 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800123c:	2b20      	cmp	r3, #32
 800123e:	d150      	bne.n	80012e2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001240:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21b      	sxth	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f996 	bl	8000584 <__aeabi_i2d>
 8001258:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800125c:	f7ff fb26 	bl	80008ac <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001268:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f982 	bl	8000584 <__aeabi_i2d>
 8001280:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001284:	f7ff fb12 	bl	80008ac <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001290:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f96e 	bl	8000584 <__aeabi_i2d>
 80012a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012ac:	f7ff fafe 	bl	80008ac <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80012b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f95a 	bl	8000584 <__aeabi_i2d>
 80012d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012d4:	f7ff faea 	bl	80008ac <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80012e0:	e03b      	b.n	800135a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80012e2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f945 	bl	8000584 <__aeabi_i2d>
 80012fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012fe:	f7ff fad5 	bl	80008ac <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800130a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f931 	bl	8000584 <__aeabi_i2d>
 8001322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001326:	f7ff fac1 	bl	80008ac <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001332:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91d 	bl	8000584 <__aeabi_i2d>
 800134a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800134e:	f7ff faad 	bl	80008ac <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800135a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800135e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800136a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800136e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001372:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001376:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800137a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800137e:	ec49 8b14 	vmov	d4, r8, r9
 8001382:	ec45 4b15 	vmov	d5, r4, r5
 8001386:	ec41 0b16 	vmov	d6, r0, r1
 800138a:	ec43 2b17 	vmov	d7, r2, r3
}
 800138e:	eeb0 0a44 	vmov.f32	s0, s8
 8001392:	eef0 0a64 	vmov.f32	s1, s9
 8001396:	eeb0 1a45 	vmov.f32	s2, s10
 800139a:	eef0 1a65 	vmov.f32	s3, s11
 800139e:	eeb0 2a46 	vmov.f32	s4, s12
 80013a2:	eef0 2a66 	vmov.f32	s5, s13
 80013a6:	eeb0 3a47 	vmov.f32	s6, s14
 80013aa:	eef0 3a67 	vmov.f32	s7, s15
 80013ae:	3778      	adds	r7, #120	@ 0x78
 80013b0:	46bd      	mov	sp, r7
 80013b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b6:	bf00      	nop
 80013b8:	3ff00000 	.word	0x3ff00000
 80013bc:	20000006 	.word	0x20000006
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000002 	.word	0x20000002
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000008 	.word	0x20000008

080013d0 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b090      	sub	sp, #64	@ 0x40
 80013d6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80013d8:	201a      	movs	r0, #26
 80013da:	f7ff feb5 	bl	8001148 <bno055_getVector>
 80013de:	eeb0 4a40 	vmov.f32	s8, s0
 80013e2:	eef0 4a60 	vmov.f32	s9, s1
 80013e6:	eeb0 5a41 	vmov.f32	s10, s2
 80013ea:	eef0 5a61 	vmov.f32	s11, s3
 80013ee:	eeb0 6a42 	vmov.f32	s12, s4
 80013f2:	eef0 6a62 	vmov.f32	s13, s5
 80013f6:	eeb0 7a43 	vmov.f32	s14, s6
 80013fa:	eef0 7a63 	vmov.f32	s15, s7
 80013fe:	ed87 4b08 	vstr	d4, [r7, #32]
 8001402:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001406:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800140a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800140e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001412:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001416:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800141a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800141e:	ec49 8b14 	vmov	d4, r8, r9
 8001422:	ec45 4b15 	vmov	d5, r4, r5
 8001426:	ec41 0b16 	vmov	d6, r0, r1
 800142a:	ec43 2b17 	vmov	d7, r2, r3
}
 800142e:	eeb0 0a44 	vmov.f32	s0, s8
 8001432:	eef0 0a64 	vmov.f32	s1, s9
 8001436:	eeb0 1a45 	vmov.f32	s2, s10
 800143a:	eef0 1a65 	vmov.f32	s3, s11
 800143e:	eeb0 2a46 	vmov.f32	s4, s12
 8001442:	eef0 2a66 	vmov.f32	s5, s13
 8001446:	eeb0 3a47 	vmov.f32	s6, s14
 800144a:	eef0 3a67 	vmov.f32	s7, s15
 800144e:	3740      	adds	r7, #64	@ 0x40
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001458 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001464:	f007 fec2 	bl	80091ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001468:	4b5a      	ldr	r3, [pc, #360]	@ (80015d4 <pvPortMallocMicroROS+0x17c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001470:	f000 f986 	bl	8001780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001474:	4b58      	ldr	r3, [pc, #352]	@ (80015d8 <pvPortMallocMicroROS+0x180>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 8090 	bne.w	80015a2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d01e      	beq.n	80014c6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001488:	2208      	movs	r2, #8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f023 0307 	bic.w	r3, r3, #7
 80014a0:	3308      	adds	r3, #8
 80014a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	e7fd      	b.n	80014c2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d06a      	beq.n	80015a2 <pvPortMallocMicroROS+0x14a>
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <pvPortMallocMicroROS+0x184>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d865      	bhi.n	80015a2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80014d6:	4b42      	ldr	r3, [pc, #264]	@ (80015e0 <pvPortMallocMicroROS+0x188>)
 80014d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80014da:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <pvPortMallocMicroROS+0x188>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014e0:	e004      	b.n	80014ec <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d903      	bls.n	80014fe <pvPortMallocMicroROS+0xa6>
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f1      	bne.n	80014e2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <pvPortMallocMicroROS+0x17c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001504:	429a      	cmp	r2, r3
 8001506:	d04c      	beq.n	80015a2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2208      	movs	r2, #8
 800150e:	4413      	add	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad2      	subs	r2, r2, r3
 8001522:	2308      	movs	r3, #8
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	429a      	cmp	r2, r3
 8001528:	d920      	bls.n	800156c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	613b      	str	r3, [r7, #16]
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001566:	69b8      	ldr	r0, [r7, #24]
 8001568:	f000 f96c 	bl	8001844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <pvPortMallocMicroROS+0x184>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <pvPortMallocMicroROS+0x184>)
 8001578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <pvPortMallocMicroROS+0x184>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <pvPortMallocMicroROS+0x18c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d203      	bcs.n	800158e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <pvPortMallocMicroROS+0x184>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <pvPortMallocMicroROS+0x18c>)
 800158c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <pvPortMallocMicroROS+0x180>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	431a      	orrs	r2, r3
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80015a2:	f007 fe31 	bl	8009208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80015b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	f3bf 8f4f 	dsb	sy
 80015c0:	60fb      	str	r3, [r7, #12]
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80015c8:	69fb      	ldr	r3, [r7, #28]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20003e7c 	.word	0x20003e7c
 80015d8:	20003e88 	.word	0x20003e88
 80015dc:	20003e80 	.word	0x20003e80
 80015e0:	20003e74 	.word	0x20003e74
 80015e4:	20003e84 	.word	0x20003e84

080015e8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d04a      	beq.n	8001690 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80015fa:	2308      	movs	r3, #8
 80015fc:	425b      	negs	r3, r3
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <vPortFreeMicroROS+0xb0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10b      	bne.n	800162e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800161a:	f383 8811 	msr	BASEPRI, r3
 800161e:	f3bf 8f6f 	isb	sy
 8001622:	f3bf 8f4f 	dsb	sy
 8001626:	60fb      	str	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	f3bf 8f6f 	isb	sy
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	60bb      	str	r3, [r7, #8]
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	e7fd      	b.n	800164a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <vPortFreeMicroROS+0xb0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d019      	beq.n	8001690 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d115      	bne.n	8001690 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <vPortFreeMicroROS+0xb0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001674:	f007 fdba 	bl	80091ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <vPortFreeMicroROS+0xb4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4413      	add	r3, r2
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <vPortFreeMicroROS+0xb4>)
 8001684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001686:	6938      	ldr	r0, [r7, #16]
 8001688:	f000 f8dc 	bl	8001844 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800168c:	f007 fdbc 	bl	8009208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20003e88 	.word	0x20003e88
 800169c:	20003e80 	.word	0x20003e80

080016a0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80016ac:	2308      	movs	r3, #8
 80016ae:	425b      	negs	r3, r3
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <getBlockSize+0x38>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

	return count;
 80016c8:	68fb      	ldr	r3, [r7, #12]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20003e88 	.word	0x20003e88

080016dc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80016e6:	f007 fd81 	bl	80091ec <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f7ff feb4 	bl	8001458 <pvPortMallocMicroROS>
 80016f0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <pvPortReallocMicroROS+0x4c>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d014      	beq.n	8001728 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffce 	bl	80016a0 <getBlockSize>
 8001704:	4603      	mov	r3, r0
 8001706:	2208      	movs	r2, #8
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d201      	bcs.n	8001718 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f017 f9a0 	bl	8018a62 <memcpy>

		vPortFreeMicroROS(pv);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff60 	bl	80015e8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001728:	f007 fd6e 	bl	8009208 <xTaskResumeAll>

	return newmem;
 800172c:	68bb      	ldr	r3, [r7, #8]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001740:	f007 fd54 	bl	80091ec <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff fe82 	bl	8001458 <pvPortMallocMicroROS>
 8001754:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	613b      	str	r3, [r7, #16]

  	while(count--)
 800175a:	e004      	b.n	8001766 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	613a      	str	r2, [r7, #16]
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	617a      	str	r2, [r7, #20]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f5      	bne.n	800175c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001770:	f007 fd4a 	bl	8009208 <xTaskResumeAll>
  	return mem;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800178a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <prvHeapInit+0xac>)
 800178e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3307      	adds	r3, #7
 800179e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <prvHeapInit+0xac>)
 80017b0:	4413      	add	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <prvHeapInit+0xb0>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <prvHeapInit+0xb0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80017cc:	2208      	movs	r2, #8
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0307 	bic.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <prvHeapInit+0xb4>)
 80017e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <prvHeapInit+0xb4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <prvHeapInit+0xb4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	1ad2      	subs	r2, r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <prvHeapInit+0xb4>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <prvHeapInit+0xb8>)
 800180e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a09      	ldr	r2, [pc, #36]	@ (800183c <prvHeapInit+0xbc>)
 8001816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <prvHeapInit+0xc0>)
 800181a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000274 	.word	0x20000274
 8001830:	20003e74 	.word	0x20003e74
 8001834:	20003e7c 	.word	0x20003e7c
 8001838:	20003e84 	.word	0x20003e84
 800183c:	20003e80 	.word	0x20003e80
 8001840:	20003e88 	.word	0x20003e88

08001844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800184c:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <prvInsertBlockIntoFreeList+0xac>)
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e002      	b.n	8001858 <prvInsertBlockIntoFreeList+0x14>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d8f7      	bhi.n	8001852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d108      	bne.n	8001886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	441a      	add	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d118      	bne.n	80018cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <prvInsertBlockIntoFreeList+0xb0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d00d      	beq.n	80018c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	441a      	add	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e008      	b.n	80018d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <prvInsertBlockIntoFreeList+0xb0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e003      	b.n	80018d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d002      	beq.n	80018e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20003e74 	.word	0x20003e74
 80018f4:	20003e7c 	.word	0x20003e7c

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <MX_DMA_Init+0x4c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <MX_DMA_Init+0x4c>)
 8001908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <MX_DMA_Init+0x4c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2105      	movs	r1, #5
 800191e:	2010      	movs	r0, #16
 8001920:	f002 f838 	bl	8003994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001924:	2010      	movs	r0, #16
 8001926:	f002 f851 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2011      	movs	r0, #17
 8001930:	f002 f830 	bl	8003994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001934:	2011      	movs	r0, #17
 8001936:	f002 f849 	bl	80039cc <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001956:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800195c:	4904      	ldr	r1, [pc, #16]	@ (8001970 <cubemx_transport_open+0x28>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f005 f91e 	bl	8006ba0 <HAL_UART_Receive_DMA>
    return true;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20003e8c 	.word	0x20003e8c

08001974 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001982:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f005 f93b 	bl	8006c00 <HAL_UART_DMAStop>
    return true;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019a8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d11c      	bne.n	80019f0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f005 f870 	bl	8006aa4 <HAL_UART_Transmit_DMA>
 80019c4:	4603      	mov	r3, r0
 80019c6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019c8:	e002      	b.n	80019d0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f006 fbac 	bl	8008128 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019d0:	7cfb      	ldrb	r3, [r7, #19]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <cubemx_transport_write+0x4e>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d1f3      	bne.n	80019ca <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80019e2:	7cfb      	ldrb	r3, [r7, #19]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <cubemx_transport_write+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	e002      	b.n	80019f2 <cubemx_transport_write+0x5e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80019f0:	2300      	movs	r3, #0
    }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001a10:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a16:	b672      	cpsid	i
}
 8001a18:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a26:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <cubemx_transport_read+0x9c>)
 8001a28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a2a:	b662      	cpsie	i
}
 8001a2c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f006 fb77 	bl	8008128 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <cubemx_transport_read+0xa0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <cubemx_transport_read+0x9c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d103      	bne.n	8001a4e <cubemx_transport_read+0x52>
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbe3      	blt.n	8001a16 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a52:	e011      	b.n	8001a78 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <cubemx_transport_read+0xa0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	4910      	ldr	r1, [pc, #64]	@ (8001aa0 <cubemx_transport_read+0xa4>)
 8001a60:	5c8a      	ldrb	r2, [r1, r2]
 8001a62:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <cubemx_transport_read+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <cubemx_transport_read+0xa0>)
 8001a70:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <cubemx_transport_read+0xa0>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <cubemx_transport_read+0x9c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d003      	beq.n	8001a8c <cubemx_transport_read+0x90>
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3e3      	bcc.n	8001a54 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20004690 	.word	0x20004690
 8001a9c:	2000468c 	.word	0x2000468c
 8001aa0:	20003e8c 	.word	0x20003e8c

08001aa4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <bno055_assignI2C+0x1c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20004694 	.word	0x20004694

08001ac4 <bno055_delay>:

void bno055_delay(int time) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fe84 	bl	80037dc <HAL_Delay>
#endif
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	733b      	strb	r3, [r7, #12]
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001af4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <bno055_writeData+0x184>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	230a      	movs	r3, #10
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2302      	movs	r3, #2
 8001b02:	2150      	movs	r1, #80	@ 0x50
 8001b04:	f002 feae 	bl	8004864 <HAL_I2C_Master_Transmit>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a0 	beq.w	8001c54 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d103      	bne.n	8001b22 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001b1a:	4852      	ldr	r0, [pc, #328]	@ (8001c64 <bno055_writeData+0x188>)
 8001b1c:	f016 fd0c 	bl	8018538 <puts>
 8001b20:	e012      	b.n	8001b48 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d103      	bne.n	8001b30 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001b28:	484f      	ldr	r0, [pc, #316]	@ (8001c68 <bno055_writeData+0x18c>)
 8001b2a:	f016 fd05 	bl	8018538 <puts>
 8001b2e:	e00b      	b.n	8001b48 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d103      	bne.n	8001b3e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001b36:	484d      	ldr	r0, [pc, #308]	@ (8001c6c <bno055_writeData+0x190>)
 8001b38:	f016 fcfe 	bl	8018538 <puts>
 8001b3c:	e004      	b.n	8001b48 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	4619      	mov	r1, r3
 8001b42:	484b      	ldr	r0, [pc, #300]	@ (8001c70 <bno055_writeData+0x194>)
 8001b44:	f016 fc90 	bl	8018468 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001b48:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <bno055_writeData+0x184>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 f9bb 	bl	8004ec8 <HAL_I2C_GetError>
 8001b52:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07e      	beq.n	8001c58 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d103      	bne.n	8001b68 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001b60:	4844      	ldr	r0, [pc, #272]	@ (8001c74 <bno055_writeData+0x198>)
 8001b62:	f016 fce9 	bl	8018538 <puts>
 8001b66:	e021      	b.n	8001bac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d103      	bne.n	8001b76 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001b6e:	4842      	ldr	r0, [pc, #264]	@ (8001c78 <bno055_writeData+0x19c>)
 8001b70:	f016 fce2 	bl	8018538 <puts>
 8001b74:	e01a      	b.n	8001bac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d103      	bne.n	8001b84 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001b7c:	483f      	ldr	r0, [pc, #252]	@ (8001c7c <bno055_writeData+0x1a0>)
 8001b7e:	f016 fcdb 	bl	8018538 <puts>
 8001b82:	e013      	b.n	8001bac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d103      	bne.n	8001b92 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001b8a:	483d      	ldr	r0, [pc, #244]	@ (8001c80 <bno055_writeData+0x1a4>)
 8001b8c:	f016 fcd4 	bl	8018538 <puts>
 8001b90:	e00c      	b.n	8001bac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d103      	bne.n	8001ba0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001b98:	483a      	ldr	r0, [pc, #232]	@ (8001c84 <bno055_writeData+0x1a8>)
 8001b9a:	f016 fccd 	bl	8018538 <puts>
 8001b9e:	e005      	b.n	8001bac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d102      	bne.n	8001bac <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001ba6:	4838      	ldr	r0, [pc, #224]	@ (8001c88 <bno055_writeData+0x1ac>)
 8001ba8:	f016 fcc6 	bl	8018538 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001bac:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <bno055_writeData+0x184>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 f97b 	bl	8004eac <HAL_I2C_GetState>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001bc0:	4832      	ldr	r0, [pc, #200]	@ (8001c8c <bno055_writeData+0x1b0>)
 8001bc2:	f016 fcb9 	bl	8018538 <puts>
 8001bc6:	e048      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d103      	bne.n	8001bd6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001bce:	482f      	ldr	r0, [pc, #188]	@ (8001c8c <bno055_writeData+0x1b0>)
 8001bd0:	f016 fcb2 	bl	8018538 <puts>
 8001bd4:	e041      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b24      	cmp	r3, #36	@ 0x24
 8001bda:	d103      	bne.n	8001be4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001bdc:	482c      	ldr	r0, [pc, #176]	@ (8001c90 <bno055_writeData+0x1b4>)
 8001bde:	f016 fcab 	bl	8018538 <puts>
 8001be2:	e03a      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b21      	cmp	r3, #33	@ 0x21
 8001be8:	d103      	bne.n	8001bf2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001bea:	482a      	ldr	r0, [pc, #168]	@ (8001c94 <bno055_writeData+0x1b8>)
 8001bec:	f016 fca4 	bl	8018538 <puts>
 8001bf0:	e033      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b22      	cmp	r3, #34	@ 0x22
 8001bf6:	d103      	bne.n	8001c00 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001bf8:	4827      	ldr	r0, [pc, #156]	@ (8001c98 <bno055_writeData+0x1bc>)
 8001bfa:	f016 fc9d 	bl	8018538 <puts>
 8001bfe:	e02c      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b28      	cmp	r3, #40	@ 0x28
 8001c04:	d103      	bne.n	8001c0e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001c06:	4825      	ldr	r0, [pc, #148]	@ (8001c9c <bno055_writeData+0x1c0>)
 8001c08:	f016 fc96 	bl	8018538 <puts>
 8001c0c:	e025      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b29      	cmp	r3, #41	@ 0x29
 8001c12:	d103      	bne.n	8001c1c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001c14:	4822      	ldr	r0, [pc, #136]	@ (8001ca0 <bno055_writeData+0x1c4>)
 8001c16:	f016 fc8f 	bl	8018538 <puts>
 8001c1a:	e01e      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c20:	d103      	bne.n	8001c2a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001c22:	4820      	ldr	r0, [pc, #128]	@ (8001ca4 <bno055_writeData+0x1c8>)
 8001c24:	f016 fc88 	bl	8018538 <puts>
 8001c28:	e017      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b60      	cmp	r3, #96	@ 0x60
 8001c2e:	d103      	bne.n	8001c38 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001c30:	481d      	ldr	r0, [pc, #116]	@ (8001ca8 <bno055_writeData+0x1cc>)
 8001c32:	f016 fc81 	bl	8018538 <puts>
 8001c36:	e010      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c3c:	d103      	bne.n	8001c46 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001c3e:	481b      	ldr	r0, [pc, #108]	@ (8001cac <bno055_writeData+0x1d0>)
 8001c40:	f016 fc7a 	bl	8018538 <puts>
 8001c44:	e009      	b.n	8001c5a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2be0      	cmp	r3, #224	@ 0xe0
 8001c4a:	d106      	bne.n	8001c5a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001c4c:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <bno055_writeData+0x1d4>)
 8001c4e:	f016 fc73 	bl	8018538 <puts>
 8001c52:	e002      	b.n	8001c5a <bno055_writeData+0x17e>
    return;
 8001c54:	bf00      	nop
 8001c56:	e000      	b.n	8001c5a <bno055_writeData+0x17e>
    return;
 8001c58:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20004694 	.word	0x20004694
 8001c64:	0801aaac 	.word	0x0801aaac
 8001c68:	0801aad0 	.word	0x0801aad0
 8001c6c:	0801aaf8 	.word	0x0801aaf8
 8001c70:	0801ab1c 	.word	0x0801ab1c
 8001c74:	0801ab34 	.word	0x0801ab34
 8001c78:	0801ab48 	.word	0x0801ab48
 8001c7c:	0801ab5c 	.word	0x0801ab5c
 8001c80:	0801ab70 	.word	0x0801ab70
 8001c84:	0801ab84 	.word	0x0801ab84
 8001c88:	0801ab98 	.word	0x0801ab98
 8001c8c:	0801abb0 	.word	0x0801abb0
 8001c90:	0801abc8 	.word	0x0801abc8
 8001c94:	0801abdc 	.word	0x0801abdc
 8001c98:	0801abf4 	.word	0x0801abf4
 8001c9c:	0801ac0c 	.word	0x0801ac0c
 8001ca0:	0801ac24 	.word	0x0801ac24
 8001ca4:	0801ac44 	.word	0x0801ac44
 8001ca8:	0801ac64 	.word	0x0801ac64
 8001cac:	0801ac7c 	.word	0x0801ac7c
 8001cb0:	0801ac94 	.word	0x0801ac94

08001cb4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <bno055_readData+0x40>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	1dfa      	adds	r2, r7, #7
 8001cca:	2364      	movs	r3, #100	@ 0x64
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2150      	movs	r1, #80	@ 0x50
 8001cd2:	f002 fdc7 	bl	8004864 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <bno055_readData+0x40>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2264      	movs	r2, #100	@ 0x64
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	2150      	movs	r1, #80	@ 0x50
 8001ce6:	f002 febb 	bl	8004a60 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20004694 	.word	0x20004694

08001cf8 <pi_to_pi>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

float pi_to_pi(float angle) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	ed87 0a01 	vstr	s0, [r7, #4]
    // Use fmod to wrap the angle within the range [-π, π)
    angle = fmod(angle + M_PI, 2 * M_PI);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fc50 	bl	80005a8 <__aeabi_f2d>
 8001d08:	a325      	add	r3, pc, #148	@ (adr r3, 8001da0 <pi_to_pi+0xa8>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe faed 	bl	80002ec <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ec43 2b17 	vmov	d7, r2, r3
 8001d1a:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001d98 <pi_to_pi+0xa0>
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	f017 fcdd 	bl	80196e4 <fmod>
 8001d2a:	ec53 2b10 	vmov	r2, r3, d0
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff89 	bl	8000c48 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	607b      	str	r3, [r7, #4]

    if (angle < 0) {
 8001d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d50f      	bpl.n	8001d68 <pi_to_pi+0x70>
        angle += 2 * M_PI;
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fc2d 	bl	80005a8 <__aeabi_f2d>
 8001d4e:	a312      	add	r3, pc, #72	@ (adr r3, 8001d98 <pi_to_pi+0xa0>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe faca 	bl	80002ec <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff72 	bl	8000c48 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	607b      	str	r3, [r7, #4]
    }

    return angle - M_PI;
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fc1d 	bl	80005a8 <__aeabi_f2d>
 8001d6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001da0 <pi_to_pi+0xa8>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fab8 	bl	80002e8 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff62 	bl	8000c48 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	ee07 3a90 	vmov	s15, r3
}
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f3af 8000 	nop.w
 8001d98:	54442d18 	.word	0x54442d18
 8001d9c:	401921fb 	.word	0x401921fb
 8001da0:	54442d18 	.word	0x54442d18
 8001da4:	400921fb 	.word	0x400921fb

08001da8 <twist_callback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void twist_callback(const void *msgin) {
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist *twist_msg = (const geometry_msgs__msg__Twist *)msgin;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60fb      	str	r3, [r7, #12]

	  angular_velocity_left_con = (twist_msg->linear.x -  (twist_msg->angular.z * wheel_separation) / 2.0) / wheel_radius;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b62      	ldr	r3, [pc, #392]	@ (8001f50 <twist_callback+0x1a8>)
 8001dc6:	f7fe fc47 	bl	8000658 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dda:	f7fe fd67 	bl	80008ac <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fa7f 	bl	80002e8 <__aeabi_dsub>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	a355      	add	r3, pc, #340	@ (adr r3, 8001f48 <twist_callback+0x1a0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fd58 	bl	80008ac <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe ff20 	bl	8000c48 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a52      	ldr	r2, [pc, #328]	@ (8001f54 <twist_callback+0x1ac>)
 8001e0c:	6013      	str	r3, [r2, #0]
	  angular_velocity_right_con = (twist_msg->linear.x +  (twist_msg->angular.z * wheel_separation) / 2.0) / wheel_radius;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f50 <twist_callback+0x1a8>)
 8001e20:	f7fe fc1a 	bl	8000658 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e34:	f7fe fd3a 	bl	80008ac <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa54 	bl	80002ec <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001f48 <twist_callback+0x1a0>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fd2b 	bl	80008ac <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fef3 	bl	8000c48 <__aeabi_d2f>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a3c      	ldr	r2, [pc, #240]	@ (8001f58 <twist_callback+0x1b0>)
 8001e66:	6013      	str	r3, [r2, #0]

	// Direction of stepper motor left
	if (angular_velocity_left_con >= 0){
 8001e68:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <twist_callback+0x1ac>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	db12      	blt.n	8001e9e <twist_callback+0xf6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	4837      	ldr	r0, [pc, #220]	@ (8001f5c <twist_callback+0x1b4>)
 8001e7e:	f002 fb61 	bl	8004544 <HAL_GPIO_WritePin>
		direction_left = 1;
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <twist_callback+0x1b8>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
		angular_velocity_left = gear_ratio * angular_velocity_left_con;// have value 10 * value
 8001e88:	4b32      	ldr	r3, [pc, #200]	@ (8001f54 <twist_callback+0x1ac>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <twist_callback+0x1bc>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
 8001e9c:	e019      	b.n	8001ed2 <twist_callback+0x12a>

	}else if (angular_velocity_left_con < 0){
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f54 <twist_callback+0x1ac>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	d511      	bpl.n	8001ed2 <twist_callback+0x12a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	482a      	ldr	r0, [pc, #168]	@ (8001f5c <twist_callback+0x1b4>)
 8001eb4:	f002 fb46 	bl	8004544 <HAL_GPIO_WritePin>
		direction_left = 0;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <twist_callback+0x1b8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
		angular_velocity_left = -1.0 * gear_ratio * angular_velocity_left_con;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <twist_callback+0x1ac>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <twist_callback+0x1bc>)
 8001ece:	edc3 7a00 	vstr	s15, [r3]
	}

	// Direction of stepper motor right
	if (angular_velocity_right_con >= 0){
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <twist_callback+0x1b0>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	db12      	blt.n	8001f08 <twist_callback+0x160>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	4820      	ldr	r0, [pc, #128]	@ (8001f68 <twist_callback+0x1c0>)
 8001ee8:	f002 fb2c 	bl	8004544 <HAL_GPIO_WritePin>
		direction_right = 1;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <twist_callback+0x1c4>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
		angular_velocity_right = gear_ratio * angular_velocity_right_con;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <twist_callback+0x1b0>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <twist_callback+0x1c8>)
 8001f02:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
		direction_right = 0;
		angular_velocity_right = -1.0 * gear_ratio * angular_velocity_right_con;
	}

}
 8001f06:	e01a      	b.n	8001f3e <twist_callback+0x196>
	}else if (angular_velocity_right_con < 0){
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <twist_callback+0x1b0>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d400      	bmi.n	8001f1a <twist_callback+0x172>
}
 8001f18:	e011      	b.n	8001f3e <twist_callback+0x196>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	4812      	ldr	r0, [pc, #72]	@ (8001f68 <twist_callback+0x1c0>)
 8001f20:	f002 fb10 	bl	8004544 <HAL_GPIO_WritePin>
		direction_right = 0;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <twist_callback+0x1c4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
		angular_velocity_right = -1.0 * gear_ratio * angular_velocity_right_con;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <twist_callback+0x1b0>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <twist_callback+0x1c8>)
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdb0      	pop	{r4, r5, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	9999999a 	.word	0x9999999a
 8001f4c:	3fb99999 	.word	0x3fb99999
 8001f50:	3fe00000 	.word	0x3fe00000
 8001f54:	200046bc 	.word	0x200046bc
 8001f58:	200046c0 	.word	0x200046c0
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	200046d0 	.word	0x200046d0
 8001f64:	200046c4 	.word	0x200046c4
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	200046cc 	.word	0x200046cc
 8001f70:	200046c8 	.word	0x200046c8
 8001f74:	00000000 	.word	0x00000000

08001f78 <twist_publish_callback>:

void twist_publish_callback(rcl_timer_t * timer, int64_t last_call_time){
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	e9c7 2300 	strd	r2, r3, [r7]
	(void) last_call_time;
	if (timer != NULL){
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 81af 	beq.w	80022ec <twist_publish_callback+0x374>
		// Update the robot position and orientation based on the wheel movements:
		  diff1 = step_count_right - last_step_count_right;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <twist_publish_callback+0x84>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <twist_publish_callback+0x88>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002004 <twist_publish_callback+0x8c>)
 8001f9c:	6013      	str	r3, [r2, #0]
		  diff2 = step_count_left - last_step_count_left;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <twist_publish_callback+0x90>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <twist_publish_callback+0x94>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <twist_publish_callback+0x98>)
 8001fac:	6013      	str	r3, [r2, #0]

		  if (diff1 > 32768){
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fb6:	dd07      	ble.n	8001fc8 <twist_publish_callback+0x50>
			  diff1 = diff1 - 65535;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001fc0:	3bff      	subs	r3, #255	@ 0xff
 8001fc2:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <twist_publish_callback+0x68>
		  }
		  else if(diff1 < -32768){
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001fd0:	da06      	bge.n	8001fe0 <twist_publish_callback+0x68>
			  diff1 = diff1 + 65535;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001fda:	33ff      	adds	r3, #255	@ 0xff
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <twist_publish_callback+0x8c>)
 8001fde:	6013      	str	r3, [r2, #0]
		  }
		  if (diff2 > 32768){
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <twist_publish_callback+0x98>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fe8:	dd14      	ble.n	8002014 <twist_publish_callback+0x9c>
			  diff2 = diff2 - 65535;
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <twist_publish_callback+0x98>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001ff2:	3bff      	subs	r3, #255	@ 0xff
 8001ff4:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <twist_publish_callback+0x98>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e018      	b.n	800202c <twist_publish_callback+0xb4>
 8001ffa:	bf00      	nop
 8001ffc:	20007714 	.word	0x20007714
 8002000:	200046b6 	.word	0x200046b6
 8002004:	200046ac 	.word	0x200046ac
 8002008:	20007716 	.word	0x20007716
 800200c:	200046b8 	.word	0x200046b8
 8002010:	200046b0 	.word	0x200046b0
		  }
		  else if(diff2 < -32768){
 8002014:	4bc0      	ldr	r3, [pc, #768]	@ (8002318 <twist_publish_callback+0x3a0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800201c:	da06      	bge.n	800202c <twist_publish_callback+0xb4>
			  diff2 = diff2 + 65535;
 800201e:	4bbe      	ldr	r3, [pc, #760]	@ (8002318 <twist_publish_callback+0x3a0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002026:	33ff      	adds	r3, #255	@ 0xff
 8002028:	4abb      	ldr	r2, [pc, #748]	@ (8002318 <twist_publish_callback+0x3a0>)
 800202a:	6013      	str	r3, [r2, #0]
		  }

		  // calculation

		  wheel_angular_velocity_right = 2*PI * (diff1) / (2*SPR * 10);
 800202c:	4bbb      	ldr	r3, [pc, #748]	@ (800231c <twist_publish_callback+0x3a4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe faa7 	bl	8000584 <__aeabi_i2d>
 8002036:	a3b0      	add	r3, pc, #704	@ (adr r3, 80022f8 <twist_publish_callback+0x380>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fb0c 	bl	8000658 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	4bb4      	ldr	r3, [pc, #720]	@ (8002320 <twist_publish_callback+0x3a8>)
 800204e:	f7fe fc2d 	bl	80008ac <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fdf5 	bl	8000c48 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	4ab0      	ldr	r2, [pc, #704]	@ (8002324 <twist_publish_callback+0x3ac>)
 8002062:	6013      	str	r3, [r2, #0]
		  wheel_angular_velocity_left = 2*PI * (diff2)  / (2*SPR * 10);
 8002064:	4bac      	ldr	r3, [pc, #688]	@ (8002318 <twist_publish_callback+0x3a0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa8b 	bl	8000584 <__aeabi_i2d>
 800206e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80022f8 <twist_publish_callback+0x380>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe faf0 	bl	8000658 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4ba6      	ldr	r3, [pc, #664]	@ (8002320 <twist_publish_callback+0x3a8>)
 8002086:	f7fe fc11 	bl	80008ac <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fdd9 	bl	8000c48 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	4aa3      	ldr	r2, [pc, #652]	@ (8002328 <twist_publish_callback+0x3b0>)
 800209a:	6013      	str	r3, [r2, #0]

		  z_yaw = z_yaw + (wheel_angular_velocity_right - wheel_angular_velocity_left) * wheel_radius / wheel_separation;
 800209c:	4ba3      	ldr	r3, [pc, #652]	@ (800232c <twist_publish_callback+0x3b4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa81 	bl	80005a8 <__aeabi_f2d>
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002324 <twist_publish_callback+0x3ac>)
 80020ac:	ed93 7a00 	vldr	s14, [r3]
 80020b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002328 <twist_publish_callback+0x3b0>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	ee17 0a90 	vmov	r0, s15
 80020be:	f7fe fa73 	bl	80005a8 <__aeabi_f2d>
 80020c2:	a38f      	add	r3, pc, #572	@ (adr r3, 8002300 <twist_publish_callback+0x388>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe fac6 	bl	8000658 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b95      	ldr	r3, [pc, #596]	@ (8002330 <twist_publish_callback+0x3b8>)
 80020da:	f7fe fbe7 	bl	80008ac <__aeabi_ddiv>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f901 	bl	80002ec <__adddf3>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fda9 	bl	8000c48 <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a8c      	ldr	r2, [pc, #560]	@ (800232c <twist_publish_callback+0x3b4>)
 80020fa:	6013      	str	r3, [r2, #0]

		  yaw_pos = 0.95 * pi_to_pi(imu_yaw) + 0.05 * pi_to_pi(z_yaw);
 80020fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002334 <twist_publish_callback+0x3bc>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	f7ff fdf7 	bl	8001cf8 <pi_to_pi>
 800210a:	ee10 3a10 	vmov	r3, s0
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa4a 	bl	80005a8 <__aeabi_f2d>
 8002114:	a37c      	add	r3, pc, #496	@ (adr r3, 8002308 <twist_publish_callback+0x390>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fa9d 	bl	8000658 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4614      	mov	r4, r2
 8002124:	461d      	mov	r5, r3
 8002126:	4b81      	ldr	r3, [pc, #516]	@ (800232c <twist_publish_callback+0x3b4>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	eeb0 0a67 	vmov.f32	s0, s15
 8002130:	f7ff fde2 	bl	8001cf8 <pi_to_pi>
 8002134:	ee10 3a10 	vmov	r3, s0
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa35 	bl	80005a8 <__aeabi_f2d>
 800213e:	a374      	add	r3, pc, #464	@ (adr r3, 8002310 <twist_publish_callback+0x398>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fa88 	bl	8000658 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4620      	mov	r0, r4
 800214e:	4629      	mov	r1, r5
 8002150:	f7fe f8cc 	bl	80002ec <__adddf3>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd74 	bl	8000c48 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4a75      	ldr	r2, [pc, #468]	@ (8002338 <twist_publish_callback+0x3c0>)
 8002164:	6013      	str	r3, [r2, #0]

		  x_pos = x_pos + cos(yaw_pos) * ((wheel_angular_velocity_right + wheel_angular_velocity_left) * wheel_radius / 2);
 8002166:	4b75      	ldr	r3, [pc, #468]	@ (800233c <twist_publish_callback+0x3c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa1c 	bl	80005a8 <__aeabi_f2d>
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
 8002174:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <twist_publish_callback+0x3c0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fa15 	bl	80005a8 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	ec43 2b10 	vmov	d0, r2, r3
 8002186:	f017 fadb 	bl	8019740 <cos>
 800218a:	ec59 8b10 	vmov	r8, r9, d0
 800218e:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <twist_publish_callback+0x3ac>)
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	4b64      	ldr	r3, [pc, #400]	@ (8002328 <twist_publish_callback+0x3b0>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe fa01 	bl	80005a8 <__aeabi_f2d>
 80021a6:	a356      	add	r3, pc, #344	@ (adr r3, 8002300 <twist_publish_callback+0x388>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fa54 	bl	8000658 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021c0:	f7fe fb74 	bl	80008ac <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	f7fe fa44 	bl	8000658 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f888 	bl	80002ec <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd30 	bl	8000c48 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a54      	ldr	r2, [pc, #336]	@ (800233c <twist_publish_callback+0x3c4>)
 80021ec:	6013      	str	r3, [r2, #0]
		  y_pos = y_pos + sin(yaw_pos) * ((wheel_angular_velocity_right + wheel_angular_velocity_left) * wheel_radius / 2);
 80021ee:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <twist_publish_callback+0x3c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9d8 	bl	80005a8 <__aeabi_f2d>
 80021f8:	4604      	mov	r4, r0
 80021fa:	460d      	mov	r5, r1
 80021fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <twist_publish_callback+0x3c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f9d1 	bl	80005a8 <__aeabi_f2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	ec43 2b10 	vmov	d0, r2, r3
 800220e:	f017 faeb 	bl	80197e8 <sin>
 8002212:	ec59 8b10 	vmov	r8, r9, d0
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <twist_publish_callback+0x3ac>)
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4b42      	ldr	r3, [pc, #264]	@ (8002328 <twist_publish_callback+0x3b0>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f9bd 	bl	80005a8 <__aeabi_f2d>
 800222e:	a334      	add	r3, pc, #208	@ (adr r3, 8002300 <twist_publish_callback+0x388>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fa10 	bl	8000658 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002248:	f7fe fb30 	bl	80008ac <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4640      	mov	r0, r8
 8002252:	4649      	mov	r1, r9
 8002254:	f7fe fa00 	bl	8000658 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fe f844 	bl	80002ec <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fcec 	bl	8000c48 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	4a33      	ldr	r2, [pc, #204]	@ (8002340 <twist_publish_callback+0x3c8>)
 8002274:	6013      	str	r3, [r2, #0]


		  last_step_count_right = step_count_right;
 8002276:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <twist_publish_callback+0x3cc>)
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <twist_publish_callback+0x3d0>)
 800227c:	801a      	strh	r2, [r3, #0]
		  last_step_count_left = step_count_left;
 800227e:	4b33      	ldr	r3, [pc, #204]	@ (800234c <twist_publish_callback+0x3d4>)
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <twist_publish_callback+0x3d8>)
 8002284:	801a      	strh	r2, [r3, #0]

		  pub_state ++;
 8002286:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <twist_publish_callback+0x3dc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <twist_publish_callback+0x3dc>)
 8002290:	701a      	strb	r2, [r3, #0]
		  if (pub_state > 1){
 8002292:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <twist_publish_callback+0x3dc>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d928      	bls.n	80022ec <twist_publish_callback+0x374>
			  pub_state = 0;
 800229a:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <twist_publish_callback+0x3dc>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
				vector3_publish.x = x_pos;
 80022a0:	4b26      	ldr	r3, [pc, #152]	@ (800233c <twist_publish_callback+0x3c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f97f 	bl	80005a8 <__aeabi_f2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	492a      	ldr	r1, [pc, #168]	@ (8002358 <twist_publish_callback+0x3e0>)
 80022b0:	e9c1 2300 	strd	r2, r3, [r1]
				vector3_publish.y = y_pos;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <twist_publish_callback+0x3c8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f975 	bl	80005a8 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4925      	ldr	r1, [pc, #148]	@ (8002358 <twist_publish_callback+0x3e0>)
 80022c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
				vector3_publish.z = yaw_pos;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <twist_publish_callback+0x3c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f96b 	bl	80005a8 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4920      	ldr	r1, [pc, #128]	@ (8002358 <twist_publish_callback+0x3e0>)
 80022d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
				rc = rcl_publish(&publisher, &vector3_publish, NULL);
 80022dc:	2200      	movs	r2, #0
 80022de:	491e      	ldr	r1, [pc, #120]	@ (8002358 <twist_publish_callback+0x3e0>)
 80022e0:	481e      	ldr	r0, [pc, #120]	@ (800235c <twist_publish_callback+0x3e4>)
 80022e2:	f00a f9ed 	bl	800c6c0 <rcl_publish>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <twist_publish_callback+0x3e8>)
 80022ea:	6013      	str	r3, [r2, #0]
		  }


	}

}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022f6:	bf00      	nop
 80022f8:	f01b866e 	.word	0xf01b866e
 80022fc:	401921f9 	.word	0x401921f9
 8002300:	9999999a 	.word	0x9999999a
 8002304:	3fb99999 	.word	0x3fb99999
 8002308:	66666666 	.word	0x66666666
 800230c:	3fee6666 	.word	0x3fee6666
 8002310:	9999999a 	.word	0x9999999a
 8002314:	3fa99999 	.word	0x3fa99999
 8002318:	200046b0 	.word	0x200046b0
 800231c:	200046ac 	.word	0x200046ac
 8002320:	40cf4000 	.word	0x40cf4000
 8002324:	2000770c 	.word	0x2000770c
 8002328:	20007710 	.word	0x20007710
 800232c:	200046a8 	.word	0x200046a8
 8002330:	3fe00000 	.word	0x3fe00000
 8002334:	20004698 	.word	0x20004698
 8002338:	200046a4 	.word	0x200046a4
 800233c:	2000469c 	.word	0x2000469c
 8002340:	200046a0 	.word	0x200046a0
 8002344:	20007714 	.word	0x20007714
 8002348:	200046b6 	.word	0x200046b6
 800234c:	20007716 	.word	0x20007716
 8002350:	200046b8 	.word	0x200046b8
 8002354:	200046b4 	.word	0x200046b4
 8002358:	200046e0 	.word	0x200046e0
 800235c:	200046d8 	.word	0x200046d8
 8002360:	200046d4 	.word	0x200046d4

08002364 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microros */
  microrosHandle = osThreadNew(StartDefaultTask, NULL, &microros_attributes);
 8002368:	4a08      	ldr	r2, [pc, #32]	@ (800238c <MX_FREERTOS_Init+0x28>)
 800236a:	2100      	movs	r1, #0
 800236c:	4808      	ldr	r0, [pc, #32]	@ (8002390 <MX_FREERTOS_Init+0x2c>)
 800236e:	f005 fe49 	bl	8008004 <osThreadNew>
 8002372:	4603      	mov	r3, r0
 8002374:	4a07      	ldr	r2, [pc, #28]	@ (8002394 <MX_FREERTOS_Init+0x30>)
 8002376:	6013      	str	r3, [r2, #0]

  /* creation of imu_task */
  imu_taskHandle = osThreadNew(imu_task_fn, NULL, &imu_task_attributes);
 8002378:	4a07      	ldr	r2, [pc, #28]	@ (8002398 <MX_FREERTOS_Init+0x34>)
 800237a:	2100      	movs	r1, #0
 800237c:	4807      	ldr	r0, [pc, #28]	@ (800239c <MX_FREERTOS_Init+0x38>)
 800237e:	f005 fe41 	bl	8008004 <osThreadNew>
 8002382:	4603      	mov	r3, r0
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <MX_FREERTOS_Init+0x3c>)
 8002386:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	0801ad58 	.word	0x0801ad58
 8002390:	080023a9 	.word	0x080023a9
 8002394:	20004728 	.word	0x20004728
 8002398:	0801ad7c 	.word	0x0801ad7c
 800239c:	080025a1 	.word	0x080025a1
 80023a0:	200076b4 	.word	0x200076b4
 80023a4:	00000000 	.word	0x00000000

080023a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b0fc      	sub	sp, #496	@ 0x1f0
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80023b2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80023b6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 80023b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023bc:	22c8      	movs	r2, #200	@ 0xc8
 80023be:	217a      	movs	r1, #122	@ 0x7a
 80023c0:	4618      	mov	r0, r3
 80023c2:	f016 fa2f 	bl	8018824 <memset>

	  rmw_uros_set_custom_transport(
 80023c6:	4b62      	ldr	r3, [pc, #392]	@ (8002550 <StartDefaultTask+0x1a8>)
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	4b62      	ldr	r3, [pc, #392]	@ (8002554 <StartDefaultTask+0x1ac>)
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4b62      	ldr	r3, [pc, #392]	@ (8002558 <StartDefaultTask+0x1b0>)
 80023d0:	4a62      	ldr	r2, [pc, #392]	@ (800255c <StartDefaultTask+0x1b4>)
 80023d2:	4963      	ldr	r1, [pc, #396]	@ (8002560 <StartDefaultTask+0x1b8>)
 80023d4:	2001      	movs	r0, #1
 80023d6:	f00b fdf5 	bl	800dfc4 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80023da:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80023de:	4618      	mov	r0, r3
 80023e0:	f00b fac0 	bl	800d964 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80023e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002564 <StartDefaultTask+0x1bc>)
 80023e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <StartDefaultTask+0x1c0>)
 80023ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80023f0:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <StartDefaultTask+0x1c4>)
 80023f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80023f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002570 <StartDefaultTask+0x1c8>)
 80023f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80023fc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002400:	4618      	mov	r0, r3
 8002402:	f00b fabd 	bl	800d980 <rcutils_set_default_allocator>
 8002406:	4603      	mov	r3, r0
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <StartDefaultTask+0x74>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8002412:	f240 1143 	movw	r1, #323	@ 0x143
 8002416:	4857      	ldr	r0, [pc, #348]	@ (8002574 <StartDefaultTask+0x1cc>)
 8002418:	f016 f826 	bl	8018468 <iprintf>
	  }

	  // micro-ROS App //
	  // Initialize micro-ROS allocator
	  rcl_allocator_t allocator;
	  allocator = rcl_get_default_allocator();
 800241c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8002420:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8002424:	463b      	mov	r3, r7
 8002426:	4618      	mov	r0, r3
 8002428:	f00b fac8 	bl	800d9bc <rcutils_get_default_allocator>
 800242c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8002430:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002434:	461d      	mov	r5, r3
 8002436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	6023      	str	r3, [r4, #0]

	  // Initialize support object
	  rclc_support_t support;
	  rclc_support_init(&support, 0, NULL, &allocator);
 800243e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002442:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	f00b f965 	bl	800d718 <rclc_support_init>

	  // Create node object
	  rcl_node_t node;
	  rclc_node_init_default(&node, "stm32f446re_node", "", &support);
 800244e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002452:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8002456:	4a48      	ldr	r2, [pc, #288]	@ (8002578 <StartDefaultTask+0x1d0>)
 8002458:	4948      	ldr	r1, [pc, #288]	@ (800257c <StartDefaultTask+0x1d4>)
 800245a:	f00b f9a7 	bl	800d7ac <rclc_node_init_default>

	  // Create publisher
	  const char * pub_topic_name = "/position_uros";
 800245e:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <StartDefaultTask+0x1d8>)
 8002460:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	  const rosidl_message_type_support_t * pub_type_support = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Vector3);
 8002464:	f008 fb70 	bl	800ab48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8002468:	f8c7 01e0 	str.w	r0, [r7, #480]	@ 0x1e0
	  rclc_publisher_init_default(&publisher, &node, pub_type_support, pub_topic_name);
 800246c:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8002470:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002474:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8002478:	4842      	ldr	r0, [pc, #264]	@ (8002584 <StartDefaultTask+0x1dc>)
 800247a:	f00b f9d3 	bl	800d824 <rclc_publisher_init_default>

	  // Create timer
	  rcl_timer_t timer;
	  rclc_timer_init_default(
 800247e:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8002482:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002486:	4b40      	ldr	r3, [pc, #256]	@ (8002588 <StartDefaultTask+0x1e0>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002548 <StartDefaultTask+0x1a0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f00b fa30 	bl	800d8f4 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(20),
			twist_publish_callback);

	  // Create subscriber
	  const char * sub_topic_name = "/cmd_vel_out";
 8002494:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <StartDefaultTask+0x1e4>)
 8002496:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
	  const rosidl_message_type_support_t * sub_type_support = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 800249a:	f008 fb3d 	bl	800ab18 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800249e:	f8c7 01d8 	str.w	r0, [r7, #472]	@ 0x1d8
	  rclc_subscription_init_default(&subscriber, &node, sub_type_support, sub_topic_name);
 80024a2:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80024a6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80024aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80024ae:	4838      	ldr	r0, [pc, #224]	@ (8002590 <StartDefaultTask+0x1e8>)
 80024b0:	f00b f9ec 	bl	800d88c <rclc_subscription_init_default>

	  // Create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80024b4:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80024b8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a fe25 	bl	800d10c <rclc_executor_get_zero_initialized_executor>
	  rclc_executor_init(&executor, &support.context, 3, &allocator);
 80024c2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80024c6:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 80024ca:	f107 0020 	add.w	r0, r7, #32
 80024ce:	2203      	movs	r2, #3
 80024d0:	f00a fe26 	bl	800d120 <rclc_executor_init>
	  rclc_executor_add_timer(&executor, &timer);
 80024d4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fec2 	bl	800d268 <rclc_executor_add_timer>
	  rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, &twist_callback, ON_NEW_DATA);
 80024e4:	f107 0020 	add.w	r0, r7, #32
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <StartDefaultTask+0x1ec>)
 80024ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002598 <StartDefaultTask+0x1f0>)
 80024f0:	4927      	ldr	r1, [pc, #156]	@ (8002590 <StartDefaultTask+0x1e8>)
 80024f2:	f00a fe85 	bl	800d200 <rclc_executor_add_subscription>

	  // Spin executor to receive messages
	  rclc_executor_prepare(&executor);
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00a fede 	bl	800d2bc <rclc_executor_prepare>
	  rclc_executor_spin(&executor);
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	4618      	mov	r0, r3
 8002506:	f00b f8c5 	bl	800d694 <rclc_executor_spin>

	  // cleaning Up
	  rc += rcl_subscription_fini(&subscriber, &node);
 800250a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800250e:	4619      	mov	r1, r3
 8002510:	481f      	ldr	r0, [pc, #124]	@ (8002590 <StartDefaultTask+0x1e8>)
 8002512:	f00a f9c9 	bl	800c8a8 <rcl_subscription_fini>
 8002516:	4602      	mov	r2, r0
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <StartDefaultTask+0x1f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4413      	add	r3, r2
 800251e:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <StartDefaultTask+0x1f4>)
 8002520:	6013      	str	r3, [r2, #0]
	  rc += rcl_node_fini(&node);
 8002522:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002526:	4618      	mov	r0, r3
 8002528:	f009 ff7a 	bl	800c420 <rcl_node_fini>
 800252c:	4602      	mov	r2, r0
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <StartDefaultTask+0x1f4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a19      	ldr	r2, [pc, #100]	@ (800259c <StartDefaultTask+0x1f4>)
 8002536:	6013      	str	r3, [r2, #0]

  /* USER CODE END StartDefaultTask */
}
 8002538:	bf00      	nop
 800253a:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 800253e:	46bd      	mov	sp, r7
 8002540:	bdb0      	pop	{r4, r5, r7, pc}
 8002542:	bf00      	nop
 8002544:	f3af 8000 	nop.w
 8002548:	01312d00 	.word	0x01312d00
 800254c:	00000000 	.word	0x00000000
 8002550:	080019fd 	.word	0x080019fd
 8002554:	08001995 	.word	0x08001995
 8002558:	08001975 	.word	0x08001975
 800255c:	08001949 	.word	0x08001949
 8002560:	20007860 	.word	0x20007860
 8002564:	08002bfd 	.word	0x08002bfd
 8002568:	08002c41 	.word	0x08002c41
 800256c:	08002c79 	.word	0x08002c79
 8002570:	08002ce5 	.word	0x08002ce5
 8002574:	0801acc4 	.word	0x0801acc4
 8002578:	0801acec 	.word	0x0801acec
 800257c:	0801acf0 	.word	0x0801acf0
 8002580:	0801ad04 	.word	0x0801ad04
 8002584:	200046d8 	.word	0x200046d8
 8002588:	08001f79 	.word	0x08001f79
 800258c:	0801ad14 	.word	0x0801ad14
 8002590:	200046dc 	.word	0x200046dc
 8002594:	08001da9 	.word	0x08001da9
 8002598:	200046f8 	.word	0x200046f8
 800259c:	200046d4 	.word	0x200046d4

080025a0 <imu_task_fn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_task_fn */
void imu_task_fn(void *argument)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_task_fn */
	  bno055_assignI2C(&hi2c1);
 80025a8:	4823      	ldr	r0, [pc, #140]	@ (8002638 <imu_task_fn+0x98>)
 80025aa:	f7ff fa7b 	bl	8001aa4 <bno055_assignI2C>
	  bno055_setup();
 80025ae:	f7fe fda3 	bl	80010f8 <bno055_setup>
	  bno055_setOperationModeNDOF();
 80025b2:	f7fe fd8e 	bl	80010d2 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  for(;;)
  {
	  bno055_vector_t v = bno055_getVectorEuler();
 80025b6:	f7fe ff0b 	bl	80013d0 <bno055_getVectorEuler>
 80025ba:	eeb0 4a40 	vmov.f32	s8, s0
 80025be:	eef0 4a60 	vmov.f32	s9, s1
 80025c2:	eeb0 5a41 	vmov.f32	s10, s2
 80025c6:	eef0 5a61 	vmov.f32	s11, s3
 80025ca:	eeb0 6a42 	vmov.f32	s12, s4
 80025ce:	eef0 6a62 	vmov.f32	s13, s5
 80025d2:	eeb0 7a43 	vmov.f32	s14, s6
 80025d6:	eef0 7a63 	vmov.f32	s15, s7
 80025da:	ed87 4b02 	vstr	d4, [r7, #8]
 80025de:	ed87 5b04 	vstr	d5, [r7, #16]
 80025e2:	ed87 6b06 	vstr	d6, [r7, #24]
 80025e6:	ed87 7b08 	vstr	d7, [r7, #32]
	  imu_yaw = -1.0 * v.x * M_PI /180;
 80025ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025ee:	4614      	mov	r4, r2
 80025f0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002630 <imu_task_fn+0x90>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe f82b 	bl	8000658 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <imu_task_fn+0x9c>)
 8002610:	f7fe f94c 	bl	80008ac <__aeabi_ddiv>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fb14 	bl	8000c48 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <imu_task_fn+0xa0>)
 8002624:	6013      	str	r3, [r2, #0]
    osDelay(20);
 8002626:	2014      	movs	r0, #20
 8002628:	f005 fd7e 	bl	8008128 <osDelay>
  {
 800262c:	bf00      	nop
 800262e:	e7c2      	b.n	80025b6 <imu_task_fn+0x16>
 8002630:	54442d18 	.word	0x54442d18
 8002634:	400921fb 	.word	0x400921fb
 8002638:	200076b8 	.word	0x200076b8
 800263c:	40668000 	.word	0x40668000
 8002640:	20004698 	.word	0x20004698

08002644 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <MX_GPIO_Init+0x120>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <MX_GPIO_Init+0x120>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b3e      	ldr	r3, [pc, #248]	@ (8002764 <MX_GPIO_Init+0x120>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b3a      	ldr	r3, [pc, #232]	@ (8002764 <MX_GPIO_Init+0x120>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a39      	ldr	r2, [pc, #228]	@ (8002764 <MX_GPIO_Init+0x120>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <MX_GPIO_Init+0x120>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <MX_GPIO_Init+0x120>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a32      	ldr	r2, [pc, #200]	@ (8002764 <MX_GPIO_Init+0x120>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b30      	ldr	r3, [pc, #192]	@ (8002764 <MX_GPIO_Init+0x120>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	21e0      	movs	r1, #224	@ 0xe0
 80026b2:	482d      	ldr	r0, [pc, #180]	@ (8002768 <MX_GPIO_Init+0x124>)
 80026b4:	f001 ff46 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	482b      	ldr	r0, [pc, #172]	@ (800276c <MX_GPIO_Init+0x128>)
 80026be:	f001 ff41 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2140      	movs	r1, #64	@ 0x40
 80026c6:	482a      	ldr	r0, [pc, #168]	@ (8002770 <MX_GPIO_Init+0x12c>)
 80026c8:	f001 ff3c 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026cc:	23e0      	movs	r3, #224	@ 0xe0
 80026ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4619      	mov	r1, r3
 80026e2:	4821      	ldr	r0, [pc, #132]	@ (8002768 <MX_GPIO_Init+0x124>)
 80026e4:	f001 fd82 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	4619      	mov	r1, r3
 80026fe:	481b      	ldr	r0, [pc, #108]	@ (800276c <MX_GPIO_Init+0x128>)
 8002700:	f001 fd74 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002704:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800270a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800270e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002710:	2301      	movs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	4813      	ldr	r0, [pc, #76]	@ (8002768 <MX_GPIO_Init+0x124>)
 800271c:	f001 fd66 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002720:	2340      	movs	r3, #64	@ 0x40
 8002722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	4619      	mov	r1, r3
 8002736:	480e      	ldr	r0, [pc, #56]	@ (8002770 <MX_GPIO_Init+0x12c>)
 8002738:	f001 fd58 	bl	80041ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2105      	movs	r1, #5
 8002740:	2017      	movs	r0, #23
 8002742:	f001 f927 	bl	8003994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002746:	2017      	movs	r0, #23
 8002748:	f001 f940 	bl	80039cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2105      	movs	r1, #5
 8002750:	2028      	movs	r0, #40	@ 0x28
 8002752:	f001 f91f 	bl	8003994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002756:	2028      	movs	r0, #40	@ 0x28
 8002758:	f001 f938 	bl	80039cc <HAL_NVIC_EnableIRQ>

}
 800275c:	bf00      	nop
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020800 	.word	0x40020800
 8002770:	40020400 	.word	0x40020400

08002774 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MX_I2C1_Init+0x50>)
 800277a:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <MX_I2C1_Init+0x54>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_I2C1_Init+0x50>)
 8002780:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <MX_I2C1_Init+0x58>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_I2C1_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_I2C1_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <MX_I2C1_Init+0x50>)
 8002792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <MX_I2C1_Init+0x50>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <MX_I2C1_Init+0x50>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <MX_I2C1_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <MX_I2C1_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	@ (80027c4 <MX_I2C1_Init+0x50>)
 80027b2:	f001 ff13 	bl	80045dc <HAL_I2C_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027bc:	f000 fa18 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200076b8 	.word	0x200076b8
 80027c8:	40005400 	.word	0x40005400
 80027cc:	000186a0 	.word	0x000186a0

080027d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <HAL_I2C_MspInit+0x84>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12c      	bne.n	800284c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800280e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002814:	2312      	movs	r3, #18
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002820:	2304      	movs	r3, #4
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	480c      	ldr	r0, [pc, #48]	@ (800285c <HAL_I2C_MspInit+0x8c>)
 800282c:	f001 fcde 	bl	80041ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 800283a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800283e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_I2C_MspInit+0x88>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40005400 	.word	0x40005400
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400

08002860 <read_encoder>:
	float distand;
}encoder;
encoder enc1;
encoder enc2;

void read_encoder(encoder *Encoder, GPIO_PinState chA, GPIO_PinState ChB){
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
 800286c:	4613      	mov	r3, r2
 800286e:	70bb      	strb	r3, [r7, #2]
	if(chA != Encoder->lastA){
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	429a      	cmp	r2, r3
 8002878:	d011      	beq.n	800289e <read_encoder+0x3e>
		Encoder->lastA = chA;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	711a      	strb	r2, [r3, #4]
		if(chA != ChB){
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	78bb      	ldrb	r3, [r7, #2]
 8002884:	429a      	cmp	r2, r3
 8002886:	d005      	beq.n	8002894 <read_encoder+0x34>
			Encoder->counter++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e004      	b.n	800289e <read_encoder+0x3e>
		}else {
			Encoder->counter--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	1e5a      	subs	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
		}
	}
	if(ChB != Encoder->lastB){
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	795b      	ldrb	r3, [r3, #5]
 80028a2:	78ba      	ldrb	r2, [r7, #2]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d011      	beq.n	80028cc <read_encoder+0x6c>
		Encoder->lastB = ChB;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	78ba      	ldrb	r2, [r7, #2]
 80028ac:	715a      	strb	r2, [r3, #5]
		if(ChB == chA){
 80028ae:	78ba      	ldrb	r2, [r7, #2]
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d105      	bne.n	80028c2 <read_encoder+0x62>
			Encoder->counter++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]
		}else {
			Encoder->counter--;
		}
	}

}
 80028c0:	e004      	b.n	80028cc <read_encoder+0x6c>
			Encoder->counter--;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028dc:	f000 ff3c 	bl	8003758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e0:	f000 f826 	bl	8002930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e4:	f7ff feae 	bl	8002644 <MX_GPIO_Init>
  MX_DMA_Init();
 80028e8:	f7ff f806 	bl	80018f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80028ec:	f000 fe28 	bl	8003540 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80028f0:	f000 fcdc 	bl	80032ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80028f4:	f000 fd26 	bl	8003344 <MX_TIM3_Init>
  MX_TIM4_Init();
 80028f8:	f000 fd72 	bl	80033e0 <MX_TIM4_Init>
  MX_I2C1_Init();
 80028fc:	f7ff ff3a 	bl	8002774 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002900:	4808      	ldr	r0, [pc, #32]	@ (8002924 <main+0x4c>)
 8002902:	f003 fc4f 	bl	80061a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002906:	4808      	ldr	r0, [pc, #32]	@ (8002928 <main+0x50>)
 8002908:	f003 fc4c 	bl	80061a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800290c:	4807      	ldr	r0, [pc, #28]	@ (800292c <main+0x54>)
 800290e:	f003 fc49 	bl	80061a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002912:	f005 fb2d 	bl	8007f70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002916:	f7ff fd25 	bl	8002364 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800291a:	f005 fb4d 	bl	8007fb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800291e:	bf00      	nop
 8002920:	e7fd      	b.n	800291e <main+0x46>
 8002922:	bf00      	nop
 8002924:	20007788 	.word	0x20007788
 8002928:	200077d0 	.word	0x200077d0
 800292c:	20007818 	.word	0x20007818

08002930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b094      	sub	sp, #80	@ 0x50
 8002934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	2234      	movs	r2, #52	@ 0x34
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f015 ff70 	bl	8018824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <SystemClock_Config+0xdc>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <SystemClock_Config+0xdc>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	@ 0x40
 8002964:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <SystemClock_Config+0xdc>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <SystemClock_Config+0xe0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <SystemClock_Config+0xe0>)
 800297a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b23      	ldr	r3, [pc, #140]	@ (8002a10 <SystemClock_Config+0xe0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800298c:	2302      	movs	r3, #2
 800298e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002990:	2301      	movs	r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002994:	2310      	movs	r3, #16
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002998:	2302      	movs	r3, #2
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800299c:	2300      	movs	r3, #0
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029a0:	2308      	movs	r3, #8
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80029a4:	23b4      	movs	r3, #180	@ 0xb4
 80029a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a8:	2302      	movs	r3, #2
 80029aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029ac:	2302      	movs	r3, #2
 80029ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029b0:	2302      	movs	r3, #2
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f905 	bl	8005bc8 <HAL_RCC_OscConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80029c4:	f000 f914 	bl	8002bf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029c8:	f002 fdb8 	bl	800553c <HAL_PWREx_EnableOverDrive>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80029d2:	f000 f90d 	bl	8002bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d6:	230f      	movs	r3, #15
 80029d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029da:	2302      	movs	r3, #2
 80029dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2105      	movs	r1, #5
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fdf1 	bl	80055dc <HAL_RCC_ClockConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002a00:	f000 f8f6 	bl	8002bf0 <Error_Handler>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3750      	adds	r7, #80	@ 0x50
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == chA_pin||chB_pin){
		read_encoder(&enc1, HAL_GPIO_ReadPin(chAB_gpio_port, chA_pin), HAL_GPIO_ReadPin(chAB_gpio_port, chB_pin));
 8002a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a22:	4813      	ldr	r0, [pc, #76]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a24:	f001 fd76 	bl	8004514 <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a30:	480f      	ldr	r0, [pc, #60]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a32:	f001 fd6f 	bl	8004514 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8002a3e:	f7ff ff0f 	bl	8002860 <read_encoder>
	}
	if(GPIO_Pin == chA1_pin||chB1_pin){
		read_encoder(&enc2, HAL_GPIO_ReadPin(chAB_gpio_port, chA1_pin),HAL_GPIO_ReadPin(chAB_gpio_port, chB1_pin));
 8002a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a46:	480a      	ldr	r0, [pc, #40]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a48:	f001 fd64 	bl	8004514 <HAL_GPIO_ReadPin>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461c      	mov	r4, r3
 8002a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a54:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a56:	f001 fd5d 	bl	8004514 <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a62:	f7ff fefd 	bl	8002860 <read_encoder>
	}
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020000 	.word	0x40020000
 8002a74:	20007718 	.word	0x20007718
 8002a78:	20007724 	.word	0x20007724
 8002a7c:	00000000 	.word	0x00000000

08002a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a92:	f000 fe83 	bl	800379c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  // Timer for stepper motor right
  if (htim->Instance == TIM2) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9e:	d142      	bne.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0xa6>

	  if (angular_velocity_right != 0)
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	d035      	beq.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x9c>
	  {
		  uint16_t step_delay_right =  ALPHA*TIM_FREQ /(2 * angular_velocity_right);
 8002ab0:	4b46      	ldr	r3, [pc, #280]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fd73 	bl	80005a8 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	a13e      	add	r1, pc, #248	@ (adr r1, 8002bc0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002acc:	f7fd feee 	bl	80008ac <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f896 	bl	8000c08 <__aeabi_d2uiz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	81fb      	strh	r3, [r7, #14]
		  TIM2->ARR = step_delay_right;
 8002ae0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002ae8:	2140      	movs	r1, #64	@ 0x40
 8002aea:	4839      	ldr	r0, [pc, #228]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002aec:	f001 fd43 	bl	8004576 <HAL_GPIO_TogglePin>

		  if (direction_right == 1){
 8002af0:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <HAL_TIM_PeriodElapsedCallback+0x86>
			  step_count_right++;
 8002af8:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	e00f      	b.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0xa6>
		  }else if (direction_right == 0){
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0xa6>
			  step_count_right--;
 8002b0e:	4b32      	ldr	r3, [pc, #200]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b30      	ldr	r3, [pc, #192]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	e004      	b.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0xa6>
		  }
	  }else {
		  TIM2->ARR = 10000;
 8002b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	  }
  }

  // Timer for stepper motor left
  if (htim->Instance == TIM3) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d140      	bne.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x132>
	  if(angular_velocity_left != 0)
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d034      	beq.n	8002baa <HAL_TIM_PeriodElapsedCallback+0x12a>
	  {
		  uint16_t step_delay_left =   ALPHA*TIM_FREQ / (2 * angular_velocity_left);
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b4a:	ee17 0a90 	vmov	r0, s15
 8002b4e:	f7fd fd2b 	bl	80005a8 <__aeabi_f2d>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	a11a      	add	r1, pc, #104	@ (adr r1, 8002bc0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b5c:	f7fd fea6 	bl	80008ac <__aeabi_ddiv>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fe f84e 	bl	8000c08 <__aeabi_d2uiz>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	81bb      	strh	r3, [r7, #12]
		  TIM3->ARR = step_delay_left;
 8002b70:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002b72:	89bb      	ldrh	r3, [r7, #12]
 8002b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	481a      	ldr	r0, [pc, #104]	@ (8002be4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002b7a:	f001 fcfc 	bl	8004576 <HAL_GPIO_TogglePin>

		  if (direction_left == 1){
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x114>
			  step_count_left++;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e00e      	b.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x132>
		  }else if (direction_left == 0){
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x132>
			  step_count_left--;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	e003      	b.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x132>
		  }
	  }else {
		  TIM3->ARR = 10000;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002bac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002bb0:	62da      	str	r2, [r3, #44]	@ 0x2c


  }

  /* USER CODE END Callback 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	99999999 	.word	0x99999999
 8002bc4:	40beadf9 	.word	0x40beadf9
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	200046c8 	.word	0x200046c8
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	200046cc 	.word	0x200046cc
 8002bd8:	20007714 	.word	0x20007714
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	200046c4 	.word	0x200046c4
 8002be4:	40020400 	.word	0x40020400
 8002be8:	200046d0 	.word	0x200046d0
 8002bec:	20007716 	.word	0x20007716

08002bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf4:	b672      	cpsid	i
}
 8002bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <Error_Handler+0x8>

08002bfc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <microros_allocate+0x3c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <microros_allocate+0x3c>)
 8002c14:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <microros_allocate+0x40>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <microros_allocate+0x40>)
 8002c24:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fc16 	bl	8001458 <pvPortMallocMicroROS>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20007730 	.word	0x20007730
 8002c3c:	20007734 	.word	0x20007734

08002c40 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fd25 	bl	80016a0 <getBlockSize>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a06      	ldr	r2, [pc, #24]	@ (8002c74 <microros_deallocate+0x34>)
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <microros_deallocate+0x34>)
 8002c62:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe fcbf 	bl	80015e8 <vPortFreeMicroROS>
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20007734 	.word	0x20007734

08002c78 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <microros_reallocate+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <microros_reallocate+0x64>)
 8002c92:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002c94:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <microros_reallocate+0x68>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <microros_reallocate+0x68>)
 8002ca2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002caa:	68b8      	ldr	r0, [r7, #8]
 8002cac:	f7fe fbd4 	bl	8001458 <pvPortMallocMicroROS>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	e00e      	b.n	8002cd2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7fe fcf3 	bl	80016a0 <getBlockSize>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <microros_reallocate+0x68>)
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <microros_reallocate+0x68>)
 8002cc6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7fe fd06 	bl	80016dc <pvPortReallocMicroROS>
 8002cd0:	4603      	mov	r3, r0
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20007730 	.word	0x20007730
 8002ce0:	20007734 	.word	0x20007734

08002ce4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d2c <microros_zero_allocate+0x48>)
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <microros_zero_allocate+0x48>)
 8002d02:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	4a08      	ldr	r2, [pc, #32]	@ (8002d30 <microros_zero_allocate+0x4c>)
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <microros_zero_allocate+0x4c>)
 8002d16:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7fe fd0b 	bl	8001736 <pvPortCallocMicroROS>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20007730 	.word	0x20007730
 8002d30:	20007734 	.word	0x20007734
 8002d34:	00000000 	.word	0x00000000

08002d38 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002d4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d4e:	a320      	add	r3, pc, #128	@ (adr r3, 8002dd0 <UTILS_NanosecondsToTimespec+0x98>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd ffc8 	bl	8000ce8 <__aeabi_ldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d66:	a31a      	add	r3, pc, #104	@ (adr r3, 8002dd0 <UTILS_NanosecondsToTimespec+0x98>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd ffbc 	bl	8000ce8 <__aeabi_ldivmod>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da20      	bge.n	8002dbe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <UTILS_NanosecondsToTimespec+0x90>)
 8002d82:	fb82 1203 	smull	r1, r2, r2, r3
 8002d86:	1712      	asrs	r2, r2, #28
 8002d88:	17db      	asrs	r3, r3, #31
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	17c8      	asrs	r0, r1, #31
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	ebb2 0804 	subs.w	r8, r2, r4
 8002da2:	eb63 0905 	sbc.w	r9, r3, r5
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4906      	ldr	r1, [pc, #24]	@ (8002dcc <UTILS_NanosecondsToTimespec+0x94>)
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
    }
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc8:	44b82fa1 	.word	0x44b82fa1
 8002dcc:	3b9aca00 	.word	0x3b9aca00
 8002dd0:	3b9aca00 	.word	0x3b9aca00
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ddc:	b08e      	sub	sp, #56	@ 0x38
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002de2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002de4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002de8:	2300      	movs	r3, #0
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f006 fc86 	bl	8009710 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	17da      	asrs	r2, r3, #31
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	61fa      	str	r2, [r7, #28]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	000b      	movs	r3, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	2200      	movs	r2, #0
 8002e22:	461c      	mov	r4, r3
 8002e24:	4615      	mov	r5, r2
 8002e26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e2a:	1911      	adds	r1, r2, r4
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	416b      	adcs	r3, r5
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e36:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002e3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	f04f 0500 	mov.w	r5, #0
 8002e4a:	015d      	lsls	r5, r3, #5
 8002e4c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002e50:	0154      	lsls	r4, r2, #5
 8002e52:	4622      	mov	r2, r4
 8002e54:	462b      	mov	r3, r5
 8002e56:	ebb2 0800 	subs.w	r8, r2, r0
 8002e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002e6a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002e6e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	eb18 0a00 	adds.w	sl, r8, r0
 8002e7a:	eb49 0b01 	adc.w	fp, r9, r1
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e8a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e8e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e92:	ebb2 040a 	subs.w	r4, r2, sl
 8002e96:	603c      	str	r4, [r7, #0]
 8002e98:	eb63 030b 	sbc.w	r3, r3, fp
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	181b      	adds	r3, r3, r0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	eb41 0303 	adc.w	r3, r1, r3
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eb6:	f7ff ff3f 	bl	8002d38 <UTILS_NanosecondsToTimespec>

    return 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3738      	adds	r7, #56	@ 0x38
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <HAL_MspInit+0x54>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	4a11      	ldr	r2, [pc, #68]	@ (8002f1c <HAL_MspInit+0x54>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ede:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_MspInit+0x54>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_MspInit+0x54>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <HAL_MspInit+0x54>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_MspInit+0x54>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	210f      	movs	r1, #15
 8002f0a:	f06f 0001 	mvn.w	r0, #1
 8002f0e:	f000 fd41 	bl	8003994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	@ 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <HAL_InitTick+0xd4>)
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <HAL_InitTick+0xd4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <HAL_InitTick+0xd4>)
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f4c:	f107 020c 	add.w	r2, r7, #12
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 fc5a 	bl	8005810 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002f5c:	f002 fc44 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8002f60:	4603      	mov	r3, r0
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9b      	lsrs	r3, r3, #18
 8002f70:	3b01      	subs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f74:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f76:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <HAL_InitTick+0xe0>)
 8002f78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f94:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002f9a:	4818      	ldr	r0, [pc, #96]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f9c:	f003 f8b2 	bl	8006104 <HAL_TIM_Base_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11b      	bne.n	8002fe6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002fae:	4813      	ldr	r0, [pc, #76]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002fb0:	f003 f8f8 	bl	80061a4 <HAL_TIM_Base_Start_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d111      	bne.n	8002fe6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fc2:	2019      	movs	r0, #25
 8002fc4:	f000 fd02 	bl	80039cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d808      	bhi.n	8002fe0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	2019      	movs	r0, #25
 8002fd4:	f000 fcde 	bl	8003994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_InitTick+0xe4>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e002      	b.n	8002fe6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3730      	adds	r7, #48	@ 0x30
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	20007738 	.word	0x20007738
 8003000:	40010000 	.word	0x40010000
 8003004:	20000014 	.word	0x20000014

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <NMI_Handler+0x4>

08003010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <MemManage_Handler+0x4>

08003020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <UsageFault_Handler+0x4>

08003030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003044:	4802      	ldr	r0, [pc, #8]	@ (8003050 <DMA1_Stream5_IRQHandler+0x10>)
 8003046:	f000 fe67 	bl	8003d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200078a4 	.word	0x200078a4

08003054 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003058:	4802      	ldr	r0, [pc, #8]	@ (8003064 <DMA1_Stream6_IRQHandler+0x10>)
 800305a:	f000 fe5d 	bl	8003d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20007904 	.word	0x20007904

08003068 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800306c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003070:	f001 fa9c 	bl	80045ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003074:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003078:	f001 fa98 	bl	80045ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}

08003080 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003086:	f003 f8fd 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20007738 	.word	0x20007738

08003094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <TIM2_IRQHandler+0x10>)
 800309a:	f003 f8f3 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20007788 	.word	0x20007788

080030a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030ac:	4802      	ldr	r0, [pc, #8]	@ (80030b8 <TIM3_IRQHandler+0x10>)
 80030ae:	f003 f8e9 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200077d0 	.word	0x200077d0

080030bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <TIM4_IRQHandler+0x10>)
 80030c2:	f003 f8df 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20007818 	.word	0x20007818

080030d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <USART2_IRQHandler+0x10>)
 80030d6:	f003 fe13 	bl	8006d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20007860 	.word	0x20007860

080030e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80030e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80030ec:	f001 fa5e 	bl	80045ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80030f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030f4:	f001 fa5a 	bl	80045ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	return 1;
 8003100:	2301      	movs	r3, #1
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_kill>:

int _kill(int pid, int sig)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003116:	f015 fc6f 	bl	80189f8 <__errno>
 800311a:	4603      	mov	r3, r0
 800311c:	2216      	movs	r2, #22
 800311e:	601a      	str	r2, [r3, #0]
	return -1;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_exit>:

void _exit (int status)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffe7 	bl	800310c <_kill>
	while (1) {}		/* Make sure we hang here */
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <_exit+0x12>

08003142 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e00a      	b.n	800316a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003154:	f3af 8000 	nop.w
 8003158:	4601      	mov	r1, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	60ba      	str	r2, [r7, #8]
 8003160:	b2ca      	uxtb	r2, r1
 8003162:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	dbf0      	blt.n	8003154 <_read+0x12>
	}

return len;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e009      	b.n	80031a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	60ba      	str	r2, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dbf1      	blt.n	800318e <_write+0x12>
	}
	return len;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_close>:


int _close(int file)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	return -1;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031dc:	605a      	str	r2, [r3, #4]
	return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_isatty>:

int _isatty(int file)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	return 1;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
	return 0;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003224:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <_sbrk+0x5c>)
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <_sbrk+0x60>)
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003230:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <_sbrk+0x64>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003238:	4b11      	ldr	r3, [pc, #68]	@ (8003280 <_sbrk+0x64>)
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <_sbrk+0x68>)
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800323e:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	429a      	cmp	r2, r3
 800324a:	d207      	bcs.n	800325c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800324c:	f015 fbd4 	bl	80189f8 <__errno>
 8003250:	4603      	mov	r3, r0
 8003252:	220c      	movs	r2, #12
 8003254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800325a:	e009      	b.n	8003270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800325c:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <_sbrk+0x64>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003262:	4b07      	ldr	r3, [pc, #28]	@ (8003280 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	4a05      	ldr	r2, [pc, #20]	@ (8003280 <_sbrk+0x64>)
 800326c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20020000 	.word	0x20020000
 800327c:	00000400 	.word	0x00000400
 8003280:	20007784 	.word	0x20007784
 8003284:	20011018 	.word	0x20011018

08003288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <SystemInit+0x20>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <SystemInit+0x20>)
 8003294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c0:	463b      	mov	r3, r7
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032d2:	2259      	movs	r2, #89	@ 0x59
 80032d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032dc:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032f0:	4813      	ldr	r0, [pc, #76]	@ (8003340 <MX_TIM2_Init+0x94>)
 80032f2:	f002 ff07 	bl	8006104 <HAL_TIM_Base_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80032fc:	f7ff fc78 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	4619      	mov	r1, r3
 800330c:	480c      	ldr	r0, [pc, #48]	@ (8003340 <MX_TIM2_Init+0x94>)
 800330e:	f003 f8c1 	bl	8006494 <HAL_TIM_ConfigClockSource>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003318:	f7ff fc6a 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003324:	463b      	mov	r3, r7
 8003326:	4619      	mov	r1, r3
 8003328:	4805      	ldr	r0, [pc, #20]	@ (8003340 <MX_TIM2_Init+0x94>)
 800332a:	f003 fadd 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003334:	f7ff fc5c 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20007788 	.word	0x20007788

08003344 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003358:	463b      	mov	r3, r7
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <MX_TIM3_Init+0x94>)
 8003362:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <MX_TIM3_Init+0x98>)
 8003364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8003366:	4b1c      	ldr	r3, [pc, #112]	@ (80033d8 <MX_TIM3_Init+0x94>)
 8003368:	2259      	movs	r2, #89	@ 0x59
 800336a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <MX_TIM3_Init+0x94>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003372:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <MX_TIM3_Init+0x94>)
 8003374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <MX_TIM3_Init+0x94>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <MX_TIM3_Init+0x94>)
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003386:	4814      	ldr	r0, [pc, #80]	@ (80033d8 <MX_TIM3_Init+0x94>)
 8003388:	f002 febc 	bl	8006104 <HAL_TIM_Base_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003392:	f7ff fc2d 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800339a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	4619      	mov	r1, r3
 80033a2:	480d      	ldr	r0, [pc, #52]	@ (80033d8 <MX_TIM3_Init+0x94>)
 80033a4:	f003 f876 	bl	8006494 <HAL_TIM_ConfigClockSource>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80033ae:	f7ff fc1f 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ba:	463b      	mov	r3, r7
 80033bc:	4619      	mov	r1, r3
 80033be:	4806      	ldr	r0, [pc, #24]	@ (80033d8 <MX_TIM3_Init+0x94>)
 80033c0:	f003 fa92 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80033ca:	f7ff fc11 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200077d0 	.word	0x200077d0
 80033dc:	40000400 	.word	0x40000400

080033e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	463b      	mov	r3, r7
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <MX_TIM4_Init+0x94>)
 80033fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <MX_TIM4_Init+0x98>)
 8003400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 899;
 8003402:	4b1c      	ldr	r3, [pc, #112]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003404:	f240 3283 	movw	r2, #899	@ 0x383
 8003408:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <MX_TIM4_Init+0x94>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003410:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003412:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003416:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003418:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <MX_TIM4_Init+0x94>)
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003424:	4813      	ldr	r0, [pc, #76]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003426:	f002 fe6d 	bl	8006104 <HAL_TIM_Base_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003430:	f7ff fbde 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	4619      	mov	r1, r3
 8003440:	480c      	ldr	r0, [pc, #48]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003442:	f003 f827 	bl	8006494 <HAL_TIM_ConfigClockSource>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800344c:	f7ff fbd0 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003450:	2300      	movs	r3, #0
 8003452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003458:	463b      	mov	r3, r7
 800345a:	4619      	mov	r1, r3
 800345c:	4805      	ldr	r0, [pc, #20]	@ (8003474 <MX_TIM4_Init+0x94>)
 800345e:	f003 fa43 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003468:	f7ff fbc2 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20007818 	.word	0x20007818
 8003478:	40000800 	.word	0x40000800

0800347c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d116      	bne.n	80034bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a27      	ldr	r2, [pc, #156]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
 800349e:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2105      	movs	r1, #5
 80034ae:	201c      	movs	r0, #28
 80034b0:	f000 fa70 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034b4:	201c      	movs	r0, #28
 80034b6:	f000 fa89 	bl	80039cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80034ba:	e036      	b.n	800352a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_TIM_Base_MspInit+0xbc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d116      	bne.n	80034f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	4a19      	ldr	r2, [pc, #100]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d6:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2105      	movs	r1, #5
 80034e6:	201d      	movs	r0, #29
 80034e8:	f000 fa54 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034ec:	201d      	movs	r0, #29
 80034ee:	f000 fa6d 	bl	80039cc <HAL_NVIC_EnableIRQ>
}
 80034f2:	e01a      	b.n	800352a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a10      	ldr	r2, [pc, #64]	@ (800353c <HAL_TIM_Base_MspInit+0xc0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d115      	bne.n	800352a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	4a0b      	ldr	r2, [pc, #44]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6413      	str	r3, [r2, #64]	@ 0x40
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_TIM_Base_MspInit+0xb8>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2105      	movs	r1, #5
 800351e:	201e      	movs	r0, #30
 8003520:	f000 fa38 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003524:	201e      	movs	r0, #30
 8003526:	f000 fa51 	bl	80039cc <HAL_NVIC_EnableIRQ>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800

08003540 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <MX_USART2_UART_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800354c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003566:	220c      	movs	r2, #12
 8003568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003578:	f003 fa46 	bl	8006a08 <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003582:	f7ff fb35 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20007860 	.word	0x20007860
 8003590:	40004400 	.word	0x40004400

08003594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4d      	ldr	r2, [pc, #308]	@ (80036e8 <HAL_UART_MspInit+0x154>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f040 8093 	bne.w	80036de <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	4b4b      	ldr	r3, [pc, #300]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	4a4a      	ldr	r2, [pc, #296]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c8:	4b48      	ldr	r3, [pc, #288]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	4b44      	ldr	r3, [pc, #272]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	4a43      	ldr	r2, [pc, #268]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e4:	4b41      	ldr	r3, [pc, #260]	@ (80036ec <HAL_UART_MspInit+0x158>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035f0:	230c      	movs	r3, #12
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003600:	2307      	movs	r3, #7
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4839      	ldr	r0, [pc, #228]	@ (80036f0 <HAL_UART_MspInit+0x15c>)
 800360c:	f000 fdee 	bl	80041ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003612:	4a39      	ldr	r2, [pc, #228]	@ (80036f8 <HAL_UART_MspInit+0x164>)
 8003614:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003616:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003618:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800361c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361e:	4b35      	ldr	r3, [pc, #212]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003624:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800362a:	4b32      	ldr	r3, [pc, #200]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 800362c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003630:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003632:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003638:	4b2e      	ldr	r3, [pc, #184]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800363e:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003644:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003646:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003648:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800364c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364e:	4b29      	ldr	r3, [pc, #164]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003650:	2200      	movs	r2, #0
 8003652:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003654:	4827      	ldr	r0, [pc, #156]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003656:	f000 f9c7 	bl	80039e8 <HAL_DMA_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003660:	f7ff fac6 	bl	8002bf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
 800366a:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_UART_MspInit+0x160>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003670:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <HAL_UART_MspInit+0x168>)
 8003672:	4a23      	ldr	r2, [pc, #140]	@ (8003700 <HAL_UART_MspInit+0x16c>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003676:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_UART_MspInit+0x168>)
 8003678:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800367c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367e:	4b1f      	ldr	r3, [pc, #124]	@ (80036fc <HAL_UART_MspInit+0x168>)
 8003680:	2240      	movs	r2, #64	@ 0x40
 8003682:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_UART_MspInit+0x168>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_UART_MspInit+0x168>)
 800368c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003690:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003692:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_UART_MspInit+0x168>)
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <HAL_UART_MspInit+0x168>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800369e:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036b2:	4812      	ldr	r0, [pc, #72]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036b4:	f000 f998 	bl	80039e8 <HAL_DMA_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80036be:	f7ff fa97 	bl	8002bf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80036c8:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <HAL_UART_MspInit+0x168>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2105      	movs	r1, #5
 80036d2:	2026      	movs	r0, #38	@ 0x26
 80036d4:	f000 f95e 	bl	8003994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036d8:	2026      	movs	r0, #38	@ 0x26
 80036da:	f000 f977 	bl	80039cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036de:	bf00      	nop
 80036e0:	3728      	adds	r7, #40	@ 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	200078a4 	.word	0x200078a4
 80036f8:	40026088 	.word	0x40026088
 80036fc:	20007904 	.word	0x20007904
 8003700:	400260a0 	.word	0x400260a0

08003704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800373c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003708:	480d      	ldr	r0, [pc, #52]	@ (8003740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370a:	490e      	ldr	r1, [pc, #56]	@ (8003744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800370c:	4a0e      	ldr	r2, [pc, #56]	@ (8003748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003720:	4c0b      	ldr	r4, [pc, #44]	@ (8003750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800372e:	f7ff fdab 	bl	8003288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003732:	f015 f967 	bl	8018a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7ff f8cf 	bl	80028d8 <main>
  bx  lr    
 800373a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003748:	0801be18 	.word	0x0801be18
  ldr r2, =_sbss
 800374c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003750:	20011018 	.word	0x20011018

08003754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC_IRQHandler>
	...

08003758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800375c:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <HAL_Init+0x40>)
 8003762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_Init+0x40>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_Init+0x40>)
 800376e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003774:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <HAL_Init+0x40>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <HAL_Init+0x40>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003780:	2003      	movs	r0, #3
 8003782:	f000 f8fc 	bl	800397e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003786:	200f      	movs	r0, #15
 8003788:	f7ff fbca 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800378c:	f7ff fb9c 	bl	8002ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00

0800379c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x20>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_IncTick+0x24>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_IncTick+0x24>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000018 	.word	0x20000018
 80037c0:	20007964 	.word	0x20007964

080037c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return uwTick;
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <HAL_GetTick+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20007964 	.word	0x20007964

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff ffee 	bl	80037c4 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003802:	bf00      	nop
 8003804:	f7ff ffde 	bl	80037c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000018 	.word	0x20000018

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800384c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	@ (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	@ (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ff4c 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a6:	f7ff ff61 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7ff ffb1 	bl	8003918 <NVIC_EncodePriority>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff80 	bl	80038c4 <__NVIC_SetPriority>
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff54 	bl	8003888 <__NVIC_EnableIRQ>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff fee6 	bl	80037c4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e099      	b.n	8003b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a24:	e00f      	b.n	8003a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff fecd 	bl	80037c4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d908      	bls.n	8003a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e078      	b.n	8003b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	@ (8003b40 <HAL_DMA_Init+0x158>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb01 	bl	80040f4 <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	@ 0x40
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b06:	2301      	movs	r3, #1
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fab8 	bl	8004088 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	223f      	movs	r2, #63	@ 0x3f
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	f010803f 	.word	0xf010803f

08003b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Start_IT+0x26>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e040      	b.n	8003bec <HAL_DMA_Start_IT+0xa8>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d12f      	bne.n	8003bde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fa4a 	bl	800402c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	223f      	movs	r2, #63	@ 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0216 	orr.w	r2, r2, #22
 8003bb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e005      	b.n	8003bea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7ff fddf 	bl	80037c4 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e052      	b.n	8003ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0216 	bic.w	r2, r2, #22
 8003c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_DMA_Abort+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0208 	bic.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	e013      	b.n	8003ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c78:	f7ff fda4 	bl	80037c4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d90c      	bls.n	8003ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e015      	b.n	8003ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e4      	bne.n	8003c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	223f      	movs	r2, #63	@ 0x3f
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00c      	b.n	8003d0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d24:	4b8e      	ldr	r3, [pc, #568]	@ (8003f60 <HAL_DMA_IRQHandler+0x248>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a8e      	ldr	r2, [pc, #568]	@ (8003f64 <HAL_DMA_IRQHandler+0x24c>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d42:	2208      	movs	r2, #8
 8003d44:	409a      	lsls	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01a      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0204 	bic.w	r2, r2, #4
 8003d6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	2208      	movs	r2, #8
 8003d72:	409a      	lsls	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2201      	movs	r2, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	2201      	movs	r2, #1
 8003da8:	409a      	lsls	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d012      	beq.n	8003df0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	2204      	movs	r2, #4
 8003dde:	409a      	lsls	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	2210      	movs	r2, #16
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d043      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d03c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	2210      	movs	r2, #16
 8003e14:	409a      	lsls	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d018      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d024      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
 8003e46:	e01f      	b.n	8003e88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
 8003e58:	e016      	b.n	8003e88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0208 	bic.w	r2, r2, #8
 8003e76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 808f 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8087 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	2220      	movs	r2, #32
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d136      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0216 	bic.w	r2, r2, #22
 8003ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0x1da>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0208 	bic.w	r2, r2, #8
 8003f00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	223f      	movs	r2, #63	@ 0x3f
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07e      	beq.n	8004024 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
        }
        return;
 8003f2e:	e079      	b.n	8004024 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01d      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d031      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
 8003f5c:	e02c      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
 8003f5e:	bf00      	nop
 8003f60:	20000010 	.word	0x20000010
 8003f64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
 8003f78:	e01e      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10f      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0210 	bic.w	r2, r2, #16
 8003f96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d032      	beq.n	8004026 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d022      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2205      	movs	r2, #5
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d307      	bcc.n	8004000 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f2      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x2cc>
 8003ffe:	e000      	b.n	8004002 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004000:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e000      	b.n	8004026 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004024:	bf00      	nop
    }
  }
}
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	d108      	bne.n	800406c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800406a:	e007      	b.n	800407c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	3b10      	subs	r3, #16
 8004098:	4a14      	ldr	r2, [pc, #80]	@ (80040ec <DMA_CalcBaseAndBitshift+0x64>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040a2:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x68>)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d909      	bls.n	80040ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c8:	e007      	b.n	80040da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	aaaaaaab 	.word	0xaaaaaaab
 80040f0:	0801adb8 	.word	0x0801adb8

080040f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11f      	bne.n	800414e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d856      	bhi.n	80041c2 <DMA_CheckFifoParam+0xce>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <DMA_CheckFifoParam+0x28>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800413f 	.word	0x0800413f
 8004124:	0800412d 	.word	0x0800412d
 8004128:	080041c3 	.word	0x080041c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d046      	beq.n	80041c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e043      	b.n	80041c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004146:	d140      	bne.n	80041ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414c:	e03d      	b.n	80041ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004156:	d121      	bne.n	800419c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d837      	bhi.n	80041ce <DMA_CheckFifoParam+0xda>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <DMA_CheckFifoParam+0x70>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004175 	.word	0x08004175
 8004168:	0800417b 	.word	0x0800417b
 800416c:	08004175 	.word	0x08004175
 8004170:	0800418d 	.word	0x0800418d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e030      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d025      	beq.n	80041d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418a:	e022      	b.n	80041d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004194:	d11f      	bne.n	80041d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800419a:	e01c      	b.n	80041d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d903      	bls.n	80041aa <DMA_CheckFifoParam+0xb6>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d003      	beq.n	80041b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a8:	e018      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      break;
 80041ae:	e015      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e00b      	b.n	80041da <DMA_CheckFifoParam+0xe6>
      break;
 80041c2:	bf00      	nop
 80041c4:	e00a      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e008      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e006      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;   
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
    }
  } 
  
  return status; 
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e165      	b.n	80044d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	429a      	cmp	r2, r3
 8004222:	f040 8154 	bne.w	80044ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d005      	beq.n	800423e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423a:	2b02      	cmp	r3, #2
 800423c:	d130      	bne.n	80042a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004274:	2201      	movs	r2, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 0201 	and.w	r2, r3, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d017      	beq.n	80042dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d123      	bne.n	8004330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0203 	and.w	r2, r3, #3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80ae 	beq.w	80044ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b5d      	ldr	r3, [pc, #372]	@ (80044ec <HAL_GPIO_Init+0x300>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	4a5c      	ldr	r2, [pc, #368]	@ (80044ec <HAL_GPIO_Init+0x300>)
 800437c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004380:	6453      	str	r3, [r2, #68]	@ 0x44
 8004382:	4b5a      	ldr	r3, [pc, #360]	@ (80044ec <HAL_GPIO_Init+0x300>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438e:	4a58      	ldr	r2, [pc, #352]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3302      	adds	r3, #2
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	220f      	movs	r2, #15
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4f      	ldr	r2, [pc, #316]	@ (80044f4 <HAL_GPIO_Init+0x308>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d025      	beq.n	8004406 <HAL_GPIO_Init+0x21a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4e      	ldr	r2, [pc, #312]	@ (80044f8 <HAL_GPIO_Init+0x30c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01f      	beq.n	8004402 <HAL_GPIO_Init+0x216>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4d      	ldr	r2, [pc, #308]	@ (80044fc <HAL_GPIO_Init+0x310>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_GPIO_Init+0x212>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004500 <HAL_GPIO_Init+0x314>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_GPIO_Init+0x20e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004504 <HAL_GPIO_Init+0x318>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00d      	beq.n	80043f6 <HAL_GPIO_Init+0x20a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004508 <HAL_GPIO_Init+0x31c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_GPIO_Init+0x206>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a49      	ldr	r2, [pc, #292]	@ (800450c <HAL_GPIO_Init+0x320>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_GPIO_Init+0x202>
 80043ea:	2306      	movs	r3, #6
 80043ec:	e00c      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e00a      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 80043f2:	2305      	movs	r3, #5
 80043f4:	e008      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 80043f6:	2304      	movs	r3, #4
 80043f8:	e006      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 80043fa:	2303      	movs	r3, #3
 80043fc:	e004      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 80043fe:	2302      	movs	r3, #2
 8004400:	e002      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_GPIO_Init+0x21c>
 8004406:	2300      	movs	r3, #0
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f002 0203 	and.w	r2, r2, #3
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4093      	lsls	r3, r2
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004418:	4935      	ldr	r1, [pc, #212]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	3302      	adds	r3, #2
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004426:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <HAL_GPIO_Init+0x324>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444a:	4a31      	ldr	r2, [pc, #196]	@ (8004510 <HAL_GPIO_Init+0x324>)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004450:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <HAL_GPIO_Init+0x324>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_GPIO_Init+0x324>)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800447a:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <HAL_GPIO_Init+0x324>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800449e:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <HAL_GPIO_Init+0x324>)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <HAL_GPIO_Init+0x324>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c8:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <HAL_GPIO_Init+0x324>)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	f67f ae96 	bls.w	8004208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3724      	adds	r7, #36	@ 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40021000 	.word	0x40021000
 8004508:	40021400 	.word	0x40021400
 800450c:	40021800 	.word	0x40021800
 8004510:	40013c00 	.word	0x40013c00

08004514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43d9      	mvns	r1, r3
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045c2:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fa22 	bl	8002a14 <HAL_GPIO_EXTI_Callback>
  }
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40013c00 	.word	0x40013c00

080045dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e12b      	b.n	8004846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fe f8e4 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	@ 0x24
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800462e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800463e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004640:	f001 f8be 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a81      	ldr	r2, [pc, #516]	@ (8004850 <HAL_I2C_Init+0x274>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d807      	bhi.n	8004660 <HAL_I2C_Init+0x84>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a80      	ldr	r2, [pc, #512]	@ (8004854 <HAL_I2C_Init+0x278>)
 8004654:	4293      	cmp	r3, r2
 8004656:	bf94      	ite	ls
 8004658:	2301      	movls	r3, #1
 800465a:	2300      	movhi	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e006      	b.n	800466e <HAL_I2C_Init+0x92>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a7d      	ldr	r2, [pc, #500]	@ (8004858 <HAL_I2C_Init+0x27c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	bf94      	ite	ls
 8004668:	2301      	movls	r3, #1
 800466a:	2300      	movhi	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0e7      	b.n	8004846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a78      	ldr	r2, [pc, #480]	@ (800485c <HAL_I2C_Init+0x280>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004850 <HAL_I2C_Init+0x274>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d802      	bhi.n	80046b0 <HAL_I2C_Init+0xd4>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	e009      	b.n	80046c4 <HAL_I2C_Init+0xe8>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a69      	ldr	r2, [pc, #420]	@ (8004860 <HAL_I2C_Init+0x284>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	3301      	adds	r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	495c      	ldr	r1, [pc, #368]	@ (8004850 <HAL_I2C_Init+0x274>)
 80046e0:	428b      	cmp	r3, r1
 80046e2:	d819      	bhi.n	8004718 <HAL_I2C_Init+0x13c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e59      	subs	r1, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046f8:	400b      	ands	r3, r1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_I2C_Init+0x138>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1e59      	subs	r1, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fbb1 f3f3 	udiv	r3, r1, r3
 800470c:	3301      	adds	r3, #1
 800470e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004712:	e051      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004714:	2304      	movs	r3, #4
 8004716:	e04f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_I2C_Init+0x168>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_I2C_Init+0x18e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x196>
 800476e:	2301      	movs	r3, #1
 8004770:	e022      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_I2C_Init+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e58      	subs	r0, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	fbb0 f3f3 	udiv	r3, r0, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004796:	e00f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6911      	ldr	r1, [r2, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	000186a0 	.word	0x000186a0
 8004854:	001e847f 	.word	0x001e847f
 8004858:	003d08ff 	.word	0x003d08ff
 800485c:	431bde83 	.word	0x431bde83
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	461a      	mov	r2, r3
 8004870:	460b      	mov	r3, r1
 8004872:	817b      	strh	r3, [r7, #10]
 8004874:	4613      	mov	r3, r2
 8004876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7fe ffa4 	bl	80037c4 <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b20      	cmp	r3, #32
 8004888:	f040 80e0 	bne.w	8004a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2319      	movs	r3, #25
 8004892:	2201      	movs	r2, #1
 8004894:	4970      	ldr	r1, [pc, #448]	@ (8004a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fc72 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0d3      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2C_Master_Transmit+0x50>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0cc      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d007      	beq.n	80048da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	@ 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2210      	movs	r2, #16
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	893a      	ldrh	r2, [r7, #8]
 800490a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a50      	ldr	r2, [pc, #320]	@ (8004a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800491c:	8979      	ldrh	r1, [r7, #10]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fadc 	bl	8004ee0 <I2C_MasterRequestWrite>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e08d      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004948:	e066      	b.n	8004a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6a39      	ldr	r1, [r7, #32]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fcec 	bl	800532c <I2C_WaitOnTXEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b04      	cmp	r3, #4
 8004960:	d107      	bne.n	8004972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06b      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d11b      	bne.n	80049ec <HAL_I2C_Master_Transmit+0x188>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	6a39      	ldr	r1, [r7, #32]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fcdc 	bl	80053ae <I2C_WaitOnBTFFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e01a      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d194      	bne.n	800494a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	00100002 	.word	0x00100002
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	@ 0x30
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	817b      	strh	r3, [r7, #10]
 8004a70:	4613      	mov	r3, r2
 8004a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7fe fea6 	bl	80037c4 <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	f040 820b 	bne.w	8004e9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	497c      	ldr	r1, [pc, #496]	@ (8004c84 <HAL_I2C_Master_Receive+0x224>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb74 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e1fe      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2C_Master_Receive+0x50>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e1f7      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d007      	beq.n	8004ad6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2222      	movs	r2, #34	@ 0x22
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2210      	movs	r2, #16
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a5c      	ldr	r2, [pc, #368]	@ (8004c88 <HAL_I2C_Master_Receive+0x228>)
 8004b16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b18:	8979      	ldrh	r1, [r7, #10]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa60 	bl	8004fe4 <I2C_MasterRequestRead>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e1b8      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d113      	bne.n	8004b5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e18c      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d11b      	bne.n	8004b9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e16c      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d11b      	bne.n	8004bde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	e14c      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c04:	e138      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	f200 80f1 	bhi.w	8004df2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d123      	bne.n	8004c60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fc07 	bl	8005430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e139      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c5e:	e10b      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d14e      	bne.n	8004d06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4906      	ldr	r1, [pc, #24]	@ (8004c8c <HAL_I2C_Master_Receive+0x22c>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa84 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e10e      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
 8004c82:	bf00      	nop
 8004c84:	00100002 	.word	0x00100002
 8004c88:	ffff0000 	.word	0xffff0000
 8004c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d04:	e0b8      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4966      	ldr	r1, [pc, #408]	@ (8004ea8 <HAL_I2C_Master_Receive+0x448>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa35 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0bf      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2200      	movs	r2, #0
 8004d6a:	494f      	ldr	r1, [pc, #316]	@ (8004ea8 <HAL_I2C_Master_Receive+0x448>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fa07 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e091      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df0:	e042      	b.n	8004e78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fb1a 	bl	8005430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e04c      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d118      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f47f aec2 	bne.w	8004c06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3728      	adds	r7, #40	@ 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	00010004 	.word	0x00010004

08004eac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eba:	b2db      	uxtb	r3, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d006      	beq.n	8004f0a <I2C_MasterRequestWrite+0x2a>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d003      	beq.n	8004f0a <I2C_MasterRequestWrite+0x2a>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f08:	d108      	bne.n	8004f1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e00b      	b.n	8004f34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	2b12      	cmp	r3, #18
 8004f22:	d107      	bne.n	8004f34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f91d 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f5a:	d103      	bne.n	8004f64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e035      	b.n	8004fd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f70:	d108      	bne.n	8004f84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f72:	897b      	ldrh	r3, [r7, #10]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	e01b      	b.n	8004fbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	11db      	asrs	r3, r3, #7
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 0306 	and.w	r3, r3, #6
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f063 030f 	orn	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	490e      	ldr	r1, [pc, #56]	@ (8004fdc <I2C_MasterRequestWrite+0xfc>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f943 	bl	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e010      	b.n	8004fd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4907      	ldr	r1, [pc, #28]	@ (8004fe0 <I2C_MasterRequestWrite+0x100>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f933 	bl	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	00010008 	.word	0x00010008
 8004fe0:	00010002 	.word	0x00010002

08004fe4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005008:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d006      	beq.n	800501e <I2C_MasterRequestRead+0x3a>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d003      	beq.n	800501e <I2C_MasterRequestRead+0x3a>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800501c:	d108      	bne.n	8005030 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e00b      	b.n	8005048 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	2b11      	cmp	r3, #17
 8005036:	d107      	bne.n	8005048 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f893 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00d      	beq.n	800507c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506e:	d103      	bne.n	8005078 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e079      	b.n	8005170 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005084:	d108      	bne.n	8005098 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]
 8005096:	e05f      	b.n	8005158 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005098:	897b      	ldrh	r3, [r7, #10]
 800509a:	11db      	asrs	r3, r3, #7
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f003 0306 	and.w	r3, r3, #6
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f063 030f 	orn	r3, r3, #15
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4930      	ldr	r1, [pc, #192]	@ (8005178 <I2C_MasterRequestRead+0x194>)
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f8b9 	bl	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e054      	b.n	8005170 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4929      	ldr	r1, [pc, #164]	@ (800517c <I2C_MasterRequestRead+0x198>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8a9 	bl	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e044      	b.n	8005170 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800510a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f831 	bl	8005180 <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005132:	d103      	bne.n	800513c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e017      	b.n	8005170 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005140:	897b      	ldrh	r3, [r7, #10]
 8005142:	11db      	asrs	r3, r3, #7
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f063 030e 	orn	r3, r3, #14
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4907      	ldr	r1, [pc, #28]	@ (800517c <I2C_MasterRequestRead+0x198>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f865 	bl	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	00010008 	.word	0x00010008
 800517c:	00010002 	.word	0x00010002

08005180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005190:	e025      	b.n	80051de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005198:	d021      	beq.n	80051de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fe fb13 	bl	80037c4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d116      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e023      	b.n	8005226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10d      	bne.n	8005204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	e00c      	b.n	800521e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d0b6      	beq.n	8005192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800523c:	e051      	b.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524c:	d123      	bne.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800525c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e046      	b.n	8005324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529c:	d021      	beq.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fe fa91 	bl	80037c4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d116      	bne.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e020      	b.n	8005324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10c      	bne.n	8005306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	43da      	mvns	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4013      	ands	r3, r2
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e00b      	b.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d18d      	bne.n	800523e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005338:	e02d      	b.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f8ce 	bl	80054dc <I2C_IsAcknowledgeFailed>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e02d      	b.n	80053a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005350:	d021      	beq.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fe fa37 	bl	80037c4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d116      	bne.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e007      	b.n	80053a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b80      	cmp	r3, #128	@ 0x80
 80053a2:	d1ca      	bne.n	800533a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ba:	e02d      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f88d 	bl	80054dc <I2C_IsAcknowledgeFailed>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e02d      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d2:	d021      	beq.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d4:	f7fe f9f6 	bl	80037c4 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e007      	b.n	8005428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d1ca      	bne.n	80053bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800543c:	e042      	b.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d119      	bne.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e029      	b.n	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005480:	f7fe f9a0 	bl	80037c4 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ce:	2b40      	cmp	r3, #64	@ 0x40
 80054d0:	d1b5      	bne.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f2:	d11b      	bne.n	800552c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4b20      	ldr	r3, [pc, #128]	@ (80055cc <HAL_PWREx_EnableOverDrive+0x90>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_PWREx_EnableOverDrive+0x90>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6413      	str	r3, [r2, #64]	@ 0x40
 8005556:	4b1d      	ldr	r3, [pc, #116]	@ (80055cc <HAL_PWREx_EnableOverDrive+0x90>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005562:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005568:	f7fe f92c 	bl	80037c4 <HAL_GetTick>
 800556c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800556e:	e009      	b.n	8005584 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005570:	f7fe f928 	bl	80037c4 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800557e:	d901      	bls.n	8005584 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e01f      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005590:	d1ee      	bne.n	8005570 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005592:	4b11      	ldr	r3, [pc, #68]	@ (80055d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005598:	f7fe f914 	bl	80037c4 <HAL_GetTick>
 800559c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800559e:	e009      	b.n	80055b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055a0:	f7fe f910 	bl	80037c4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ae:	d901      	bls.n	80055b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e007      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055b4:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c0:	d1ee      	bne.n	80055a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	420e0040 	.word	0x420e0040
 80055d4:	40007000 	.word	0x40007000
 80055d8:	420e0044 	.word	0x420e0044

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0cc      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b68      	ldr	r3, [pc, #416]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d90c      	bls.n	8005618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b65      	ldr	r3, [pc, #404]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b63      	ldr	r3, [pc, #396]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b8      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005630:	4b59      	ldr	r3, [pc, #356]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a58      	ldr	r2, [pc, #352]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800563a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005648:	4b53      	ldr	r3, [pc, #332]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a52      	ldr	r2, [pc, #328]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	4b50      	ldr	r3, [pc, #320]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	494d      	ldr	r1, [pc, #308]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d044      	beq.n	80056fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b47      	ldr	r3, [pc, #284]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d119      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005696:	2b03      	cmp	r3, #3
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569a:	4b3f      	ldr	r3, [pc, #252]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e06f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e067      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ba:	4b37      	ldr	r3, [pc, #220]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4934      	ldr	r1, [pc, #208]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056cc:	f7fe f87a 	bl	80037c4 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fe f876 	bl	80037c4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e04f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 020c 	and.w	r2, r3, #12
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d1eb      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056fc:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d20c      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b22      	ldr	r3, [pc, #136]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e032      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b19      	ldr	r3, [pc, #100]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4916      	ldr	r1, [pc, #88]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574e:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	490e      	ldr	r1, [pc, #56]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005762:	f000 f887 	bl	8005874 <HAL_RCC_GetSysClockFreq>
 8005766:	4602      	mov	r2, r0
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	490a      	ldr	r1, [pc, #40]	@ (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	5ccb      	ldrb	r3, [r1, r3]
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	4a09      	ldr	r2, [pc, #36]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800577e:	4b09      	ldr	r3, [pc, #36]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fd fbcc 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40023c00 	.word	0x40023c00
 8005798:	40023800 	.word	0x40023800
 800579c:	0801ada0 	.word	0x0801ada0
 80057a0:	20000010 	.word	0x20000010
 80057a4:	20000014 	.word	0x20000014

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	@ (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000010 	.word	0x20000010

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0801adb0 	.word	0x0801adb0

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057ec:	f7ff ffdc 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0b5b      	lsrs	r3, r3, #13
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	@ (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	0801adb0 	.word	0x0801adb0

08005810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	220f      	movs	r2, #15
 800581e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005820:	4b12      	ldr	r3, [pc, #72]	@ (800586c <HAL_RCC_GetClockConfig+0x5c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800582c:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <HAL_RCC_GetClockConfig+0x5c>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005844:	4b09      	ldr	r3, [pc, #36]	@ (800586c <HAL_RCC_GetClockConfig+0x5c>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <HAL_RCC_GetClockConfig+0x60>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
 8005870:	40023c00 	.word	0x40023c00

08005874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0a6      	sub	sp, #152	@ 0x98
 800587a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800589a:	4bc8      	ldr	r3, [pc, #800]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	f200 817e 	bhi.w	8005ba4 <HAL_RCC_GetSysClockFreq+0x330>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	08005ba5 	.word	0x08005ba5
 80058b8:	08005ba5 	.word	0x08005ba5
 80058bc:	08005ba5 	.word	0x08005ba5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	08005ba5 	.word	0x08005ba5
 80058c8:	08005ba5 	.word	0x08005ba5
 80058cc:	08005ba5 	.word	0x08005ba5
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	08005ba5 	.word	0x08005ba5
 80058d8:	08005ba5 	.word	0x08005ba5
 80058dc:	08005ba5 	.word	0x08005ba5
 80058e0:	08005a5f 	.word	0x08005a5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e4:	4bb6      	ldr	r3, [pc, #728]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80058ea:	e15f      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ec:	4bb5      	ldr	r3, [pc, #724]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x350>)
 80058ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058f2:	e15b      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f4:	4bb1      	ldr	r3, [pc, #708]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005900:	4bae      	ldr	r3, [pc, #696]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d031      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590c:	4bab      	ldr	r3, [pc, #684]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	2200      	movs	r2, #0
 8005914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005920:	2300      	movs	r3, #0
 8005922:	667b      	str	r3, [r7, #100]	@ 0x64
 8005924:	4ba7      	ldr	r3, [pc, #668]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005926:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800592a:	462a      	mov	r2, r5
 800592c:	fb03 f202 	mul.w	r2, r3, r2
 8005930:	2300      	movs	r3, #0
 8005932:	4621      	mov	r1, r4
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	4aa2      	ldr	r2, [pc, #648]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x350>)
 800593c:	4621      	mov	r1, r4
 800593e:	fba1 1202 	umull	r1, r2, r1, r2
 8005942:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005944:	460a      	mov	r2, r1
 8005946:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005948:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800594a:	4413      	add	r3, r2
 800594c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800594e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005952:	2200      	movs	r2, #0
 8005954:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005956:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005958:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800595c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005960:	f7fb fa12 	bl	8000d88 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4613      	mov	r3, r2
 800596a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800596e:	e064      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005970:	4b92      	ldr	r3, [pc, #584]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	099b      	lsrs	r3, r3, #6
 8005976:	2200      	movs	r2, #0
 8005978:	653b      	str	r3, [r7, #80]	@ 0x50
 800597a:	657a      	str	r2, [r7, #84]	@ 0x54
 800597c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005984:	2300      	movs	r3, #0
 8005986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005988:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800598c:	4622      	mov	r2, r4
 800598e:	462b      	mov	r3, r5
 8005990:	f04f 0000 	mov.w	r0, #0
 8005994:	f04f 0100 	mov.w	r1, #0
 8005998:	0159      	lsls	r1, r3, #5
 800599a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599e:	0150      	lsls	r0, r2, #5
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4621      	mov	r1, r4
 80059a6:	1a51      	subs	r1, r2, r1
 80059a8:	6139      	str	r1, [r7, #16]
 80059aa:	4629      	mov	r1, r5
 80059ac:	eb63 0301 	sbc.w	r3, r3, r1
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059be:	4659      	mov	r1, fp
 80059c0:	018b      	lsls	r3, r1, #6
 80059c2:	4651      	mov	r1, sl
 80059c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059c8:	4651      	mov	r1, sl
 80059ca:	018a      	lsls	r2, r1, #6
 80059cc:	4651      	mov	r1, sl
 80059ce:	ebb2 0801 	subs.w	r8, r2, r1
 80059d2:	4659      	mov	r1, fp
 80059d4:	eb63 0901 	sbc.w	r9, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ec:	4690      	mov	r8, r2
 80059ee:	4699      	mov	r9, r3
 80059f0:	4623      	mov	r3, r4
 80059f2:	eb18 0303 	adds.w	r3, r8, r3
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	462b      	mov	r3, r5
 80059fa:	eb49 0303 	adc.w	r3, r9, r3
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	028b      	lsls	r3, r1, #10
 8005a10:	4621      	mov	r1, r4
 8005a12:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a16:	4621      	mov	r1, r4
 8005a18:	028a      	lsls	r2, r1, #10
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a22:	2200      	movs	r2, #0
 8005a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a26:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a2c:	f7fb f9ac 	bl	8000d88 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4613      	mov	r3, r2
 8005a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a3a:	4b60      	ldr	r3, [pc, #384]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	3301      	adds	r3, #1
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005a5c:	e0a6      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a5e:	4b57      	ldr	r3, [pc, #348]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6a:	4b54      	ldr	r3, [pc, #336]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02a      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b51      	ldr	r3, [pc, #324]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a8c:	fb03 f201 	mul.w	r2, r3, r1
 8005a90:	2300      	movs	r3, #0
 8005a92:	fb00 f303 	mul.w	r3, r0, r3
 8005a96:	4413      	add	r3, r2
 8005a98:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8005a9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	673a      	str	r2, [r7, #112]	@ 0x70
 8005aa4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005aa6:	4413      	add	r3, r2
 8005aa8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab2:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ab4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005ab8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005abc:	f7fb f964 	bl	8000d88 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005aca:	e05b      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005acc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	f04f 0000 	mov.w	r0, #0
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	0159      	lsls	r1, r3, #5
 8005af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005afa:	0150      	lsls	r0, r2, #5
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4641      	mov	r1, r8
 8005b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b06:	4649      	mov	r1, r9
 8005b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b20:	ebb2 040a 	subs.w	r4, r2, sl
 8005b24:	eb63 050b 	sbc.w	r5, r3, fp
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	00eb      	lsls	r3, r5, #3
 8005b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b36:	00e2      	lsls	r2, r4, #3
 8005b38:	4614      	mov	r4, r2
 8005b3a:	461d      	mov	r5, r3
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	18e3      	adds	r3, r4, r3
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	464b      	mov	r3, r9
 8005b44:	eb45 0303 	adc.w	r3, r5, r3
 8005b48:	607b      	str	r3, [r7, #4]
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b56:	4629      	mov	r1, r5
 8005b58:	028b      	lsls	r3, r1, #10
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b60:	4621      	mov	r1, r4
 8005b62:	028a      	lsls	r2, r1, #10
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	61fa      	str	r2, [r7, #28]
 8005b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b76:	f7fb f907 	bl	8000d88 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4613      	mov	r3, r2
 8005b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b84:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x348>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0f1b      	lsrs	r3, r3, #28
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8005b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005ba2:	e003      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3798      	adds	r7, #152	@ 0x98
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	017d7840 	.word	0x017d7840

08005bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e28d      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8083 	beq.w	8005cee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005be8:	4b94      	ldr	r3, [pc, #592]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d019      	beq.n	8005c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bf4:	4b91      	ldr	r3, [pc, #580]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d106      	bne.n	8005c0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c00:	4b8e      	ldr	r3, [pc, #568]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c0c:	d00c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c16:	2b0c      	cmp	r3, #12
 8005c18:	d112      	bne.n	8005c40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c1a:	4b88      	ldr	r3, [pc, #544]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c26:	d10b      	bne.n	8005c40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	4b84      	ldr	r3, [pc, #528]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05b      	beq.n	8005cec <HAL_RCC_OscConfig+0x124>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d157      	bne.n	8005cec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e25a      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d106      	bne.n	8005c58 <HAL_RCC_OscConfig+0x90>
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7b      	ldr	r2, [pc, #492]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_OscConfig+0xcc>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCC_OscConfig+0xb4>
 8005c62:	4b76      	ldr	r3, [pc, #472]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a75      	ldr	r2, [pc, #468]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b73      	ldr	r3, [pc, #460]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a72      	ldr	r2, [pc, #456]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0xcc>
 8005c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6e      	ldr	r2, [pc, #440]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b6c      	ldr	r3, [pc, #432]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd fd92 	bl	80037c4 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fd fd8e 	bl	80037c4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	@ 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e21f      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b61      	ldr	r3, [pc, #388]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xdc>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fd fd7e 	bl	80037c4 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fd fd7a 	bl	80037c4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e20b      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	4b57      	ldr	r3, [pc, #348]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x104>
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06f      	beq.n	8005dda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cfa:	4b50      	ldr	r3, [pc, #320]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d017      	beq.n	8005d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d06:	4b4d      	ldr	r3, [pc, #308]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d105      	bne.n	8005d1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d12:	4b4a      	ldr	r3, [pc, #296]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d1e:	4b47      	ldr	r3, [pc, #284]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d11c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2a:	4b44      	ldr	r3, [pc, #272]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d116      	bne.n	8005d64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d36:	4b41      	ldr	r3, [pc, #260]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_RCC_OscConfig+0x186>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e1d3      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4937      	ldr	r1, [pc, #220]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d62:	e03a      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d6c:	4b34      	ldr	r3, [pc, #208]	@ (8005e40 <HAL_RCC_OscConfig+0x278>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d72:	f7fd fd27 	bl	80037c4 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d7a:	f7fd fd23 	bl	80037c4 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e1b4      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d98:	4b28      	ldr	r3, [pc, #160]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4925      	ldr	r1, [pc, #148]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]
 8005dac:	e015      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dae:	4b24      	ldr	r3, [pc, #144]	@ (8005e40 <HAL_RCC_OscConfig+0x278>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fd fd06 	bl	80037c4 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dbc:	f7fd fd02 	bl	80037c4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e193      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d036      	beq.n	8005e54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d016      	beq.n	8005e1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dee:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fd fce6 	bl	80037c4 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dfc:	f7fd fce2 	bl	80037c4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e173      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <HAL_RCC_OscConfig+0x274>)
 8005e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x234>
 8005e1a:	e01b      	b.n	8005e54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e1c:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <HAL_RCC_OscConfig+0x27c>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fd fccf 	bl	80037c4 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e28:	e00e      	b.n	8005e48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fd fccb 	bl	80037c4 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d907      	bls.n	8005e48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e15c      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	42470000 	.word	0x42470000
 8005e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e48:	4b8a      	ldr	r3, [pc, #552]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ea      	bne.n	8005e2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8097 	beq.w	8005f90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e66:	4b83      	ldr	r3, [pc, #524]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	4b7f      	ldr	r3, [pc, #508]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e82:	4b7c      	ldr	r3, [pc, #496]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e92:	4b79      	ldr	r3, [pc, #484]	@ (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d118      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e9e:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a75      	ldr	r2, [pc, #468]	@ (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eaa:	f7fd fc8b 	bl	80037c4 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb2:	f7fd fc87 	bl	80037c4 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e118      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8006078 <HAL_RCC_OscConfig+0x4b0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x31e>
 8005ed8:	4b66      	ldr	r3, [pc, #408]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005edc:	4a65      	ldr	r2, [pc, #404]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee4:	e01c      	b.n	8005f20 <HAL_RCC_OscConfig+0x358>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x340>
 8005eee:	4b61      	ldr	r3, [pc, #388]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	4a60      	ldr	r2, [pc, #384]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005efa:	4b5e      	ldr	r3, [pc, #376]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efe:	4a5d      	ldr	r2, [pc, #372]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0x358>
 8005f08:	4b5a      	ldr	r3, [pc, #360]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	4a59      	ldr	r2, [pc, #356]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f14:	4b57      	ldr	r3, [pc, #348]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	4a56      	ldr	r2, [pc, #344]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f1a:	f023 0304 	bic.w	r3, r3, #4
 8005f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fd fc4c 	bl	80037c4 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f7fd fc48 	bl	80037c4 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e0d7      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f46:	4b4b      	ldr	r3, [pc, #300]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0ee      	beq.n	8005f30 <HAL_RCC_OscConfig+0x368>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fd fc36 	bl	80037c4 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fd fc32 	bl	80037c4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0c1      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f72:	4b40      	ldr	r3, [pc, #256]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ee      	bne.n	8005f5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f84:	4b3b      	ldr	r3, [pc, #236]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	4a3a      	ldr	r2, [pc, #232]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80ad 	beq.w	80060f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f9a:	4b36      	ldr	r3, [pc, #216]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d060      	beq.n	8006068 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d145      	bne.n	800603a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fae:	4b33      	ldr	r3, [pc, #204]	@ (800607c <HAL_RCC_OscConfig+0x4b4>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fd fc06 	bl	80037c4 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fd fc02 	bl	80037c4 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e093      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	4b29      	ldr	r3, [pc, #164]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	061b      	lsls	r3, r3, #24
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	071b      	lsls	r3, r3, #28
 8006006:	491b      	ldr	r1, [pc, #108]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 8006008:	4313      	orrs	r3, r2
 800600a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600c:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <HAL_RCC_OscConfig+0x4b4>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fd fbd7 	bl	80037c4 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601a:	f7fd fbd3 	bl	80037c4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e064      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x452>
 8006038:	e05c      	b.n	80060f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	4b10      	ldr	r3, [pc, #64]	@ (800607c <HAL_RCC_OscConfig+0x4b4>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fd fbc0 	bl	80037c4 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fd fbbc 	bl	80037c4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e04d      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <HAL_RCC_OscConfig+0x4ac>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x480>
 8006066:	e045      	b.n	80060f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e040      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006080:	4b1f      	ldr	r3, [pc, #124]	@ (8006100 <HAL_RCC_OscConfig+0x538>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d030      	beq.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d129      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d122      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060b0:	4013      	ands	r3, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d119      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	3b01      	subs	r3, #1
 80060ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10f      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d107      	bne.n	80060f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800

08006104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e041      	b.n	800619a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fd f9a6 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f000 fa96 	bl	8006674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e04e      	b.n	800625a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a23      	ldr	r2, [pc, #140]	@ (8006268 <HAL_TIM_Base_Start_IT+0xc4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d01d      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1f      	ldr	r2, [pc, #124]	@ (800626c <HAL_TIM_Base_Start_IT+0xc8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006270 <HAL_TIM_Base_Start_IT+0xcc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_TIM_Base_Start_IT+0xd0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a19      	ldr	r2, [pc, #100]	@ (800627c <HAL_TIM_Base_Start_IT+0xd8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a18      	ldr	r2, [pc, #96]	@ (8006280 <HAL_TIM_Base_Start_IT+0xdc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d111      	bne.n	8006248 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d010      	beq.n	8006258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	e007      	b.n	8006258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40000c00 	.word	0x40000c00
 8006278:	40010400 	.word	0x40010400
 800627c:	40014000 	.word	0x40014000
 8006280:	40001800 	.word	0x40001800

08006284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d122      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d11b      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0202 	mvn.w	r2, #2
 80062b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9b5 	bl	8006636 <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9a7 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f9b8 	bl	800664a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d122      	bne.n	8006334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d11b      	bne.n	8006334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0204 	mvn.w	r2, #4
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f98b 	bl	8006636 <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f97d 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f98e 	bl	800664a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b08      	cmp	r3, #8
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0208 	mvn.w	r2, #8
 8006358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f961 	bl	8006636 <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f953 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f964 	bl	800664a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b10      	cmp	r3, #16
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0210 	mvn.w	r2, #16
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2208      	movs	r2, #8
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f937 	bl	8006636 <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f929 	bl	8006622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f93a 	bl	800664a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0201 	mvn.w	r2, #1
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fc fb3c 	bl	8002a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b80      	cmp	r3, #128	@ 0x80
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fae0 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643e:	2b40      	cmp	r3, #64	@ 0x40
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b40      	cmp	r3, #64	@ 0x40
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f8ff 	bl	800665e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b20      	cmp	r3, #32
 800646c:	d10e      	bne.n	800648c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d107      	bne.n	800648c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0220 	mvn.w	r2, #32
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 faaa 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x1c>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0b4      	b.n	800661a <HAL_TIM_ConfigClockSource+0x186>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e8:	d03e      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xd4>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ee:	f200 8087 	bhi.w	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f6:	f000 8086 	beq.w	8006606 <HAL_TIM_ConfigClockSource+0x172>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fe:	d87f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006500:	2b70      	cmp	r3, #112	@ 0x70
 8006502:	d01a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xa6>
 8006504:	2b70      	cmp	r3, #112	@ 0x70
 8006506:	d87b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006508:	2b60      	cmp	r3, #96	@ 0x60
 800650a:	d050      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x11a>
 800650c:	2b60      	cmp	r3, #96	@ 0x60
 800650e:	d877      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006510:	2b50      	cmp	r3, #80	@ 0x50
 8006512:	d03c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xfa>
 8006514:	2b50      	cmp	r3, #80	@ 0x50
 8006516:	d873      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d058      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x13a>
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	d86f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b30      	cmp	r3, #48	@ 0x30
 8006522:	d064      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006524:	2b30      	cmp	r3, #48	@ 0x30
 8006526:	d86b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d867      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15a>
 8006538:	e062      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f000 f9ad 	bl	80068a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800655c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04f      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f000 f996 	bl	80068a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e03c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 f90a 	bl	80067b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	@ 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f963 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e02c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f929 	bl	8006812 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	@ 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f953 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e01c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f8ea 	bl	80067b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	@ 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f943 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e00c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f93a 	bl	8006872 <TIM_ITRx_SetConfig>
      break;
 80065fe:	e003      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
      break;
 8006604:	e000      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a40      	ldr	r2, [pc, #256]	@ (8006788 <TIM_Base_SetConfig+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d013      	beq.n	80066b4 <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006692:	d00f      	beq.n	80066b4 <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3d      	ldr	r2, [pc, #244]	@ (800678c <TIM_Base_SetConfig+0x118>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3c      	ldr	r2, [pc, #240]	@ (8006790 <TIM_Base_SetConfig+0x11c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006794 <TIM_Base_SetConfig+0x120>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3a      	ldr	r2, [pc, #232]	@ (8006798 <TIM_Base_SetConfig+0x124>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d108      	bne.n	80066c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006788 <TIM_Base_SetConfig+0x114>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02b      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d4:	d027      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2c      	ldr	r2, [pc, #176]	@ (800678c <TIM_Base_SetConfig+0x118>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d023      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006790 <TIM_Base_SetConfig+0x11c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01f      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006794 <TIM_Base_SetConfig+0x120>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01b      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a29      	ldr	r2, [pc, #164]	@ (8006798 <TIM_Base_SetConfig+0x124>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d017      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a28      	ldr	r2, [pc, #160]	@ (800679c <TIM_Base_SetConfig+0x128>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <TIM_Base_SetConfig+0x12c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00f      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a26      	ldr	r2, [pc, #152]	@ (80067a4 <TIM_Base_SetConfig+0x130>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00b      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a25      	ldr	r2, [pc, #148]	@ (80067a8 <TIM_Base_SetConfig+0x134>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <TIM_Base_SetConfig+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <TIM_Base_SetConfig+0x13c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d108      	bne.n	8006738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <TIM_Base_SetConfig+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_Base_SetConfig+0xf8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a0c      	ldr	r2, [pc, #48]	@ (8006798 <TIM_Base_SetConfig+0x124>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d103      	bne.n	8006774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	615a      	str	r2, [r3, #20]
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40010000 	.word	0x40010000
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00
 8006798:	40010400 	.word	0x40010400
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800
 80067a8:	40001800 	.word	0x40001800
 80067ac:	40001c00 	.word	0x40001c00
 80067b0:	40002000 	.word	0x40002000

080067b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f023 030a 	bic.w	r3, r3, #10
 80067f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0210 	bic.w	r2, r3, #16
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800683c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800684e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	f043 0307 	orr.w	r3, r3, #7
 8006894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	021a      	lsls	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e05a      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e03f      	b.n	8006a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc fdb0 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	@ 0x24
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 ffd7 	bl	8007a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d165      	bne.n	8006b8a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_UART_Transmit_DMA+0x26>
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e05e      	b.n	8006b8c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_UART_Transmit_DMA+0x38>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e057      	b.n	8006b8c <HAL_UART_Transmit_DMA+0xe8>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2221      	movs	r2, #33	@ 0x21
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b08:	4a22      	ldr	r2, [pc, #136]	@ (8006b94 <HAL_UART_Transmit_DMA+0xf0>)
 8006b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b10:	4a21      	ldr	r2, [pc, #132]	@ (8006b98 <HAL_UART_Transmit_DMA+0xf4>)
 8006b12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b18:	4a20      	ldr	r2, [pc, #128]	@ (8006b9c <HAL_UART_Transmit_DMA+0xf8>)
 8006b1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b20:	2200      	movs	r2, #0
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b24:	f107 0308 	add.w	r3, r7, #8
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	6819      	ldr	r1, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3304      	adds	r3, #4
 8006b38:	461a      	mov	r2, r3
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	f7fd f802 	bl	8003b44 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	617b      	str	r3, [r7, #20]
   return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3314      	adds	r3, #20
 8006b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b72:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b74:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6a39      	ldr	r1, [r7, #32]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3730      	adds	r7, #48	@ 0x30
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	08007299 	.word	0x08007299
 8006b98:	08007333 	.word	0x08007333
 8006b9c:	080074ab 	.word	0x080074ab

08006ba0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	d11d      	bne.n	8006bf6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_UART_Receive_DMA+0x26>
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e016      	b.n	8006bf8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_UART_Receive_DMA+0x38>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e00f      	b.n	8006bf8 <HAL_UART_Receive_DMA+0x58>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	461a      	mov	r2, r3
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fca7 	bl	8007540 <UART_Start_Receive_DMA>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	e000      	b.n	8006bf8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b090      	sub	sp, #64	@ 0x40
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c16:	2b80      	cmp	r3, #128	@ 0x80
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b21      	cmp	r3, #33	@ 0x21
 8006c2c:	d128      	bne.n	8006c80 <HAL_UART_DMAStop+0x80>
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d025      	beq.n	8006c80 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	623b      	str	r3, [r7, #32]
   return(result);
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c54:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e5      	bne.n	8006c34 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fc ffbd 	bl	8003bf4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fcfe 	bl	800767c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8a:	2b40      	cmp	r3, #64	@ 0x40
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b22      	cmp	r3, #34	@ 0x22
 8006ca0:	d128      	bne.n	8006cf4 <HAL_UART_DMAStop+0xf4>
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d025      	beq.n	8006cf4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3314      	adds	r3, #20
 8006cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cc8:	61fa      	str	r2, [r7, #28]
 8006cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fc ff83 	bl	8003bf4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fcec 	bl	80076cc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3740      	adds	r7, #64	@ 0x40
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0ba      	sub	sp, #232	@ 0xe8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_UART_IRQHandler+0x66>
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fd93 	bl	800788a <UART_Receive_IT>
      return;
 8006d64:	e256      	b.n	8007214 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80de 	beq.w	8006f2c <HAL_UART_IRQHandler+0x22c>
 8006d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80d1 	beq.w	8006f2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <HAL_UART_IRQHandler+0xae>
 8006d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f043 0201 	orr.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <HAL_UART_IRQHandler+0xd2>
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	f043 0202 	orr.w	r2, r3, #2
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <HAL_UART_IRQHandler+0xf6>
 8006dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d011      	beq.n	8006e26 <HAL_UART_IRQHandler+0x126>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	f043 0208 	orr.w	r2, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 81ed 	beq.w	800720a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <HAL_UART_IRQHandler+0x14e>
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fd1e 	bl	800788a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e58:	2b40      	cmp	r3, #64	@ 0x40
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <HAL_UART_IRQHandler+0x17a>
 8006e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d04f      	beq.n	8006f1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc26 	bl	80076cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	d141      	bne.n	8006f12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1d9      	bne.n	8006e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d013      	beq.n	8006f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80070dc <HAL_UART_IRQHandler+0x3dc>)
 8006ee8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fc fef0 	bl	8003cd4 <HAL_DMA_Abort_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e00e      	b.n	8006f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9ae 	bl	800726c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	e00a      	b.n	8006f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9aa 	bl	800726c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	e006      	b.n	8006f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f9a6 	bl	800726c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006f26:	e170      	b.n	800720a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f28:	bf00      	nop
    return;
 8006f2a:	e16e      	b.n	800720a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f040 814a 	bne.w	80071ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8143 	beq.w	80071ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 813c 	beq.w	80071ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	60bb      	str	r3, [r7, #8]
 8006f66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f72:	2b40      	cmp	r3, #64	@ 0x40
 8006f74:	f040 80b4 	bne.w	80070e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8140 	beq.w	800720e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f96:	429a      	cmp	r2, r3
 8006f98:	f080 8139 	bcs.w	800720e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fae:	f000 8088 	beq.w	80070c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1d9      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800700e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007022:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007026:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800702a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e1      	bne.n	8006ffe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3314      	adds	r3, #20
 8007040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800704a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800704c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800705e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007060:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007064:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800706c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e3      	bne.n	800703a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007092:	f023 0310 	bic.w	r3, r3, #16
 8007096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e3      	bne.n	8007080 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fc fd99 	bl	8003bf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8d4 	bl	8007280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070d8:	e099      	b.n	800720e <HAL_UART_IRQHandler+0x50e>
 80070da:	bf00      	nop
 80070dc:	08007793 	.word	0x08007793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 808b 	beq.w	8007212 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8086 	beq.w	8007212 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800712a:	647a      	str	r2, [r7, #68]	@ 0x44
 800712c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e3      	bne.n	8007106 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3314      	adds	r3, #20
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	623b      	str	r3, [r7, #32]
   return(result);
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007162:	633a      	str	r2, [r7, #48]	@ 0x30
 8007164:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e3      	bne.n	800713e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	60fb      	str	r3, [r7, #12]
   return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071a8:	61fa      	str	r2, [r7, #28]
 80071aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	69b9      	ldr	r1, [r7, #24]
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	617b      	str	r3, [r7, #20]
   return(result);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e3      	bne.n	8007184 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f85c 	bl	8007280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071c8:	e023      	b.n	8007212 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_UART_IRQHandler+0x4ea>
 80071d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fae9 	bl	80077ba <UART_Transmit_IT>
    return;
 80071e8:	e014      	b.n	8007214 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <HAL_UART_IRQHandler+0x514>
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fb29 	bl	800785a <UART_EndTransmit_IT>
    return;
 8007208:	e004      	b.n	8007214 <HAL_UART_IRQHandler+0x514>
    return;
 800720a:	bf00      	nop
 800720c:	e002      	b.n	8007214 <HAL_UART_IRQHandler+0x514>
      return;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_UART_IRQHandler+0x514>
      return;
 8007212:	bf00      	nop
  }
}
 8007214:	37e8      	adds	r7, #232	@ 0xe8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop

0800721c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b090      	sub	sp, #64	@ 0x40
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d137      	bne.n	8007324 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80072b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b6:	2200      	movs	r2, #0
 80072b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3314      	adds	r3, #20
 80072d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072da:	633a      	str	r2, [r7, #48]	@ 0x30
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e5      	bne.n	80072ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007304:	637b      	str	r3, [r7, #52]	@ 0x34
 8007306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800730e:	61fa      	str	r2, [r7, #28]
 8007310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	69b9      	ldr	r1, [r7, #24]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	617b      	str	r3, [r7, #20]
   return(result);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e5      	bne.n	80072ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007322:	e002      	b.n	800732a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007324:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007326:	f7ff ff79 	bl	800721c <HAL_UART_TxCpltCallback>
}
 800732a:	bf00      	nop
 800732c:	3740      	adds	r7, #64	@ 0x40
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ff75 	bl	8007230 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b09c      	sub	sp, #112	@ 0x70
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d172      	bne.n	8007450 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800736a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800736c:	2200      	movs	r2, #0
 800736e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007382:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007386:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007390:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007392:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007396:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800739e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e5      	bne.n	8007370 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3314      	adds	r3, #20
 80073aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80073bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80073c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3314      	adds	r3, #20
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	623b      	str	r3, [r7, #32]
   return(result);
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80073f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80073fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800740c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	2b01      	cmp	r3, #1
 800741a:	d119      	bne.n	8007450 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	60fb      	str	r3, [r7, #12]
   return(result);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0310 	bic.w	r3, r3, #16
 8007432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800743c:	61fa      	str	r2, [r7, #28]
 800743e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	69b9      	ldr	r1, [r7, #24]
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	617b      	str	r3, [r7, #20]
   return(result);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e5      	bne.n	800741c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007454:	2b01      	cmp	r3, #1
 8007456:	d106      	bne.n	8007466 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800745a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800745c:	4619      	mov	r1, r3
 800745e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007460:	f7ff ff0e 	bl	8007280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007464:	e002      	b.n	800746c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007466:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007468:	f7ff feec 	bl	8007244 <HAL_UART_RxCpltCallback>
}
 800746c:	bf00      	nop
 800746e:	3770      	adds	r7, #112	@ 0x70
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	2b01      	cmp	r3, #1
 8007488:	d108      	bne.n	800749c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	b29b      	uxth	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff fef3 	bl	8007280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800749a:	e002      	b.n	80074a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff fedb 	bl	8007258 <HAL_UART_RxHalfCpltCallback>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c6:	2b80      	cmp	r3, #128	@ 0x80
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b21      	cmp	r3, #33	@ 0x21
 80074dc:	d108      	bne.n	80074f0 <UART_DMAError+0x46>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f000 f8c6 	bl	800767c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	bf0c      	ite	eq
 80074fe:	2301      	moveq	r3, #1
 8007500:	2300      	movne	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b22      	cmp	r3, #34	@ 0x22
 8007510:	d108      	bne.n	8007524 <UART_DMAError+0x7a>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800751e:	68b8      	ldr	r0, [r7, #8]
 8007520:	f000 f8d4 	bl	80076cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	f043 0210 	orr.w	r2, r3, #16
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f7ff fe9b 	bl	800726c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b098      	sub	sp, #96	@ 0x60
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	88fa      	ldrh	r2, [r7, #6]
 8007558:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2222      	movs	r2, #34	@ 0x22
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	4a40      	ldr	r2, [pc, #256]	@ (8007670 <UART_Start_Receive_DMA+0x130>)
 800756e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	4a3f      	ldr	r2, [pc, #252]	@ (8007674 <UART_Start_Receive_DMA+0x134>)
 8007576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757c:	4a3e      	ldr	r2, [pc, #248]	@ (8007678 <UART_Start_Receive_DMA+0x138>)
 800757e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	2200      	movs	r2, #0
 8007586:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	f7fc fad0 	bl	8003b44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80075a4:	2300      	movs	r3, #0
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d019      	beq.n	80075fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80075ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80075f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80075f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	657b      	str	r3, [r7, #84]	@ 0x54
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800761e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3314      	adds	r3, #20
 8007638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	617b      	str	r3, [r7, #20]
   return(result);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007648:	653b      	str	r3, [r7, #80]	@ 0x50
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007652:	627a      	str	r2, [r7, #36]	@ 0x24
 8007654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6a39      	ldr	r1, [r7, #32]
 8007658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3760      	adds	r7, #96	@ 0x60
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	0800734f 	.word	0x0800734f
 8007674:	08007475 	.word	0x08007475
 8007678:	080074ab 	.word	0x080074ab

0800767c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b089      	sub	sp, #36	@ 0x24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	60bb      	str	r3, [r7, #8]
   return(result);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	61ba      	str	r2, [r7, #24]
 80076a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	613b      	str	r3, [r7, #16]
   return(result);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e5      	bne.n	8007684 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80076c0:	bf00      	nop
 80076c2:	3724      	adds	r7, #36	@ 0x24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b095      	sub	sp, #84	@ 0x54
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3314      	adds	r3, #20
 800770e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	61fb      	str	r3, [r7, #28]
   return(result);
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f023 0301 	bic.w	r3, r3, #1
 800771e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800772a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e5      	bne.n	8007708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007740:	2b01      	cmp	r3, #1
 8007742:	d119      	bne.n	8007778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60bb      	str	r3, [r7, #8]
   return(result);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	647b      	str	r3, [r7, #68]	@ 0x44
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007764:	61ba      	str	r2, [r7, #24]
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6979      	ldr	r1, [r7, #20]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	613b      	str	r3, [r7, #16]
   return(result);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e5      	bne.n	8007744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007786:	bf00      	nop
 8007788:	3754      	adds	r7, #84	@ 0x54
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff fd5d 	bl	800726c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b21      	cmp	r3, #33	@ 0x21
 80077cc:	d13e      	bne.n	800784c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d6:	d114      	bne.n	8007802 <UART_Transmit_IT+0x48>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d110      	bne.n	8007802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	1c9a      	adds	r2, r3, #2
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	621a      	str	r2, [r3, #32]
 8007800:	e008      	b.n	8007814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	1c59      	adds	r1, r3, #1
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6211      	str	r1, [r2, #32]
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29b      	uxth	r3, r3
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4619      	mov	r1, r3
 8007822:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10f      	bne.n	8007848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	e000      	b.n	800784e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800784c:	2302      	movs	r3, #2
  }
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fcce 	bl	800721c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b08c      	sub	sp, #48	@ 0x30
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b22      	cmp	r3, #34	@ 0x22
 800789c:	f040 80ab 	bne.w	80079f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a8:	d117      	bne.n	80078da <UART_Receive_IT+0x50>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d113      	bne.n	80078da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80078d8:	e026      	b.n	8007928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ec:	d007      	beq.n	80078fe <UART_Receive_IT+0x74>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <UART_Receive_IT+0x82>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e008      	b.n	800791e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007918:	b2da      	uxtb	r2, r3
 800791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	4619      	mov	r1, r3
 8007936:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007938:	2b00      	cmp	r3, #0
 800793a:	d15a      	bne.n	80079f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0220 	bic.w	r2, r2, #32
 800794a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800795a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	d135      	bne.n	80079e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	613b      	str	r3, [r7, #16]
   return(result);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f023 0310 	bic.w	r3, r3, #16
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a2:	623a      	str	r2, [r7, #32]
 80079a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	69f9      	ldr	r1, [r7, #28]
 80079a8:	6a3a      	ldr	r2, [r7, #32]
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	d10a      	bne.n	80079da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fc4d 	bl	8007280 <HAL_UARTEx_RxEventCallback>
 80079e6:	e002      	b.n	80079ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fc2b 	bl	8007244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e002      	b.n	80079f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3730      	adds	r7, #48	@ 0x30
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a04:	b0c0      	sub	sp, #256	@ 0x100
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	ea40 0301 	orr.w	r3, r0, r1
 8007a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a58:	f021 010c 	bic.w	r1, r1, #12
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a66:	430b      	orrs	r3, r1
 8007a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7a:	6999      	ldr	r1, [r3, #24]
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	ea40 0301 	orr.w	r3, r0, r1
 8007a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8007ccc <UART_SetConfig+0x2cc>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d005      	beq.n	8007aa0 <UART_SetConfig+0xa0>
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4b8d      	ldr	r3, [pc, #564]	@ (8007cd0 <UART_SetConfig+0x2d0>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d104      	bne.n	8007aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007aa0:	f7fd fea2 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8007aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007aa8:	e003      	b.n	8007ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aaa:	f7fd fe89 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8007aae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007abc:	f040 810c 	bne.w	8007cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	1891      	adds	r1, r2, r2
 8007ad8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ada:	415b      	adcs	r3, r3
 8007adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	eb12 0801 	adds.w	r8, r2, r1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	eb43 0901 	adc.w	r9, r3, r1
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b02:	4690      	mov	r8, r2
 8007b04:	4699      	mov	r9, r3
 8007b06:	4623      	mov	r3, r4
 8007b08:	eb18 0303 	adds.w	r3, r8, r3
 8007b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b10:	462b      	mov	r3, r5
 8007b12:	eb49 0303 	adc.w	r3, r9, r3
 8007b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b2e:	460b      	mov	r3, r1
 8007b30:	18db      	adds	r3, r3, r3
 8007b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b34:	4613      	mov	r3, r2
 8007b36:	eb42 0303 	adc.w	r3, r2, r3
 8007b3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b44:	f7f9 f920 	bl	8000d88 <__aeabi_uldivmod>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4b61      	ldr	r3, [pc, #388]	@ (8007cd4 <UART_SetConfig+0x2d4>)
 8007b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b52:	095b      	lsrs	r3, r3, #5
 8007b54:	011c      	lsls	r4, r3, #4
 8007b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b68:	4642      	mov	r2, r8
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	1891      	adds	r1, r2, r2
 8007b6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b70:	415b      	adcs	r3, r3
 8007b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b78:	4641      	mov	r1, r8
 8007b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8007b7e:	4649      	mov	r1, r9
 8007b80:	eb43 0b01 	adc.w	fp, r3, r1
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b98:	4692      	mov	sl, r2
 8007b9a:	469b      	mov	fp, r3
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8007ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8007bac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	18db      	adds	r3, r3, r3
 8007bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bca:	4613      	mov	r3, r2
 8007bcc:	eb42 0303 	adc.w	r3, r2, r3
 8007bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007bda:	f7f9 f8d5 	bl	8000d88 <__aeabi_uldivmod>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4611      	mov	r1, r2
 8007be4:	4b3b      	ldr	r3, [pc, #236]	@ (8007cd4 <UART_SetConfig+0x2d4>)
 8007be6:	fba3 2301 	umull	r2, r3, r3, r1
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	2264      	movs	r2, #100	@ 0x64
 8007bee:	fb02 f303 	mul.w	r3, r2, r3
 8007bf2:	1acb      	subs	r3, r1, r3
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007bfa:	4b36      	ldr	r3, [pc, #216]	@ (8007cd4 <UART_SetConfig+0x2d4>)
 8007bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c08:	441c      	add	r4, r3
 8007c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	1891      	adds	r1, r2, r2
 8007c22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c24:	415b      	adcs	r3, r3
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	1851      	adds	r1, r2, r1
 8007c30:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c32:	4649      	mov	r1, r9
 8007c34:	414b      	adcs	r3, r1
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c44:	4659      	mov	r1, fp
 8007c46:	00cb      	lsls	r3, r1, #3
 8007c48:	4651      	mov	r1, sl
 8007c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c4e:	4651      	mov	r1, sl
 8007c50:	00ca      	lsls	r2, r1, #3
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	4642      	mov	r2, r8
 8007c5a:	189b      	adds	r3, r3, r2
 8007c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c60:	464b      	mov	r3, r9
 8007c62:	460a      	mov	r2, r1
 8007c64:	eb42 0303 	adc.w	r3, r2, r3
 8007c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c80:	460b      	mov	r3, r1
 8007c82:	18db      	adds	r3, r3, r3
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c86:	4613      	mov	r3, r2
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c96:	f7f9 f877 	bl	8000d88 <__aeabi_uldivmod>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <UART_SetConfig+0x2d4>)
 8007ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	2164      	movs	r1, #100	@ 0x64
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	3332      	adds	r3, #50	@ 0x32
 8007cb2:	4a08      	ldr	r2, [pc, #32]	@ (8007cd4 <UART_SetConfig+0x2d4>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	f003 0207 	and.w	r2, r3, #7
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4422      	add	r2, r4
 8007cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cc8:	e106      	b.n	8007ed8 <UART_SetConfig+0x4d8>
 8007cca:	bf00      	nop
 8007ccc:	40011000 	.word	0x40011000
 8007cd0:	40011400 	.word	0x40011400
 8007cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007cea:	4642      	mov	r2, r8
 8007cec:	464b      	mov	r3, r9
 8007cee:	1891      	adds	r1, r2, r2
 8007cf0:	6239      	str	r1, [r7, #32]
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	1854      	adds	r4, r2, r1
 8007cfe:	4649      	mov	r1, r9
 8007d00:	eb43 0501 	adc.w	r5, r3, r1
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	00eb      	lsls	r3, r5, #3
 8007d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d12:	00e2      	lsls	r2, r4, #3
 8007d14:	4614      	mov	r4, r2
 8007d16:	461d      	mov	r5, r3
 8007d18:	4643      	mov	r3, r8
 8007d1a:	18e3      	adds	r3, r4, r3
 8007d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d20:	464b      	mov	r3, r9
 8007d22:	eb45 0303 	adc.w	r3, r5, r3
 8007d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d46:	4629      	mov	r1, r5
 8007d48:	008b      	lsls	r3, r1, #2
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d50:	4621      	mov	r1, r4
 8007d52:	008a      	lsls	r2, r1, #2
 8007d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d58:	f7f9 f816 	bl	8000d88 <__aeabi_uldivmod>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4b60      	ldr	r3, [pc, #384]	@ (8007ee4 <UART_SetConfig+0x4e4>)
 8007d62:	fba3 2302 	umull	r2, r3, r3, r2
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	011c      	lsls	r4, r3, #4
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	61b9      	str	r1, [r7, #24]
 8007d84:	415b      	adcs	r3, r3
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	1851      	adds	r1, r2, r1
 8007d90:	6139      	str	r1, [r7, #16]
 8007d92:	4649      	mov	r1, r9
 8007d94:	414b      	adcs	r3, r1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007da4:	4659      	mov	r1, fp
 8007da6:	00cb      	lsls	r3, r1, #3
 8007da8:	4651      	mov	r1, sl
 8007daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dae:	4651      	mov	r1, sl
 8007db0:	00ca      	lsls	r2, r1, #3
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	4642      	mov	r2, r8
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007de4:	4649      	mov	r1, r9
 8007de6:	008b      	lsls	r3, r1, #2
 8007de8:	4641      	mov	r1, r8
 8007dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dee:	4641      	mov	r1, r8
 8007df0:	008a      	lsls	r2, r1, #2
 8007df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007df6:	f7f8 ffc7 	bl	8000d88 <__aeabi_uldivmod>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4b38      	ldr	r3, [pc, #224]	@ (8007ee4 <UART_SetConfig+0x4e4>)
 8007e02:	fba3 2301 	umull	r2, r3, r3, r1
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	2264      	movs	r2, #100	@ 0x64
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	1acb      	subs	r3, r1, r3
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	3332      	adds	r3, #50	@ 0x32
 8007e14:	4a33      	ldr	r2, [pc, #204]	@ (8007ee4 <UART_SetConfig+0x4e4>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e20:	441c      	add	r4, r3
 8007e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e26:	2200      	movs	r2, #0
 8007e28:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e30:	4642      	mov	r2, r8
 8007e32:	464b      	mov	r3, r9
 8007e34:	1891      	adds	r1, r2, r2
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e40:	4641      	mov	r1, r8
 8007e42:	1851      	adds	r1, r2, r1
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	4649      	mov	r1, r9
 8007e48:	414b      	adcs	r3, r1
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e58:	4659      	mov	r1, fp
 8007e5a:	00cb      	lsls	r3, r1, #3
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e62:	4651      	mov	r1, sl
 8007e64:	00ca      	lsls	r2, r1, #3
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	189b      	adds	r3, r3, r2
 8007e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e72:	464b      	mov	r3, r9
 8007e74:	460a      	mov	r2, r1
 8007e76:	eb42 0303 	adc.w	r3, r2, r3
 8007e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e86:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e94:	4649      	mov	r1, r9
 8007e96:	008b      	lsls	r3, r1, #2
 8007e98:	4641      	mov	r1, r8
 8007e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	008a      	lsls	r2, r1, #2
 8007ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ea6:	f7f8 ff6f 	bl	8000d88 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <UART_SetConfig+0x4e4>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	@ 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	3332      	adds	r3, #50	@ 0x32
 8007ec2:	4a08      	ldr	r2, [pc, #32]	@ (8007ee4 <UART_SetConfig+0x4e4>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4422      	add	r2, r4
 8007ed6:	609a      	str	r2, [r3, #8]
}
 8007ed8:	bf00      	nop
 8007eda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ee4:	51eb851f 	.word	0x51eb851f

08007ee8 <__NVIC_SetPriority>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db0a      	blt.n	8007f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	490c      	ldr	r1, [pc, #48]	@ (8007f34 <__NVIC_SetPriority+0x4c>)
 8007f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f06:	0112      	lsls	r2, r2, #4
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f10:	e00a      	b.n	8007f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	4908      	ldr	r1, [pc, #32]	@ (8007f38 <__NVIC_SetPriority+0x50>)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	0112      	lsls	r2, r2, #4
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	440b      	add	r3, r1
 8007f26:	761a      	strb	r2, [r3, #24]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	e000e100 	.word	0xe000e100
 8007f38:	e000ed00 	.word	0xe000ed00

08007f3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f40:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <SysTick_Handler+0x1c>)
 8007f42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f44:	f001 fd6e 	bl	8009a24 <xTaskGetSchedulerState>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d001      	beq.n	8007f52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f4e:	f002 fb63 	bl	800a618 <xPortSysTickHandler>
  }
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	e000e010 	.word	0xe000e010

08007f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f60:	2100      	movs	r1, #0
 8007f62:	f06f 0004 	mvn.w	r0, #4
 8007f66:	f7ff ffbf 	bl	8007ee8 <__NVIC_SetPriority>
#endif
}
 8007f6a:	bf00      	nop
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f76:	f3ef 8305 	mrs	r3, IPSR
 8007f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f82:	f06f 0305 	mvn.w	r3, #5
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e00c      	b.n	8007fa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <osKernelInitialize+0x44>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d105      	bne.n	8007f9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f92:	4b08      	ldr	r3, [pc, #32]	@ (8007fb4 <osKernelInitialize+0x44>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	607b      	str	r3, [r7, #4]
 8007f9c:	e002      	b.n	8007fa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fa4:	687b      	ldr	r3, [r7, #4]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20007968 	.word	0x20007968

08007fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fca:	f06f 0305 	mvn.w	r3, #5
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	e010      	b.n	8007ff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <osKernelStart+0x48>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d109      	bne.n	8007fee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fda:	f7ff ffbf 	bl	8007f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fde:	4b08      	ldr	r3, [pc, #32]	@ (8008000 <osKernelStart+0x48>)
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fe4:	f001 f892 	bl	800910c <vTaskStartScheduler>
      stat = osOK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e002      	b.n	8007ff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ff4:	687b      	ldr	r3, [r7, #4]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20007968 	.word	0x20007968

08008004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	@ 0x38
 8008008:	af04      	add	r7, sp, #16
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008014:	f3ef 8305 	mrs	r3, IPSR
 8008018:	617b      	str	r3, [r7, #20]
  return(result);
 800801a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800801c:	2b00      	cmp	r3, #0
 800801e:	d17e      	bne.n	800811e <osThreadNew+0x11a>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d07b      	beq.n	800811e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008026:	2380      	movs	r3, #128	@ 0x80
 8008028:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800802a:	2318      	movs	r3, #24
 800802c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008036:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d045      	beq.n	80080ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <osThreadNew+0x48>
        name = attr->name;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <osThreadNew+0x6e>
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b38      	cmp	r3, #56	@ 0x38
 8008064:	d805      	bhi.n	8008072 <osThreadNew+0x6e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <osThreadNew+0x72>
        return (NULL);
 8008072:	2300      	movs	r3, #0
 8008074:	e054      	b.n	8008120 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <osThreadNew+0xa8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2ba7      	cmp	r3, #167	@ 0xa7
 8008094:	d90a      	bls.n	80080ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <osThreadNew+0xa8>
        mem = 1;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	e010      	b.n	80080ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <osThreadNew+0xca>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <osThreadNew+0xca>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <osThreadNew+0xca>
          mem = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	e001      	b.n	80080ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fe1a 	bl	8008d24 <xTaskCreateStatic>
 80080f0:	4603      	mov	r3, r0
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	e013      	b.n	800811e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d110      	bne.n	800811e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f107 0310 	add.w	r3, r7, #16
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fe68 	bl	8008de4 <xTaskCreate>
 8008114:	4603      	mov	r3, r0
 8008116:	2b01      	cmp	r3, #1
 8008118:	d001      	beq.n	800811e <osThreadNew+0x11a>
            hTask = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800811e:	693b      	ldr	r3, [r7, #16]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3728      	adds	r7, #40	@ 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008130:	f3ef 8305 	mrs	r3, IPSR
 8008134:	60bb      	str	r3, [r7, #8]
  return(result);
 8008136:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <osDelay+0x1c>
    stat = osErrorISR;
 800813c:	f06f 0305 	mvn.w	r3, #5
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e007      	b.n	8008154 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <osDelay+0x2c>
      vTaskDelay(ticks);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 ffa6 	bl	80090a0 <vTaskDelay>
    }
  }

  return (stat);
 8008154:	68fb      	ldr	r3, [r7, #12]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4a07      	ldr	r2, [pc, #28]	@ (800818c <vApplicationGetIdleTaskMemory+0x2c>)
 8008170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4a06      	ldr	r2, [pc, #24]	@ (8008190 <vApplicationGetIdleTaskMemory+0x30>)
 8008176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2280      	movs	r2, #128	@ 0x80
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	2000796c 	.word	0x2000796c
 8008190:	20007a14 	.word	0x20007a14

08008194 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80081a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a06      	ldr	r2, [pc, #24]	@ (80081c4 <vApplicationGetTimerTaskMemory+0x30>)
 80081aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20007c14 	.word	0x20007c14
 80081c4:	20007cbc 	.word	0x20007cbc

080081c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f103 0208 	add.w	r2, r3, #8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f103 0208 	add.w	r2, r3, #8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f103 0208 	add.w	r2, r3, #8
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008280:	d103      	bne.n	800828a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	e00c      	b.n	80082a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3308      	adds	r3, #8
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e002      	b.n	8008298 <vListInsert+0x2e>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d2f6      	bcs.n	8008292 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	601a      	str	r2, [r3, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6892      	ldr	r2, [r2, #8]
 80082f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6852      	ldr	r2, [r2, #4]
 80082fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d103      	bne.n	8008310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	1e5a      	subs	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10b      	bne.n	800835c <xQueueGenericReset+0x2c>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60bb      	str	r3, [r7, #8]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800835c:	f002 f8cc 	bl	800a4f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	441a      	add	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838c:	3b01      	subs	r3, #1
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	441a      	add	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	22ff      	movs	r2, #255	@ 0xff
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	22ff      	movs	r2, #255	@ 0xff
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d114      	bne.n	80083dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01a      	beq.n	80083f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3310      	adds	r3, #16
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f942 	bl	8009648 <xTaskRemoveFromEventList>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d012      	beq.n	80083f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <xQueueGenericReset+0xd0>)
 80083cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	e009      	b.n	80083f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3310      	adds	r3, #16
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fef1 	bl	80081c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3324      	adds	r3, #36	@ 0x24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff feec 	bl	80081c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083f0:	f002 f8b4 	bl	800a55c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083f4:	2301      	movs	r3, #1
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	@ 0x38
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10b      	bne.n	8008430 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800842a:	bf00      	nop
 800842c:	bf00      	nop
 800842e:	e7fd      	b.n	800842c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <xQueueGenericCreateStatic+0x56>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <xQueueGenericCreateStatic+0x5a>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <xQueueGenericCreateStatic+0x5c>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	623b      	str	r3, [r7, #32]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <xQueueGenericCreateStatic+0x84>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <xQueueGenericCreateStatic+0x88>
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <xQueueGenericCreateStatic+0x8a>
 800848c:	2300      	movs	r3, #0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	61fb      	str	r3, [r7, #28]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084aa:	2350      	movs	r3, #80	@ 0x50
 80084ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b50      	cmp	r3, #80	@ 0x50
 80084b2:	d00b      	beq.n	80084cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	61bb      	str	r3, [r7, #24]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00d      	beq.n	80084f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f805 	bl	80084fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	@ 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d103      	bne.n	800851a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e002      	b.n	8008520 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800852c:	2101      	movs	r1, #1
 800852e:	69b8      	ldr	r0, [r7, #24]
 8008530:	f7ff fefe 	bl	8008330 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	@ 0x38
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10b      	bne.n	8008578 <xQueueGenericSend+0x34>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <xQueueGenericSend+0x42>
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <xQueueGenericSend+0x46>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xQueueGenericSend+0x48>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <xQueueGenericSend+0x64>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d103      	bne.n	80085b6 <xQueueGenericSend+0x72>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <xQueueGenericSend+0x76>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <xQueueGenericSend+0x78>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <xQueueGenericSend+0x94>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	623b      	str	r3, [r7, #32]
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	e7fd      	b.n	80085d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d8:	f001 fa24 	bl	8009a24 <xTaskGetSchedulerState>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <xQueueGenericSend+0xa4>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <xQueueGenericSend+0xa8>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <xQueueGenericSend+0xaa>
 80085ec:	2300      	movs	r3, #0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <xQueueGenericSend+0xc6>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	61fb      	str	r3, [r7, #28]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800860a:	f001 ff75 	bl	800a4f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008616:	429a      	cmp	r2, r3
 8008618:	d302      	bcc.n	8008620 <xQueueGenericSend+0xdc>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d129      	bne.n	8008674 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008626:	f000 fa0f 	bl	8008a48 <prvCopyDataToQueue>
 800862a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	3324      	adds	r3, #36	@ 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f805 	bl	8009648 <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d013      	beq.n	800866c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008644:	4b3f      	ldr	r3, [pc, #252]	@ (8008744 <xQueueGenericSend+0x200>)
 8008646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	e00a      	b.n	800866c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800865c:	4b39      	ldr	r3, [pc, #228]	@ (8008744 <xQueueGenericSend+0x200>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800866c:	f001 ff76 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8008670:	2301      	movs	r3, #1
 8008672:	e063      	b.n	800873c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800867a:	f001 ff6f 	bl	800a55c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800867e:	2300      	movs	r3, #0
 8008680:	e05c      	b.n	800873c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008684:	2b00      	cmp	r3, #0
 8008686:	d106      	bne.n	8008696 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f867 	bl	8009760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008696:	f001 ff61 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800869a:	f000 fda7 	bl	80091ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800869e:	f001 ff2b 	bl	800a4f8 <vPortEnterCritical>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ae:	d103      	bne.n	80086b8 <xQueueGenericSend+0x174>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086be:	b25b      	sxtb	r3, r3
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086c4:	d103      	bne.n	80086ce <xQueueGenericSend+0x18a>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ce:	f001 ff45 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d2:	1d3a      	adds	r2, r7, #4
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 f856 	bl	800978c <xTaskCheckForTimeOut>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d124      	bne.n	8008730 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086e8:	f000 faa6 	bl	8008c38 <prvIsQueueFull>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	3310      	adds	r3, #16
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 ff52 	bl	80095a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008702:	f000 fa31 	bl	8008b68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008706:	f000 fd7f 	bl	8009208 <xTaskResumeAll>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	f47f af7c 	bne.w	800860a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008712:	4b0c      	ldr	r3, [pc, #48]	@ (8008744 <xQueueGenericSend+0x200>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	e772      	b.n	800860a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008726:	f000 fa1f 	bl	8008b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800872a:	f000 fd6d 	bl	8009208 <xTaskResumeAll>
 800872e:	e76c      	b.n	800860a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008732:	f000 fa19 	bl	8008b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008736:	f000 fd67 	bl	8009208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800873a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800873c:	4618      	mov	r0, r3
 800873e:	3738      	adds	r7, #56	@ 0x38
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b090      	sub	sp, #64	@ 0x40
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSendFromISR+0x3e>
 800877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <xQueueGenericSendFromISR+0x42>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericSendFromISR+0x44>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d103      	bne.n	80087b6 <xQueueGenericSendFromISR+0x6e>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <xQueueGenericSendFromISR+0x72>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <xQueueGenericSendFromISR+0x74>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	623b      	str	r3, [r7, #32]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087d8:	f001 ff6e 	bl	800a6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087dc:	f3ef 8211 	mrs	r2, BASEPRI
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61fa      	str	r2, [r7, #28]
 80087f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <xQueueGenericSendFromISR+0xc2>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d12f      	bne.n	800886a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800880a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008818:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008820:	f000 f912 	bl	8008a48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008824:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800882c:	d112      	bne.n	8008854 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008832:	2b00      	cmp	r3, #0
 8008834:	d016      	beq.n	8008864 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008838:	3324      	adds	r3, #36	@ 0x24
 800883a:	4618      	mov	r0, r3
 800883c:	f000 ff04 	bl	8009648 <xTaskRemoveFromEventList>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00b      	beq.n	8008864 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e007      	b.n	8008864 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008854:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008858:	3301      	adds	r3, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	b25a      	sxtb	r2, r3
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008868:	e001      	b.n	800886e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800886e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008870:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008878:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800887a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800887c:	4618      	mov	r0, r3
 800887e:	3740      	adds	r7, #64	@ 0x40
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08c      	sub	sp, #48	@ 0x30
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008890:	2300      	movs	r3, #0
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <xQueueReceive+0x32>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	623b      	str	r3, [r7, #32]
}
 80088b0:	bf00      	nop
 80088b2:	bf00      	nop
 80088b4:	e7fd      	b.n	80088b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d103      	bne.n	80088c4 <xQueueReceive+0x40>
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <xQueueReceive+0x44>
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <xQueueReceive+0x46>
 80088c8:	2300      	movs	r3, #0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <xQueueReceive+0x62>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	61fb      	str	r3, [r7, #28]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088e6:	f001 f89d 	bl	8009a24 <xTaskGetSchedulerState>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <xQueueReceive+0x72>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xQueueReceive+0x76>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueReceive+0x78>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xQueueReceive+0x94>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	61bb      	str	r3, [r7, #24]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008918:	f001 fdee 	bl	800a4f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01f      	beq.n	8008968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892c:	f000 f8f6 	bl	8008b1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00f      	beq.n	8008960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	3310      	adds	r3, #16
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fe7f 	bl	8009648 <xTaskRemoveFromEventList>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008950:	4b3c      	ldr	r3, [pc, #240]	@ (8008a44 <xQueueReceive+0x1c0>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008960:	f001 fdfc 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8008964:	2301      	movs	r3, #1
 8008966:	e069      	b.n	8008a3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800896e:	f001 fdf5 	bl	800a55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008972:	2300      	movs	r3, #0
 8008974:	e062      	b.n	8008a3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800897c:	f107 0310 	add.w	r3, r7, #16
 8008980:	4618      	mov	r0, r3
 8008982:	f000 feed 	bl	8009760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800898a:	f001 fde7 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800898e:	f000 fc2d 	bl	80091ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008992:	f001 fdb1 	bl	800a4f8 <vPortEnterCritical>
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800899c:	b25b      	sxtb	r3, r3
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089a2:	d103      	bne.n	80089ac <xQueueReceive+0x128>
 80089a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b8:	d103      	bne.n	80089c2 <xQueueReceive+0x13e>
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089c2:	f001 fdcb 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089c6:	1d3a      	adds	r2, r7, #4
 80089c8:	f107 0310 	add.w	r3, r7, #16
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fedc 	bl	800978c <xTaskCheckForTimeOut>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d123      	bne.n	8008a22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089dc:	f000 f916 	bl	8008c0c <prvIsQueueEmpty>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d017      	beq.n	8008a16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	3324      	adds	r3, #36	@ 0x24
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fdd8 	bl	80095a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089f6:	f000 f8b7 	bl	8008b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089fa:	f000 fc05 	bl	8009208 <xTaskResumeAll>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d189      	bne.n	8008918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008a04:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <xQueueReceive+0x1c0>)
 8008a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	e780      	b.n	8008918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a18:	f000 f8a6 	bl	8008b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a1c:	f000 fbf4 	bl	8009208 <xTaskResumeAll>
 8008a20:	e77a      	b.n	8008918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a24:	f000 f8a0 	bl	8008b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a28:	f000 fbee 	bl	8009208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a2e:	f000 f8ed 	bl	8008c0c <prvIsQueueEmpty>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f43f af6f 	beq.w	8008918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3730      	adds	r7, #48	@ 0x30
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10d      	bne.n	8008a82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d14d      	bne.n	8008b0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fff4 	bl	8009a60 <xTaskPriorityDisinherit>
 8008a78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	609a      	str	r2, [r3, #8]
 8008a80:	e043      	b.n	8008b0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d119      	bne.n	8008abc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6858      	ldr	r0, [r3, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a90:	461a      	mov	r2, r3
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	f00f ffe5 	bl	8018a62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa0:	441a      	add	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d32b      	bcc.n	8008b0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	e026      	b.n	8008b0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68d8      	ldr	r0, [r3, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	f00f ffcb 	bl	8018a62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad4:	425b      	negs	r3, r3
 8008ad6:	441a      	add	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d207      	bcs.n	8008af8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af0:	425b      	negs	r3, r3
 8008af2:	441a      	add	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d105      	bne.n	8008b0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b12:	697b      	ldr	r3, [r7, #20]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d018      	beq.n	8008b60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d303      	bcc.n	8008b50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68d9      	ldr	r1, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f00f ff81 	bl	8018a62 <memcpy>
	}
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b70:	f001 fcc2 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b7c:	e011      	b.n	8008ba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d012      	beq.n	8008bac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3324      	adds	r3, #36	@ 0x24
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fd5c 	bl	8009648 <xTaskRemoveFromEventList>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b96:	f000 fe5d 	bl	8009854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dce9      	bgt.n	8008b7e <prvUnlockQueue+0x16>
 8008baa:	e000      	b.n	8008bae <prvUnlockQueue+0x46>
					break;
 8008bac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	22ff      	movs	r2, #255	@ 0xff
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008bb6:	f001 fcd1 	bl	800a55c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bba:	f001 fc9d 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bc6:	e011      	b.n	8008bec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d012      	beq.n	8008bf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3310      	adds	r3, #16
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fd37 	bl	8009648 <xTaskRemoveFromEventList>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008be0:	f000 fe38 	bl	8009854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dce9      	bgt.n	8008bc8 <prvUnlockQueue+0x60>
 8008bf4:	e000      	b.n	8008bf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	22ff      	movs	r2, #255	@ 0xff
 8008bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c00:	f001 fcac 	bl	800a55c <vPortExitCritical>
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c14:	f001 fc70 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c20:	2301      	movs	r3, #1
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e001      	b.n	8008c2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c2a:	f001 fc97 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c40:	f001 fc5a 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d102      	bne.n	8008c56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	e001      	b.n	8008c5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c5a:	f001 fc7f 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e014      	b.n	8008ca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c78:	4a0f      	ldr	r2, [pc, #60]	@ (8008cb8 <vQueueAddToRegistry+0x50>)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c84:	490c      	ldr	r1, [pc, #48]	@ (8008cb8 <vQueueAddToRegistry+0x50>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <vQueueAddToRegistry+0x50>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c9a:	e006      	b.n	8008caa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b07      	cmp	r3, #7
 8008ca6:	d9e7      	bls.n	8008c78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	200080bc 	.word	0x200080bc

08008cbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ccc:	f001 fc14 	bl	800a4f8 <vPortEnterCritical>
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cd6:	b25b      	sxtb	r3, r3
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cdc:	d103      	bne.n	8008ce6 <vQueueWaitForMessageRestricted+0x2a>
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cec:	b25b      	sxtb	r3, r3
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cf2:	d103      	bne.n	8008cfc <vQueueWaitForMessageRestricted+0x40>
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cfc:	f001 fc2e 	bl	800a55c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d106      	bne.n	8008d16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	3324      	adds	r3, #36	@ 0x24
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fc6d 	bl	80095f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d16:	6978      	ldr	r0, [r7, #20]
 8008d18:	f7ff ff26 	bl	8008b68 <prvUnlockQueue>
	}
 8008d1c:	bf00      	nop
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08e      	sub	sp, #56	@ 0x38
 8008d28:	af04      	add	r7, sp, #16
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10b      	bne.n	8008d50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	623b      	str	r3, [r7, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	e7fd      	b.n	8008d4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	61fb      	str	r3, [r7, #28]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d6e:	23a8      	movs	r3, #168	@ 0xa8
 8008d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2ba8      	cmp	r3, #168	@ 0xa8
 8008d76:	d00b      	beq.n	8008d90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	61bb      	str	r3, [r7, #24]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01e      	beq.n	8008dd6 <xTaskCreateStatic+0xb2>
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01b      	beq.n	8008dd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008da6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008db0:	2300      	movs	r3, #0
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	f107 0314 	add.w	r3, r7, #20
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f851 	bl	8008e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008dd0:	f000 f8f6 	bl	8008fc0 <prvAddNewTaskToReadyList>
 8008dd4:	e001      	b.n	8008dda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dda:	697b      	ldr	r3, [r7, #20]
	}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3728      	adds	r7, #40	@ 0x28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	@ 0x30
 8008de8:	af04      	add	r7, sp, #16
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fc9f 	bl	800a73c <pvPortMalloc>
 8008dfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00e      	beq.n	8008e24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e06:	20a8      	movs	r0, #168	@ 0xa8
 8008e08:	f001 fc98 	bl	800a73c <pvPortMalloc>
 8008e0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e1a:	e005      	b.n	8008e28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e1c:	6978      	ldr	r0, [r7, #20]
 8008e1e:	f001 fd5b 	bl	800a8d8 <vPortFree>
 8008e22:	e001      	b.n	8008e28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d017      	beq.n	8008e5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9303      	str	r3, [sp, #12]
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	9302      	str	r3, [sp, #8]
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f80f 	bl	8008e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e52:	69f8      	ldr	r0, [r7, #28]
 8008e54:	f000 f8b4 	bl	8008fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e002      	b.n	8008e64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e64:	69bb      	ldr	r3, [r7, #24]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	461a      	mov	r2, r3
 8008e88:	21a5      	movs	r1, #165	@ 0xa5
 8008e8a:	f00f fccb 	bl	8018824 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f023 0307 	bic.w	r3, r3, #7
 8008ea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	617b      	str	r3, [r7, #20]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01f      	beq.n	8008f10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
 8008ed4:	e012      	b.n	8008efc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	7819      	ldrb	r1, [r3, #0]
 8008ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3334      	adds	r3, #52	@ 0x34
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	2b0f      	cmp	r3, #15
 8008f00:	d9e9      	bls.n	8008ed6 <prvInitialiseNewTask+0x66>
 8008f02:	e000      	b.n	8008f06 <prvInitialiseNewTask+0x96>
			{
				break;
 8008f04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f0e:	e003      	b.n	8008f18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	2b37      	cmp	r3, #55	@ 0x37
 8008f1c:	d901      	bls.n	8008f22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f1e:	2337      	movs	r3, #55	@ 0x37
 8008f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	2200      	movs	r2, #0
 8008f32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff f965 	bl	8008208 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	3318      	adds	r3, #24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f960 	bl	8008208 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	3354      	adds	r3, #84	@ 0x54
 8008f72:	224c      	movs	r2, #76	@ 0x4c
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f00f fc54 	bl	8018824 <memset>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb4 <prvInitialiseNewTask+0x144>)
 8008f80:	659a      	str	r2, [r3, #88]	@ 0x58
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb8 <prvInitialiseNewTask+0x148>)
 8008f86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008fbc <prvInitialiseNewTask+0x14c>)
 8008f8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	68f9      	ldr	r1, [r7, #12]
 8008f92:	69b8      	ldr	r0, [r7, #24]
 8008f94:	f001 f982 	bl	800a29c <pxPortInitialiseStack>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20010ed4 	.word	0x20010ed4
 8008fb8:	20010f3c 	.word	0x20010f3c
 8008fbc:	20010fa4 	.word	0x20010fa4

08008fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fc8:	f001 fa96 	bl	800a4f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fde:	4a2a      	ldr	r2, [pc, #168]	@ (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fe4:	4b27      	ldr	r3, [pc, #156]	@ (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d110      	bne.n	800900e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fec:	f000 fc56 	bl	800989c <prvInitialiseTaskLists>
 8008ff0:	e00d      	b.n	800900e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ff2:	4b26      	ldr	r3, [pc, #152]	@ (800908c <prvAddNewTaskToReadyList+0xcc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d109      	bne.n	800900e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ffa:	4b23      	ldr	r3, [pc, #140]	@ (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009004:	429a      	cmp	r2, r3
 8009006:	d802      	bhi.n	800900e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009008:	4a1f      	ldr	r2, [pc, #124]	@ (8009088 <prvAddNewTaskToReadyList+0xc8>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800900e:	4b20      	ldr	r3, [pc, #128]	@ (8009090 <prvAddNewTaskToReadyList+0xd0>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a1e      	ldr	r2, [pc, #120]	@ (8009090 <prvAddNewTaskToReadyList+0xd0>)
 8009016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009018:	4b1d      	ldr	r3, [pc, #116]	@ (8009090 <prvAddNewTaskToReadyList+0xd0>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009024:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <prvAddNewTaskToReadyList+0xd4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d903      	bls.n	8009034 <prvAddNewTaskToReadyList+0x74>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009030:	4a18      	ldr	r2, [pc, #96]	@ (8009094 <prvAddNewTaskToReadyList+0xd4>)
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4a15      	ldr	r2, [pc, #84]	@ (8009098 <prvAddNewTaskToReadyList+0xd8>)
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f7ff f8e9 	bl	8008222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009050:	f001 fa84 	bl	800a55c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009054:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <prvAddNewTaskToReadyList+0xcc>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00e      	beq.n	800907a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800905c:	4b0a      	ldr	r3, [pc, #40]	@ (8009088 <prvAddNewTaskToReadyList+0xc8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	429a      	cmp	r2, r3
 8009068:	d207      	bcs.n	800907a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800906a:	4b0c      	ldr	r3, [pc, #48]	@ (800909c <prvAddNewTaskToReadyList+0xdc>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	200085d0 	.word	0x200085d0
 8009088:	200080fc 	.word	0x200080fc
 800908c:	200085dc 	.word	0x200085dc
 8009090:	200085ec 	.word	0x200085ec
 8009094:	200085d8 	.word	0x200085d8
 8009098:	20008100 	.word	0x20008100
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d018      	beq.n	80090e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <vTaskDelay+0x64>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <vTaskDelay+0x32>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60bb      	str	r3, [r7, #8]
}
 80090cc:	bf00      	nop
 80090ce:	bf00      	nop
 80090d0:	e7fd      	b.n	80090ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090d2:	f000 f88b 	bl	80091ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090d6:	2100      	movs	r1, #0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fd31 	bl	8009b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090de:	f000 f893 	bl	8009208 <xTaskResumeAll>
 80090e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090ea:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <vTaskDelay+0x68>)
 80090ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200085f8 	.word	0x200085f8
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	@ 0x28
 8009110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800911a:	463a      	mov	r2, r7
 800911c:	1d39      	adds	r1, r7, #4
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff f81c 	bl	8008160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	9202      	str	r2, [sp, #8]
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	2300      	movs	r3, #0
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	2300      	movs	r3, #0
 8009138:	460a      	mov	r2, r1
 800913a:	4924      	ldr	r1, [pc, #144]	@ (80091cc <vTaskStartScheduler+0xc0>)
 800913c:	4824      	ldr	r0, [pc, #144]	@ (80091d0 <vTaskStartScheduler+0xc4>)
 800913e:	f7ff fdf1 	bl	8008d24 <xTaskCreateStatic>
 8009142:	4603      	mov	r3, r0
 8009144:	4a23      	ldr	r2, [pc, #140]	@ (80091d4 <vTaskStartScheduler+0xc8>)
 8009146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009148:	4b22      	ldr	r3, [pc, #136]	@ (80091d4 <vTaskStartScheduler+0xc8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e001      	b.n	800915a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d102      	bne.n	8009166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009160:	f000 fd42 	bl	8009be8 <xTimerCreateTimerTask>
 8009164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d11b      	bne.n	80091a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	613b      	str	r3, [r7, #16]
}
 800917e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009180:	4b15      	ldr	r3, [pc, #84]	@ (80091d8 <vTaskStartScheduler+0xcc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3354      	adds	r3, #84	@ 0x54
 8009186:	4a15      	ldr	r2, [pc, #84]	@ (80091dc <vTaskStartScheduler+0xd0>)
 8009188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800918a:	4b15      	ldr	r3, [pc, #84]	@ (80091e0 <vTaskStartScheduler+0xd4>)
 800918c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009192:	4b14      	ldr	r3, [pc, #80]	@ (80091e4 <vTaskStartScheduler+0xd8>)
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009198:	4b13      	ldr	r3, [pc, #76]	@ (80091e8 <vTaskStartScheduler+0xdc>)
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800919e:	f001 f907 	bl	800a3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091a2:	e00f      	b.n	80091c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091aa:	d10b      	bne.n	80091c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <vTaskStartScheduler+0xb4>
}
 80091c4:	bf00      	nop
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	0801ad24 	.word	0x0801ad24
 80091d0:	0800986d 	.word	0x0800986d
 80091d4:	200085f4 	.word	0x200085f4
 80091d8:	200080fc 	.word	0x200080fc
 80091dc:	20000204 	.word	0x20000204
 80091e0:	200085f0 	.word	0x200085f0
 80091e4:	200085dc 	.word	0x200085dc
 80091e8:	200085d4 	.word	0x200085d4

080091ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091f0:	4b04      	ldr	r3, [pc, #16]	@ (8009204 <vTaskSuspendAll+0x18>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a03      	ldr	r2, [pc, #12]	@ (8009204 <vTaskSuspendAll+0x18>)
 80091f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	200085f8 	.word	0x200085f8

08009208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009216:	4b42      	ldr	r3, [pc, #264]	@ (8009320 <xTaskResumeAll+0x118>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10b      	bne.n	8009236 <xTaskResumeAll+0x2e>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	603b      	str	r3, [r7, #0]
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	e7fd      	b.n	8009232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009236:	f001 f95f 	bl	800a4f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800923a:	4b39      	ldr	r3, [pc, #228]	@ (8009320 <xTaskResumeAll+0x118>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4a37      	ldr	r2, [pc, #220]	@ (8009320 <xTaskResumeAll+0x118>)
 8009242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009244:	4b36      	ldr	r3, [pc, #216]	@ (8009320 <xTaskResumeAll+0x118>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d162      	bne.n	8009312 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800924c:	4b35      	ldr	r3, [pc, #212]	@ (8009324 <xTaskResumeAll+0x11c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d05e      	beq.n	8009312 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009254:	e02f      	b.n	80092b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009256:	4b34      	ldr	r3, [pc, #208]	@ (8009328 <xTaskResumeAll+0x120>)
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3318      	adds	r3, #24
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f83a 	bl	80082dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3304      	adds	r3, #4
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff f835 	bl	80082dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4b2d      	ldr	r3, [pc, #180]	@ (800932c <xTaskResumeAll+0x124>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d903      	bls.n	8009286 <xTaskResumeAll+0x7e>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <xTaskResumeAll+0x124>)
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4a27      	ldr	r2, [pc, #156]	@ (8009330 <xTaskResumeAll+0x128>)
 8009294:	441a      	add	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3304      	adds	r3, #4
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fe ffc0 	bl	8008222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a6:	4b23      	ldr	r3, [pc, #140]	@ (8009334 <xTaskResumeAll+0x12c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d302      	bcc.n	80092b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80092b0:	4b21      	ldr	r3, [pc, #132]	@ (8009338 <xTaskResumeAll+0x130>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009328 <xTaskResumeAll+0x120>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1cb      	bne.n	8009256 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092c4:	f000 fb8e 	bl	80099e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092c8:	4b1c      	ldr	r3, [pc, #112]	@ (800933c <xTaskResumeAll+0x134>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d010      	beq.n	80092f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092d4:	f000 f846 	bl	8009364 <xTaskIncrementTick>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80092de:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <xTaskResumeAll+0x130>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f1      	bne.n	80092d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80092f0:	4b12      	ldr	r3, [pc, #72]	@ (800933c <xTaskResumeAll+0x134>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092f6:	4b10      	ldr	r3, [pc, #64]	@ (8009338 <xTaskResumeAll+0x130>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092fe:	2301      	movs	r3, #1
 8009300:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009302:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <xTaskResumeAll+0x138>)
 8009304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009312:	f001 f923 	bl	800a55c <vPortExitCritical>

	return xAlreadyYielded;
 8009316:	68bb      	ldr	r3, [r7, #8]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	200085f8 	.word	0x200085f8
 8009324:	200085d0 	.word	0x200085d0
 8009328:	20008590 	.word	0x20008590
 800932c:	200085d8 	.word	0x200085d8
 8009330:	20008100 	.word	0x20008100
 8009334:	200080fc 	.word	0x200080fc
 8009338:	200085e4 	.word	0x200085e4
 800933c:	200085e0 	.word	0x200085e0
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800934a:	4b05      	ldr	r3, [pc, #20]	@ (8009360 <xTaskGetTickCount+0x1c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009350:	687b      	ldr	r3, [r7, #4]
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	200085d4 	.word	0x200085d4

08009364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936e:	4b4f      	ldr	r3, [pc, #316]	@ (80094ac <xTaskIncrementTick+0x148>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f040 8090 	bne.w	8009498 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009378:	4b4d      	ldr	r3, [pc, #308]	@ (80094b0 <xTaskIncrementTick+0x14c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009380:	4a4b      	ldr	r2, [pc, #300]	@ (80094b0 <xTaskIncrementTick+0x14c>)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d121      	bne.n	80093d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800938c:	4b49      	ldr	r3, [pc, #292]	@ (80094b4 <xTaskIncrementTick+0x150>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	603b      	str	r3, [r7, #0]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xTaskIncrementTick+0x46>
 80093ae:	4b41      	ldr	r3, [pc, #260]	@ (80094b4 <xTaskIncrementTick+0x150>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	4b40      	ldr	r3, [pc, #256]	@ (80094b8 <xTaskIncrementTick+0x154>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a3e      	ldr	r2, [pc, #248]	@ (80094b4 <xTaskIncrementTick+0x150>)
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	4a3e      	ldr	r2, [pc, #248]	@ (80094b8 <xTaskIncrementTick+0x154>)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	4b3e      	ldr	r3, [pc, #248]	@ (80094bc <xTaskIncrementTick+0x158>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3301      	adds	r3, #1
 80093c8:	4a3c      	ldr	r2, [pc, #240]	@ (80094bc <xTaskIncrementTick+0x158>)
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	f000 fb0a 	bl	80099e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093d0:	4b3b      	ldr	r3, [pc, #236]	@ (80094c0 <xTaskIncrementTick+0x15c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d349      	bcc.n	800946e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093da:	4b36      	ldr	r3, [pc, #216]	@ (80094b4 <xTaskIncrementTick+0x150>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e4:	4b36      	ldr	r3, [pc, #216]	@ (80094c0 <xTaskIncrementTick+0x15c>)
 80093e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093ea:	601a      	str	r2, [r3, #0]
					break;
 80093ec:	e03f      	b.n	800946e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ee:	4b31      	ldr	r3, [pc, #196]	@ (80094b4 <xTaskIncrementTick+0x150>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d203      	bcs.n	800940e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009406:	4a2e      	ldr	r2, [pc, #184]	@ (80094c0 <xTaskIncrementTick+0x15c>)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800940c:	e02f      	b.n	800946e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	3304      	adds	r3, #4
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe ff62 	bl	80082dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3318      	adds	r3, #24
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe ff59 	bl	80082dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942e:	4b25      	ldr	r3, [pc, #148]	@ (80094c4 <xTaskIncrementTick+0x160>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d903      	bls.n	800943e <xTaskIncrementTick+0xda>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943a:	4a22      	ldr	r2, [pc, #136]	@ (80094c4 <xTaskIncrementTick+0x160>)
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4a1f      	ldr	r2, [pc, #124]	@ (80094c8 <xTaskIncrementTick+0x164>)
 800944c:	441a      	add	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	3304      	adds	r3, #4
 8009452:	4619      	mov	r1, r3
 8009454:	4610      	mov	r0, r2
 8009456:	f7fe fee4 	bl	8008222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945e:	4b1b      	ldr	r3, [pc, #108]	@ (80094cc <xTaskIncrementTick+0x168>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	429a      	cmp	r2, r3
 8009466:	d3b8      	bcc.n	80093da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009468:	2301      	movs	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800946c:	e7b5      	b.n	80093da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800946e:	4b17      	ldr	r3, [pc, #92]	@ (80094cc <xTaskIncrementTick+0x168>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009474:	4914      	ldr	r1, [pc, #80]	@ (80094c8 <xTaskIncrementTick+0x164>)
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d901      	bls.n	800948a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009486:	2301      	movs	r3, #1
 8009488:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800948a:	4b11      	ldr	r3, [pc, #68]	@ (80094d0 <xTaskIncrementTick+0x16c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e004      	b.n	80094a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009498:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <xTaskIncrementTick+0x170>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	4a0d      	ldr	r2, [pc, #52]	@ (80094d4 <xTaskIncrementTick+0x170>)
 80094a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	200085f8 	.word	0x200085f8
 80094b0:	200085d4 	.word	0x200085d4
 80094b4:	20008588 	.word	0x20008588
 80094b8:	2000858c 	.word	0x2000858c
 80094bc:	200085e8 	.word	0x200085e8
 80094c0:	200085f0 	.word	0x200085f0
 80094c4:	200085d8 	.word	0x200085d8
 80094c8:	20008100 	.word	0x20008100
 80094cc:	200080fc 	.word	0x200080fc
 80094d0:	200085e4 	.word	0x200085e4
 80094d4:	200085e0 	.word	0x200085e0

080094d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094de:	4b2b      	ldr	r3, [pc, #172]	@ (800958c <vTaskSwitchContext+0xb4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009590 <vTaskSwitchContext+0xb8>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094ec:	e047      	b.n	800957e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80094ee:	4b28      	ldr	r3, [pc, #160]	@ (8009590 <vTaskSwitchContext+0xb8>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f4:	4b27      	ldr	r3, [pc, #156]	@ (8009594 <vTaskSwitchContext+0xbc>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	e011      	b.n	8009520 <vTaskSwitchContext+0x48>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10b      	bne.n	800951a <vTaskSwitchContext+0x42>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	607b      	str	r3, [r7, #4]
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	e7fd      	b.n	8009516 <vTaskSwitchContext+0x3e>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b01      	subs	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	491d      	ldr	r1, [pc, #116]	@ (8009598 <vTaskSwitchContext+0xc0>)
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0e3      	beq.n	80094fc <vTaskSwitchContext+0x24>
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4a16      	ldr	r2, [pc, #88]	@ (8009598 <vTaskSwitchContext+0xc0>)
 8009540:	4413      	add	r3, r2
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	3308      	adds	r3, #8
 8009556:	429a      	cmp	r2, r3
 8009558:	d104      	bne.n	8009564 <vTaskSwitchContext+0x8c>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	4a0c      	ldr	r2, [pc, #48]	@ (800959c <vTaskSwitchContext+0xc4>)
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	4a09      	ldr	r2, [pc, #36]	@ (8009594 <vTaskSwitchContext+0xbc>)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009574:	4b09      	ldr	r3, [pc, #36]	@ (800959c <vTaskSwitchContext+0xc4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3354      	adds	r3, #84	@ 0x54
 800957a:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <vTaskSwitchContext+0xc8>)
 800957c:	6013      	str	r3, [r2, #0]
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	200085f8 	.word	0x200085f8
 8009590:	200085e4 	.word	0x200085e4
 8009594:	200085d8 	.word	0x200085d8
 8009598:	20008100 	.word	0x20008100
 800959c:	200080fc 	.word	0x200080fc
 80095a0:	20000204 	.word	0x20000204

080095a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <vTaskPlaceOnEventList+0x48>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3318      	adds	r3, #24
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7fe fe48 	bl	800826a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095da:	2101      	movs	r1, #1
 80095dc:	6838      	ldr	r0, [r7, #0]
 80095de:	f000 faaf 	bl	8009b40 <prvAddCurrentTaskToDelayedList>
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200080fc 	.word	0x200080fc

080095f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10b      	bne.n	800961a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	617b      	str	r3, [r7, #20]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800961a:	4b0a      	ldr	r3, [pc, #40]	@ (8009644 <vTaskPlaceOnEventListRestricted+0x54>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3318      	adds	r3, #24
 8009620:	4619      	mov	r1, r3
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7fe fdfd 	bl	8008222 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800962e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009632:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	68b8      	ldr	r0, [r7, #8]
 8009638:	f000 fa82 	bl	8009b40 <prvAddCurrentTaskToDelayedList>
	}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	200080fc 	.word	0x200080fc

08009648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10b      	bne.n	8009676 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	60fb      	str	r3, [r7, #12]
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	e7fd      	b.n	8009672 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	3318      	adds	r3, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fe2e 	bl	80082dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009680:	4b1d      	ldr	r3, [pc, #116]	@ (80096f8 <xTaskRemoveFromEventList+0xb0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d11d      	bne.n	80096c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	3304      	adds	r3, #4
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fe25 	bl	80082dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009696:	4b19      	ldr	r3, [pc, #100]	@ (80096fc <xTaskRemoveFromEventList+0xb4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d903      	bls.n	80096a6 <xTaskRemoveFromEventList+0x5e>
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	4a16      	ldr	r2, [pc, #88]	@ (80096fc <xTaskRemoveFromEventList+0xb4>)
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4a13      	ldr	r2, [pc, #76]	@ (8009700 <xTaskRemoveFromEventList+0xb8>)
 80096b4:	441a      	add	r2, r3
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	3304      	adds	r3, #4
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f7fe fdb0 	bl	8008222 <vListInsertEnd>
 80096c2:	e005      	b.n	80096d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	3318      	adds	r3, #24
 80096c8:	4619      	mov	r1, r3
 80096ca:	480e      	ldr	r0, [pc, #56]	@ (8009704 <xTaskRemoveFromEventList+0xbc>)
 80096cc:	f7fe fda9 	bl	8008222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <xTaskRemoveFromEventList+0xc0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	429a      	cmp	r2, r3
 80096dc:	d905      	bls.n	80096ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096de:	2301      	movs	r3, #1
 80096e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096e2:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <xTaskRemoveFromEventList+0xc4>)
 80096e4:	2201      	movs	r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	e001      	b.n	80096ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096ee:	697b      	ldr	r3, [r7, #20]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200085f8 	.word	0x200085f8
 80096fc:	200085d8 	.word	0x200085d8
 8009700:	20008100 	.word	0x20008100
 8009704:	20008590 	.word	0x20008590
 8009708:	200080fc 	.word	0x200080fc
 800970c:	200085e4 	.word	0x200085e4

08009710 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60fb      	str	r3, [r7, #12]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009736:	f000 fedf 	bl	800a4f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800973a:	4b07      	ldr	r3, [pc, #28]	@ (8009758 <vTaskSetTimeOutState+0x48>)
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009742:	4b06      	ldr	r3, [pc, #24]	@ (800975c <vTaskSetTimeOutState+0x4c>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800974a:	f000 ff07 	bl	800a55c <vPortExitCritical>
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200085e8 	.word	0x200085e8
 800975c:	200085d4 	.word	0x200085d4

08009760 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009768:	4b06      	ldr	r3, [pc, #24]	@ (8009784 <vTaskInternalSetTimeOutState+0x24>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009770:	4b05      	ldr	r3, [pc, #20]	@ (8009788 <vTaskInternalSetTimeOutState+0x28>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	605a      	str	r2, [r3, #4]
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	200085e8 	.word	0x200085e8
 8009788:	200085d4 	.word	0x200085d4

0800978c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10b      	bne.n	80097b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	613b      	str	r3, [r7, #16]
}
 80097ae:	bf00      	nop
 80097b0:	bf00      	nop
 80097b2:	e7fd      	b.n	80097b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	60fb      	str	r3, [r7, #12]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80097d2:	f000 fe91 	bl	800a4f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097d6:	4b1d      	ldr	r3, [pc, #116]	@ (800984c <xTaskCheckForTimeOut+0xc0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ee:	d102      	bne.n	80097f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e023      	b.n	800983e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b15      	ldr	r3, [pc, #84]	@ (8009850 <xTaskCheckForTimeOut+0xc4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d007      	beq.n	8009812 <xTaskCheckForTimeOut+0x86>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	429a      	cmp	r2, r3
 800980a:	d302      	bcc.n	8009812 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800980c:	2301      	movs	r3, #1
 800980e:	61fb      	str	r3, [r7, #28]
 8009810:	e015      	b.n	800983e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	429a      	cmp	r2, r3
 800981a:	d20b      	bcs.n	8009834 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff99 	bl	8009760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800982e:	2300      	movs	r3, #0
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	e004      	b.n	800983e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800983a:	2301      	movs	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800983e:	f000 fe8d 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8009842:	69fb      	ldr	r3, [r7, #28]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	200085d4 	.word	0x200085d4
 8009850:	200085e8 	.word	0x200085e8

08009854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009858:	4b03      	ldr	r3, [pc, #12]	@ (8009868 <vTaskMissedYield+0x14>)
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	bf00      	nop
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	200085e4 	.word	0x200085e4

0800986c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009874:	f000 f852 	bl	800991c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <prvIdleTask+0x28>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d9f9      	bls.n	8009874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009880:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <prvIdleTask+0x2c>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009890:	e7f0      	b.n	8009874 <prvIdleTask+0x8>
 8009892:	bf00      	nop
 8009894:	20008100 	.word	0x20008100
 8009898:	e000ed04 	.word	0xe000ed04

0800989c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	e00c      	b.n	80098c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4a12      	ldr	r2, [pc, #72]	@ (80098fc <prvInitialiseTaskLists+0x60>)
 80098b4:	4413      	add	r3, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fc86 	bl	80081c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3301      	adds	r3, #1
 80098c0:	607b      	str	r3, [r7, #4]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b37      	cmp	r3, #55	@ 0x37
 80098c6:	d9ef      	bls.n	80098a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098c8:	480d      	ldr	r0, [pc, #52]	@ (8009900 <prvInitialiseTaskLists+0x64>)
 80098ca:	f7fe fc7d 	bl	80081c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098ce:	480d      	ldr	r0, [pc, #52]	@ (8009904 <prvInitialiseTaskLists+0x68>)
 80098d0:	f7fe fc7a 	bl	80081c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098d4:	480c      	ldr	r0, [pc, #48]	@ (8009908 <prvInitialiseTaskLists+0x6c>)
 80098d6:	f7fe fc77 	bl	80081c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098da:	480c      	ldr	r0, [pc, #48]	@ (800990c <prvInitialiseTaskLists+0x70>)
 80098dc:	f7fe fc74 	bl	80081c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098e0:	480b      	ldr	r0, [pc, #44]	@ (8009910 <prvInitialiseTaskLists+0x74>)
 80098e2:	f7fe fc71 	bl	80081c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <prvInitialiseTaskLists+0x78>)
 80098e8:	4a05      	ldr	r2, [pc, #20]	@ (8009900 <prvInitialiseTaskLists+0x64>)
 80098ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <prvInitialiseTaskLists+0x7c>)
 80098ee:	4a05      	ldr	r2, [pc, #20]	@ (8009904 <prvInitialiseTaskLists+0x68>)
 80098f0:	601a      	str	r2, [r3, #0]
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20008100 	.word	0x20008100
 8009900:	20008560 	.word	0x20008560
 8009904:	20008574 	.word	0x20008574
 8009908:	20008590 	.word	0x20008590
 800990c:	200085a4 	.word	0x200085a4
 8009910:	200085bc 	.word	0x200085bc
 8009914:	20008588 	.word	0x20008588
 8009918:	2000858c 	.word	0x2000858c

0800991c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009922:	e019      	b.n	8009958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009924:	f000 fde8 	bl	800a4f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009928:	4b10      	ldr	r3, [pc, #64]	@ (800996c <prvCheckTasksWaitingTermination+0x50>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fcd1 	bl	80082dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800993a:	4b0d      	ldr	r3, [pc, #52]	@ (8009970 <prvCheckTasksWaitingTermination+0x54>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3b01      	subs	r3, #1
 8009940:	4a0b      	ldr	r2, [pc, #44]	@ (8009970 <prvCheckTasksWaitingTermination+0x54>)
 8009942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009944:	4b0b      	ldr	r3, [pc, #44]	@ (8009974 <prvCheckTasksWaitingTermination+0x58>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3b01      	subs	r3, #1
 800994a:	4a0a      	ldr	r2, [pc, #40]	@ (8009974 <prvCheckTasksWaitingTermination+0x58>)
 800994c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800994e:	f000 fe05 	bl	800a55c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f810 	bl	8009978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009958:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <prvCheckTasksWaitingTermination+0x58>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e1      	bne.n	8009924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200085a4 	.word	0x200085a4
 8009970:	200085d0 	.word	0x200085d0
 8009974:	200085b8 	.word	0x200085b8

08009978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3354      	adds	r3, #84	@ 0x54
 8009984:	4618      	mov	r0, r3
 8009986:	f00e ff9b 	bl	80188c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009990:	2b00      	cmp	r3, #0
 8009992:	d108      	bne.n	80099a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	4618      	mov	r0, r3
 800999a:	f000 ff9d 	bl	800a8d8 <vPortFree>
				vPortFree( pxTCB );
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 ff9a 	bl	800a8d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099a4:	e019      	b.n	80099da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d103      	bne.n	80099b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 ff91 	bl	800a8d8 <vPortFree>
	}
 80099b6:	e010      	b.n	80099da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d00b      	beq.n	80099da <prvDeleteTCB+0x62>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	60fb      	str	r3, [r7, #12]
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	e7fd      	b.n	80099d6 <prvDeleteTCB+0x5e>
	}
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ea:	4b0c      	ldr	r3, [pc, #48]	@ (8009a1c <prvResetNextTaskUnblockTime+0x38>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a20 <prvResetNextTaskUnblockTime+0x3c>)
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099fc:	e008      	b.n	8009a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099fe:	4b07      	ldr	r3, [pc, #28]	@ (8009a1c <prvResetNextTaskUnblockTime+0x38>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	4a04      	ldr	r2, [pc, #16]	@ (8009a20 <prvResetNextTaskUnblockTime+0x3c>)
 8009a0e:	6013      	str	r3, [r2, #0]
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20008588 	.word	0x20008588
 8009a20:	200085f0 	.word	0x200085f0

08009a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a58 <xTaskGetSchedulerState+0x34>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a32:	2301      	movs	r3, #1
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	e008      	b.n	8009a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a38:	4b08      	ldr	r3, [pc, #32]	@ (8009a5c <xTaskGetSchedulerState+0x38>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a40:	2302      	movs	r3, #2
 8009a42:	607b      	str	r3, [r7, #4]
 8009a44:	e001      	b.n	8009a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a46:	2300      	movs	r3, #0
 8009a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a4a:	687b      	ldr	r3, [r7, #4]
	}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	200085dc 	.word	0x200085dc
 8009a5c:	200085f8 	.word	0x200085f8

08009a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d058      	beq.n	8009b28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a76:	4b2f      	ldr	r3, [pc, #188]	@ (8009b34 <xTaskPriorityDisinherit+0xd4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d00b      	beq.n	8009a98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60bb      	str	r3, [r7, #8]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	1e5a      	subs	r2, r3, #1
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d02c      	beq.n	8009b28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d128      	bne.n	8009b28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fbfe 	bl	80082dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b38 <xTaskPriorityDisinherit+0xd8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d903      	bls.n	8009b08 <xTaskPriorityDisinherit+0xa8>
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b04:	4a0c      	ldr	r2, [pc, #48]	@ (8009b38 <xTaskPriorityDisinherit+0xd8>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4a09      	ldr	r2, [pc, #36]	@ (8009b3c <xTaskPriorityDisinherit+0xdc>)
 8009b16:	441a      	add	r2, r3
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fe fb7f 	bl	8008222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b24:	2301      	movs	r3, #1
 8009b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b28:	697b      	ldr	r3, [r7, #20]
	}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200080fc 	.word	0x200080fc
 8009b38:	200085d8 	.word	0x200085d8
 8009b3c:	20008100 	.word	0x20008100

08009b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b4a:	4b21      	ldr	r3, [pc, #132]	@ (8009bd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b50:	4b20      	ldr	r3, [pc, #128]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fbc0 	bl	80082dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b62:	d10a      	bne.n	8009b7a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4819      	ldr	r0, [pc, #100]	@ (8009bd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b74:	f7fe fb55 	bl	8008222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b78:	e026      	b.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4413      	add	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b82:	4b14      	ldr	r3, [pc, #80]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d209      	bcs.n	8009ba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b92:	4b12      	ldr	r3, [pc, #72]	@ (8009bdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7fe fb63 	bl	800826a <vListInsert>
}
 8009ba4:	e010      	b.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7fe fb59 	bl	800826a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d202      	bcs.n	8009bc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bc2:	4a08      	ldr	r2, [pc, #32]	@ (8009be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6013      	str	r3, [r2, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	200085d4 	.word	0x200085d4
 8009bd4:	200080fc 	.word	0x200080fc
 8009bd8:	200085bc 	.word	0x200085bc
 8009bdc:	2000858c 	.word	0x2000858c
 8009be0:	20008588 	.word	0x20008588
 8009be4:	200085f0 	.word	0x200085f0

08009be8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	@ 0x28
 8009bec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bf2:	f000 fb13 	bl	800a21c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c6c <xTimerCreateTimerTask+0x84>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d021      	beq.n	8009c42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c06:	1d3a      	adds	r2, r7, #4
 8009c08:	f107 0108 	add.w	r1, r7, #8
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fabf 	bl	8008194 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	9202      	str	r2, [sp, #8]
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	2302      	movs	r3, #2
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	460a      	mov	r2, r1
 8009c28:	4911      	ldr	r1, [pc, #68]	@ (8009c70 <xTimerCreateTimerTask+0x88>)
 8009c2a:	4812      	ldr	r0, [pc, #72]	@ (8009c74 <xTimerCreateTimerTask+0x8c>)
 8009c2c:	f7ff f87a 	bl	8008d24 <xTaskCreateStatic>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4a11      	ldr	r2, [pc, #68]	@ (8009c78 <xTimerCreateTimerTask+0x90>)
 8009c34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <xTimerCreateTimerTask+0x90>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10b      	bne.n	8009c60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	613b      	str	r3, [r7, #16]
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	e7fd      	b.n	8009c5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c60:	697b      	ldr	r3, [r7, #20]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000862c 	.word	0x2000862c
 8009c70:	0801ad2c 	.word	0x0801ad2c
 8009c74:	08009db5 	.word	0x08009db5
 8009c78:	20008630 	.word	0x20008630

08009c7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08a      	sub	sp, #40	@ 0x28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <xTimerGenericCommand+0x30>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	623b      	str	r3, [r7, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cac:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <xTimerGenericCommand+0x98>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d02a      	beq.n	8009d0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	dc18      	bgt.n	8009cf8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cc6:	f7ff fead 	bl	8009a24 <xTaskGetSchedulerState>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d109      	bne.n	8009ce4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cd0:	4b10      	ldr	r3, [pc, #64]	@ (8009d14 <xTimerGenericCommand+0x98>)
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	f107 0110 	add.w	r1, r7, #16
 8009cd8:	2300      	movs	r3, #0
 8009cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cdc:	f7fe fc32 	bl	8008544 <xQueueGenericSend>
 8009ce0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ce2:	e012      	b.n	8009d0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <xTimerGenericCommand+0x98>)
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	f107 0110 	add.w	r1, r7, #16
 8009cec:	2300      	movs	r3, #0
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f7fe fc28 	bl	8008544 <xQueueGenericSend>
 8009cf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009cf6:	e008      	b.n	8009d0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cf8:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <xTimerGenericCommand+0x98>)
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	f107 0110 	add.w	r1, r7, #16
 8009d00:	2300      	movs	r3, #0
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	f7fe fd20 	bl	8008748 <xQueueGenericSendFromISR>
 8009d08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3728      	adds	r7, #40	@ 0x28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	2000862c 	.word	0x2000862c

08009d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d22:	4b23      	ldr	r3, [pc, #140]	@ (8009db0 <prvProcessExpiredTimer+0x98>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fad3 	bl	80082dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d023      	beq.n	8009d8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	18d1      	adds	r1, r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	6978      	ldr	r0, [r7, #20]
 8009d52:	f000 f8d5 	bl	8009f00 <prvInsertTimerInActiveList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d020      	beq.n	8009d9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	2300      	movs	r3, #0
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	2100      	movs	r1, #0
 8009d66:	6978      	ldr	r0, [r7, #20]
 8009d68:	f7ff ff88 	bl	8009c7c <xTimerGenericCommand>
 8009d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d114      	bne.n	8009d9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	60fb      	str	r3, [r7, #12]
}
 8009d86:	bf00      	nop
 8009d88:	bf00      	nop
 8009d8a:	e7fd      	b.n	8009d88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d92:	f023 0301 	bic.w	r3, r3, #1
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	6978      	ldr	r0, [r7, #20]
 8009da4:	4798      	blx	r3
}
 8009da6:	bf00      	nop
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20008624 	.word	0x20008624

08009db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f859 	bl	8009e78 <prvGetNextExpireTime>
 8009dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 f805 	bl	8009ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dd2:	f000 f8d7 	bl	8009f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dd6:	bf00      	nop
 8009dd8:	e7f0      	b.n	8009dbc <prvTimerTask+0x8>
	...

08009ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009de6:	f7ff fa01 	bl	80091ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f866 	bl	8009ec0 <prvSampleTimeNow>
 8009df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d130      	bne.n	8009e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <prvProcessTimerOrBlockTask+0x3c>
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d806      	bhi.n	8009e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e0a:	f7ff f9fd 	bl	8009208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff ff81 	bl	8009d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e16:	e024      	b.n	8009e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e1e:	4b13      	ldr	r3, [pc, #76]	@ (8009e6c <prvProcessTimerOrBlockTask+0x90>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <prvProcessTimerOrBlockTask+0x50>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <prvProcessTimerOrBlockTask+0x52>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e30:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <prvProcessTimerOrBlockTask+0x94>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f7fe ff3d 	bl	8008cbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e42:	f7ff f9e1 	bl	8009208 <xTaskResumeAll>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e4c:	4b09      	ldr	r3, [pc, #36]	@ (8009e74 <prvProcessTimerOrBlockTask+0x98>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
}
 8009e5c:	e001      	b.n	8009e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e5e:	f7ff f9d3 	bl	8009208 <xTaskResumeAll>
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20008628 	.word	0x20008628
 8009e70:	2000862c 	.word	0x2000862c
 8009e74:	e000ed04 	.word	0xe000ed04

08009e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e80:	4b0e      	ldr	r3, [pc, #56]	@ (8009ebc <prvGetNextExpireTime+0x44>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <prvGetNextExpireTime+0x16>
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	e000      	b.n	8009e90 <prvGetNextExpireTime+0x18>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e9c:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <prvGetNextExpireTime+0x44>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	e001      	b.n	8009eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009eac:	68fb      	ldr	r3, [r7, #12]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20008624 	.word	0x20008624

08009ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ec8:	f7ff fa3c 	bl	8009344 <xTaskGetTickCount>
 8009ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ece:	4b0b      	ldr	r3, [pc, #44]	@ (8009efc <prvSampleTimeNow+0x3c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d205      	bcs.n	8009ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ed8:	f000 f93a 	bl	800a150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009eea:	4a04      	ldr	r2, [pc, #16]	@ (8009efc <prvSampleTimeNow+0x3c>)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20008634 	.word	0x20008634

08009f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d812      	bhi.n	8009f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	1ad2      	subs	r2, r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d302      	bcc.n	8009f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f34:	2301      	movs	r3, #1
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e01b      	b.n	8009f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f3a:	4b10      	ldr	r3, [pc, #64]	@ (8009f7c <prvInsertTimerInActiveList+0x7c>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3304      	adds	r3, #4
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7fe f990 	bl	800826a <vListInsert>
 8009f4a:	e012      	b.n	8009f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d206      	bcs.n	8009f62 <prvInsertTimerInActiveList+0x62>
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e007      	b.n	8009f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f62:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <prvInsertTimerInActiveList+0x80>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fe f97c 	bl	800826a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f72:	697b      	ldr	r3, [r7, #20]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20008628 	.word	0x20008628
 8009f80:	20008624 	.word	0x20008624

08009f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08e      	sub	sp, #56	@ 0x38
 8009f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f8a:	e0ce      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da19      	bge.n	8009fc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f92:	1d3b      	adds	r3, r7, #4
 8009f94:	3304      	adds	r3, #4
 8009f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10b      	bne.n	8009fb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	61fb      	str	r3, [r7, #28]
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	e7fd      	b.n	8009fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fbc:	6850      	ldr	r0, [r2, #4]
 8009fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fc0:	6892      	ldr	r2, [r2, #8]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f2c0 80ae 	blt.w	800a12a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe f97c 	bl	80082dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff ff6a 	bl	8009ec0 <prvSampleTimeNow>
 8009fec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	f200 8097 	bhi.w	800a124 <prvProcessReceivedCommands+0x1a0>
 8009ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <prvProcessReceivedCommands+0x78>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a025 	.word	0x0800a025
 800a008:	0800a09b 	.word	0x0800a09b
 800a00c:	0800a0af 	.word	0x0800a0af
 800a010:	0800a0fb 	.word	0x0800a0fb
 800a014:	0800a025 	.word	0x0800a025
 800a018:	0800a025 	.word	0x0800a025
 800a01c:	0800a09b 	.word	0x0800a09b
 800a020:	0800a0af 	.word	0x0800a0af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	18d1      	adds	r1, r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a044:	f7ff ff5c 	bl	8009f00 <prvInsertTimerInActiveList>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d06c      	beq.n	800a128 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d061      	beq.n	800a128 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	441a      	add	r2, r3
 800a06c:	2300      	movs	r3, #0
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	2100      	movs	r1, #0
 800a074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a076:	f7ff fe01 	bl	8009c7c <xTimerGenericCommand>
 800a07a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d152      	bne.n	800a128 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	61bb      	str	r3, [r7, #24]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0ac:	e03d      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10b      	bne.n	800a0e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	617b      	str	r3, [r7, #20]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	18d1      	adds	r1, r2, r3
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0f4:	f7ff ff04 	bl	8009f00 <prvInsertTimerInActiveList>
					break;
 800a0f8:	e017      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d103      	bne.n	800a110 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a10a:	f000 fbe5 	bl	800a8d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a10e:	e00c      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a116:	f023 0301 	bic.w	r3, r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a122:	e002      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a124:	bf00      	nop
 800a126:	e000      	b.n	800a12a <prvProcessReceivedCommands+0x1a6>
					break;
 800a128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a12a:	4b08      	ldr	r3, [pc, #32]	@ (800a14c <prvProcessReceivedCommands+0x1c8>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	1d39      	adds	r1, r7, #4
 800a130:	2200      	movs	r2, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fba6 	bl	8008884 <xQueueReceive>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f47f af26 	bne.w	8009f8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	3730      	adds	r7, #48	@ 0x30
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	2000862c 	.word	0x2000862c

0800a150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a156:	e049      	b.n	800a1ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a158:	4b2e      	ldr	r3, [pc, #184]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a162:	4b2c      	ldr	r3, [pc, #176]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3304      	adds	r3, #4
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe f8b3 	bl	80082dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d02f      	beq.n	800a1ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	4413      	add	r3, r2
 800a194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d90e      	bls.n	800a1bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	f7fe f858 	bl	800826a <vListInsert>
 800a1ba:	e017      	b.n	800a1ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fd58 	bl	8009c7c <xTimerGenericCommand>
 800a1cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10b      	bne.n	800a1ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	603b      	str	r3, [r7, #0]
}
 800a1e6:	bf00      	nop
 800a1e8:	bf00      	nop
 800a1ea:	e7fd      	b.n	800a1e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1ec:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1b0      	bne.n	800a158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1f6:	4b07      	ldr	r3, [pc, #28]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1fc:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <prvSwitchTimerLists+0xc8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a04      	ldr	r2, [pc, #16]	@ (800a214 <prvSwitchTimerLists+0xc4>)
 800a202:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a204:	4a04      	ldr	r2, [pc, #16]	@ (800a218 <prvSwitchTimerLists+0xc8>)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	6013      	str	r3, [r2, #0]
}
 800a20a:	bf00      	nop
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20008624 	.word	0x20008624
 800a218:	20008628 	.word	0x20008628

0800a21c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a222:	f000 f969 	bl	800a4f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a226:	4b15      	ldr	r3, [pc, #84]	@ (800a27c <prvCheckForValidListAndQueue+0x60>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d120      	bne.n	800a270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a22e:	4814      	ldr	r0, [pc, #80]	@ (800a280 <prvCheckForValidListAndQueue+0x64>)
 800a230:	f7fd ffca 	bl	80081c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a234:	4813      	ldr	r0, [pc, #76]	@ (800a284 <prvCheckForValidListAndQueue+0x68>)
 800a236:	f7fd ffc7 	bl	80081c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a23a:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <prvCheckForValidListAndQueue+0x6c>)
 800a23c:	4a10      	ldr	r2, [pc, #64]	@ (800a280 <prvCheckForValidListAndQueue+0x64>)
 800a23e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a240:	4b12      	ldr	r3, [pc, #72]	@ (800a28c <prvCheckForValidListAndQueue+0x70>)
 800a242:	4a10      	ldr	r2, [pc, #64]	@ (800a284 <prvCheckForValidListAndQueue+0x68>)
 800a244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a246:	2300      	movs	r3, #0
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	4b11      	ldr	r3, [pc, #68]	@ (800a290 <prvCheckForValidListAndQueue+0x74>)
 800a24c:	4a11      	ldr	r2, [pc, #68]	@ (800a294 <prvCheckForValidListAndQueue+0x78>)
 800a24e:	2110      	movs	r1, #16
 800a250:	200a      	movs	r0, #10
 800a252:	f7fe f8d7 	bl	8008404 <xQueueGenericCreateStatic>
 800a256:	4603      	mov	r3, r0
 800a258:	4a08      	ldr	r2, [pc, #32]	@ (800a27c <prvCheckForValidListAndQueue+0x60>)
 800a25a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a25c:	4b07      	ldr	r3, [pc, #28]	@ (800a27c <prvCheckForValidListAndQueue+0x60>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a264:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <prvCheckForValidListAndQueue+0x60>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	490b      	ldr	r1, [pc, #44]	@ (800a298 <prvCheckForValidListAndQueue+0x7c>)
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fcfc 	bl	8008c68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a270:	f000 f974 	bl	800a55c <vPortExitCritical>
}
 800a274:	bf00      	nop
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	2000862c 	.word	0x2000862c
 800a280:	200085fc 	.word	0x200085fc
 800a284:	20008610 	.word	0x20008610
 800a288:	20008624 	.word	0x20008624
 800a28c:	20008628 	.word	0x20008628
 800a290:	200086d8 	.word	0x200086d8
 800a294:	20008638 	.word	0x20008638
 800a298:	0801ad34 	.word	0x0801ad34

0800a29c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3b04      	subs	r3, #4
 800a2ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a300 <pxPortInitialiseStack+0x64>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3b14      	subs	r3, #20
 800a2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f06f 0202 	mvn.w	r2, #2
 800a2ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3b20      	subs	r3, #32
 800a2f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	0800a305 	.word	0x0800a305

0800a304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a30e:	4b13      	ldr	r3, [pc, #76]	@ (800a35c <prvTaskExitError+0x58>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a316:	d00b      	beq.n	800a330 <prvTaskExitError+0x2c>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <prvTaskExitError+0x28>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60bb      	str	r3, [r7, #8]
}
 800a342:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a344:	bf00      	nop
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0fc      	beq.n	800a346 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	2000001c 	.word	0x2000001c

0800a360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a360:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <pxCurrentTCBConst2>)
 800a362:	6819      	ldr	r1, [r3, #0]
 800a364:	6808      	ldr	r0, [r1, #0]
 800a366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	f380 8809 	msr	PSP, r0
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f04f 0000 	mov.w	r0, #0
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	4770      	bx	lr
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst2>:
 800a380:	200080fc 	.word	0x200080fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a388:	4808      	ldr	r0, [pc, #32]	@ (800a3ac <prvPortStartFirstTask+0x24>)
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	6800      	ldr	r0, [r0, #0]
 800a38e:	f380 8808 	msr	MSP, r0
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8814 	msr	CONTROL, r0
 800a39a:	b662      	cpsie	i
 800a39c:	b661      	cpsie	f
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	df00      	svc	0
 800a3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3aa:	bf00      	nop
 800a3ac:	e000ed08 	.word	0xe000ed08

0800a3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3b6:	4b47      	ldr	r3, [pc, #284]	@ (800a4d4 <xPortStartScheduler+0x124>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a47      	ldr	r2, [pc, #284]	@ (800a4d8 <xPortStartScheduler+0x128>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d10b      	bne.n	800a3d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a4d4 <xPortStartScheduler+0x124>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a4dc <xPortStartScheduler+0x12c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d10b      	bne.n	800a3fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	60fb      	str	r3, [r7, #12]
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	e7fd      	b.n	800a3f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3fa:	4b39      	ldr	r3, [pc, #228]	@ (800a4e0 <xPortStartScheduler+0x130>)
 800a3fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	22ff      	movs	r2, #255	@ 0xff
 800a40a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	4b31      	ldr	r3, [pc, #196]	@ (800a4e4 <xPortStartScheduler+0x134>)
 800a420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a422:	4b31      	ldr	r3, [pc, #196]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a424:	2207      	movs	r2, #7
 800a426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a428:	e009      	b.n	800a43e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a42a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3b01      	subs	r3, #1
 800a430:	4a2d      	ldr	r2, [pc, #180]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a446:	2b80      	cmp	r3, #128	@ 0x80
 800a448:	d0ef      	beq.n	800a42a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a44a:	4b27      	ldr	r3, [pc, #156]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f1c3 0307 	rsb	r3, r3, #7
 800a452:	2b04      	cmp	r3, #4
 800a454:	d00b      	beq.n	800a46e <xPortStartScheduler+0xbe>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a46e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	021b      	lsls	r3, r3, #8
 800a474:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a478:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a480:	4a19      	ldr	r2, [pc, #100]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a48c:	4b17      	ldr	r3, [pc, #92]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a16      	ldr	r2, [pc, #88]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a498:	4b14      	ldr	r3, [pc, #80]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a13      	ldr	r2, [pc, #76]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a49e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4a4:	f000 f8da 	bl	800a65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4a8:	4b11      	ldr	r3, [pc, #68]	@ (800a4f0 <xPortStartScheduler+0x140>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ae:	f000 f8f9 	bl	800a6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4b2:	4b10      	ldr	r3, [pc, #64]	@ (800a4f4 <xPortStartScheduler+0x144>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a4f4 <xPortStartScheduler+0x144>)
 800a4b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4be:	f7ff ff63 	bl	800a388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4c2:	f7ff f809 	bl	80094d8 <vTaskSwitchContext>
	prvTaskExitError();
 800a4c6:	f7ff ff1d 	bl	800a304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed00 	.word	0xe000ed00
 800a4d8:	410fc271 	.word	0x410fc271
 800a4dc:	410fc270 	.word	0x410fc270
 800a4e0:	e000e400 	.word	0xe000e400
 800a4e4:	20008728 	.word	0x20008728
 800a4e8:	2000872c 	.word	0x2000872c
 800a4ec:	e000ed20 	.word	0xe000ed20
 800a4f0:	2000001c 	.word	0x2000001c
 800a4f4:	e000ef34 	.word	0xe000ef34

0800a4f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a512:	4b10      	ldr	r3, [pc, #64]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	4a0e      	ldr	r2, [pc, #56]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a51a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a51c:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d110      	bne.n	800a546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a524:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <vPortEnterCritical+0x60>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <vPortEnterCritical+0x4e>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	603b      	str	r3, [r7, #0]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <vPortEnterCritical+0x4a>
	}
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	2000001c 	.word	0x2000001c
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a562:	4b12      	ldr	r3, [pc, #72]	@ (800a5ac <vPortExitCritical+0x50>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10b      	bne.n	800a582 <vPortExitCritical+0x26>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	607b      	str	r3, [r7, #4]
}
 800a57c:	bf00      	nop
 800a57e:	bf00      	nop
 800a580:	e7fd      	b.n	800a57e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a582:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <vPortExitCritical+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3b01      	subs	r3, #1
 800a588:	4a08      	ldr	r2, [pc, #32]	@ (800a5ac <vPortExitCritical+0x50>)
 800a58a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a58c:	4b07      	ldr	r3, [pc, #28]	@ (800a5ac <vPortExitCritical+0x50>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <vPortExitCritical+0x44>
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	2000001c 	.word	0x2000001c

0800a5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	@ (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a5d4:	f380 8811 	msr	BASEPRI, r0
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f7fe ff7a 	bl	80094d8 <vTaskSwitchContext>
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f380 8811 	msr	BASEPRI, r0
 800a5ec:	bc09      	pop	{r0, r3}
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	6808      	ldr	r0, [r1, #0]
 800a5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f6:	f01e 0f10 	tst.w	lr, #16
 800a5fa:	bf08      	it	eq
 800a5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a600:	f380 8809 	msr	PSP, r0
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w

0800a610 <pxCurrentTCBConst>:
 800a610:	200080fc 	.word	0x200080fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a632:	f7fe fe97 	bl	8009364 <xTaskIncrementTick>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a63c:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <xPortSysTickHandler+0x40>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f383 8811 	msr	BASEPRI, r3
}
 800a64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a660:	4b0b      	ldr	r3, [pc, #44]	@ (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a666:	4b0b      	ldr	r3, [pc, #44]	@ (800a694 <vPortSetupTimerInterrupt+0x38>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a66c:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <vPortSetupTimerInterrupt+0x3c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a0a      	ldr	r2, [pc, #40]	@ (800a69c <vPortSetupTimerInterrupt+0x40>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	099b      	lsrs	r3, r3, #6
 800a678:	4a09      	ldr	r2, [pc, #36]	@ (800a6a0 <vPortSetupTimerInterrupt+0x44>)
 800a67a:	3b01      	subs	r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a67e:	4b04      	ldr	r3, [pc, #16]	@ (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	e000e010 	.word	0xe000e010
 800a694:	e000e018 	.word	0xe000e018
 800a698:	20000010 	.word	0x20000010
 800a69c:	10624dd3 	.word	0x10624dd3
 800a6a0:	e000e014 	.word	0xe000e014

0800a6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6b4 <vPortEnableVFP+0x10>
 800a6a8:	6801      	ldr	r1, [r0, #0]
 800a6aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6ae:	6001      	str	r1, [r0, #0]
 800a6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed88 	.word	0xe000ed88

0800a6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b0f      	cmp	r3, #15
 800a6c8:	d915      	bls.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ca:	4a18      	ldr	r2, [pc, #96]	@ (800a72c <vPortValidateInterruptPriority+0x74>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6d4:	4b16      	ldr	r3, [pc, #88]	@ (800a730 <vPortValidateInterruptPriority+0x78>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	7afa      	ldrb	r2, [r7, #11]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d20b      	bcs.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	607b      	str	r3, [r7, #4]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <vPortValidateInterruptPriority+0x7c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a738 <vPortValidateInterruptPriority+0x80>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d90b      	bls.n	800a71e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	603b      	str	r3, [r7, #0]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortValidateInterruptPriority+0x62>
	}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	e000e3f0 	.word	0xe000e3f0
 800a730:	20008728 	.word	0x20008728
 800a734:	e000ed0c 	.word	0xe000ed0c
 800a738:	2000872c 	.word	0x2000872c

0800a73c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	@ 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a748:	f7fe fd50 	bl	80091ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a74c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c0 <pvPortMalloc+0x184>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a754:	f000 f924 	bl	800a9a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a758:	4b5a      	ldr	r3, [pc, #360]	@ (800a8c4 <pvPortMalloc+0x188>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8095 	bne.w	800a890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a76c:	2208      	movs	r2, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4413      	add	r3, r2
 800a772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d015      	beq.n	800a7aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f023 0307 	bic.w	r3, r3, #7
 800a784:	3308      	adds	r3, #8
 800a786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <pvPortMalloc+0x6e>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	617b      	str	r3, [r7, #20]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d06f      	beq.n	800a890 <pvPortMalloc+0x154>
 800a7b0:	4b45      	ldr	r3, [pc, #276]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d86a      	bhi.n	800a890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7ba:	4b44      	ldr	r3, [pc, #272]	@ (800a8cc <pvPortMalloc+0x190>)
 800a7bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7be:	4b43      	ldr	r3, [pc, #268]	@ (800a8cc <pvPortMalloc+0x190>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7c4:	e004      	b.n	800a7d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d903      	bls.n	800a7e2 <pvPortMalloc+0xa6>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f1      	bne.n	800a7c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7e2:	4b37      	ldr	r3, [pc, #220]	@ (800a8c0 <pvPortMalloc+0x184>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d051      	beq.n	800a890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	4413      	add	r3, r2
 800a7f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	1ad2      	subs	r2, r2, r3
 800a806:	2308      	movs	r3, #8
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d920      	bls.n	800a850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4413      	add	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <pvPortMalloc+0xfc>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a84a:	69b8      	ldr	r0, [r7, #24]
 800a84c:	f000 f90a 	bl	800aa64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a850:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a85c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a85e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d0 <pvPortMalloc+0x194>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d203      	bcs.n	800a872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a86a:	4b17      	ldr	r3, [pc, #92]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a18      	ldr	r2, [pc, #96]	@ (800a8d0 <pvPortMalloc+0x194>)
 800a870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <pvPortMalloc+0x188>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a886:	4b13      	ldr	r3, [pc, #76]	@ (800a8d4 <pvPortMalloc+0x198>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	4a11      	ldr	r2, [pc, #68]	@ (800a8d4 <pvPortMalloc+0x198>)
 800a88e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a890:	f7fe fcba 	bl	8009208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	60fb      	str	r3, [r7, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a8b6:	69fb      	ldr	r3, [r7, #28]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3728      	adds	r7, #40	@ 0x28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000c338 	.word	0x2000c338
 800a8c4:	2000c34c 	.word	0x2000c34c
 800a8c8:	2000c33c 	.word	0x2000c33c
 800a8cc:	2000c330 	.word	0x2000c330
 800a8d0:	2000c340 	.word	0x2000c340
 800a8d4:	2000c344 	.word	0x2000c344

0800a8d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d04f      	beq.n	800a98a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b25      	ldr	r3, [pc, #148]	@ (800a994 <vPortFree+0xbc>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4013      	ands	r3, r2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <vPortFree+0x46>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00b      	beq.n	800a93e <vPortFree+0x66>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	4b14      	ldr	r3, [pc, #80]	@ (800a994 <vPortFree+0xbc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4013      	ands	r3, r2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01e      	beq.n	800a98a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11a      	bne.n	800a98a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	4b0e      	ldr	r3, [pc, #56]	@ (800a994 <vPortFree+0xbc>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	43db      	mvns	r3, r3
 800a95e:	401a      	ands	r2, r3
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a964:	f7fe fc42 	bl	80091ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <vPortFree+0xc0>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4413      	add	r3, r2
 800a972:	4a09      	ldr	r2, [pc, #36]	@ (800a998 <vPortFree+0xc0>)
 800a974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a976:	6938      	ldr	r0, [r7, #16]
 800a978:	f000 f874 	bl	800aa64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a97c:	4b07      	ldr	r3, [pc, #28]	@ (800a99c <vPortFree+0xc4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	4a06      	ldr	r2, [pc, #24]	@ (800a99c <vPortFree+0xc4>)
 800a984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a986:	f7fe fc3f 	bl	8009208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a98a:	bf00      	nop
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2000c34c 	.word	0x2000c34c
 800a998:	2000c33c 	.word	0x2000c33c
 800a99c:	2000c348 	.word	0x2000c348

0800a9a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a9aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9ac:	4b27      	ldr	r3, [pc, #156]	@ (800aa4c <prvHeapInit+0xac>)
 800a9ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f003 0307 	and.w	r3, r3, #7
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3307      	adds	r3, #7
 800a9be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	4a1f      	ldr	r2, [pc, #124]	@ (800aa4c <prvHeapInit+0xac>)
 800a9d0:	4413      	add	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <prvHeapInit+0xb0>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9de:	4b1c      	ldr	r3, [pc, #112]	@ (800aa50 <prvHeapInit+0xb0>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4a15      	ldr	r2, [pc, #84]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa02:	4b14      	ldr	r3, [pc, #80]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa0a:	4b12      	ldr	r3, [pc, #72]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa58 <prvHeapInit+0xb8>)
 800aa2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4a09      	ldr	r2, [pc, #36]	@ (800aa5c <prvHeapInit+0xbc>)
 800aa36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa38:	4b09      	ldr	r3, [pc, #36]	@ (800aa60 <prvHeapInit+0xc0>)
 800aa3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa3e:	601a      	str	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	20008730 	.word	0x20008730
 800aa50:	2000c330 	.word	0x2000c330
 800aa54:	2000c338 	.word	0x2000c338
 800aa58:	2000c340 	.word	0x2000c340
 800aa5c:	2000c33c 	.word	0x2000c33c
 800aa60:	2000c34c 	.word	0x2000c34c

0800aa64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa6c:	4b28      	ldr	r3, [pc, #160]	@ (800ab10 <prvInsertBlockIntoFreeList+0xac>)
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e002      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x14>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d8f7      	bhi.n	800aa72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d108      	bne.n	800aaa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	441a      	add	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d118      	bne.n	800aaec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4b15      	ldr	r3, [pc, #84]	@ (800ab14 <prvInsertBlockIntoFreeList+0xb0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d00d      	beq.n	800aae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	441a      	add	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e008      	b.n	800aaf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aae2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e003      	b.n	800aaf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d002      	beq.n	800ab02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	2000c330 	.word	0x2000c330
 800ab14:	2000c338 	.word	0x2000c338

0800ab18 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab18:	4b04      	ldr	r3, [pc, #16]	@ (800ab2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	b10a      	cbz	r2, 800ab22 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ab1e:	4803      	ldr	r0, [pc, #12]	@ (800ab2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab20:	4770      	bx	lr
 800ab22:	4a03      	ldr	r2, [pc, #12]	@ (800ab30 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ab24:	4801      	ldr	r0, [pc, #4]	@ (800ab2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab26:	6812      	ldr	r2, [r2, #0]
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	4770      	bx	lr
 800ab2c:	20000028 	.word	0x20000028
 800ab30:	200001f0 	.word	0x200001f0

0800ab34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab34:	4a02      	ldr	r2, [pc, #8]	@ (800ab40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ab36:	4b03      	ldr	r3, [pc, #12]	@ (800ab44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	200001f0 	.word	0x200001f0
 800ab44:	20000028 	.word	0x20000028

0800ab48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ab48:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	b10a      	cbz	r2, 800ab52 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ab4e:	4803      	ldr	r0, [pc, #12]	@ (800ab5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ab50:	4770      	bx	lr
 800ab52:	4a03      	ldr	r2, [pc, #12]	@ (800ab60 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ab54:	4801      	ldr	r0, [pc, #4]	@ (800ab5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	4770      	bx	lr
 800ab5c:	2000003c 	.word	0x2000003c
 800ab60:	200001f0 	.word	0x200001f0

0800ab64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ab64:	4a02      	ldr	r2, [pc, #8]	@ (800ab70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xc>)
 800ab66:	4b03      	ldr	r3, [pc, #12]	@ (800ab74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x10>)
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	200001f0 	.word	0x200001f0
 800ab74:	2000003c 	.word	0x2000003c

0800ab78 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ab78:	f004 ba7c 	b.w	800f074 <geometry_msgs__msg__Twist__init>

0800ab7c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ab7c:	f004 ba9e 	b.w	800f0bc <geometry_msgs__msg__Twist__fini>

0800ab80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	f000 f819 	bl	800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab86:	4c07      	ldr	r4, [pc, #28]	@ (800aba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ab88:	60e0      	str	r0, [r4, #12]
 800ab8a:	f000 f815 	bl	800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab8e:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ab90:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	b10a      	cbz	r2, 800ab9a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ab96:	4804      	ldr	r0, [pc, #16]	@ (800aba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ab98:	bd10      	pop	{r4, pc}
 800ab9a:	4a04      	ldr	r2, [pc, #16]	@ (800abac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ab9c:	4802      	ldr	r0, [pc, #8]	@ (800aba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ab9e:	6812      	ldr	r2, [r2, #0]
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	20000048 	.word	0x20000048
 800aba8:	200000c0 	.word	0x200000c0
 800abac:	200001f4 	.word	0x200001f4

0800abb0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800abb0:	f004 ba90 	b.w	800f0d4 <geometry_msgs__msg__Vector3__init>

0800abb4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800abb4:	f004 ba92 	b.w	800f0dc <geometry_msgs__msg__Vector3__fini>

0800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800abb8:	4b04      	ldr	r3, [pc, #16]	@ (800abcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	b10a      	cbz	r2, 800abc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800abbe:	4803      	ldr	r0, [pc, #12]	@ (800abcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abc0:	4770      	bx	lr
 800abc2:	4a03      	ldr	r2, [pc, #12]	@ (800abd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800abc4:	4801      	ldr	r0, [pc, #4]	@ (800abcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abc6:	6812      	ldr	r2, [r2, #0]
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4770      	bx	lr
 800abcc:	20000180 	.word	0x20000180
 800abd0:	200001f4 	.word	0x200001f4

0800abd4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4604      	mov	r4, r0
 800abd8:	b148      	cbz	r0, 800abee <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800abda:	460d      	mov	r5, r1
 800abdc:	f000 f860 	bl	800aca0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800abe0:	4606      	mov	r6, r0
 800abe2:	1829      	adds	r1, r5, r0
 800abe4:	f104 0018 	add.w	r0, r4, #24
 800abe8:	f000 f85a 	bl	800aca0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800abec:	4430      	add	r0, r6
 800abee:	bd70      	pop	{r4, r5, r6, pc}

0800abf0 <_Twist__cdr_deserialize>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	b189      	cbz	r1, 800ac1a <_Twist__cdr_deserialize+0x2a>
 800abf6:	4605      	mov	r5, r0
 800abf8:	f000 f8de 	bl	800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800abfc:	6843      	ldr	r3, [r0, #4]
 800abfe:	4621      	mov	r1, r4
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	4628      	mov	r0, r5
 800ac04:	4798      	blx	r3
 800ac06:	f000 f8d7 	bl	800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac0a:	6843      	ldr	r3, [r0, #4]
 800ac0c:	f104 0118 	add.w	r1, r4, #24
 800ac10:	4628      	mov	r0, r5
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac18:	4718      	bx	r3
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
 800ac1e:	bf00      	nop

0800ac20 <_Twist__cdr_serialize>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	9101      	str	r1, [sp, #4]
 800ac26:	b190      	cbz	r0, 800ac4e <_Twist__cdr_serialize+0x2e>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	f000 f8c5 	bl	800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac2e:	6843      	ldr	r3, [r0, #4]
 800ac30:	9901      	ldr	r1, [sp, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	4620      	mov	r0, r4
 800ac36:	4798      	blx	r3
 800ac38:	f000 f8be 	bl	800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac3c:	6843      	ldr	r3, [r0, #4]
 800ac3e:	9901      	ldr	r1, [sp, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f104 0018 	add.w	r0, r4, #24
 800ac46:	b002      	add	sp, #8
 800ac48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac4c:	4718      	bx	r3
 800ac4e:	b002      	add	sp, #8
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	bf00      	nop

0800ac54 <_Twist__get_serialized_size>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4604      	mov	r4, r0
 800ac58:	b148      	cbz	r0, 800ac6e <_Twist__get_serialized_size+0x1a>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	f000 f820 	bl	800aca0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ac60:	4605      	mov	r5, r0
 800ac62:	4601      	mov	r1, r0
 800ac64:	f104 0018 	add.w	r0, r4, #24
 800ac68:	f000 f81a 	bl	800aca0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ac6c:	4428      	add	r0, r5
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}

0800ac70 <_Twist__max_serialized_size>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	2301      	movs	r3, #1
 800ac76:	2100      	movs	r1, #0
 800ac78:	f10d 0007 	add.w	r0, sp, #7
 800ac7c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ac80:	f000 f87e 	bl	800ad80 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ac84:	4604      	mov	r4, r0
 800ac86:	4601      	mov	r1, r0
 800ac88:	f10d 0007 	add.w	r0, sp, #7
 800ac8c:	f000 f878 	bl	800ad80 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ac90:	4420      	add	r0, r4
 800ac92:	b002      	add	sp, #8
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop

0800ac98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac98:	4800      	ldr	r0, [pc, #0]	@ (800ac9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ac9a:	4770      	bx	lr
 800ac9c:	2000018c 	.word	0x2000018c

0800aca0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800aca0:	b1b8      	cbz	r0, 800acd2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800aca2:	b538      	push	{r3, r4, r5, lr}
 800aca4:	460d      	mov	r5, r1
 800aca6:	4628      	mov	r0, r5
 800aca8:	2108      	movs	r1, #8
 800acaa:	f001 f9fd 	bl	800c0a8 <ucdr_alignment>
 800acae:	f105 0308 	add.w	r3, r5, #8
 800acb2:	181c      	adds	r4, r3, r0
 800acb4:	2108      	movs	r1, #8
 800acb6:	4620      	mov	r0, r4
 800acb8:	f001 f9f6 	bl	800c0a8 <ucdr_alignment>
 800acbc:	3008      	adds	r0, #8
 800acbe:	4404      	add	r4, r0
 800acc0:	2108      	movs	r1, #8
 800acc2:	4620      	mov	r0, r4
 800acc4:	f001 f9f0 	bl	800c0a8 <ucdr_alignment>
 800acc8:	f1c5 0508 	rsb	r5, r5, #8
 800accc:	4428      	add	r0, r5
 800acce:	4420      	add	r0, r4
 800acd0:	bd38      	pop	{r3, r4, r5, pc}
 800acd2:	4770      	bx	lr

0800acd4 <_Vector3__cdr_deserialize>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	460c      	mov	r4, r1
 800acd8:	b171      	cbz	r1, 800acf8 <_Vector3__cdr_deserialize+0x24>
 800acda:	4605      	mov	r5, r0
 800acdc:	f001 f8c6 	bl	800be6c <ucdr_deserialize_double>
 800ace0:	f104 0108 	add.w	r1, r4, #8
 800ace4:	4628      	mov	r0, r5
 800ace6:	f001 f8c1 	bl	800be6c <ucdr_deserialize_double>
 800acea:	f104 0110 	add.w	r1, r4, #16
 800acee:	4628      	mov	r0, r5
 800acf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf4:	f001 b8ba 	b.w	800be6c <ucdr_deserialize_double>
 800acf8:	4608      	mov	r0, r1
 800acfa:	bd38      	pop	{r3, r4, r5, pc}

0800acfc <_Vector3__cdr_serialize>:
 800acfc:	b198      	cbz	r0, 800ad26 <_Vector3__cdr_serialize+0x2a>
 800acfe:	b538      	push	{r3, r4, r5, lr}
 800ad00:	ed90 0b00 	vldr	d0, [r0]
 800ad04:	460d      	mov	r5, r1
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	f000 ffdf 	bl	800bccc <ucdr_serialize_double>
 800ad0e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 ffda 	bl	800bccc <ucdr_serialize_double>
 800ad18:	ed94 0b04 	vldr	d0, [r4, #16]
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad22:	f000 bfd3 	b.w	800bccc <ucdr_serialize_double>
 800ad26:	4770      	bx	lr

0800ad28 <_Vector3__get_serialized_size>:
 800ad28:	b198      	cbz	r0, 800ad52 <_Vector3__get_serialized_size+0x2a>
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	2108      	movs	r1, #8
 800ad2e:	2000      	movs	r0, #0
 800ad30:	f001 f9ba 	bl	800c0a8 <ucdr_alignment>
 800ad34:	f100 0408 	add.w	r4, r0, #8
 800ad38:	2108      	movs	r1, #8
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f001 f9b4 	bl	800c0a8 <ucdr_alignment>
 800ad40:	3008      	adds	r0, #8
 800ad42:	4404      	add	r4, r0
 800ad44:	2108      	movs	r1, #8
 800ad46:	4620      	mov	r0, r4
 800ad48:	f001 f9ae 	bl	800c0a8 <ucdr_alignment>
 800ad4c:	3008      	adds	r0, #8
 800ad4e:	4420      	add	r0, r4
 800ad50:	bd10      	pop	{r4, pc}
 800ad52:	4770      	bx	lr

0800ad54 <_Vector3__max_serialized_size>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	2108      	movs	r1, #8
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f001 f9a5 	bl	800c0a8 <ucdr_alignment>
 800ad5e:	f100 0508 	add.w	r5, r0, #8
 800ad62:	2108      	movs	r1, #8
 800ad64:	4628      	mov	r0, r5
 800ad66:	f001 f99f 	bl	800c0a8 <ucdr_alignment>
 800ad6a:	f100 0408 	add.w	r4, r0, #8
 800ad6e:	442c      	add	r4, r5
 800ad70:	2108      	movs	r1, #8
 800ad72:	4620      	mov	r0, r4
 800ad74:	f001 f998 	bl	800c0a8 <ucdr_alignment>
 800ad78:	3008      	adds	r0, #8
 800ad7a:	4420      	add	r0, r4
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	bf00      	nop

0800ad80 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	2301      	movs	r3, #1
 800ad84:	460c      	mov	r4, r1
 800ad86:	7003      	strb	r3, [r0, #0]
 800ad88:	2108      	movs	r1, #8
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f001 f98c 	bl	800c0a8 <ucdr_alignment>
 800ad90:	f104 0508 	add.w	r5, r4, #8
 800ad94:	1946      	adds	r6, r0, r5
 800ad96:	2108      	movs	r1, #8
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f001 f985 	bl	800c0a8 <ucdr_alignment>
 800ad9e:	f100 0508 	add.w	r5, r0, #8
 800ada2:	4435      	add	r5, r6
 800ada4:	2108      	movs	r1, #8
 800ada6:	4628      	mov	r0, r5
 800ada8:	f001 f97e 	bl	800c0a8 <ucdr_alignment>
 800adac:	f1c4 0408 	rsb	r4, r4, #8
 800adb0:	4420      	add	r0, r4
 800adb2:	4428      	add	r0, r5
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
 800adb6:	bf00      	nop

0800adb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800adb8:	4800      	ldr	r0, [pc, #0]	@ (800adbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800adba:	4770      	bx	lr
 800adbc:	200001b4 	.word	0x200001b4

0800adc0 <ucdr_serialize_bool>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	460d      	mov	r5, r1
 800adc4:	2101      	movs	r1, #1
 800adc6:	4604      	mov	r4, r0
 800adc8:	f001 f922 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800adcc:	b148      	cbz	r0, 800ade2 <ucdr_serialize_bool+0x22>
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	701d      	strb	r5, [r3, #0]
 800add2:	68a2      	ldr	r2, [r4, #8]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	2101      	movs	r1, #1
 800add8:	440a      	add	r2, r1
 800adda:	440b      	add	r3, r1
 800addc:	60a2      	str	r2, [r4, #8]
 800adde:	6123      	str	r3, [r4, #16]
 800ade0:	7561      	strb	r1, [r4, #21]
 800ade2:	7da0      	ldrb	r0, [r4, #22]
 800ade4:	f080 0001 	eor.w	r0, r0, #1
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop

0800adec <ucdr_deserialize_bool>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	460d      	mov	r5, r1
 800adf0:	2101      	movs	r1, #1
 800adf2:	4604      	mov	r4, r0
 800adf4:	f001 f90c 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800adf8:	b160      	cbz	r0, 800ae14 <ucdr_deserialize_bool+0x28>
 800adfa:	68a2      	ldr	r2, [r4, #8]
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ae02:	3900      	subs	r1, #0
 800ae04:	bf18      	it	ne
 800ae06:	2101      	movne	r1, #1
 800ae08:	7029      	strb	r1, [r5, #0]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	60a2      	str	r2, [r4, #8]
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	7561      	strb	r1, [r4, #21]
 800ae14:	7da0      	ldrb	r0, [r4, #22]
 800ae16:	f080 0001 	eor.w	r0, r0, #1
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}

0800ae1c <ucdr_serialize_uint8_t>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	460d      	mov	r5, r1
 800ae20:	2101      	movs	r1, #1
 800ae22:	4604      	mov	r4, r0
 800ae24:	f001 f8f4 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800ae28:	b148      	cbz	r0, 800ae3e <ucdr_serialize_uint8_t+0x22>
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	701d      	strb	r5, [r3, #0]
 800ae2e:	68a2      	ldr	r2, [r4, #8]
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	2101      	movs	r1, #1
 800ae34:	440a      	add	r2, r1
 800ae36:	440b      	add	r3, r1
 800ae38:	60a2      	str	r2, [r4, #8]
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	7561      	strb	r1, [r4, #21]
 800ae3e:	7da0      	ldrb	r0, [r4, #22]
 800ae40:	f080 0001 	eor.w	r0, r0, #1
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop

0800ae48 <ucdr_deserialize_uint8_t>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	4604      	mov	r4, r0
 800ae50:	f001 f8de 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800ae54:	b150      	cbz	r0, 800ae6c <ucdr_deserialize_uint8_t+0x24>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	702b      	strb	r3, [r5, #0]
 800ae5c:	68a2      	ldr	r2, [r4, #8]
 800ae5e:	6923      	ldr	r3, [r4, #16]
 800ae60:	2101      	movs	r1, #1
 800ae62:	440a      	add	r2, r1
 800ae64:	440b      	add	r3, r1
 800ae66:	60a2      	str	r2, [r4, #8]
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	7561      	strb	r1, [r4, #21]
 800ae6c:	7da0      	ldrb	r0, [r4, #22]
 800ae6e:	f080 0001 	eor.w	r0, r0, #1
 800ae72:	bd38      	pop	{r3, r4, r5, pc}

0800ae74 <ucdr_serialize_uint16_t>:
 800ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	2102      	movs	r1, #2
 800ae7e:	4604      	mov	r4, r0
 800ae80:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ae84:	f001 f918 	bl	800c0b8 <ucdr_buffer_alignment>
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	7d67      	ldrb	r7, [r4, #21]
 800ae8e:	f001 f957 	bl	800c140 <ucdr_advance_buffer>
 800ae92:	2102      	movs	r1, #2
 800ae94:	4620      	mov	r0, r4
 800ae96:	f001 f8af 	bl	800bff8 <ucdr_check_buffer_available_for>
 800ae9a:	bb78      	cbnz	r0, 800aefc <ucdr_serialize_uint16_t+0x88>
 800ae9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	d926      	bls.n	800aef2 <ucdr_serialize_uint16_t+0x7e>
 800aea4:	1b5e      	subs	r6, r3, r5
 800aea6:	60a3      	str	r3, [r4, #8]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	f1c6 0802 	rsb	r8, r6, #2
 800aeae:	4433      	add	r3, r6
 800aeb0:	6123      	str	r3, [r4, #16]
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f001 f8ab 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d03b      	beq.n	800af36 <ucdr_serialize_uint16_t+0xc2>
 800aebe:	7d23      	ldrb	r3, [r4, #20]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d04a      	beq.n	800af5a <ucdr_serialize_uint16_t+0xe6>
 800aec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aec8:	702b      	strb	r3, [r5, #0]
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	d040      	beq.n	800af50 <ucdr_serialize_uint16_t+0xdc>
 800aece:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aed2:	706b      	strb	r3, [r5, #1]
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	7da0      	ldrb	r0, [r4, #22]
 800aeda:	3302      	adds	r3, #2
 800aedc:	1b9e      	subs	r6, r3, r6
 800aede:	4442      	add	r2, r8
 800aee0:	2302      	movs	r3, #2
 800aee2:	f080 0001 	eor.w	r0, r0, #1
 800aee6:	60a2      	str	r2, [r4, #8]
 800aee8:	6126      	str	r6, [r4, #16]
 800aeea:	7563      	strb	r3, [r4, #21]
 800aeec:	b002      	add	sp, #8
 800aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef2:	2102      	movs	r1, #2
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 f88b 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800aefa:	b190      	cbz	r0, 800af22 <ucdr_serialize_uint16_t+0xae>
 800aefc:	7d23      	ldrb	r3, [r4, #20]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	d014      	beq.n	800af2e <ucdr_serialize_uint16_t+0xba>
 800af04:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af10:	705a      	strb	r2, [r3, #1]
 800af12:	68a2      	ldr	r2, [r4, #8]
 800af14:	6923      	ldr	r3, [r4, #16]
 800af16:	3202      	adds	r2, #2
 800af18:	3302      	adds	r3, #2
 800af1a:	2102      	movs	r1, #2
 800af1c:	60a2      	str	r2, [r4, #8]
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	7561      	strb	r1, [r4, #21]
 800af22:	7da0      	ldrb	r0, [r4, #22]
 800af24:	f080 0001 	eor.w	r0, r0, #1
 800af28:	b002      	add	sp, #8
 800af2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800af32:	801a      	strh	r2, [r3, #0]
 800af34:	e7ed      	b.n	800af12 <ucdr_serialize_uint16_t+0x9e>
 800af36:	68a2      	ldr	r2, [r4, #8]
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	7da0      	ldrb	r0, [r4, #22]
 800af3c:	7567      	strb	r7, [r4, #21]
 800af3e:	1b92      	subs	r2, r2, r6
 800af40:	1b9b      	subs	r3, r3, r6
 800af42:	f080 0001 	eor.w	r0, r0, #1
 800af46:	60a2      	str	r2, [r4, #8]
 800af48:	6123      	str	r3, [r4, #16]
 800af4a:	b002      	add	sp, #8
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	e7bc      	b.n	800aed4 <ucdr_serialize_uint16_t+0x60>
 800af5a:	4628      	mov	r0, r5
 800af5c:	f10d 0506 	add.w	r5, sp, #6
 800af60:	4629      	mov	r1, r5
 800af62:	4632      	mov	r2, r6
 800af64:	f00d fd7d 	bl	8018a62 <memcpy>
 800af68:	68a0      	ldr	r0, [r4, #8]
 800af6a:	4642      	mov	r2, r8
 800af6c:	19a9      	adds	r1, r5, r6
 800af6e:	f00d fd78 	bl	8018a62 <memcpy>
 800af72:	e7af      	b.n	800aed4 <ucdr_serialize_uint16_t+0x60>

0800af74 <ucdr_serialize_endian_uint16_t>:
 800af74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af78:	b083      	sub	sp, #12
 800af7a:	460d      	mov	r5, r1
 800af7c:	2102      	movs	r1, #2
 800af7e:	4604      	mov	r4, r0
 800af80:	f8ad 2006 	strh.w	r2, [sp, #6]
 800af84:	f001 f898 	bl	800c0b8 <ucdr_buffer_alignment>
 800af88:	4601      	mov	r1, r0
 800af8a:	4620      	mov	r0, r4
 800af8c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af90:	f001 f8d6 	bl	800c140 <ucdr_advance_buffer>
 800af94:	2102      	movs	r1, #2
 800af96:	4620      	mov	r0, r4
 800af98:	f001 f82e 	bl	800bff8 <ucdr_check_buffer_available_for>
 800af9c:	bb70      	cbnz	r0, 800affc <ucdr_serialize_endian_uint16_t+0x88>
 800af9e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800afa2:	42be      	cmp	r6, r7
 800afa4:	d925      	bls.n	800aff2 <ucdr_serialize_endian_uint16_t+0x7e>
 800afa6:	6923      	ldr	r3, [r4, #16]
 800afa8:	60a6      	str	r6, [r4, #8]
 800afaa:	1bf6      	subs	r6, r6, r7
 800afac:	4433      	add	r3, r6
 800afae:	f1c6 0902 	rsb	r9, r6, #2
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	4649      	mov	r1, r9
 800afb6:	4620      	mov	r0, r4
 800afb8:	f001 f82a 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d039      	beq.n	800b034 <ucdr_serialize_endian_uint16_t+0xc0>
 800afc0:	2d01      	cmp	r5, #1
 800afc2:	d04a      	beq.n	800b05a <ucdr_serialize_endian_uint16_t+0xe6>
 800afc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afc8:	703b      	strb	r3, [r7, #0]
 800afca:	2e00      	cmp	r6, #0
 800afcc:	d040      	beq.n	800b050 <ucdr_serialize_endian_uint16_t+0xdc>
 800afce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afd2:	707b      	strb	r3, [r7, #1]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	68a2      	ldr	r2, [r4, #8]
 800afd8:	7da0      	ldrb	r0, [r4, #22]
 800afda:	3302      	adds	r3, #2
 800afdc:	444a      	add	r2, r9
 800afde:	1b9b      	subs	r3, r3, r6
 800afe0:	2102      	movs	r1, #2
 800afe2:	f080 0001 	eor.w	r0, r0, #1
 800afe6:	60a2      	str	r2, [r4, #8]
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	7561      	strb	r1, [r4, #21]
 800afec:	b003      	add	sp, #12
 800afee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aff2:	2102      	movs	r1, #2
 800aff4:	4620      	mov	r0, r4
 800aff6:	f001 f80b 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800affa:	b188      	cbz	r0, 800b020 <ucdr_serialize_endian_uint16_t+0xac>
 800affc:	2d01      	cmp	r5, #1
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	d014      	beq.n	800b02c <ucdr_serialize_endian_uint16_t+0xb8>
 800b002:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b006:	701a      	strb	r2, [r3, #0]
 800b008:	68a3      	ldr	r3, [r4, #8]
 800b00a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b00e:	705a      	strb	r2, [r3, #1]
 800b010:	68a2      	ldr	r2, [r4, #8]
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	3202      	adds	r2, #2
 800b016:	3302      	adds	r3, #2
 800b018:	2102      	movs	r1, #2
 800b01a:	60a2      	str	r2, [r4, #8]
 800b01c:	6123      	str	r3, [r4, #16]
 800b01e:	7561      	strb	r1, [r4, #21]
 800b020:	7da0      	ldrb	r0, [r4, #22]
 800b022:	f080 0001 	eor.w	r0, r0, #1
 800b026:	b003      	add	sp, #12
 800b028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b02c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b030:	801a      	strh	r2, [r3, #0]
 800b032:	e7ed      	b.n	800b010 <ucdr_serialize_endian_uint16_t+0x9c>
 800b034:	68a2      	ldr	r2, [r4, #8]
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	7da0      	ldrb	r0, [r4, #22]
 800b03a:	f884 8015 	strb.w	r8, [r4, #21]
 800b03e:	1b92      	subs	r2, r2, r6
 800b040:	1b9b      	subs	r3, r3, r6
 800b042:	f080 0001 	eor.w	r0, r0, #1
 800b046:	60a2      	str	r2, [r4, #8]
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	b003      	add	sp, #12
 800b04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b050:	68a3      	ldr	r3, [r4, #8]
 800b052:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	e7bc      	b.n	800afd4 <ucdr_serialize_endian_uint16_t+0x60>
 800b05a:	f10d 0506 	add.w	r5, sp, #6
 800b05e:	4629      	mov	r1, r5
 800b060:	4632      	mov	r2, r6
 800b062:	4638      	mov	r0, r7
 800b064:	f00d fcfd 	bl	8018a62 <memcpy>
 800b068:	68a0      	ldr	r0, [r4, #8]
 800b06a:	464a      	mov	r2, r9
 800b06c:	19a9      	adds	r1, r5, r6
 800b06e:	f00d fcf8 	bl	8018a62 <memcpy>
 800b072:	e7af      	b.n	800afd4 <ucdr_serialize_endian_uint16_t+0x60>

0800b074 <ucdr_deserialize_uint16_t>:
 800b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b078:	460d      	mov	r5, r1
 800b07a:	2102      	movs	r1, #2
 800b07c:	4604      	mov	r4, r0
 800b07e:	f001 f81b 	bl	800c0b8 <ucdr_buffer_alignment>
 800b082:	4601      	mov	r1, r0
 800b084:	4620      	mov	r0, r4
 800b086:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b08a:	f001 f859 	bl	800c140 <ucdr_advance_buffer>
 800b08e:	2102      	movs	r1, #2
 800b090:	4620      	mov	r0, r4
 800b092:	f000 ffb1 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b096:	bb60      	cbnz	r0, 800b0f2 <ucdr_deserialize_uint16_t+0x7e>
 800b098:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b09c:	42be      	cmp	r6, r7
 800b09e:	d923      	bls.n	800b0e8 <ucdr_deserialize_uint16_t+0x74>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	60a6      	str	r6, [r4, #8]
 800b0a4:	1bf6      	subs	r6, r6, r7
 800b0a6:	4433      	add	r3, r6
 800b0a8:	f1c6 0902 	rsb	r9, r6, #2
 800b0ac:	6123      	str	r3, [r4, #16]
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 ffad 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d034      	beq.n	800b124 <ucdr_deserialize_uint16_t+0xb0>
 800b0ba:	7d23      	ldrb	r3, [r4, #20]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d042      	beq.n	800b146 <ucdr_deserialize_uint16_t+0xd2>
 800b0c0:	787b      	ldrb	r3, [r7, #1]
 800b0c2:	702b      	strb	r3, [r5, #0]
 800b0c4:	2e00      	cmp	r6, #0
 800b0c6:	d03a      	beq.n	800b13e <ucdr_deserialize_uint16_t+0xca>
 800b0c8:	783b      	ldrb	r3, [r7, #0]
 800b0ca:	706b      	strb	r3, [r5, #1]
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	68a2      	ldr	r2, [r4, #8]
 800b0d0:	7da0      	ldrb	r0, [r4, #22]
 800b0d2:	2102      	movs	r1, #2
 800b0d4:	3302      	adds	r3, #2
 800b0d6:	444a      	add	r2, r9
 800b0d8:	1b9b      	subs	r3, r3, r6
 800b0da:	7561      	strb	r1, [r4, #21]
 800b0dc:	60a2      	str	r2, [r4, #8]
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	f080 0001 	eor.w	r0, r0, #1
 800b0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 ff90 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b0f0:	b180      	cbz	r0, 800b114 <ucdr_deserialize_uint16_t+0xa0>
 800b0f2:	7d23      	ldrb	r3, [r4, #20]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	68a3      	ldr	r3, [r4, #8]
 800b0f8:	d011      	beq.n	800b11e <ucdr_deserialize_uint16_t+0xaa>
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	702b      	strb	r3, [r5, #0]
 800b0fe:	68a3      	ldr	r3, [r4, #8]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	706b      	strb	r3, [r5, #1]
 800b104:	68a2      	ldr	r2, [r4, #8]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	3202      	adds	r2, #2
 800b10a:	3302      	adds	r3, #2
 800b10c:	2102      	movs	r1, #2
 800b10e:	60a2      	str	r2, [r4, #8]
 800b110:	6123      	str	r3, [r4, #16]
 800b112:	7561      	strb	r1, [r4, #21]
 800b114:	7da0      	ldrb	r0, [r4, #22]
 800b116:	f080 0001 	eor.w	r0, r0, #1
 800b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	802b      	strh	r3, [r5, #0]
 800b122:	e7ef      	b.n	800b104 <ucdr_deserialize_uint16_t+0x90>
 800b124:	68a2      	ldr	r2, [r4, #8]
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	7da0      	ldrb	r0, [r4, #22]
 800b12a:	f884 8015 	strb.w	r8, [r4, #21]
 800b12e:	1b92      	subs	r2, r2, r6
 800b130:	1b9b      	subs	r3, r3, r6
 800b132:	60a2      	str	r2, [r4, #8]
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	f080 0001 	eor.w	r0, r0, #1
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	706b      	strb	r3, [r5, #1]
 800b144:	e7c2      	b.n	800b0cc <ucdr_deserialize_uint16_t+0x58>
 800b146:	4639      	mov	r1, r7
 800b148:	4632      	mov	r2, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	f00d fc89 	bl	8018a62 <memcpy>
 800b150:	68a1      	ldr	r1, [r4, #8]
 800b152:	464a      	mov	r2, r9
 800b154:	19a8      	adds	r0, r5, r6
 800b156:	f00d fc84 	bl	8018a62 <memcpy>
 800b15a:	e7b7      	b.n	800b0cc <ucdr_deserialize_uint16_t+0x58>

0800b15c <ucdr_deserialize_endian_uint16_t>:
 800b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	460e      	mov	r6, r1
 800b162:	2102      	movs	r1, #2
 800b164:	4604      	mov	r4, r0
 800b166:	4615      	mov	r5, r2
 800b168:	f000 ffa6 	bl	800c0b8 <ucdr_buffer_alignment>
 800b16c:	4601      	mov	r1, r0
 800b16e:	4620      	mov	r0, r4
 800b170:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b174:	f000 ffe4 	bl	800c140 <ucdr_advance_buffer>
 800b178:	2102      	movs	r1, #2
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 ff3c 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b180:	bb70      	cbnz	r0, 800b1e0 <ucdr_deserialize_endian_uint16_t+0x84>
 800b182:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b186:	4547      	cmp	r7, r8
 800b188:	d925      	bls.n	800b1d6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	60a7      	str	r7, [r4, #8]
 800b18e:	eba7 0708 	sub.w	r7, r7, r8
 800b192:	443b      	add	r3, r7
 800b194:	f1c7 0a02 	rsb	sl, r7, #2
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	4651      	mov	r1, sl
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 ff37 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d034      	beq.n	800b210 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b1a6:	2e01      	cmp	r6, #1
 800b1a8:	d043      	beq.n	800b232 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b1aa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b1ae:	702b      	strb	r3, [r5, #0]
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	d03a      	beq.n	800b22a <ucdr_deserialize_endian_uint16_t+0xce>
 800b1b4:	f898 3000 	ldrb.w	r3, [r8]
 800b1b8:	706b      	strb	r3, [r5, #1]
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	68a2      	ldr	r2, [r4, #8]
 800b1be:	7da0      	ldrb	r0, [r4, #22]
 800b1c0:	2102      	movs	r1, #2
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	4452      	add	r2, sl
 800b1c6:	1bdb      	subs	r3, r3, r7
 800b1c8:	7561      	strb	r1, [r4, #21]
 800b1ca:	60a2      	str	r2, [r4, #8]
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	f080 0001 	eor.w	r0, r0, #1
 800b1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d6:	2102      	movs	r1, #2
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 ff19 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b1de:	b178      	cbz	r0, 800b200 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b1e0:	2e01      	cmp	r6, #1
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	d011      	beq.n	800b20a <ucdr_deserialize_endian_uint16_t+0xae>
 800b1e6:	785b      	ldrb	r3, [r3, #1]
 800b1e8:	702b      	strb	r3, [r5, #0]
 800b1ea:	68a3      	ldr	r3, [r4, #8]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	706b      	strb	r3, [r5, #1]
 800b1f0:	68a2      	ldr	r2, [r4, #8]
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	3202      	adds	r2, #2
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	60a2      	str	r2, [r4, #8]
 800b1fc:	6123      	str	r3, [r4, #16]
 800b1fe:	7561      	strb	r1, [r4, #21]
 800b200:	7da0      	ldrb	r0, [r4, #22]
 800b202:	f080 0001 	eor.w	r0, r0, #1
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	802b      	strh	r3, [r5, #0]
 800b20e:	e7ef      	b.n	800b1f0 <ucdr_deserialize_endian_uint16_t+0x94>
 800b210:	68a2      	ldr	r2, [r4, #8]
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	7da0      	ldrb	r0, [r4, #22]
 800b216:	f884 9015 	strb.w	r9, [r4, #21]
 800b21a:	1bd2      	subs	r2, r2, r7
 800b21c:	1bdb      	subs	r3, r3, r7
 800b21e:	60a2      	str	r2, [r4, #8]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	f080 0001 	eor.w	r0, r0, #1
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	706b      	strb	r3, [r5, #1]
 800b230:	e7c3      	b.n	800b1ba <ucdr_deserialize_endian_uint16_t+0x5e>
 800b232:	4641      	mov	r1, r8
 800b234:	463a      	mov	r2, r7
 800b236:	4628      	mov	r0, r5
 800b238:	f00d fc13 	bl	8018a62 <memcpy>
 800b23c:	68a1      	ldr	r1, [r4, #8]
 800b23e:	4652      	mov	r2, sl
 800b240:	19e8      	adds	r0, r5, r7
 800b242:	f00d fc0e 	bl	8018a62 <memcpy>
 800b246:	e7b8      	b.n	800b1ba <ucdr_deserialize_endian_uint16_t+0x5e>

0800b248 <ucdr_serialize_uint32_t>:
 800b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	4604      	mov	r4, r0
 800b250:	9101      	str	r1, [sp, #4]
 800b252:	2104      	movs	r1, #4
 800b254:	f000 ff30 	bl	800c0b8 <ucdr_buffer_alignment>
 800b258:	4601      	mov	r1, r0
 800b25a:	4620      	mov	r0, r4
 800b25c:	7d67      	ldrb	r7, [r4, #21]
 800b25e:	f000 ff6f 	bl	800c140 <ucdr_advance_buffer>
 800b262:	2104      	movs	r1, #4
 800b264:	4620      	mov	r0, r4
 800b266:	f000 fec7 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d139      	bne.n	800b2e2 <ucdr_serialize_uint32_t+0x9a>
 800b26e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b272:	42ab      	cmp	r3, r5
 800b274:	d930      	bls.n	800b2d8 <ucdr_serialize_uint32_t+0x90>
 800b276:	1b5e      	subs	r6, r3, r5
 800b278:	60a3      	str	r3, [r4, #8]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	f1c6 0804 	rsb	r8, r6, #4
 800b280:	4433      	add	r3, r6
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	4641      	mov	r1, r8
 800b286:	4620      	mov	r0, r4
 800b288:	f000 fec2 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d04c      	beq.n	800b32a <ucdr_serialize_uint32_t+0xe2>
 800b290:	7d23      	ldrb	r3, [r4, #20]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d063      	beq.n	800b35e <ucdr_serialize_uint32_t+0x116>
 800b296:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b29a:	702b      	strb	r3, [r5, #0]
 800b29c:	2e00      	cmp	r6, #0
 800b29e:	d051      	beq.n	800b344 <ucdr_serialize_uint32_t+0xfc>
 800b2a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2a4:	706b      	strb	r3, [r5, #1]
 800b2a6:	2e01      	cmp	r6, #1
 800b2a8:	d050      	beq.n	800b34c <ucdr_serialize_uint32_t+0x104>
 800b2aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b2ae:	70ab      	strb	r3, [r5, #2]
 800b2b0:	2e02      	cmp	r6, #2
 800b2b2:	d04f      	beq.n	800b354 <ucdr_serialize_uint32_t+0x10c>
 800b2b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b2b8:	70eb      	strb	r3, [r5, #3]
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	68a2      	ldr	r2, [r4, #8]
 800b2be:	7da0      	ldrb	r0, [r4, #22]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	1b9e      	subs	r6, r3, r6
 800b2c4:	4442      	add	r2, r8
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	f080 0001 	eor.w	r0, r0, #1
 800b2cc:	60a2      	str	r2, [r4, #8]
 800b2ce:	6126      	str	r6, [r4, #16]
 800b2d0:	7563      	strb	r3, [r4, #21]
 800b2d2:	b002      	add	sp, #8
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	2104      	movs	r1, #4
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fe98 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b2e0:	b1d0      	cbz	r0, 800b318 <ucdr_serialize_uint32_t+0xd0>
 800b2e2:	7d23      	ldrb	r3, [r4, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	68a3      	ldr	r3, [r4, #8]
 800b2e8:	d01c      	beq.n	800b324 <ucdr_serialize_uint32_t+0xdc>
 800b2ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	68a3      	ldr	r3, [r4, #8]
 800b2f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2f6:	705a      	strb	r2, [r3, #1]
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2fe:	709a      	strb	r2, [r3, #2]
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b306:	70da      	strb	r2, [r3, #3]
 800b308:	68a2      	ldr	r2, [r4, #8]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	3204      	adds	r2, #4
 800b30e:	3304      	adds	r3, #4
 800b310:	2104      	movs	r1, #4
 800b312:	60a2      	str	r2, [r4, #8]
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	7561      	strb	r1, [r4, #21]
 800b318:	7da0      	ldrb	r0, [r4, #22]
 800b31a:	f080 0001 	eor.w	r0, r0, #1
 800b31e:	b002      	add	sp, #8
 800b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b324:	9a01      	ldr	r2, [sp, #4]
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	e7ee      	b.n	800b308 <ucdr_serialize_uint32_t+0xc0>
 800b32a:	68a2      	ldr	r2, [r4, #8]
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	7da0      	ldrb	r0, [r4, #22]
 800b330:	7567      	strb	r7, [r4, #21]
 800b332:	1b92      	subs	r2, r2, r6
 800b334:	1b9b      	subs	r3, r3, r6
 800b336:	f080 0001 	eor.w	r0, r0, #1
 800b33a:	60a2      	str	r2, [r4, #8]
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	b002      	add	sp, #8
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	e7ad      	b.n	800b2ba <ucdr_serialize_uint32_t+0x72>
 800b35e:	4628      	mov	r0, r5
 800b360:	ad01      	add	r5, sp, #4
 800b362:	4629      	mov	r1, r5
 800b364:	4632      	mov	r2, r6
 800b366:	f00d fb7c 	bl	8018a62 <memcpy>
 800b36a:	68a0      	ldr	r0, [r4, #8]
 800b36c:	4642      	mov	r2, r8
 800b36e:	19a9      	adds	r1, r5, r6
 800b370:	f00d fb77 	bl	8018a62 <memcpy>
 800b374:	e7a1      	b.n	800b2ba <ucdr_serialize_uint32_t+0x72>
 800b376:	bf00      	nop

0800b378 <ucdr_serialize_endian_uint32_t>:
 800b378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b37c:	b083      	sub	sp, #12
 800b37e:	460d      	mov	r5, r1
 800b380:	2104      	movs	r1, #4
 800b382:	4604      	mov	r4, r0
 800b384:	9201      	str	r2, [sp, #4]
 800b386:	f000 fe97 	bl	800c0b8 <ucdr_buffer_alignment>
 800b38a:	4601      	mov	r1, r0
 800b38c:	4620      	mov	r0, r4
 800b38e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b392:	f000 fed5 	bl	800c140 <ucdr_advance_buffer>
 800b396:	2104      	movs	r1, #4
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 fe2d 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d138      	bne.n	800b414 <ucdr_serialize_endian_uint32_t+0x9c>
 800b3a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b3a6:	42b7      	cmp	r7, r6
 800b3a8:	d92f      	bls.n	800b40a <ucdr_serialize_endian_uint32_t+0x92>
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	60a7      	str	r7, [r4, #8]
 800b3ae:	1bbf      	subs	r7, r7, r6
 800b3b0:	443b      	add	r3, r7
 800b3b2:	f1c7 0904 	rsb	r9, r7, #4
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fe28 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d04a      	beq.n	800b45a <ucdr_serialize_endian_uint32_t+0xe2>
 800b3c4:	2d01      	cmp	r5, #1
 800b3c6:	d063      	beq.n	800b490 <ucdr_serialize_endian_uint32_t+0x118>
 800b3c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3cc:	7033      	strb	r3, [r6, #0]
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	d051      	beq.n	800b476 <ucdr_serialize_endian_uint32_t+0xfe>
 800b3d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3d6:	7073      	strb	r3, [r6, #1]
 800b3d8:	2f01      	cmp	r7, #1
 800b3da:	d050      	beq.n	800b47e <ucdr_serialize_endian_uint32_t+0x106>
 800b3dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3e0:	70b3      	strb	r3, [r6, #2]
 800b3e2:	2f02      	cmp	r7, #2
 800b3e4:	d04f      	beq.n	800b486 <ucdr_serialize_endian_uint32_t+0x10e>
 800b3e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3ea:	70f3      	strb	r3, [r6, #3]
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	68a2      	ldr	r2, [r4, #8]
 800b3f0:	7da0      	ldrb	r0, [r4, #22]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	444a      	add	r2, r9
 800b3f6:	1bdb      	subs	r3, r3, r7
 800b3f8:	2104      	movs	r1, #4
 800b3fa:	f080 0001 	eor.w	r0, r0, #1
 800b3fe:	60a2      	str	r2, [r4, #8]
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	7561      	strb	r1, [r4, #21]
 800b404:	b003      	add	sp, #12
 800b406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b40a:	2104      	movs	r1, #4
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 fdff 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b412:	b1c8      	cbz	r0, 800b448 <ucdr_serialize_endian_uint32_t+0xd0>
 800b414:	2d01      	cmp	r5, #1
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	d01c      	beq.n	800b454 <ucdr_serialize_endian_uint32_t+0xdc>
 800b41a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b426:	705a      	strb	r2, [r3, #1]
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b42e:	709a      	strb	r2, [r3, #2]
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b436:	70da      	strb	r2, [r3, #3]
 800b438:	68a2      	ldr	r2, [r4, #8]
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	3204      	adds	r2, #4
 800b43e:	3304      	adds	r3, #4
 800b440:	2104      	movs	r1, #4
 800b442:	60a2      	str	r2, [r4, #8]
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	7561      	strb	r1, [r4, #21]
 800b448:	7da0      	ldrb	r0, [r4, #22]
 800b44a:	f080 0001 	eor.w	r0, r0, #1
 800b44e:	b003      	add	sp, #12
 800b450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b454:	9a01      	ldr	r2, [sp, #4]
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e7ee      	b.n	800b438 <ucdr_serialize_endian_uint32_t+0xc0>
 800b45a:	68a2      	ldr	r2, [r4, #8]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	7da0      	ldrb	r0, [r4, #22]
 800b460:	f884 8015 	strb.w	r8, [r4, #21]
 800b464:	1bd2      	subs	r2, r2, r7
 800b466:	1bdb      	subs	r3, r3, r7
 800b468:	f080 0001 	eor.w	r0, r0, #1
 800b46c:	60a2      	str	r2, [r4, #8]
 800b46e:	6123      	str	r3, [r4, #16]
 800b470:	b003      	add	sp, #12
 800b472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	e7ad      	b.n	800b3ec <ucdr_serialize_endian_uint32_t+0x74>
 800b490:	ad01      	add	r5, sp, #4
 800b492:	4629      	mov	r1, r5
 800b494:	463a      	mov	r2, r7
 800b496:	4630      	mov	r0, r6
 800b498:	f00d fae3 	bl	8018a62 <memcpy>
 800b49c:	68a0      	ldr	r0, [r4, #8]
 800b49e:	464a      	mov	r2, r9
 800b4a0:	19e9      	adds	r1, r5, r7
 800b4a2:	f00d fade 	bl	8018a62 <memcpy>
 800b4a6:	e7a1      	b.n	800b3ec <ucdr_serialize_endian_uint32_t+0x74>

0800b4a8 <ucdr_deserialize_uint32_t>:
 800b4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	2104      	movs	r1, #4
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	f000 fe01 	bl	800c0b8 <ucdr_buffer_alignment>
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4be:	f000 fe3f 	bl	800c140 <ucdr_advance_buffer>
 800b4c2:	2104      	movs	r1, #4
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 fd97 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d138      	bne.n	800b540 <ucdr_deserialize_uint32_t+0x98>
 800b4ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4d2:	42b7      	cmp	r7, r6
 800b4d4:	d92f      	bls.n	800b536 <ucdr_deserialize_uint32_t+0x8e>
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	60a7      	str	r7, [r4, #8]
 800b4da:	1bbf      	subs	r7, r7, r6
 800b4dc:	443b      	add	r3, r7
 800b4de:	f1c7 0904 	rsb	r9, r7, #4
 800b4e2:	6123      	str	r3, [r4, #16]
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 fd92 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d046      	beq.n	800b57e <ucdr_deserialize_uint32_t+0xd6>
 800b4f0:	7d23      	ldrb	r3, [r4, #20]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d05c      	beq.n	800b5b0 <ucdr_deserialize_uint32_t+0x108>
 800b4f6:	78f3      	ldrb	r3, [r6, #3]
 800b4f8:	702b      	strb	r3, [r5, #0]
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	d04c      	beq.n	800b598 <ucdr_deserialize_uint32_t+0xf0>
 800b4fe:	78b3      	ldrb	r3, [r6, #2]
 800b500:	706b      	strb	r3, [r5, #1]
 800b502:	2f01      	cmp	r7, #1
 800b504:	f105 0302 	add.w	r3, r5, #2
 800b508:	d04a      	beq.n	800b5a0 <ucdr_deserialize_uint32_t+0xf8>
 800b50a:	7873      	ldrb	r3, [r6, #1]
 800b50c:	70ab      	strb	r3, [r5, #2]
 800b50e:	2f02      	cmp	r7, #2
 800b510:	f105 0303 	add.w	r3, r5, #3
 800b514:	d048      	beq.n	800b5a8 <ucdr_deserialize_uint32_t+0x100>
 800b516:	7833      	ldrb	r3, [r6, #0]
 800b518:	70eb      	strb	r3, [r5, #3]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	68a2      	ldr	r2, [r4, #8]
 800b51e:	7da0      	ldrb	r0, [r4, #22]
 800b520:	2104      	movs	r1, #4
 800b522:	3304      	adds	r3, #4
 800b524:	444a      	add	r2, r9
 800b526:	1bdb      	subs	r3, r3, r7
 800b528:	7561      	strb	r1, [r4, #21]
 800b52a:	60a2      	str	r2, [r4, #8]
 800b52c:	6123      	str	r3, [r4, #16]
 800b52e:	f080 0001 	eor.w	r0, r0, #1
 800b532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b536:	2104      	movs	r1, #4
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 fd69 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b53e:	b1b0      	cbz	r0, 800b56e <ucdr_deserialize_uint32_t+0xc6>
 800b540:	7d23      	ldrb	r3, [r4, #20]
 800b542:	2b01      	cmp	r3, #1
 800b544:	68a3      	ldr	r3, [r4, #8]
 800b546:	d017      	beq.n	800b578 <ucdr_deserialize_uint32_t+0xd0>
 800b548:	78db      	ldrb	r3, [r3, #3]
 800b54a:	702b      	strb	r3, [r5, #0]
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	789b      	ldrb	r3, [r3, #2]
 800b550:	706b      	strb	r3, [r5, #1]
 800b552:	68a3      	ldr	r3, [r4, #8]
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	70ab      	strb	r3, [r5, #2]
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	70eb      	strb	r3, [r5, #3]
 800b55e:	68a2      	ldr	r2, [r4, #8]
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	3204      	adds	r2, #4
 800b564:	3304      	adds	r3, #4
 800b566:	2104      	movs	r1, #4
 800b568:	60a2      	str	r2, [r4, #8]
 800b56a:	6123      	str	r3, [r4, #16]
 800b56c:	7561      	strb	r1, [r4, #21]
 800b56e:	7da0      	ldrb	r0, [r4, #22]
 800b570:	f080 0001 	eor.w	r0, r0, #1
 800b574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	e7ef      	b.n	800b55e <ucdr_deserialize_uint32_t+0xb6>
 800b57e:	68a2      	ldr	r2, [r4, #8]
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	7da0      	ldrb	r0, [r4, #22]
 800b584:	f884 8015 	strb.w	r8, [r4, #21]
 800b588:	1bd2      	subs	r2, r2, r7
 800b58a:	1bdb      	subs	r3, r3, r7
 800b58c:	60a2      	str	r2, [r4, #8]
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	f080 0001 	eor.w	r0, r0, #1
 800b594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	789b      	ldrb	r3, [r3, #2]
 800b59c:	706b      	strb	r3, [r5, #1]
 800b59e:	1cab      	adds	r3, r5, #2
 800b5a0:	68a2      	ldr	r2, [r4, #8]
 800b5a2:	7852      	ldrb	r2, [r2, #1]
 800b5a4:	f803 2b01 	strb.w	r2, [r3], #1
 800b5a8:	68a2      	ldr	r2, [r4, #8]
 800b5aa:	7812      	ldrb	r2, [r2, #0]
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	e7b4      	b.n	800b51a <ucdr_deserialize_uint32_t+0x72>
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	463a      	mov	r2, r7
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f00d fa54 	bl	8018a62 <memcpy>
 800b5ba:	68a1      	ldr	r1, [r4, #8]
 800b5bc:	464a      	mov	r2, r9
 800b5be:	19e8      	adds	r0, r5, r7
 800b5c0:	f00d fa4f 	bl	8018a62 <memcpy>
 800b5c4:	e7a9      	b.n	800b51a <ucdr_deserialize_uint32_t+0x72>
 800b5c6:	bf00      	nop

0800b5c8 <ucdr_deserialize_endian_uint32_t>:
 800b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	2104      	movs	r1, #4
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4615      	mov	r5, r2
 800b5d4:	f000 fd70 	bl	800c0b8 <ucdr_buffer_alignment>
 800b5d8:	4601      	mov	r1, r0
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b5e0:	f000 fdae 	bl	800c140 <ucdr_advance_buffer>
 800b5e4:	2104      	movs	r1, #4
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fd06 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d13c      	bne.n	800b66a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b5f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b5f4:	42bb      	cmp	r3, r7
 800b5f6:	d933      	bls.n	800b660 <ucdr_deserialize_endian_uint32_t+0x98>
 800b5f8:	eba3 0807 	sub.w	r8, r3, r7
 800b5fc:	60a3      	str	r3, [r4, #8]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	f1c8 0a04 	rsb	sl, r8, #4
 800b604:	4443      	add	r3, r8
 800b606:	6123      	str	r3, [r4, #16]
 800b608:	4651      	mov	r1, sl
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 fd00 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b610:	2800      	cmp	r0, #0
 800b612:	d048      	beq.n	800b6a6 <ucdr_deserialize_endian_uint32_t+0xde>
 800b614:	2e01      	cmp	r6, #1
 800b616:	d061      	beq.n	800b6dc <ucdr_deserialize_endian_uint32_t+0x114>
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	702b      	strb	r3, [r5, #0]
 800b61c:	f1b8 0f00 	cmp.w	r8, #0
 800b620:	d050      	beq.n	800b6c4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b622:	78bb      	ldrb	r3, [r7, #2]
 800b624:	706b      	strb	r3, [r5, #1]
 800b626:	f1b8 0f01 	cmp.w	r8, #1
 800b62a:	f105 0302 	add.w	r3, r5, #2
 800b62e:	d04d      	beq.n	800b6cc <ucdr_deserialize_endian_uint32_t+0x104>
 800b630:	787b      	ldrb	r3, [r7, #1]
 800b632:	70ab      	strb	r3, [r5, #2]
 800b634:	f1b8 0f02 	cmp.w	r8, #2
 800b638:	f105 0303 	add.w	r3, r5, #3
 800b63c:	d04a      	beq.n	800b6d4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b63e:	783b      	ldrb	r3, [r7, #0]
 800b640:	70eb      	strb	r3, [r5, #3]
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	68a2      	ldr	r2, [r4, #8]
 800b646:	7da0      	ldrb	r0, [r4, #22]
 800b648:	2104      	movs	r1, #4
 800b64a:	3304      	adds	r3, #4
 800b64c:	4452      	add	r2, sl
 800b64e:	eba3 0308 	sub.w	r3, r3, r8
 800b652:	7561      	strb	r1, [r4, #21]
 800b654:	60a2      	str	r2, [r4, #8]
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	f080 0001 	eor.w	r0, r0, #1
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	2104      	movs	r1, #4
 800b662:	4620      	mov	r0, r4
 800b664:	f000 fcd4 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b668:	b1a8      	cbz	r0, 800b696 <ucdr_deserialize_endian_uint32_t+0xce>
 800b66a:	2e01      	cmp	r6, #1
 800b66c:	68a3      	ldr	r3, [r4, #8]
 800b66e:	d017      	beq.n	800b6a0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b670:	78db      	ldrb	r3, [r3, #3]
 800b672:	702b      	strb	r3, [r5, #0]
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	789b      	ldrb	r3, [r3, #2]
 800b678:	706b      	strb	r3, [r5, #1]
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	70ab      	strb	r3, [r5, #2]
 800b680:	68a3      	ldr	r3, [r4, #8]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	70eb      	strb	r3, [r5, #3]
 800b686:	68a2      	ldr	r2, [r4, #8]
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	3204      	adds	r2, #4
 800b68c:	3304      	adds	r3, #4
 800b68e:	2104      	movs	r1, #4
 800b690:	60a2      	str	r2, [r4, #8]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	7561      	strb	r1, [r4, #21]
 800b696:	7da0      	ldrb	r0, [r4, #22]
 800b698:	f080 0001 	eor.w	r0, r0, #1
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	e7ef      	b.n	800b686 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b6a6:	68a2      	ldr	r2, [r4, #8]
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	7da0      	ldrb	r0, [r4, #22]
 800b6ac:	f884 9015 	strb.w	r9, [r4, #21]
 800b6b0:	eba2 0208 	sub.w	r2, r2, r8
 800b6b4:	eba3 0308 	sub.w	r3, r3, r8
 800b6b8:	60a2      	str	r2, [r4, #8]
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	f080 0001 	eor.w	r0, r0, #1
 800b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	789b      	ldrb	r3, [r3, #2]
 800b6c8:	706b      	strb	r3, [r5, #1]
 800b6ca:	1cab      	adds	r3, r5, #2
 800b6cc:	68a2      	ldr	r2, [r4, #8]
 800b6ce:	7852      	ldrb	r2, [r2, #1]
 800b6d0:	f803 2b01 	strb.w	r2, [r3], #1
 800b6d4:	68a2      	ldr	r2, [r4, #8]
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e7b2      	b.n	800b642 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4642      	mov	r2, r8
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f00d f9be 	bl	8018a62 <memcpy>
 800b6e6:	68a1      	ldr	r1, [r4, #8]
 800b6e8:	4652      	mov	r2, sl
 800b6ea:	eb05 0008 	add.w	r0, r5, r8
 800b6ee:	f00d f9b8 	bl	8018a62 <memcpy>
 800b6f2:	e7a6      	b.n	800b642 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b6f4 <ucdr_serialize_uint64_t>:
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	2108      	movs	r1, #8
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	e9cd 2300 	strd	r2, r3, [sp]
 800b702:	f000 fcd9 	bl	800c0b8 <ucdr_buffer_alignment>
 800b706:	4601      	mov	r1, r0
 800b708:	4620      	mov	r0, r4
 800b70a:	7d67      	ldrb	r7, [r4, #21]
 800b70c:	f000 fd18 	bl	800c140 <ucdr_advance_buffer>
 800b710:	2108      	movs	r1, #8
 800b712:	4620      	mov	r0, r4
 800b714:	f000 fc70 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d14e      	bne.n	800b7ba <ucdr_serialize_uint64_t+0xc6>
 800b71c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b720:	42ab      	cmp	r3, r5
 800b722:	d945      	bls.n	800b7b0 <ucdr_serialize_uint64_t+0xbc>
 800b724:	1b5e      	subs	r6, r3, r5
 800b726:	60a3      	str	r3, [r4, #8]
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	f1c6 0808 	rsb	r8, r6, #8
 800b72e:	4433      	add	r3, r6
 800b730:	6123      	str	r3, [r4, #16]
 800b732:	4641      	mov	r1, r8
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fc6b 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d074      	beq.n	800b828 <ucdr_serialize_uint64_t+0x134>
 800b73e:	7d23      	ldrb	r3, [r4, #20]
 800b740:	2b01      	cmp	r3, #1
 800b742:	f000 809b 	beq.w	800b87c <ucdr_serialize_uint64_t+0x188>
 800b746:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b74a:	702b      	strb	r3, [r5, #0]
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	d078      	beq.n	800b842 <ucdr_serialize_uint64_t+0x14e>
 800b750:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b754:	706b      	strb	r3, [r5, #1]
 800b756:	2e01      	cmp	r6, #1
 800b758:	d077      	beq.n	800b84a <ucdr_serialize_uint64_t+0x156>
 800b75a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b75e:	70ab      	strb	r3, [r5, #2]
 800b760:	2e02      	cmp	r6, #2
 800b762:	d076      	beq.n	800b852 <ucdr_serialize_uint64_t+0x15e>
 800b764:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b768:	70eb      	strb	r3, [r5, #3]
 800b76a:	2e03      	cmp	r6, #3
 800b76c:	d075      	beq.n	800b85a <ucdr_serialize_uint64_t+0x166>
 800b76e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b772:	712b      	strb	r3, [r5, #4]
 800b774:	2e04      	cmp	r6, #4
 800b776:	d074      	beq.n	800b862 <ucdr_serialize_uint64_t+0x16e>
 800b778:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b77c:	716b      	strb	r3, [r5, #5]
 800b77e:	2e05      	cmp	r6, #5
 800b780:	d073      	beq.n	800b86a <ucdr_serialize_uint64_t+0x176>
 800b782:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b786:	71ab      	strb	r3, [r5, #6]
 800b788:	2e06      	cmp	r6, #6
 800b78a:	d072      	beq.n	800b872 <ucdr_serialize_uint64_t+0x17e>
 800b78c:	f89d 3000 	ldrb.w	r3, [sp]
 800b790:	71eb      	strb	r3, [r5, #7]
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	68a2      	ldr	r2, [r4, #8]
 800b796:	7da0      	ldrb	r0, [r4, #22]
 800b798:	3308      	adds	r3, #8
 800b79a:	1b9e      	subs	r6, r3, r6
 800b79c:	4442      	add	r2, r8
 800b79e:	2308      	movs	r3, #8
 800b7a0:	f080 0001 	eor.w	r0, r0, #1
 800b7a4:	60a2      	str	r2, [r4, #8]
 800b7a6:	6126      	str	r6, [r4, #16]
 800b7a8:	7563      	strb	r3, [r4, #21]
 800b7aa:	b002      	add	sp, #8
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	2108      	movs	r1, #8
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fc2c 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b7b8:	b350      	cbz	r0, 800b810 <ucdr_serialize_uint64_t+0x11c>
 800b7ba:	7d23      	ldrb	r3, [r4, #20]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d02d      	beq.n	800b81c <ucdr_serialize_uint64_t+0x128>
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b7c6:	701a      	strb	r2, [r3, #0]
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7ce:	705a      	strb	r2, [r3, #1]
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7d6:	709a      	strb	r2, [r3, #2]
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7de:	70da      	strb	r2, [r3, #3]
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b7e6:	711a      	strb	r2, [r3, #4]
 800b7e8:	68a3      	ldr	r3, [r4, #8]
 800b7ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b7ee:	715a      	strb	r2, [r3, #5]
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b7f6:	719a      	strb	r2, [r3, #6]
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	f89d 2000 	ldrb.w	r2, [sp]
 800b7fe:	71da      	strb	r2, [r3, #7]
 800b800:	68a2      	ldr	r2, [r4, #8]
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	3208      	adds	r2, #8
 800b806:	3308      	adds	r3, #8
 800b808:	2108      	movs	r1, #8
 800b80a:	60a2      	str	r2, [r4, #8]
 800b80c:	6123      	str	r3, [r4, #16]
 800b80e:	7561      	strb	r1, [r4, #21]
 800b810:	7da0      	ldrb	r0, [r4, #22]
 800b812:	f080 0001 	eor.w	r0, r0, #1
 800b816:	b002      	add	sp, #8
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	466b      	mov	r3, sp
 800b81e:	cb03      	ldmia	r3!, {r0, r1}
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	6018      	str	r0, [r3, #0]
 800b824:	6059      	str	r1, [r3, #4]
 800b826:	e7eb      	b.n	800b800 <ucdr_serialize_uint64_t+0x10c>
 800b828:	68a2      	ldr	r2, [r4, #8]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	7da0      	ldrb	r0, [r4, #22]
 800b82e:	7567      	strb	r7, [r4, #21]
 800b830:	1b92      	subs	r2, r2, r6
 800b832:	1b9b      	subs	r3, r3, r6
 800b834:	f080 0001 	eor.w	r0, r0, #1
 800b838:	60a2      	str	r2, [r4, #8]
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	b002      	add	sp, #8
 800b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b842:	68a3      	ldr	r3, [r4, #8]
 800b844:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b850:	701a      	strb	r2, [r3, #0]
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	f89d 2000 	ldrb.w	r2, [sp]
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	e78a      	b.n	800b792 <ucdr_serialize_uint64_t+0x9e>
 800b87c:	4628      	mov	r0, r5
 800b87e:	466d      	mov	r5, sp
 800b880:	4629      	mov	r1, r5
 800b882:	4632      	mov	r2, r6
 800b884:	f00d f8ed 	bl	8018a62 <memcpy>
 800b888:	68a0      	ldr	r0, [r4, #8]
 800b88a:	4642      	mov	r2, r8
 800b88c:	19a9      	adds	r1, r5, r6
 800b88e:	f00d f8e8 	bl	8018a62 <memcpy>
 800b892:	e77e      	b.n	800b792 <ucdr_serialize_uint64_t+0x9e>

0800b894 <ucdr_serialize_int16_t>:
 800b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	460b      	mov	r3, r1
 800b89c:	2102      	movs	r1, #2
 800b89e:	4604      	mov	r4, r0
 800b8a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b8a4:	f000 fc08 	bl	800c0b8 <ucdr_buffer_alignment>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	7d67      	ldrb	r7, [r4, #21]
 800b8ae:	f000 fc47 	bl	800c140 <ucdr_advance_buffer>
 800b8b2:	2102      	movs	r1, #2
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fb9f 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b8ba:	bb78      	cbnz	r0, 800b91c <ucdr_serialize_int16_t+0x88>
 800b8bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8c0:	42ab      	cmp	r3, r5
 800b8c2:	d926      	bls.n	800b912 <ucdr_serialize_int16_t+0x7e>
 800b8c4:	1b5e      	subs	r6, r3, r5
 800b8c6:	60a3      	str	r3, [r4, #8]
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	f1c6 0802 	rsb	r8, r6, #2
 800b8ce:	4433      	add	r3, r6
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	4641      	mov	r1, r8
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fb9b 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d03b      	beq.n	800b956 <ucdr_serialize_int16_t+0xc2>
 800b8de:	7d23      	ldrb	r3, [r4, #20]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d04a      	beq.n	800b97a <ucdr_serialize_int16_t+0xe6>
 800b8e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b8e8:	702b      	strb	r3, [r5, #0]
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d040      	beq.n	800b970 <ucdr_serialize_int16_t+0xdc>
 800b8ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b8f2:	706b      	strb	r3, [r5, #1]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	68a2      	ldr	r2, [r4, #8]
 800b8f8:	7da0      	ldrb	r0, [r4, #22]
 800b8fa:	3302      	adds	r3, #2
 800b8fc:	1b9e      	subs	r6, r3, r6
 800b8fe:	4442      	add	r2, r8
 800b900:	2302      	movs	r3, #2
 800b902:	f080 0001 	eor.w	r0, r0, #1
 800b906:	60a2      	str	r2, [r4, #8]
 800b908:	6126      	str	r6, [r4, #16]
 800b90a:	7563      	strb	r3, [r4, #21]
 800b90c:	b002      	add	sp, #8
 800b90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b912:	2102      	movs	r1, #2
 800b914:	4620      	mov	r0, r4
 800b916:	f000 fb7b 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b91a:	b190      	cbz	r0, 800b942 <ucdr_serialize_int16_t+0xae>
 800b91c:	7d23      	ldrb	r3, [r4, #20]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	68a3      	ldr	r3, [r4, #8]
 800b922:	d014      	beq.n	800b94e <ucdr_serialize_int16_t+0xba>
 800b924:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b930:	705a      	strb	r2, [r3, #1]
 800b932:	68a2      	ldr	r2, [r4, #8]
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	3202      	adds	r2, #2
 800b938:	3302      	adds	r3, #2
 800b93a:	2102      	movs	r1, #2
 800b93c:	60a2      	str	r2, [r4, #8]
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	7561      	strb	r1, [r4, #21]
 800b942:	7da0      	ldrb	r0, [r4, #22]
 800b944:	f080 0001 	eor.w	r0, r0, #1
 800b948:	b002      	add	sp, #8
 800b94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	e7ed      	b.n	800b932 <ucdr_serialize_int16_t+0x9e>
 800b956:	68a2      	ldr	r2, [r4, #8]
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	7da0      	ldrb	r0, [r4, #22]
 800b95c:	7567      	strb	r7, [r4, #21]
 800b95e:	1b92      	subs	r2, r2, r6
 800b960:	1b9b      	subs	r3, r3, r6
 800b962:	f080 0001 	eor.w	r0, r0, #1
 800b966:	60a2      	str	r2, [r4, #8]
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	b002      	add	sp, #8
 800b96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b976:	701a      	strb	r2, [r3, #0]
 800b978:	e7bc      	b.n	800b8f4 <ucdr_serialize_int16_t+0x60>
 800b97a:	4628      	mov	r0, r5
 800b97c:	f10d 0506 	add.w	r5, sp, #6
 800b980:	4629      	mov	r1, r5
 800b982:	4632      	mov	r2, r6
 800b984:	f00d f86d 	bl	8018a62 <memcpy>
 800b988:	68a0      	ldr	r0, [r4, #8]
 800b98a:	4642      	mov	r2, r8
 800b98c:	19a9      	adds	r1, r5, r6
 800b98e:	f00d f868 	bl	8018a62 <memcpy>
 800b992:	e7af      	b.n	800b8f4 <ucdr_serialize_int16_t+0x60>

0800b994 <ucdr_deserialize_int16_t>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	460d      	mov	r5, r1
 800b99a:	2102      	movs	r1, #2
 800b99c:	4604      	mov	r4, r0
 800b99e:	f000 fb8b 	bl	800c0b8 <ucdr_buffer_alignment>
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b9aa:	f000 fbc9 	bl	800c140 <ucdr_advance_buffer>
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 fb21 	bl	800bff8 <ucdr_check_buffer_available_for>
 800b9b6:	bb60      	cbnz	r0, 800ba12 <ucdr_deserialize_int16_t+0x7e>
 800b9b8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b9bc:	42be      	cmp	r6, r7
 800b9be:	d923      	bls.n	800ba08 <ucdr_deserialize_int16_t+0x74>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	60a6      	str	r6, [r4, #8]
 800b9c4:	1bf6      	subs	r6, r6, r7
 800b9c6:	4433      	add	r3, r6
 800b9c8:	f1c6 0902 	rsb	r9, r6, #2
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fb1d 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d034      	beq.n	800ba44 <ucdr_deserialize_int16_t+0xb0>
 800b9da:	7d23      	ldrb	r3, [r4, #20]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d042      	beq.n	800ba66 <ucdr_deserialize_int16_t+0xd2>
 800b9e0:	787b      	ldrb	r3, [r7, #1]
 800b9e2:	702b      	strb	r3, [r5, #0]
 800b9e4:	2e00      	cmp	r6, #0
 800b9e6:	d03a      	beq.n	800ba5e <ucdr_deserialize_int16_t+0xca>
 800b9e8:	783b      	ldrb	r3, [r7, #0]
 800b9ea:	706b      	strb	r3, [r5, #1]
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	7da0      	ldrb	r0, [r4, #22]
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	444a      	add	r2, r9
 800b9f8:	1b9b      	subs	r3, r3, r6
 800b9fa:	7561      	strb	r1, [r4, #21]
 800b9fc:	60a2      	str	r2, [r4, #8]
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	f080 0001 	eor.w	r0, r0, #1
 800ba04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba08:	2102      	movs	r1, #2
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 fb00 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800ba10:	b180      	cbz	r0, 800ba34 <ucdr_deserialize_int16_t+0xa0>
 800ba12:	7d23      	ldrb	r3, [r4, #20]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	d011      	beq.n	800ba3e <ucdr_deserialize_int16_t+0xaa>
 800ba1a:	785b      	ldrb	r3, [r3, #1]
 800ba1c:	702b      	strb	r3, [r5, #0]
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	706b      	strb	r3, [r5, #1]
 800ba24:	68a2      	ldr	r2, [r4, #8]
 800ba26:	6923      	ldr	r3, [r4, #16]
 800ba28:	3202      	adds	r2, #2
 800ba2a:	3302      	adds	r3, #2
 800ba2c:	2102      	movs	r1, #2
 800ba2e:	60a2      	str	r2, [r4, #8]
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	7561      	strb	r1, [r4, #21]
 800ba34:	7da0      	ldrb	r0, [r4, #22]
 800ba36:	f080 0001 	eor.w	r0, r0, #1
 800ba3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	802b      	strh	r3, [r5, #0]
 800ba42:	e7ef      	b.n	800ba24 <ucdr_deserialize_int16_t+0x90>
 800ba44:	68a2      	ldr	r2, [r4, #8]
 800ba46:	6923      	ldr	r3, [r4, #16]
 800ba48:	7da0      	ldrb	r0, [r4, #22]
 800ba4a:	f884 8015 	strb.w	r8, [r4, #21]
 800ba4e:	1b92      	subs	r2, r2, r6
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	60a2      	str	r2, [r4, #8]
 800ba54:	6123      	str	r3, [r4, #16]
 800ba56:	f080 0001 	eor.w	r0, r0, #1
 800ba5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5e:	68a3      	ldr	r3, [r4, #8]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	706b      	strb	r3, [r5, #1]
 800ba64:	e7c2      	b.n	800b9ec <ucdr_deserialize_int16_t+0x58>
 800ba66:	4639      	mov	r1, r7
 800ba68:	4632      	mov	r2, r6
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f00c fff9 	bl	8018a62 <memcpy>
 800ba70:	68a1      	ldr	r1, [r4, #8]
 800ba72:	464a      	mov	r2, r9
 800ba74:	19a8      	adds	r0, r5, r6
 800ba76:	f00c fff4 	bl	8018a62 <memcpy>
 800ba7a:	e7b7      	b.n	800b9ec <ucdr_deserialize_int16_t+0x58>

0800ba7c <ucdr_serialize_int32_t>:
 800ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	4604      	mov	r4, r0
 800ba84:	9101      	str	r1, [sp, #4]
 800ba86:	2104      	movs	r1, #4
 800ba88:	f000 fb16 	bl	800c0b8 <ucdr_buffer_alignment>
 800ba8c:	4601      	mov	r1, r0
 800ba8e:	4620      	mov	r0, r4
 800ba90:	7d67      	ldrb	r7, [r4, #21]
 800ba92:	f000 fb55 	bl	800c140 <ucdr_advance_buffer>
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 faad 	bl	800bff8 <ucdr_check_buffer_available_for>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d139      	bne.n	800bb16 <ucdr_serialize_int32_t+0x9a>
 800baa2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800baa6:	42ab      	cmp	r3, r5
 800baa8:	d930      	bls.n	800bb0c <ucdr_serialize_int32_t+0x90>
 800baaa:	1b5e      	subs	r6, r3, r5
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	f1c6 0804 	rsb	r8, r6, #4
 800bab4:	4433      	add	r3, r6
 800bab6:	6123      	str	r3, [r4, #16]
 800bab8:	4641      	mov	r1, r8
 800baba:	4620      	mov	r0, r4
 800babc:	f000 faa8 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d04c      	beq.n	800bb5e <ucdr_serialize_int32_t+0xe2>
 800bac4:	7d23      	ldrb	r3, [r4, #20]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d063      	beq.n	800bb92 <ucdr_serialize_int32_t+0x116>
 800baca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bace:	702b      	strb	r3, [r5, #0]
 800bad0:	2e00      	cmp	r6, #0
 800bad2:	d051      	beq.n	800bb78 <ucdr_serialize_int32_t+0xfc>
 800bad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bad8:	706b      	strb	r3, [r5, #1]
 800bada:	2e01      	cmp	r6, #1
 800badc:	d050      	beq.n	800bb80 <ucdr_serialize_int32_t+0x104>
 800bade:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bae2:	70ab      	strb	r3, [r5, #2]
 800bae4:	2e02      	cmp	r6, #2
 800bae6:	d04f      	beq.n	800bb88 <ucdr_serialize_int32_t+0x10c>
 800bae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800baec:	70eb      	strb	r3, [r5, #3]
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	68a2      	ldr	r2, [r4, #8]
 800baf2:	7da0      	ldrb	r0, [r4, #22]
 800baf4:	3304      	adds	r3, #4
 800baf6:	1b9e      	subs	r6, r3, r6
 800baf8:	4442      	add	r2, r8
 800bafa:	2304      	movs	r3, #4
 800bafc:	f080 0001 	eor.w	r0, r0, #1
 800bb00:	60a2      	str	r2, [r4, #8]
 800bb02:	6126      	str	r6, [r4, #16]
 800bb04:	7563      	strb	r3, [r4, #21]
 800bb06:	b002      	add	sp, #8
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	2104      	movs	r1, #4
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 fa7e 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bb14:	b1d0      	cbz	r0, 800bb4c <ucdr_serialize_int32_t+0xd0>
 800bb16:	7d23      	ldrb	r3, [r4, #20]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	d01c      	beq.n	800bb58 <ucdr_serialize_int32_t+0xdc>
 800bb1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	68a3      	ldr	r3, [r4, #8]
 800bb26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb2a:	705a      	strb	r2, [r3, #1]
 800bb2c:	68a3      	ldr	r3, [r4, #8]
 800bb2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb32:	709a      	strb	r2, [r3, #2]
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb3a:	70da      	strb	r2, [r3, #3]
 800bb3c:	68a2      	ldr	r2, [r4, #8]
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	3204      	adds	r2, #4
 800bb42:	3304      	adds	r3, #4
 800bb44:	2104      	movs	r1, #4
 800bb46:	60a2      	str	r2, [r4, #8]
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	7561      	strb	r1, [r4, #21]
 800bb4c:	7da0      	ldrb	r0, [r4, #22]
 800bb4e:	f080 0001 	eor.w	r0, r0, #1
 800bb52:	b002      	add	sp, #8
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	9a01      	ldr	r2, [sp, #4]
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	e7ee      	b.n	800bb3c <ucdr_serialize_int32_t+0xc0>
 800bb5e:	68a2      	ldr	r2, [r4, #8]
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	7da0      	ldrb	r0, [r4, #22]
 800bb64:	7567      	strb	r7, [r4, #21]
 800bb66:	1b92      	subs	r2, r2, r6
 800bb68:	1b9b      	subs	r3, r3, r6
 800bb6a:	f080 0001 	eor.w	r0, r0, #1
 800bb6e:	60a2      	str	r2, [r4, #8]
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	b002      	add	sp, #8
 800bb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e7ad      	b.n	800baee <ucdr_serialize_int32_t+0x72>
 800bb92:	4628      	mov	r0, r5
 800bb94:	ad01      	add	r5, sp, #4
 800bb96:	4629      	mov	r1, r5
 800bb98:	4632      	mov	r2, r6
 800bb9a:	f00c ff62 	bl	8018a62 <memcpy>
 800bb9e:	68a0      	ldr	r0, [r4, #8]
 800bba0:	4642      	mov	r2, r8
 800bba2:	19a9      	adds	r1, r5, r6
 800bba4:	f00c ff5d 	bl	8018a62 <memcpy>
 800bba8:	e7a1      	b.n	800baee <ucdr_serialize_int32_t+0x72>
 800bbaa:	bf00      	nop

0800bbac <ucdr_deserialize_int32_t>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	460d      	mov	r5, r1
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	f000 fa7f 	bl	800c0b8 <ucdr_buffer_alignment>
 800bbba:	4601      	mov	r1, r0
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bbc2:	f000 fabd 	bl	800c140 <ucdr_advance_buffer>
 800bbc6:	2104      	movs	r1, #4
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 fa15 	bl	800bff8 <ucdr_check_buffer_available_for>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d138      	bne.n	800bc44 <ucdr_deserialize_int32_t+0x98>
 800bbd2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bbd6:	42b7      	cmp	r7, r6
 800bbd8:	d92f      	bls.n	800bc3a <ucdr_deserialize_int32_t+0x8e>
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	60a7      	str	r7, [r4, #8]
 800bbde:	1bbf      	subs	r7, r7, r6
 800bbe0:	443b      	add	r3, r7
 800bbe2:	f1c7 0904 	rsb	r9, r7, #4
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	4649      	mov	r1, r9
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fa10 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d046      	beq.n	800bc82 <ucdr_deserialize_int32_t+0xd6>
 800bbf4:	7d23      	ldrb	r3, [r4, #20]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d05c      	beq.n	800bcb4 <ucdr_deserialize_int32_t+0x108>
 800bbfa:	78f3      	ldrb	r3, [r6, #3]
 800bbfc:	702b      	strb	r3, [r5, #0]
 800bbfe:	2f00      	cmp	r7, #0
 800bc00:	d04c      	beq.n	800bc9c <ucdr_deserialize_int32_t+0xf0>
 800bc02:	78b3      	ldrb	r3, [r6, #2]
 800bc04:	706b      	strb	r3, [r5, #1]
 800bc06:	2f01      	cmp	r7, #1
 800bc08:	f105 0302 	add.w	r3, r5, #2
 800bc0c:	d04a      	beq.n	800bca4 <ucdr_deserialize_int32_t+0xf8>
 800bc0e:	7873      	ldrb	r3, [r6, #1]
 800bc10:	70ab      	strb	r3, [r5, #2]
 800bc12:	2f02      	cmp	r7, #2
 800bc14:	f105 0303 	add.w	r3, r5, #3
 800bc18:	d048      	beq.n	800bcac <ucdr_deserialize_int32_t+0x100>
 800bc1a:	7833      	ldrb	r3, [r6, #0]
 800bc1c:	70eb      	strb	r3, [r5, #3]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	68a2      	ldr	r2, [r4, #8]
 800bc22:	7da0      	ldrb	r0, [r4, #22]
 800bc24:	2104      	movs	r1, #4
 800bc26:	3304      	adds	r3, #4
 800bc28:	444a      	add	r2, r9
 800bc2a:	1bdb      	subs	r3, r3, r7
 800bc2c:	7561      	strb	r1, [r4, #21]
 800bc2e:	60a2      	str	r2, [r4, #8]
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	f080 0001 	eor.w	r0, r0, #1
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	2104      	movs	r1, #4
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 f9e7 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bc42:	b1b0      	cbz	r0, 800bc72 <ucdr_deserialize_int32_t+0xc6>
 800bc44:	7d23      	ldrb	r3, [r4, #20]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	68a3      	ldr	r3, [r4, #8]
 800bc4a:	d017      	beq.n	800bc7c <ucdr_deserialize_int32_t+0xd0>
 800bc4c:	78db      	ldrb	r3, [r3, #3]
 800bc4e:	702b      	strb	r3, [r5, #0]
 800bc50:	68a3      	ldr	r3, [r4, #8]
 800bc52:	789b      	ldrb	r3, [r3, #2]
 800bc54:	706b      	strb	r3, [r5, #1]
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	70ab      	strb	r3, [r5, #2]
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	70eb      	strb	r3, [r5, #3]
 800bc62:	68a2      	ldr	r2, [r4, #8]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	3204      	adds	r2, #4
 800bc68:	3304      	adds	r3, #4
 800bc6a:	2104      	movs	r1, #4
 800bc6c:	60a2      	str	r2, [r4, #8]
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	7561      	strb	r1, [r4, #21]
 800bc72:	7da0      	ldrb	r0, [r4, #22]
 800bc74:	f080 0001 	eor.w	r0, r0, #1
 800bc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	602b      	str	r3, [r5, #0]
 800bc80:	e7ef      	b.n	800bc62 <ucdr_deserialize_int32_t+0xb6>
 800bc82:	68a2      	ldr	r2, [r4, #8]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	7da0      	ldrb	r0, [r4, #22]
 800bc88:	f884 8015 	strb.w	r8, [r4, #21]
 800bc8c:	1bd2      	subs	r2, r2, r7
 800bc8e:	1bdb      	subs	r3, r3, r7
 800bc90:	60a2      	str	r2, [r4, #8]
 800bc92:	6123      	str	r3, [r4, #16]
 800bc94:	f080 0001 	eor.w	r0, r0, #1
 800bc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9c:	68a3      	ldr	r3, [r4, #8]
 800bc9e:	789b      	ldrb	r3, [r3, #2]
 800bca0:	706b      	strb	r3, [r5, #1]
 800bca2:	1cab      	adds	r3, r5, #2
 800bca4:	68a2      	ldr	r2, [r4, #8]
 800bca6:	7852      	ldrb	r2, [r2, #1]
 800bca8:	f803 2b01 	strb.w	r2, [r3], #1
 800bcac:	68a2      	ldr	r2, [r4, #8]
 800bcae:	7812      	ldrb	r2, [r2, #0]
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	e7b4      	b.n	800bc1e <ucdr_deserialize_int32_t+0x72>
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	463a      	mov	r2, r7
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f00c fed2 	bl	8018a62 <memcpy>
 800bcbe:	68a1      	ldr	r1, [r4, #8]
 800bcc0:	464a      	mov	r2, r9
 800bcc2:	19e8      	adds	r0, r5, r7
 800bcc4:	f00c fecd 	bl	8018a62 <memcpy>
 800bcc8:	e7a9      	b.n	800bc1e <ucdr_deserialize_int32_t+0x72>
 800bcca:	bf00      	nop

0800bccc <ucdr_serialize_double>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	ed8d 0b00 	vstr	d0, [sp]
 800bcda:	f000 f9ed 	bl	800c0b8 <ucdr_buffer_alignment>
 800bcde:	4601      	mov	r1, r0
 800bce0:	4620      	mov	r0, r4
 800bce2:	7d67      	ldrb	r7, [r4, #21]
 800bce4:	f000 fa2c 	bl	800c140 <ucdr_advance_buffer>
 800bce8:	2108      	movs	r1, #8
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f984 	bl	800bff8 <ucdr_check_buffer_available_for>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d14e      	bne.n	800bd92 <ucdr_serialize_double+0xc6>
 800bcf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	d945      	bls.n	800bd88 <ucdr_serialize_double+0xbc>
 800bcfc:	1b5e      	subs	r6, r3, r5
 800bcfe:	60a3      	str	r3, [r4, #8]
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	f1c6 0808 	rsb	r8, r6, #8
 800bd06:	4433      	add	r3, r6
 800bd08:	6123      	str	r3, [r4, #16]
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 f97f 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d074      	beq.n	800be00 <ucdr_serialize_double+0x134>
 800bd16:	7d23      	ldrb	r3, [r4, #20]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	f000 809b 	beq.w	800be54 <ucdr_serialize_double+0x188>
 800bd1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd22:	702b      	strb	r3, [r5, #0]
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	d078      	beq.n	800be1a <ucdr_serialize_double+0x14e>
 800bd28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd2c:	706b      	strb	r3, [r5, #1]
 800bd2e:	2e01      	cmp	r6, #1
 800bd30:	d077      	beq.n	800be22 <ucdr_serialize_double+0x156>
 800bd32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd36:	70ab      	strb	r3, [r5, #2]
 800bd38:	2e02      	cmp	r6, #2
 800bd3a:	d076      	beq.n	800be2a <ucdr_serialize_double+0x15e>
 800bd3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd40:	70eb      	strb	r3, [r5, #3]
 800bd42:	2e03      	cmp	r6, #3
 800bd44:	d075      	beq.n	800be32 <ucdr_serialize_double+0x166>
 800bd46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd4a:	712b      	strb	r3, [r5, #4]
 800bd4c:	2e04      	cmp	r6, #4
 800bd4e:	d074      	beq.n	800be3a <ucdr_serialize_double+0x16e>
 800bd50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bd54:	716b      	strb	r3, [r5, #5]
 800bd56:	2e05      	cmp	r6, #5
 800bd58:	d073      	beq.n	800be42 <ucdr_serialize_double+0x176>
 800bd5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bd5e:	71ab      	strb	r3, [r5, #6]
 800bd60:	2e06      	cmp	r6, #6
 800bd62:	d072      	beq.n	800be4a <ucdr_serialize_double+0x17e>
 800bd64:	f89d 3000 	ldrb.w	r3, [sp]
 800bd68:	71eb      	strb	r3, [r5, #7]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	68a2      	ldr	r2, [r4, #8]
 800bd6e:	7da0      	ldrb	r0, [r4, #22]
 800bd70:	3308      	adds	r3, #8
 800bd72:	1b9e      	subs	r6, r3, r6
 800bd74:	4442      	add	r2, r8
 800bd76:	2308      	movs	r3, #8
 800bd78:	f080 0001 	eor.w	r0, r0, #1
 800bd7c:	60a2      	str	r2, [r4, #8]
 800bd7e:	6126      	str	r6, [r4, #16]
 800bd80:	7563      	strb	r3, [r4, #21]
 800bd82:	b002      	add	sp, #8
 800bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd88:	2108      	movs	r1, #8
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f940 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bd90:	b350      	cbz	r0, 800bde8 <ucdr_serialize_double+0x11c>
 800bd92:	7d23      	ldrb	r3, [r4, #20]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d02d      	beq.n	800bdf4 <ucdr_serialize_double+0x128>
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	68a3      	ldr	r3, [r4, #8]
 800bda2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bda6:	705a      	strb	r2, [r3, #1]
 800bda8:	68a3      	ldr	r3, [r4, #8]
 800bdaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdae:	709a      	strb	r2, [r3, #2]
 800bdb0:	68a3      	ldr	r3, [r4, #8]
 800bdb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdb6:	70da      	strb	r2, [r3, #3]
 800bdb8:	68a3      	ldr	r3, [r4, #8]
 800bdba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bdbe:	711a      	strb	r2, [r3, #4]
 800bdc0:	68a3      	ldr	r3, [r4, #8]
 800bdc2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bdc6:	715a      	strb	r2, [r3, #5]
 800bdc8:	68a3      	ldr	r3, [r4, #8]
 800bdca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bdce:	719a      	strb	r2, [r3, #6]
 800bdd0:	68a3      	ldr	r3, [r4, #8]
 800bdd2:	f89d 2000 	ldrb.w	r2, [sp]
 800bdd6:	71da      	strb	r2, [r3, #7]
 800bdd8:	68a2      	ldr	r2, [r4, #8]
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	3208      	adds	r2, #8
 800bdde:	3308      	adds	r3, #8
 800bde0:	2108      	movs	r1, #8
 800bde2:	60a2      	str	r2, [r4, #8]
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	7561      	strb	r1, [r4, #21]
 800bde8:	7da0      	ldrb	r0, [r4, #22]
 800bdea:	f080 0001 	eor.w	r0, r0, #1
 800bdee:	b002      	add	sp, #8
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	466b      	mov	r3, sp
 800bdf6:	cb03      	ldmia	r3!, {r0, r1}
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	6018      	str	r0, [r3, #0]
 800bdfc:	6059      	str	r1, [r3, #4]
 800bdfe:	e7eb      	b.n	800bdd8 <ucdr_serialize_double+0x10c>
 800be00:	68a2      	ldr	r2, [r4, #8]
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	7da0      	ldrb	r0, [r4, #22]
 800be06:	7567      	strb	r7, [r4, #21]
 800be08:	1b92      	subs	r2, r2, r6
 800be0a:	1b9b      	subs	r3, r3, r6
 800be0c:	f080 0001 	eor.w	r0, r0, #1
 800be10:	60a2      	str	r2, [r4, #8]
 800be12:	6123      	str	r3, [r4, #16]
 800be14:	b002      	add	sp, #8
 800be16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1a:	68a3      	ldr	r3, [r4, #8]
 800be1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	68a3      	ldr	r3, [r4, #8]
 800be24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	68a3      	ldr	r3, [r4, #8]
 800be44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	f89d 2000 	ldrb.w	r2, [sp]
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	e78a      	b.n	800bd6a <ucdr_serialize_double+0x9e>
 800be54:	4628      	mov	r0, r5
 800be56:	466d      	mov	r5, sp
 800be58:	4629      	mov	r1, r5
 800be5a:	4632      	mov	r2, r6
 800be5c:	f00c fe01 	bl	8018a62 <memcpy>
 800be60:	68a0      	ldr	r0, [r4, #8]
 800be62:	4642      	mov	r2, r8
 800be64:	19a9      	adds	r1, r5, r6
 800be66:	f00c fdfc 	bl	8018a62 <memcpy>
 800be6a:	e77e      	b.n	800bd6a <ucdr_serialize_double+0x9e>

0800be6c <ucdr_deserialize_double>:
 800be6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be70:	460d      	mov	r5, r1
 800be72:	2108      	movs	r1, #8
 800be74:	4604      	mov	r4, r0
 800be76:	f000 f91f 	bl	800c0b8 <ucdr_buffer_alignment>
 800be7a:	4601      	mov	r1, r0
 800be7c:	4620      	mov	r0, r4
 800be7e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800be82:	f000 f95d 	bl	800c140 <ucdr_advance_buffer>
 800be86:	2108      	movs	r1, #8
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 f8b5 	bl	800bff8 <ucdr_check_buffer_available_for>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d151      	bne.n	800bf36 <ucdr_deserialize_double+0xca>
 800be92:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800be96:	42be      	cmp	r6, r7
 800be98:	d948      	bls.n	800bf2c <ucdr_deserialize_double+0xc0>
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	60a6      	str	r6, [r4, #8]
 800be9e:	1bf6      	subs	r6, r6, r7
 800bea0:	4433      	add	r3, r6
 800bea2:	f1c6 0808 	rsb	r8, r6, #8
 800bea6:	6123      	str	r3, [r4, #16]
 800bea8:	4641      	mov	r1, r8
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 f8b0 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d06d      	beq.n	800bf90 <ucdr_deserialize_double+0x124>
 800beb4:	7d23      	ldrb	r3, [r4, #20]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	f000 8093 	beq.w	800bfe2 <ucdr_deserialize_double+0x176>
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	702b      	strb	r3, [r5, #0]
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	d072      	beq.n	800bfaa <ucdr_deserialize_double+0x13e>
 800bec4:	79bb      	ldrb	r3, [r7, #6]
 800bec6:	706b      	strb	r3, [r5, #1]
 800bec8:	2e01      	cmp	r6, #1
 800beca:	f105 0302 	add.w	r3, r5, #2
 800bece:	d070      	beq.n	800bfb2 <ucdr_deserialize_double+0x146>
 800bed0:	797b      	ldrb	r3, [r7, #5]
 800bed2:	70ab      	strb	r3, [r5, #2]
 800bed4:	2e02      	cmp	r6, #2
 800bed6:	f105 0303 	add.w	r3, r5, #3
 800beda:	d06e      	beq.n	800bfba <ucdr_deserialize_double+0x14e>
 800bedc:	793b      	ldrb	r3, [r7, #4]
 800bede:	70eb      	strb	r3, [r5, #3]
 800bee0:	2e03      	cmp	r6, #3
 800bee2:	f105 0304 	add.w	r3, r5, #4
 800bee6:	d06c      	beq.n	800bfc2 <ucdr_deserialize_double+0x156>
 800bee8:	78fb      	ldrb	r3, [r7, #3]
 800beea:	712b      	strb	r3, [r5, #4]
 800beec:	2e04      	cmp	r6, #4
 800beee:	f105 0305 	add.w	r3, r5, #5
 800bef2:	d06a      	beq.n	800bfca <ucdr_deserialize_double+0x15e>
 800bef4:	78bb      	ldrb	r3, [r7, #2]
 800bef6:	716b      	strb	r3, [r5, #5]
 800bef8:	2e05      	cmp	r6, #5
 800befa:	f105 0306 	add.w	r3, r5, #6
 800befe:	d068      	beq.n	800bfd2 <ucdr_deserialize_double+0x166>
 800bf00:	787b      	ldrb	r3, [r7, #1]
 800bf02:	71ab      	strb	r3, [r5, #6]
 800bf04:	2e06      	cmp	r6, #6
 800bf06:	f105 0307 	add.w	r3, r5, #7
 800bf0a:	d066      	beq.n	800bfda <ucdr_deserialize_double+0x16e>
 800bf0c:	783b      	ldrb	r3, [r7, #0]
 800bf0e:	71eb      	strb	r3, [r5, #7]
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	68a2      	ldr	r2, [r4, #8]
 800bf14:	7da0      	ldrb	r0, [r4, #22]
 800bf16:	3308      	adds	r3, #8
 800bf18:	1b9e      	subs	r6, r3, r6
 800bf1a:	2308      	movs	r3, #8
 800bf1c:	4442      	add	r2, r8
 800bf1e:	7563      	strb	r3, [r4, #21]
 800bf20:	60a2      	str	r2, [r4, #8]
 800bf22:	6126      	str	r6, [r4, #16]
 800bf24:	f080 0001 	eor.w	r0, r0, #1
 800bf28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2c:	2108      	movs	r1, #8
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 f86e 	bl	800c010 <ucdr_check_final_buffer_behavior>
 800bf34:	b310      	cbz	r0, 800bf7c <ucdr_deserialize_double+0x110>
 800bf36:	7d23      	ldrb	r3, [r4, #20]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	d023      	beq.n	800bf86 <ucdr_deserialize_double+0x11a>
 800bf3e:	79db      	ldrb	r3, [r3, #7]
 800bf40:	702b      	strb	r3, [r5, #0]
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	799b      	ldrb	r3, [r3, #6]
 800bf46:	706b      	strb	r3, [r5, #1]
 800bf48:	68a3      	ldr	r3, [r4, #8]
 800bf4a:	795b      	ldrb	r3, [r3, #5]
 800bf4c:	70ab      	strb	r3, [r5, #2]
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	791b      	ldrb	r3, [r3, #4]
 800bf52:	70eb      	strb	r3, [r5, #3]
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	78db      	ldrb	r3, [r3, #3]
 800bf58:	712b      	strb	r3, [r5, #4]
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	789b      	ldrb	r3, [r3, #2]
 800bf5e:	716b      	strb	r3, [r5, #5]
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	785b      	ldrb	r3, [r3, #1]
 800bf64:	71ab      	strb	r3, [r5, #6]
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	71eb      	strb	r3, [r5, #7]
 800bf6c:	68a2      	ldr	r2, [r4, #8]
 800bf6e:	6923      	ldr	r3, [r4, #16]
 800bf70:	3208      	adds	r2, #8
 800bf72:	3308      	adds	r3, #8
 800bf74:	2108      	movs	r1, #8
 800bf76:	60a2      	str	r2, [r4, #8]
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	7561      	strb	r1, [r4, #21]
 800bf7c:	7da0      	ldrb	r0, [r4, #22]
 800bf7e:	f080 0001 	eor.w	r0, r0, #1
 800bf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	606b      	str	r3, [r5, #4]
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	e7ed      	b.n	800bf6c <ucdr_deserialize_double+0x100>
 800bf90:	68a2      	ldr	r2, [r4, #8]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	7da0      	ldrb	r0, [r4, #22]
 800bf96:	f884 9015 	strb.w	r9, [r4, #21]
 800bf9a:	1b92      	subs	r2, r2, r6
 800bf9c:	1b9b      	subs	r3, r3, r6
 800bf9e:	60a2      	str	r2, [r4, #8]
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	f080 0001 	eor.w	r0, r0, #1
 800bfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	799b      	ldrb	r3, [r3, #6]
 800bfae:	706b      	strb	r3, [r5, #1]
 800bfb0:	1cab      	adds	r3, r5, #2
 800bfb2:	68a2      	ldr	r2, [r4, #8]
 800bfb4:	7952      	ldrb	r2, [r2, #5]
 800bfb6:	f803 2b01 	strb.w	r2, [r3], #1
 800bfba:	68a2      	ldr	r2, [r4, #8]
 800bfbc:	7912      	ldrb	r2, [r2, #4]
 800bfbe:	f803 2b01 	strb.w	r2, [r3], #1
 800bfc2:	68a2      	ldr	r2, [r4, #8]
 800bfc4:	78d2      	ldrb	r2, [r2, #3]
 800bfc6:	f803 2b01 	strb.w	r2, [r3], #1
 800bfca:	68a2      	ldr	r2, [r4, #8]
 800bfcc:	7892      	ldrb	r2, [r2, #2]
 800bfce:	f803 2b01 	strb.w	r2, [r3], #1
 800bfd2:	68a2      	ldr	r2, [r4, #8]
 800bfd4:	7852      	ldrb	r2, [r2, #1]
 800bfd6:	f803 2b01 	strb.w	r2, [r3], #1
 800bfda:	68a2      	ldr	r2, [r4, #8]
 800bfdc:	7812      	ldrb	r2, [r2, #0]
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e796      	b.n	800bf10 <ucdr_deserialize_double+0xa4>
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f00c fd3b 	bl	8018a62 <memcpy>
 800bfec:	68a1      	ldr	r1, [r4, #8]
 800bfee:	4642      	mov	r2, r8
 800bff0:	19a8      	adds	r0, r5, r6
 800bff2:	f00c fd36 	bl	8018a62 <memcpy>
 800bff6:	e78b      	b.n	800bf10 <ucdr_deserialize_double+0xa4>

0800bff8 <ucdr_check_buffer_available_for>:
 800bff8:	7d83      	ldrb	r3, [r0, #22]
 800bffa:	b93b      	cbnz	r3, 800c00c <ucdr_check_buffer_available_for+0x14>
 800bffc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c000:	4419      	add	r1, r3
 800c002:	4288      	cmp	r0, r1
 800c004:	bf34      	ite	cc
 800c006:	2000      	movcc	r0, #0
 800c008:	2001      	movcs	r0, #1
 800c00a:	4770      	bx	lr
 800c00c:	2000      	movs	r0, #0
 800c00e:	4770      	bx	lr

0800c010 <ucdr_check_final_buffer_behavior>:
 800c010:	7d83      	ldrb	r3, [r0, #22]
 800c012:	b943      	cbnz	r3, 800c026 <ucdr_check_final_buffer_behavior+0x16>
 800c014:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c018:	4291      	cmp	r1, r2
 800c01a:	b510      	push	{r4, lr}
 800c01c:	4604      	mov	r4, r0
 800c01e:	d205      	bcs.n	800c02c <ucdr_check_final_buffer_behavior+0x1c>
 800c020:	2301      	movs	r3, #1
 800c022:	4618      	mov	r0, r3
 800c024:	bd10      	pop	{r4, pc}
 800c026:	2300      	movs	r3, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	4770      	bx	lr
 800c02c:	6982      	ldr	r2, [r0, #24]
 800c02e:	b13a      	cbz	r2, 800c040 <ucdr_check_final_buffer_behavior+0x30>
 800c030:	69c1      	ldr	r1, [r0, #28]
 800c032:	4790      	blx	r2
 800c034:	f080 0301 	eor.w	r3, r0, #1
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	75a0      	strb	r0, [r4, #22]
 800c03c:	4618      	mov	r0, r3
 800c03e:	bd10      	pop	{r4, pc}
 800c040:	2001      	movs	r0, #1
 800c042:	75a0      	strb	r0, [r4, #22]
 800c044:	e7fa      	b.n	800c03c <ucdr_check_final_buffer_behavior+0x2c>
 800c046:	bf00      	nop

0800c048 <ucdr_set_on_full_buffer_callback>:
 800c048:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop

0800c050 <ucdr_init_buffer_origin_offset_endian>:
 800c050:	b410      	push	{r4}
 800c052:	9c01      	ldr	r4, [sp, #4]
 800c054:	6001      	str	r1, [r0, #0]
 800c056:	440a      	add	r2, r1
 800c058:	6042      	str	r2, [r0, #4]
 800c05a:	190a      	adds	r2, r1, r4
 800c05c:	441c      	add	r4, r3
 800c05e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c062:	6082      	str	r2, [r0, #8]
 800c064:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c068:	7503      	strb	r3, [r0, #20]
 800c06a:	2200      	movs	r2, #0
 800c06c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c074:	7542      	strb	r2, [r0, #21]
 800c076:	7582      	strb	r2, [r0, #22]
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <ucdr_init_buffer_origin_offset>:
 800c07c:	b510      	push	{r4, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	9c04      	ldr	r4, [sp, #16]
 800c082:	9400      	str	r4, [sp, #0]
 800c084:	2401      	movs	r4, #1
 800c086:	9401      	str	r4, [sp, #4]
 800c088:	f7ff ffe2 	bl	800c050 <ucdr_init_buffer_origin_offset_endian>
 800c08c:	b002      	add	sp, #8
 800c08e:	bd10      	pop	{r4, pc}

0800c090 <ucdr_init_buffer_origin>:
 800c090:	b510      	push	{r4, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	2400      	movs	r4, #0
 800c096:	9400      	str	r4, [sp, #0]
 800c098:	f7ff fff0 	bl	800c07c <ucdr_init_buffer_origin_offset>
 800c09c:	b002      	add	sp, #8
 800c09e:	bd10      	pop	{r4, pc}

0800c0a0 <ucdr_init_buffer>:
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f7ff bff5 	b.w	800c090 <ucdr_init_buffer_origin>
 800c0a6:	bf00      	nop

0800c0a8 <ucdr_alignment>:
 800c0a8:	fbb0 f3f1 	udiv	r3, r0, r1
 800c0ac:	fb03 0011 	mls	r0, r3, r1, r0
 800c0b0:	1a08      	subs	r0, r1, r0
 800c0b2:	3901      	subs	r1, #1
 800c0b4:	4008      	ands	r0, r1
 800c0b6:	4770      	bx	lr

0800c0b8 <ucdr_buffer_alignment>:
 800c0b8:	7d43      	ldrb	r3, [r0, #21]
 800c0ba:	428b      	cmp	r3, r1
 800c0bc:	d208      	bcs.n	800c0d0 <ucdr_buffer_alignment+0x18>
 800c0be:	6900      	ldr	r0, [r0, #16]
 800c0c0:	fbb0 f3f1 	udiv	r3, r0, r1
 800c0c4:	fb01 0013 	mls	r0, r1, r3, r0
 800c0c8:	1a08      	subs	r0, r1, r0
 800c0ca:	3901      	subs	r1, #1
 800c0cc:	4008      	ands	r0, r1
 800c0ce:	4770      	bx	lr
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	4770      	bx	lr

0800c0d4 <ucdr_align_to>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	460d      	mov	r5, r1
 800c0da:	f7ff ffed 	bl	800c0b8 <ucdr_buffer_alignment>
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	6921      	ldr	r1, [r4, #16]
 800c0e2:	7565      	strb	r5, [r4, #21]
 800c0e4:	181a      	adds	r2, r3, r0
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	4408      	add	r0, r1
 800c0ec:	bf28      	it	cs
 800c0ee:	4613      	movcs	r3, r2
 800c0f0:	6120      	str	r0, [r4, #16]
 800c0f2:	60a3      	str	r3, [r4, #8]
 800c0f4:	bd38      	pop	{r3, r4, r5, pc}
 800c0f6:	bf00      	nop

0800c0f8 <ucdr_buffer_length>:
 800c0f8:	6882      	ldr	r2, [r0, #8]
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	1a10      	subs	r0, r2, r0
 800c0fe:	4770      	bx	lr

0800c100 <ucdr_buffer_remaining>:
 800c100:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c104:	1a10      	subs	r0, r2, r0
 800c106:	4770      	bx	lr

0800c108 <ucdr_check_final_buffer_behavior_array>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	7d83      	ldrb	r3, [r0, #22]
 800c10c:	b963      	cbnz	r3, 800c128 <ucdr_check_final_buffer_behavior_array+0x20>
 800c10e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c112:	429a      	cmp	r2, r3
 800c114:	4604      	mov	r4, r0
 800c116:	460d      	mov	r5, r1
 800c118:	d308      	bcc.n	800c12c <ucdr_check_final_buffer_behavior_array+0x24>
 800c11a:	b139      	cbz	r1, 800c12c <ucdr_check_final_buffer_behavior_array+0x24>
 800c11c:	6983      	ldr	r3, [r0, #24]
 800c11e:	b163      	cbz	r3, 800c13a <ucdr_check_final_buffer_behavior_array+0x32>
 800c120:	69c1      	ldr	r1, [r0, #28]
 800c122:	4798      	blx	r3
 800c124:	75a0      	strb	r0, [r4, #22]
 800c126:	b108      	cbz	r0, 800c12c <ucdr_check_final_buffer_behavior_array+0x24>
 800c128:	2000      	movs	r0, #0
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7ff ffe7 	bl	800c100 <ucdr_buffer_remaining>
 800c132:	42a8      	cmp	r0, r5
 800c134:	bf28      	it	cs
 800c136:	4628      	movcs	r0, r5
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	2301      	movs	r3, #1
 800c13c:	7583      	strb	r3, [r0, #22]
 800c13e:	e7f3      	b.n	800c128 <ucdr_check_final_buffer_behavior_array+0x20>

0800c140 <ucdr_advance_buffer>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4604      	mov	r4, r0
 800c144:	460d      	mov	r5, r1
 800c146:	f7ff ff57 	bl	800bff8 <ucdr_check_buffer_available_for>
 800c14a:	b178      	cbz	r0, 800c16c <ucdr_advance_buffer+0x2c>
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	68a2      	ldr	r2, [r4, #8]
 800c150:	442b      	add	r3, r5
 800c152:	6123      	str	r3, [r4, #16]
 800c154:	2301      	movs	r3, #1
 800c156:	442a      	add	r2, r5
 800c158:	7563      	strb	r3, [r4, #21]
 800c15a:	60a2      	str	r2, [r4, #8]
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	68a2      	ldr	r2, [r4, #8]
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	4402      	add	r2, r0
 800c164:	4403      	add	r3, r0
 800c166:	1a2d      	subs	r5, r5, r0
 800c168:	60a2      	str	r2, [r4, #8]
 800c16a:	6123      	str	r3, [r4, #16]
 800c16c:	4629      	mov	r1, r5
 800c16e:	2201      	movs	r2, #1
 800c170:	4620      	mov	r0, r4
 800c172:	f7ff ffc9 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 800c176:	2800      	cmp	r0, #0
 800c178:	d1f1      	bne.n	800c15e <ucdr_advance_buffer+0x1e>
 800c17a:	2301      	movs	r3, #1
 800c17c:	7563      	strb	r3, [r4, #21]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}

0800c180 <rcl_get_zero_initialized_node>:
 800c180:	4a03      	ldr	r2, [pc, #12]	@ (800c190 <rcl_get_zero_initialized_node+0x10>)
 800c182:	4603      	mov	r3, r0
 800c184:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c188:	e883 0003 	stmia.w	r3, {r0, r1}
 800c18c:	4618      	mov	r0, r3
 800c18e:	4770      	bx	lr
 800c190:	0801b07c 	.word	0x0801b07c

0800c194 <rcl_node_init>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	b0a9      	sub	sp, #164	@ 0xa4
 800c19a:	4604      	mov	r4, r0
 800c19c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c1a0:	a823      	add	r0, sp, #140	@ 0x8c
 800c1a2:	460e      	mov	r6, r1
 800c1a4:	4615      	mov	r5, r2
 800c1a6:	461f      	mov	r7, r3
 800c1a8:	f006 f93c 	bl	8012424 <rcl_guard_condition_get_default_options>
 800c1ac:	f1b8 0f00 	cmp.w	r8, #0
 800c1b0:	f000 80e6 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	f001 fc0f 	bl	800d9d8 <rcutils_allocator_is_valid>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	f000 80e0 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	f000 80dd 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	f000 80da 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1cc:	2c00      	cmp	r4, #0
 800c1ce:	f000 80d7 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c1d6:	f1b9 0f00 	cmp.w	r9, #0
 800c1da:	f040 80fd 	bne.w	800c3d8 <rcl_node_init+0x244>
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	f000 80ce 	beq.w	800c380 <rcl_node_init+0x1ec>
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	f005 ffdb 	bl	80121a0 <rcl_context_is_valid>
 800c1ea:	4682      	mov	sl, r0
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	f000 80cd 	beq.w	800c38c <rcl_node_init+0x1f8>
 800c1f2:	464a      	mov	r2, r9
 800c1f4:	a922      	add	r1, sp, #136	@ 0x88
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c1fc:	f001 fe84 	bl	800df08 <rmw_validate_node_name>
 800c200:	4681      	mov	r9, r0
 800c202:	2800      	cmp	r0, #0
 800c204:	f040 80be 	bne.w	800c384 <rcl_node_init+0x1f0>
 800c208:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f040 80f0 	bne.w	800c3f0 <rcl_node_init+0x25c>
 800c210:	4628      	mov	r0, r5
 800c212:	f7f4 f807 	bl	8000224 <strlen>
 800c216:	2800      	cmp	r0, #0
 800c218:	f040 80bb 	bne.w	800c392 <rcl_node_init+0x1fe>
 800c21c:	4d7c      	ldr	r5, [pc, #496]	@ (800c410 <rcl_node_init+0x27c>)
 800c21e:	a922      	add	r1, sp, #136	@ 0x88
 800c220:	2200      	movs	r2, #0
 800c222:	4628      	mov	r0, r5
 800c224:	f001 fe52 	bl	800decc <rmw_validate_namespace>
 800c228:	4681      	mov	r9, r0
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f040 80aa 	bne.w	800c384 <rcl_node_init+0x1f0>
 800c230:	4682      	mov	sl, r0
 800c232:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c234:	2800      	cmp	r0, #0
 800c236:	f040 80e0 	bne.w	800c3fa <rcl_node_init+0x266>
 800c23a:	f8d8 3000 	ldr.w	r3, [r8]
 800c23e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c242:	2078      	movs	r0, #120	@ 0x78
 800c244:	4798      	blx	r3
 800c246:	4681      	mov	r9, r0
 800c248:	6060      	str	r0, [r4, #4]
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f000 80ca 	beq.w	800c3e4 <rcl_node_init+0x250>
 800c250:	2200      	movs	r2, #0
 800c252:	2300      	movs	r3, #0
 800c254:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c258:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c25c:	a808      	add	r0, sp, #32
 800c25e:	f000 f939 	bl	800c4d4 <rcl_node_get_default_options>
 800c262:	a908      	add	r1, sp, #32
 800c264:	4648      	mov	r0, r9
 800c266:	2268      	movs	r2, #104	@ 0x68
 800c268:	f00c fbfb 	bl	8018a62 <memcpy>
 800c26c:	6861      	ldr	r1, [r4, #4]
 800c26e:	6027      	str	r7, [r4, #0]
 800c270:	4640      	mov	r0, r8
 800c272:	f000 f93d 	bl	800c4f0 <rcl_node_options_copy>
 800c276:	2800      	cmp	r0, #0
 800c278:	d158      	bne.n	800c32c <rcl_node_init+0x198>
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7f3 ffd2 	bl	8000224 <strlen>
 800c280:	4428      	add	r0, r5
 800c282:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c286:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c28a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c28c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	bf0c      	ite	eq
 800c294:	4b5f      	ldreq	r3, [pc, #380]	@ (800c414 <rcl_node_init+0x280>)
 800c296:	4b60      	ldrne	r3, [pc, #384]	@ (800c418 <rcl_node_init+0x284>)
 800c298:	9302      	str	r3, [sp, #8]
 800c29a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c2a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2a8:	f001 fbee 	bl	800da88 <rcutils_format_string_limit>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c2b2:	6818      	ldr	r0, [r3, #0]
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	3028      	adds	r0, #40	@ 0x28
 800c2b8:	462a      	mov	r2, r5
 800c2ba:	6866      	ldr	r6, [r4, #4]
 800c2bc:	f001 ff12 	bl	800e0e4 <rmw_create_node>
 800c2c0:	6863      	ldr	r3, [r4, #4]
 800c2c2:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c2c4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d032      	beq.n	800c330 <rcl_node_init+0x19c>
 800c2ca:	f001 ff9f 	bl	800e20c <rmw_node_get_graph_guard_condition>
 800c2ce:	4681      	mov	r9, r0
 800c2d0:	b360      	cbz	r0, 800c32c <rcl_node_init+0x198>
 800c2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c2da:	6866      	ldr	r6, [r4, #4]
 800c2dc:	2008      	movs	r0, #8
 800c2de:	4798      	blx	r3
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c2e4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c2e8:	f1bb 0f00 	cmp.w	fp, #0
 800c2ec:	d020      	beq.n	800c330 <rcl_node_init+0x19c>
 800c2ee:	a806      	add	r0, sp, #24
 800c2f0:	f005 ffbc 	bl	801226c <rcl_get_zero_initialized_guard_condition>
 800c2f4:	a806      	add	r0, sp, #24
 800c2f6:	c803      	ldmia	r0, {r0, r1}
 800c2f8:	6863      	ldr	r3, [r4, #4]
 800c2fa:	46c4      	mov	ip, r8
 800c2fc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c300:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c308:	ae23      	add	r6, sp, #140	@ 0x8c
 800c30a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c30c:	f8dc 3000 	ldr.w	r3, [ip]
 800c310:	6033      	str	r3, [r6, #0]
 800c312:	ab28      	add	r3, sp, #160	@ 0xa0
 800c314:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c318:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c31c:	4649      	mov	r1, r9
 800c31e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c320:	463a      	mov	r2, r7
 800c322:	4670      	mov	r0, lr
 800c324:	f005 fff8 	bl	8012318 <rcl_guard_condition_init_from_rmw>
 800c328:	4681      	mov	r9, r0
 800c32a:	b328      	cbz	r0, 800c378 <rcl_node_init+0x1e4>
 800c32c:	6863      	ldr	r3, [r4, #4]
 800c32e:	b1f3      	cbz	r3, 800c36e <rcl_node_init+0x1da>
 800c330:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c332:	b128      	cbz	r0, 800c340 <rcl_node_init+0x1ac>
 800c334:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c338:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c33c:	4798      	blx	r3
 800c33e:	6863      	ldr	r3, [r4, #4]
 800c340:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c342:	b110      	cbz	r0, 800c34a <rcl_node_init+0x1b6>
 800c344:	f001 fee6 	bl	800e114 <rmw_destroy_node>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c34c:	b148      	cbz	r0, 800c362 <rcl_node_init+0x1ce>
 800c34e:	f006 f843 	bl	80123d8 <rcl_guard_condition_fini>
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c358:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c35a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c35e:	4798      	blx	r3
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c366:	4618      	mov	r0, r3
 800c368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c36c:	4798      	blx	r3
 800c36e:	2300      	movs	r3, #0
 800c370:	e9c4 3300 	strd	r3, r3, [r4]
 800c374:	f04f 0901 	mov.w	r9, #1
 800c378:	f1ba 0f00 	cmp.w	sl, #0
 800c37c:	d125      	bne.n	800c3ca <rcl_node_init+0x236>
 800c37e:	e001      	b.n	800c384 <rcl_node_init+0x1f0>
 800c380:	f04f 090b 	mov.w	r9, #11
 800c384:	4648      	mov	r0, r9
 800c386:	b029      	add	sp, #164	@ 0xa4
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c390:	e7f8      	b.n	800c384 <rcl_node_init+0x1f0>
 800c392:	782b      	ldrb	r3, [r5, #0]
 800c394:	2b2f      	cmp	r3, #47	@ 0x2f
 800c396:	f43f af42 	beq.w	800c21e <rcl_node_init+0x8a>
 800c39a:	9503      	str	r5, [sp, #12]
 800c39c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	4b1e      	ldr	r3, [pc, #120]	@ (800c41c <rcl_node_init+0x288>)
 800c3a4:	9302      	str	r3, [sp, #8]
 800c3a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c3b0:	f001 fb6a 	bl	800da88 <rcutils_format_string_limit>
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	b340      	cbz	r0, 800c40a <rcl_node_init+0x276>
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	a922      	add	r1, sp, #136	@ 0x88
 800c3bc:	9222      	str	r2, [sp, #136]	@ 0x88
 800c3be:	f001 fd85 	bl	800decc <rmw_validate_namespace>
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f43f af34 	beq.w	800c232 <rcl_node_init+0x9e>
 800c3ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	4798      	blx	r3
 800c3d6:	e7d5      	b.n	800c384 <rcl_node_init+0x1f0>
 800c3d8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c3dc:	4648      	mov	r0, r9
 800c3de:	b029      	add	sp, #164	@ 0xa4
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	f04f 090a 	mov.w	r9, #10
 800c3e8:	f1ba 0f00 	cmp.w	sl, #0
 800c3ec:	d1ed      	bne.n	800c3ca <rcl_node_init+0x236>
 800c3ee:	e7c9      	b.n	800c384 <rcl_node_init+0x1f0>
 800c3f0:	f001 fddc 	bl	800dfac <rmw_node_name_validation_result_string>
 800c3f4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c3f8:	e7c4      	b.n	800c384 <rcl_node_init+0x1f0>
 800c3fa:	f001 fd79 	bl	800def0 <rmw_namespace_validation_result_string>
 800c3fe:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c402:	f1ba 0f00 	cmp.w	sl, #0
 800c406:	d1e0      	bne.n	800c3ca <rcl_node_init+0x236>
 800c408:	e7bc      	b.n	800c384 <rcl_node_init+0x1f0>
 800c40a:	f04f 090a 	mov.w	r9, #10
 800c40e:	e7b9      	b.n	800c384 <rcl_node_init+0x1f0>
 800c410:	0801b064 	.word	0x0801b064
 800c414:	0801b06c 	.word	0x0801b06c
 800c418:	0801b074 	.word	0x0801b074
 800c41c:	0801b068 	.word	0x0801b068

0800c420 <rcl_node_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	b320      	cbz	r0, 800c46e <rcl_node_fini+0x4e>
 800c424:	6845      	ldr	r5, [r0, #4]
 800c426:	4604      	mov	r4, r0
 800c428:	b1fd      	cbz	r5, 800c46a <rcl_node_fini+0x4a>
 800c42a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800c42c:	686f      	ldr	r7, [r5, #4]
 800c42e:	692e      	ldr	r6, [r5, #16]
 800c430:	f001 fe70 	bl	800e114 <rmw_destroy_node>
 800c434:	6863      	ldr	r3, [r4, #4]
 800c436:	4605      	mov	r5, r0
 800c438:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c43a:	f005 ffcd 	bl	80123d8 <rcl_guard_condition_fini>
 800c43e:	ea55 0300 	orrs.w	r3, r5, r0
 800c442:	6863      	ldr	r3, [r4, #4]
 800c444:	4631      	mov	r1, r6
 800c446:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c448:	bf14      	ite	ne
 800c44a:	2501      	movne	r5, #1
 800c44c:	2500      	moveq	r5, #0
 800c44e:	47b8      	blx	r7
 800c450:	6863      	ldr	r3, [r4, #4]
 800c452:	4631      	mov	r1, r6
 800c454:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c456:	47b8      	blx	r7
 800c458:	6863      	ldr	r3, [r4, #4]
 800c45a:	4631      	mov	r1, r6
 800c45c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c45e:	47b8      	blx	r7
 800c460:	6860      	ldr	r0, [r4, #4]
 800c462:	4631      	mov	r1, r6
 800c464:	47b8      	blx	r7
 800c466:	2300      	movs	r3, #0
 800c468:	6063      	str	r3, [r4, #4]
 800c46a:	4628      	mov	r0, r5
 800c46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c46e:	25c8      	movs	r5, #200	@ 0xc8
 800c470:	4628      	mov	r0, r5
 800c472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c474 <rcl_node_is_valid_except_context>:
 800c474:	b128      	cbz	r0, 800c482 <rcl_node_is_valid_except_context+0xe>
 800c476:	6840      	ldr	r0, [r0, #4]
 800c478:	b118      	cbz	r0, 800c482 <rcl_node_is_valid_except_context+0xe>
 800c47a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c47c:	3800      	subs	r0, #0
 800c47e:	bf18      	it	ne
 800c480:	2001      	movne	r0, #1
 800c482:	4770      	bx	lr

0800c484 <rcl_node_is_valid>:
 800c484:	b130      	cbz	r0, 800c494 <rcl_node_is_valid+0x10>
 800c486:	6843      	ldr	r3, [r0, #4]
 800c488:	b123      	cbz	r3, 800c494 <rcl_node_is_valid+0x10>
 800c48a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c48c:	b113      	cbz	r3, 800c494 <rcl_node_is_valid+0x10>
 800c48e:	6800      	ldr	r0, [r0, #0]
 800c490:	f005 be86 	b.w	80121a0 <rcl_context_is_valid>
 800c494:	2000      	movs	r0, #0
 800c496:	4770      	bx	lr

0800c498 <rcl_node_get_name>:
 800c498:	b120      	cbz	r0, 800c4a4 <rcl_node_get_name+0xc>
 800c49a:	6840      	ldr	r0, [r0, #4]
 800c49c:	b110      	cbz	r0, 800c4a4 <rcl_node_get_name+0xc>
 800c49e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c4a0:	b100      	cbz	r0, 800c4a4 <rcl_node_get_name+0xc>
 800c4a2:	6880      	ldr	r0, [r0, #8]
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop

0800c4a8 <rcl_node_get_namespace>:
 800c4a8:	b120      	cbz	r0, 800c4b4 <rcl_node_get_namespace+0xc>
 800c4aa:	6840      	ldr	r0, [r0, #4]
 800c4ac:	b110      	cbz	r0, 800c4b4 <rcl_node_get_namespace+0xc>
 800c4ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c4b0:	b100      	cbz	r0, 800c4b4 <rcl_node_get_namespace+0xc>
 800c4b2:	68c0      	ldr	r0, [r0, #12]
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop

0800c4b8 <rcl_node_get_options>:
 800c4b8:	b128      	cbz	r0, 800c4c6 <rcl_node_get_options+0xe>
 800c4ba:	6840      	ldr	r0, [r0, #4]
 800c4bc:	b118      	cbz	r0, 800c4c6 <rcl_node_get_options+0xe>
 800c4be:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bf08      	it	eq
 800c4c4:	2000      	moveq	r0, #0
 800c4c6:	4770      	bx	lr

0800c4c8 <rcl_node_get_rmw_handle>:
 800c4c8:	b110      	cbz	r0, 800c4d0 <rcl_node_get_rmw_handle+0x8>
 800c4ca:	6840      	ldr	r0, [r0, #4]
 800c4cc:	b100      	cbz	r0, 800c4d0 <rcl_node_get_rmw_handle+0x8>
 800c4ce:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <rcl_node_get_default_options>:
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	2268      	movs	r2, #104	@ 0x68
 800c4d8:	4604      	mov	r4, r0
 800c4da:	2100      	movs	r1, #0
 800c4dc:	f00c f9a2 	bl	8018824 <memset>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f001 fa6b 	bl	800d9bc <rcutils_get_default_allocator>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	7523      	strb	r3, [r4, #20]
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop

0800c4f0 <rcl_node_options_copy>:
 800c4f0:	b1d0      	cbz	r0, 800c528 <rcl_node_options_copy+0x38>
 800c4f2:	b570      	push	{r4, r5, r6, lr}
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	b1a9      	cbz	r1, 800c524 <rcl_node_options_copy+0x34>
 800c4f8:	4288      	cmp	r0, r1
 800c4fa:	4684      	mov	ip, r0
 800c4fc:	d012      	beq.n	800c524 <rcl_node_options_copy+0x34>
 800c4fe:	4605      	mov	r5, r0
 800c500:	8a86      	ldrh	r6, [r0, #20]
 800c502:	468e      	mov	lr, r1
 800c504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	f8ce 3000 	str.w	r3, [lr]
 800c510:	f10c 0118 	add.w	r1, ip, #24
 800c514:	2250      	movs	r2, #80	@ 0x50
 800c516:	82a6      	strh	r6, [r4, #20]
 800c518:	f104 0018 	add.w	r0, r4, #24
 800c51c:	f00c faa1 	bl	8018a62 <memcpy>
 800c520:	2000      	movs	r0, #0
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	200b      	movs	r0, #11
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	200b      	movs	r0, #11
 800c52a:	4770      	bx	lr

0800c52c <rcl_get_zero_initialized_publisher>:
 800c52c:	4b01      	ldr	r3, [pc, #4]	@ (800c534 <rcl_get_zero_initialized_publisher+0x8>)
 800c52e:	6818      	ldr	r0, [r3, #0]
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	0801b084 	.word	0x0801b084

0800c538 <rcl_publisher_init>:
 800c538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c53c:	b088      	sub	sp, #32
 800c53e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c540:	2d00      	cmp	r5, #0
 800c542:	d069      	beq.n	800c618 <rcl_publisher_init+0xe0>
 800c544:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c548:	4604      	mov	r4, r0
 800c54a:	4648      	mov	r0, r9
 800c54c:	460e      	mov	r6, r1
 800c54e:	4690      	mov	r8, r2
 800c550:	461f      	mov	r7, r3
 800c552:	f001 fa41 	bl	800d9d8 <rcutils_allocator_is_valid>
 800c556:	2800      	cmp	r0, #0
 800c558:	d05e      	beq.n	800c618 <rcl_publisher_init+0xe0>
 800c55a:	2c00      	cmp	r4, #0
 800c55c:	d05c      	beq.n	800c618 <rcl_publisher_init+0xe0>
 800c55e:	f8d4 a000 	ldr.w	sl, [r4]
 800c562:	f1ba 0f00 	cmp.w	sl, #0
 800c566:	d004      	beq.n	800c572 <rcl_publisher_init+0x3a>
 800c568:	2764      	movs	r7, #100	@ 0x64
 800c56a:	4638      	mov	r0, r7
 800c56c:	b008      	add	sp, #32
 800c56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ff86 	bl	800c484 <rcl_node_is_valid>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d052      	beq.n	800c622 <rcl_publisher_init+0xea>
 800c57c:	f1b8 0f00 	cmp.w	r8, #0
 800c580:	d04a      	beq.n	800c618 <rcl_publisher_init+0xe0>
 800c582:	2f00      	cmp	r7, #0
 800c584:	d048      	beq.n	800c618 <rcl_publisher_init+0xe0>
 800c586:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c58a:	aa07      	add	r2, sp, #28
 800c58c:	9205      	str	r2, [sp, #20]
 800c58e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c596:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c59a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c59e:	4639      	mov	r1, r7
 800c5a0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f006 f993 	bl	80128d0 <rcl_node_resolve_name>
 800c5aa:	4607      	mov	r7, r0
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d14f      	bne.n	800c650 <rcl_publisher_init+0x118>
 800c5b0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c5b2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c5b4:	20c8      	movs	r0, #200	@ 0xc8
 800c5b6:	4798      	blx	r3
 800c5b8:	6020      	str	r0, [r4, #0]
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d04e      	beq.n	800c65c <rcl_publisher_init+0x124>
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7ff ff82 	bl	800c4c8 <rcl_node_get_rmw_handle>
 800c5c4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	9a07      	ldr	r2, [sp, #28]
 800c5cc:	6827      	ldr	r7, [r4, #0]
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	f001 fe85 	bl	800e2e0 <rmw_create_publisher>
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c5dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c5e0:	b370      	cbz	r0, 800c640 <rcl_publisher_init+0x108>
 800c5e2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c5e6:	f001 ff59 	bl	800e49c <rmw_publisher_get_actual_qos>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	b9d0      	cbnz	r0, 800c626 <rcl_publisher_init+0xee>
 800c5f0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c5f4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	2270      	movs	r2, #112	@ 0x70
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f00c fa30 	bl	8018a62 <memcpy>
 800c602:	6832      	ldr	r2, [r6, #0]
 800c604:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c608:	9807      	ldr	r0, [sp, #28]
 800c60a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c60c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c60e:	4798      	blx	r3
 800c610:	4638      	mov	r0, r7
 800c612:	b008      	add	sp, #32
 800c614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c618:	270b      	movs	r7, #11
 800c61a:	4638      	mov	r0, r7
 800c61c:	b008      	add	sp, #32
 800c61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c622:	27c8      	movs	r7, #200	@ 0xc8
 800c624:	e7a1      	b.n	800c56a <rcl_publisher_init+0x32>
 800c626:	b18b      	cbz	r3, 800c64c <rcl_publisher_init+0x114>
 800c628:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c62c:	b142      	cbz	r2, 800c640 <rcl_publisher_init+0x108>
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ff4a 	bl	800c4c8 <rcl_node_get_rmw_handle>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c63a:	f001 ff3f 	bl	800e4bc <rmw_destroy_publisher>
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c642:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c644:	4618      	mov	r0, r3
 800c646:	4790      	blx	r2
 800c648:	2300      	movs	r3, #0
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	2701      	movs	r7, #1
 800c64e:	e7db      	b.n	800c608 <rcl_publisher_init+0xd0>
 800c650:	2867      	cmp	r0, #103	@ 0x67
 800c652:	d0d9      	beq.n	800c608 <rcl_publisher_init+0xd0>
 800c654:	2869      	cmp	r0, #105	@ 0x69
 800c656:	d003      	beq.n	800c660 <rcl_publisher_init+0x128>
 800c658:	280a      	cmp	r0, #10
 800c65a:	d1f7      	bne.n	800c64c <rcl_publisher_init+0x114>
 800c65c:	270a      	movs	r7, #10
 800c65e:	e7d3      	b.n	800c608 <rcl_publisher_init+0xd0>
 800c660:	2767      	movs	r7, #103	@ 0x67
 800c662:	e7d1      	b.n	800c608 <rcl_publisher_init+0xd0>

0800c664 <rcl_publisher_get_default_options>:
 800c664:	b570      	push	{r4, r5, r6, lr}
 800c666:	4d14      	ldr	r5, [pc, #80]	@ (800c6b8 <rcl_publisher_get_default_options+0x54>)
 800c668:	4914      	ldr	r1, [pc, #80]	@ (800c6bc <rcl_publisher_get_default_options+0x58>)
 800c66a:	b088      	sub	sp, #32
 800c66c:	4604      	mov	r4, r0
 800c66e:	2250      	movs	r2, #80	@ 0x50
 800c670:	4628      	mov	r0, r5
 800c672:	f00c f9f6 	bl	8018a62 <memcpy>
 800c676:	a802      	add	r0, sp, #8
 800c678:	f001 f9a0 	bl	800d9bc <rcutils_get_default_allocator>
 800c67c:	f10d 0c08 	add.w	ip, sp, #8
 800c680:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c684:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c688:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c68c:	466e      	mov	r6, sp
 800c68e:	f8dc 3000 	ldr.w	r3, [ip]
 800c692:	f8ce 3000 	str.w	r3, [lr]
 800c696:	4630      	mov	r0, r6
 800c698:	f001 fb9e 	bl	800ddd8 <rmw_get_default_publisher_options>
 800c69c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6a0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c6a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6a8:	2270      	movs	r2, #112	@ 0x70
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f00c f9d8 	bl	8018a62 <memcpy>
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	b008      	add	sp, #32
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	2000c350 	.word	0x2000c350
 800c6bc:	0801b088 	.word	0x0801b088

0800c6c0 <rcl_publish>:
 800c6c0:	b1f8      	cbz	r0, 800c702 <rcl_publish+0x42>
 800c6c2:	6803      	ldr	r3, [r0, #0]
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	b1b3      	cbz	r3, 800c6f8 <rcl_publish+0x38>
 800c6ca:	4616      	mov	r6, r2
 800c6cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c6d0:	b192      	cbz	r2, 800c6f8 <rcl_publish+0x38>
 800c6d2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	f005 fd62 	bl	80121a0 <rcl_context_is_valid>
 800c6dc:	b160      	cbz	r0, 800c6f8 <rcl_publish+0x38>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c6e4:	b140      	cbz	r0, 800c6f8 <rcl_publish+0x38>
 800c6e6:	b155      	cbz	r5, 800c6fe <rcl_publish+0x3e>
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f001 fd98 	bl	800e220 <rmw_publish>
 800c6f0:	3800      	subs	r0, #0
 800c6f2:	bf18      	it	ne
 800c6f4:	2001      	movne	r0, #1
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	200b      	movs	r0, #11
 800c700:	bd70      	pop	{r4, r5, r6, pc}
 800c702:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c706:	4770      	bx	lr

0800c708 <rcl_publisher_is_valid>:
 800c708:	b1a0      	cbz	r0, 800c734 <rcl_publisher_is_valid+0x2c>
 800c70a:	6803      	ldr	r3, [r0, #0]
 800c70c:	b510      	push	{r4, lr}
 800c70e:	4604      	mov	r4, r0
 800c710:	b173      	cbz	r3, 800c730 <rcl_publisher_is_valid+0x28>
 800c712:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c716:	b15a      	cbz	r2, 800c730 <rcl_publisher_is_valid+0x28>
 800c718:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c71c:	f005 fd40 	bl	80121a0 <rcl_context_is_valid>
 800c720:	b130      	cbz	r0, 800c730 <rcl_publisher_is_valid+0x28>
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c728:	3800      	subs	r0, #0
 800c72a:	bf18      	it	ne
 800c72c:	2001      	movne	r0, #1
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	2000      	movs	r0, #0
 800c732:	bd10      	pop	{r4, pc}
 800c734:	2000      	movs	r0, #0
 800c736:	4770      	bx	lr

0800c738 <rcl_publisher_is_valid_except_context>:
 800c738:	b130      	cbz	r0, 800c748 <rcl_publisher_is_valid_except_context+0x10>
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	b120      	cbz	r0, 800c748 <rcl_publisher_is_valid_except_context+0x10>
 800c73e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c742:	3800      	subs	r0, #0
 800c744:	bf18      	it	ne
 800c746:	2001      	movne	r0, #1
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop

0800c74c <rcl_get_zero_initialized_subscription>:
 800c74c:	4b01      	ldr	r3, [pc, #4]	@ (800c754 <rcl_get_zero_initialized_subscription+0x8>)
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	0801b0d8 	.word	0x0801b0d8

0800c758 <rcl_subscription_init>:
 800c758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c75c:	b089      	sub	sp, #36	@ 0x24
 800c75e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c760:	b1d6      	cbz	r6, 800c798 <rcl_subscription_init+0x40>
 800c762:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c766:	4604      	mov	r4, r0
 800c768:	4648      	mov	r0, r9
 800c76a:	460d      	mov	r5, r1
 800c76c:	4690      	mov	r8, r2
 800c76e:	461f      	mov	r7, r3
 800c770:	f001 f932 	bl	800d9d8 <rcutils_allocator_is_valid>
 800c774:	b180      	cbz	r0, 800c798 <rcl_subscription_init+0x40>
 800c776:	b17c      	cbz	r4, 800c798 <rcl_subscription_init+0x40>
 800c778:	4628      	mov	r0, r5
 800c77a:	f7ff fe83 	bl	800c484 <rcl_node_is_valid>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d054      	beq.n	800c82c <rcl_subscription_init+0xd4>
 800c782:	f1b8 0f00 	cmp.w	r8, #0
 800c786:	d007      	beq.n	800c798 <rcl_subscription_init+0x40>
 800c788:	b137      	cbz	r7, 800c798 <rcl_subscription_init+0x40>
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	b14b      	cbz	r3, 800c7a2 <rcl_subscription_init+0x4a>
 800c78e:	2764      	movs	r7, #100	@ 0x64
 800c790:	4638      	mov	r0, r7
 800c792:	b009      	add	sp, #36	@ 0x24
 800c794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c798:	270b      	movs	r7, #11
 800c79a:	4638      	mov	r0, r7
 800c79c:	b009      	add	sp, #36	@ 0x24
 800c79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c7a6:	aa07      	add	r2, sp, #28
 800c7a8:	9205      	str	r2, [sp, #20]
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c7b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7b4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f006 f886 	bl	80128d0 <rcl_node_resolve_name>
 800c7c4:	4607      	mov	r7, r0
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d15f      	bne.n	800c88a <rcl_subscription_init+0x132>
 800c7ca:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800c7ce:	21c8      	movs	r1, #200	@ 0xc8
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	4798      	blx	r3
 800c7d4:	6020      	str	r0, [r4, #0]
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d05d      	beq.n	800c896 <rcl_subscription_init+0x13e>
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f7ff fe74 	bl	800c4c8 <rcl_node_get_rmw_handle>
 800c7e0:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	9a07      	ldr	r2, [sp, #28]
 800c7e8:	6827      	ldr	r7, [r4, #0]
 800c7ea:	4641      	mov	r1, r8
 800c7ec:	4633      	mov	r3, r6
 800c7ee:	f001 fefb 	bl	800e5e8 <rmw_create_subscription>
 800c7f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800c7f6:	6827      	ldr	r7, [r4, #0]
 800c7f8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800c7fc:	b348      	cbz	r0, 800c852 <rcl_subscription_init+0xfa>
 800c7fe:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800c802:	f001 ffd3 	bl	800e7ac <rmw_subscription_get_actual_qos>
 800c806:	4607      	mov	r7, r0
 800c808:	b9a8      	cbnz	r0, 800c836 <rcl_subscription_init+0xde>
 800c80a:	6820      	ldr	r0, [r4, #0]
 800c80c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800c810:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800c814:	2270      	movs	r2, #112	@ 0x70
 800c816:	4631      	mov	r1, r6
 800c818:	f00c f923 	bl	8018a62 <memcpy>
 800c81c:	9807      	ldr	r0, [sp, #28]
 800c81e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c820:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c822:	4798      	blx	r3
 800c824:	4638      	mov	r0, r7
 800c826:	b009      	add	sp, #36	@ 0x24
 800c828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c82c:	27c8      	movs	r7, #200	@ 0xc8
 800c82e:	4638      	mov	r0, r7
 800c830:	b009      	add	sp, #36	@ 0x24
 800c832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c836:	6827      	ldr	r7, [r4, #0]
 800c838:	b32f      	cbz	r7, 800c886 <rcl_subscription_init+0x12e>
 800c83a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c83e:	b14b      	cbz	r3, 800c854 <rcl_subscription_init+0xfc>
 800c840:	4628      	mov	r0, r5
 800c842:	f7ff fe41 	bl	800c4c8 <rcl_node_get_rmw_handle>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c84c:	f001 ffbe 	bl	800e7cc <rmw_destroy_subscription>
 800c850:	6827      	ldr	r7, [r4, #0]
 800c852:	b197      	cbz	r7, 800c87a <rcl_subscription_init+0x122>
 800c854:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800c858:	4628      	mov	r0, r5
 800c85a:	f001 f8bd 	bl	800d9d8 <rcutils_allocator_is_valid>
 800c85e:	b158      	cbz	r0, 800c878 <rcl_subscription_init+0x120>
 800c860:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c862:	b148      	cbz	r0, 800c878 <rcl_subscription_init+0x120>
 800c864:	4629      	mov	r1, r5
 800c866:	f001 fabb 	bl	800dde0 <rmw_subscription_content_filter_options_fini>
 800c86a:	4605      	mov	r5, r0
 800c86c:	b9b8      	cbnz	r0, 800c89e <rcl_subscription_init+0x146>
 800c86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c870:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c872:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c874:	4798      	blx	r3
 800c876:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800c878:	6827      	ldr	r7, [r4, #0]
 800c87a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c87c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c87e:	4638      	mov	r0, r7
 800c880:	4798      	blx	r3
 800c882:	2300      	movs	r3, #0
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	2701      	movs	r7, #1
 800c888:	e7c8      	b.n	800c81c <rcl_subscription_init+0xc4>
 800c88a:	2867      	cmp	r0, #103	@ 0x67
 800c88c:	d0c6      	beq.n	800c81c <rcl_subscription_init+0xc4>
 800c88e:	2869      	cmp	r0, #105	@ 0x69
 800c890:	d003      	beq.n	800c89a <rcl_subscription_init+0x142>
 800c892:	280a      	cmp	r0, #10
 800c894:	d1f7      	bne.n	800c886 <rcl_subscription_init+0x12e>
 800c896:	270a      	movs	r7, #10
 800c898:	e7c0      	b.n	800c81c <rcl_subscription_init+0xc4>
 800c89a:	2767      	movs	r7, #103	@ 0x67
 800c89c:	e7be      	b.n	800c81c <rcl_subscription_init+0xc4>
 800c89e:	f005 fc61 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 800c8a2:	6827      	ldr	r7, [r4, #0]
 800c8a4:	e7e9      	b.n	800c87a <rcl_subscription_init+0x122>
 800c8a6:	bf00      	nop

0800c8a8 <rcl_subscription_fini>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d039      	beq.n	800c924 <rcl_subscription_fini+0x7c>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	4608      	mov	r0, r1
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	f7ff fddd 	bl	800c474 <rcl_node_is_valid_except_context>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d037      	beq.n	800c92e <rcl_subscription_fini+0x86>
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	b363      	cbz	r3, 800c91c <rcl_subscription_fini+0x74>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800c8c6:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800c8ca:	f7ff fdfd 	bl	800c4c8 <rcl_node_get_rmw_handle>
 800c8ce:	b390      	cbz	r0, 800c936 <rcl_subscription_fini+0x8e>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c8d6:	f001 ff79 	bl	800e7cc <rmw_destroy_subscription>
 800c8da:	6826      	ldr	r6, [r4, #0]
 800c8dc:	1e05      	subs	r5, r0, #0
 800c8de:	bf18      	it	ne
 800c8e0:	2501      	movne	r5, #1
 800c8e2:	b37e      	cbz	r6, 800c944 <rcl_subscription_fini+0x9c>
 800c8e4:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	f001 f875 	bl	800d9d8 <rcutils_allocator_is_valid>
 800c8ee:	b358      	cbz	r0, 800c948 <rcl_subscription_fini+0xa0>
 800c8f0:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800c8f2:	b150      	cbz	r0, 800c90a <rcl_subscription_fini+0x62>
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f001 fa73 	bl	800dde0 <rmw_subscription_content_filter_options_fini>
 800c8fa:	4681      	mov	r9, r0
 800c8fc:	b9e8      	cbnz	r0, 800c93a <rcl_subscription_fini+0x92>
 800c8fe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c900:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c902:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800c904:	4798      	blx	r3
 800c906:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800c90a:	6826      	ldr	r6, [r4, #0]
 800c90c:	4630      	mov	r0, r6
 800c90e:	4641      	mov	r1, r8
 800c910:	47b8      	blx	r7
 800c912:	2300      	movs	r3, #0
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	4628      	mov	r0, r5
 800c918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91c:	461d      	mov	r5, r3
 800c91e:	4628      	mov	r0, r5
 800c920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c924:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92e:	25c8      	movs	r5, #200	@ 0xc8
 800c930:	4628      	mov	r0, r5
 800c932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c936:	250b      	movs	r5, #11
 800c938:	e7f1      	b.n	800c91e <rcl_subscription_fini+0x76>
 800c93a:	f005 fc13 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 800c93e:	6826      	ldr	r6, [r4, #0]
 800c940:	2800      	cmp	r0, #0
 800c942:	d0e3      	beq.n	800c90c <rcl_subscription_fini+0x64>
 800c944:	2501      	movs	r5, #1
 800c946:	e7e1      	b.n	800c90c <rcl_subscription_fini+0x64>
 800c948:	6826      	ldr	r6, [r4, #0]
 800c94a:	2501      	movs	r5, #1
 800c94c:	e7de      	b.n	800c90c <rcl_subscription_fini+0x64>
 800c94e:	bf00      	nop

0800c950 <rcl_subscription_get_default_options>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4d14      	ldr	r5, [pc, #80]	@ (800c9a4 <rcl_subscription_get_default_options+0x54>)
 800c954:	4914      	ldr	r1, [pc, #80]	@ (800c9a8 <rcl_subscription_get_default_options+0x58>)
 800c956:	b08a      	sub	sp, #40	@ 0x28
 800c958:	4604      	mov	r4, r0
 800c95a:	2250      	movs	r2, #80	@ 0x50
 800c95c:	4628      	mov	r0, r5
 800c95e:	f00c f880 	bl	8018a62 <memcpy>
 800c962:	a804      	add	r0, sp, #16
 800c964:	f001 f82a 	bl	800d9bc <rcutils_get_default_allocator>
 800c968:	f10d 0c10 	add.w	ip, sp, #16
 800c96c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c970:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c974:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c978:	466e      	mov	r6, sp
 800c97a:	f8dc 3000 	ldr.w	r3, [ip]
 800c97e:	f8ce 3000 	str.w	r3, [lr]
 800c982:	4630      	mov	r0, r6
 800c984:	f001 fa46 	bl	800de14 <rmw_get_default_subscription_options>
 800c988:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c98c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c994:	2270      	movs	r2, #112	@ 0x70
 800c996:	4629      	mov	r1, r5
 800c998:	4620      	mov	r0, r4
 800c99a:	f00c f862 	bl	8018a62 <memcpy>
 800c99e:	4620      	mov	r0, r4
 800c9a0:	b00a      	add	sp, #40	@ 0x28
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}
 800c9a4:	2000c3c0 	.word	0x2000c3c0
 800c9a8:	0801b0e0 	.word	0x0801b0e0

0800c9ac <rcl_take>:
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d04a      	beq.n	800ca46 <rcl_take+0x9a>
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	6800      	ldr	r0, [r0, #0]
 800c9b8:	b0a4      	sub	sp, #144	@ 0x90
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d03b      	beq.n	800ca36 <rcl_take+0x8a>
 800c9be:	461f      	mov	r7, r3
 800c9c0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d036      	beq.n	800ca36 <rcl_take+0x8a>
 800c9c8:	460e      	mov	r6, r1
 800c9ca:	2900      	cmp	r1, #0
 800c9cc:	d039      	beq.n	800ca42 <rcl_take+0x96>
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	2a00      	cmp	r2, #0
 800c9d2:	d03c      	beq.n	800ca4e <rcl_take+0xa2>
 800c9d4:	a802      	add	r0, sp, #8
 800c9d6:	f001 fa23 	bl	800de20 <rmw_get_zero_initialized_message_info>
 800c9da:	f10d 0c08 	add.w	ip, sp, #8
 800c9de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c9e2:	46ae      	mov	lr, r5
 800c9e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c9e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c9ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c9f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c9f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c9f8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800c9fc:	f04f 0800 	mov.w	r8, #0
 800ca00:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800ca04:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	462b      	mov	r3, r5
 800ca0c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800ca10:	9700      	str	r7, [sp, #0]
 800ca12:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800ca16:	4631      	mov	r1, r6
 800ca18:	f001 ff38 	bl	800e88c <rmw_take_with_info>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	b9c0      	cbnz	r0, 800ca52 <rcl_take+0xa6>
 800ca20:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800ca24:	f240 1291 	movw	r2, #401	@ 0x191
 800ca28:	2900      	cmp	r1, #0
 800ca2a:	bf08      	it	eq
 800ca2c:	4613      	moveq	r3, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	b024      	add	sp, #144	@ 0x90
 800ca32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca36:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	b024      	add	sp, #144	@ 0x90
 800ca3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca42:	230b      	movs	r3, #11
 800ca44:	e7f3      	b.n	800ca2e <rcl_take+0x82>
 800ca46:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	4770      	bx	lr
 800ca4e:	ad14      	add	r5, sp, #80	@ 0x50
 800ca50:	e7c0      	b.n	800c9d4 <rcl_take+0x28>
 800ca52:	f005 fb87 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 800ca56:	4603      	mov	r3, r0
 800ca58:	e7e9      	b.n	800ca2e <rcl_take+0x82>
 800ca5a:	bf00      	nop

0800ca5c <rcl_subscription_get_rmw_handle>:
 800ca5c:	b118      	cbz	r0, 800ca66 <rcl_subscription_get_rmw_handle+0xa>
 800ca5e:	6800      	ldr	r0, [r0, #0]
 800ca60:	b108      	cbz	r0, 800ca66 <rcl_subscription_get_rmw_handle+0xa>
 800ca62:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ca66:	4770      	bx	lr

0800ca68 <rcl_subscription_is_valid>:
 800ca68:	b130      	cbz	r0, 800ca78 <rcl_subscription_is_valid+0x10>
 800ca6a:	6800      	ldr	r0, [r0, #0]
 800ca6c:	b120      	cbz	r0, 800ca78 <rcl_subscription_is_valid+0x10>
 800ca6e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ca72:	3800      	subs	r0, #0
 800ca74:	bf18      	it	ne
 800ca76:	2001      	movne	r0, #1
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop

0800ca7c <_rclc_check_for_new_data>:
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d046      	beq.n	800cb0e <_rclc_check_for_new_data+0x92>
 800ca80:	b510      	push	{r4, lr}
 800ca82:	7802      	ldrb	r2, [r0, #0]
 800ca84:	b084      	sub	sp, #16
 800ca86:	4603      	mov	r3, r0
 800ca88:	2a0a      	cmp	r2, #10
 800ca8a:	d842      	bhi.n	800cb12 <_rclc_check_for_new_data+0x96>
 800ca8c:	e8df f002 	tbb	[pc, r2]
 800ca90:	14181212 	.word	0x14181212
 800ca94:	06060614 	.word	0x06060614
 800ca98:	2e1a      	.short	0x2e1a
 800ca9a:	16          	.byte	0x16
 800ca9b:	00          	.byte	0x00
 800ca9c:	6a0a      	ldr	r2, [r1, #32]
 800ca9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800caa0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800caa4:	2000      	movs	r0, #0
 800caa6:	1a12      	subs	r2, r2, r0
 800caa8:	bf18      	it	ne
 800caaa:	2201      	movne	r2, #1
 800caac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cab0:	b004      	add	sp, #16
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	680a      	ldr	r2, [r1, #0]
 800cab6:	e7f2      	b.n	800ca9e <_rclc_check_for_new_data+0x22>
 800cab8:	698a      	ldr	r2, [r1, #24]
 800caba:	e7f0      	b.n	800ca9e <_rclc_check_for_new_data+0x22>
 800cabc:	688a      	ldr	r2, [r1, #8]
 800cabe:	e7ee      	b.n	800ca9e <_rclc_check_for_new_data+0x22>
 800cac0:	690a      	ldr	r2, [r1, #16]
 800cac2:	e7ec      	b.n	800ca9e <_rclc_check_for_new_data+0x22>
 800cac4:	685c      	ldr	r4, [r3, #4]
 800cac6:	4608      	mov	r0, r1
 800cac8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cacc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cad0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cad4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cade:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cae2:	f104 0110 	add.w	r1, r4, #16
 800cae6:	f007 fc87 	bl	80143f8 <rcl_action_client_wait_set_get_entities_ready>
 800caea:	e7e1      	b.n	800cab0 <_rclc_check_for_new_data+0x34>
 800caec:	685c      	ldr	r4, [r3, #4]
 800caee:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800caf2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800caf6:	e9cd 3200 	strd	r3, r2, [sp]
 800cafa:	4608      	mov	r0, r1
 800cafc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cb00:	f104 0220 	add.w	r2, r4, #32
 800cb04:	f104 0110 	add.w	r1, r4, #16
 800cb08:	f007 fe8e 	bl	8014828 <rcl_action_server_wait_set_get_entities_ready>
 800cb0c:	e7d0      	b.n	800cab0 <_rclc_check_for_new_data+0x34>
 800cb0e:	200b      	movs	r0, #11
 800cb10:	4770      	bx	lr
 800cb12:	2001      	movs	r0, #1
 800cb14:	e7cc      	b.n	800cab0 <_rclc_check_for_new_data+0x34>
 800cb16:	bf00      	nop

0800cb18 <_rclc_take_new_data>:
 800cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1a:	b09b      	sub	sp, #108	@ 0x6c
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f000 8088 	beq.w	800cc32 <_rclc_take_new_data+0x11a>
 800cb22:	7803      	ldrb	r3, [r0, #0]
 800cb24:	4604      	mov	r4, r0
 800cb26:	2b0a      	cmp	r3, #10
 800cb28:	f200 8167 	bhi.w	800cdfa <_rclc_take_new_data+0x2e2>
 800cb2c:	e8df f003 	tbb	[pc, r3]
 800cb30:	44152d2d 	.word	0x44152d2d
 800cb34:	19191944 	.word	0x19191944
 800cb38:	065a      	.short	0x065a
 800cb3a:	15          	.byte	0x15
 800cb3b:	00          	.byte	0x00
 800cb3c:	6840      	ldr	r0, [r0, #4]
 800cb3e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f040 80b2 	bne.w	800ccac <_rclc_take_new_data+0x194>
 800cb48:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f040 80e4 	bne.w	800cd1a <_rclc_take_new_data+0x202>
 800cb52:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d16f      	bne.n	800cc3a <_rclc_take_new_data+0x122>
 800cb5a:	2500      	movs	r5, #0
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	b01b      	add	sp, #108	@ 0x6c
 800cb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb62:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cb64:	6a0b      	ldr	r3, [r1, #32]
 800cb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0f5      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cb6e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cb72:	f104 0110 	add.w	r1, r4, #16
 800cb76:	f006 f855 	bl	8012c24 <rcl_take_request>
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d0ec      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cb80:	f240 2359 	movw	r3, #601	@ 0x259
 800cb84:	4298      	cmp	r0, r3
 800cb86:	d013      	beq.n	800cbb0 <_rclc_take_new_data+0x98>
 800cb88:	e029      	b.n	800cbde <_rclc_take_new_data+0xc6>
 800cb8a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cb8c:	680b      	ldr	r3, [r1, #0]
 800cb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d0e1      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cb96:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	aa0a      	add	r2, sp, #40	@ 0x28
 800cb9e:	f7ff ff05 	bl	800c9ac <rcl_take>
 800cba2:	4605      	mov	r5, r0
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0d9      	beq.n	800cb5c <_rclc_take_new_data+0x44>
 800cba8:	f240 1391 	movw	r3, #401	@ 0x191
 800cbac:	4298      	cmp	r0, r3
 800cbae:	d116      	bne.n	800cbde <_rclc_take_new_data+0xc6>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cbb6:	e7d1      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cbb8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cbba:	698b      	ldr	r3, [r1, #24]
 800cbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d0ca      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cbc4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cbc8:	f104 0110 	add.w	r1, r4, #16
 800cbcc:	f005 fa78 	bl	80120c0 <rcl_take_response>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d0c1      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cbd6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cbda:	4298      	cmp	r0, r3
 800cbdc:	d0be      	beq.n	800cb5c <_rclc_take_new_data+0x44>
 800cbde:	f000 ff37 	bl	800da50 <rcutils_reset_error>
 800cbe2:	e7bb      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cbe4:	6840      	ldr	r0, [r0, #4]
 800cbe6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d17d      	bne.n	800ccea <_rclc_take_new_data+0x1d2>
 800cbee:	69c3      	ldr	r3, [r0, #28]
 800cbf0:	b11b      	cbz	r3, 800cbfa <_rclc_take_new_data+0xe2>
 800cbf2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d144      	bne.n	800cc84 <_rclc_take_new_data+0x16c>
 800cbfa:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 80ac 	bne.w	800cd5c <_rclc_take_new_data+0x244>
 800cc04:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d0a6      	beq.n	800cb5a <_rclc_take_new_data+0x42>
 800cc0c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cc0e:	a90a      	add	r1, sp, #40	@ 0x28
 800cc10:	3010      	adds	r0, #16
 800cc12:	f007 fac9 	bl	80141a8 <rcl_action_take_result_response>
 800cc16:	4605      	mov	r5, r0
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d1e0      	bne.n	800cbde <_rclc_take_new_data+0xc6>
 800cc1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc20:	6860      	ldr	r0, [r4, #4]
 800cc22:	f007 ff25 	bl	8014a70 <rclc_action_find_handle_by_result_request_sequence_number>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d098      	beq.n	800cb5c <_rclc_take_new_data+0x44>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800cc30:	e794      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cc32:	250b      	movs	r5, #11
 800cc34:	4628      	mov	r0, r5
 800cc36:	b01b      	add	sp, #108	@ 0x6c
 800cc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc3a:	ae04      	add	r6, sp, #16
 800cc3c:	aa0a      	add	r2, sp, #40	@ 0x28
 800cc3e:	3010      	adds	r0, #16
 800cc40:	4631      	mov	r1, r6
 800cc42:	f007 fd25 	bl	8014690 <rcl_action_take_cancel_request>
 800cc46:	4605      	mov	r5, r0
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d1c8      	bne.n	800cbde <_rclc_take_new_data+0xc6>
 800cc4c:	6860      	ldr	r0, [r4, #4]
 800cc4e:	a90a      	add	r1, sp, #40	@ 0x28
 800cc50:	f007 fecc 	bl	80149ec <rclc_action_find_goal_handle_by_uuid>
 800cc54:	4607      	mov	r7, r0
 800cc56:	2800      	cmp	r0, #0
 800cc58:	f000 80bb 	beq.w	800cdd2 <_rclc_take_new_data+0x2ba>
 800cc5c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800cc60:	2101      	movs	r1, #1
 800cc62:	f007 fe4d 	bl	8014900 <rcl_action_transition_goal_state>
 800cc66:	2803      	cmp	r0, #3
 800cc68:	4684      	mov	ip, r0
 800cc6a:	f040 80a7 	bne.w	800cdbc <_rclc_take_new_data+0x2a4>
 800cc6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cc70:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800cc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc76:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cc7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc7e:	f887 c008 	strb.w	ip, [r7, #8]
 800cc82:	e76b      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cc84:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cc86:	3010      	adds	r0, #16
 800cc88:	f007 fb0e 	bl	80142a8 <rcl_action_take_feedback>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d1a5      	bne.n	800cbde <_rclc_take_new_data+0xc6>
 800cc92:	6860      	ldr	r0, [r4, #4]
 800cc94:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cc96:	f007 fea9 	bl	80149ec <rclc_action_find_goal_handle_by_uuid>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f000 80a3 	beq.w	800cde8 <_rclc_take_new_data+0x2d0>
 800cca2:	2201      	movs	r2, #1
 800cca4:	6860      	ldr	r0, [r4, #4]
 800cca6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ccaa:	e7a6      	b.n	800cbfa <_rclc_take_new_data+0xe2>
 800ccac:	f007 fe78 	bl	80149a0 <rclc_action_take_goal_handle>
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	6860      	ldr	r0, [r4, #4]
 800ccb4:	2e00      	cmp	r6, #0
 800ccb6:	f43f af47 	beq.w	800cb48 <_rclc_take_new_data+0x30>
 800ccba:	6070      	str	r0, [r6, #4]
 800ccbc:	69f2      	ldr	r2, [r6, #28]
 800ccbe:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ccc2:	3010      	adds	r0, #16
 800ccc4:	f007 fc2c 	bl	8014520 <rcl_action_take_goal_request>
 800ccc8:	4605      	mov	r5, r0
 800ccca:	2800      	cmp	r0, #0
 800cccc:	f040 808e 	bne.w	800cdec <_rclc_take_new_data+0x2d4>
 800ccd0:	69f7      	ldr	r7, [r6, #28]
 800ccd2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ccd4:	7235      	strb	r5, [r6, #8]
 800ccd6:	f8c6 0009 	str.w	r0, [r6, #9]
 800ccda:	f8c6 100d 	str.w	r1, [r6, #13]
 800ccde:	6860      	ldr	r0, [r4, #4]
 800cce0:	f8c6 2011 	str.w	r2, [r6, #17]
 800cce4:	f8c6 3015 	str.w	r3, [r6, #21]
 800cce8:	e72e      	b.n	800cb48 <_rclc_take_new_data+0x30>
 800ccea:	aa04      	add	r2, sp, #16
 800ccec:	a90a      	add	r1, sp, #40	@ 0x28
 800ccee:	3010      	adds	r0, #16
 800ccf0:	f007 f9e2 	bl	80140b8 <rcl_action_take_goal_response>
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	f47f af71 	bne.w	800cbde <_rclc_take_new_data+0xc6>
 800ccfc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd00:	6860      	ldr	r0, [r4, #4]
 800cd02:	f007 fea3 	bl	8014a4c <rclc_action_find_handle_by_goal_request_sequence_number>
 800cd06:	b130      	cbz	r0, 800cd16 <_rclc_take_new_data+0x1fe>
 800cd08:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cd0c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cd10:	2201      	movs	r2, #1
 800cd12:	f880 2020 	strb.w	r2, [r0, #32]
 800cd16:	6860      	ldr	r0, [r4, #4]
 800cd18:	e769      	b.n	800cbee <_rclc_take_new_data+0xd6>
 800cd1a:	aa04      	add	r2, sp, #16
 800cd1c:	3010      	adds	r0, #16
 800cd1e:	a90a      	add	r1, sp, #40	@ 0x28
 800cd20:	f007 fc76 	bl	8014610 <rcl_action_take_result_request>
 800cd24:	4605      	mov	r5, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f47f af59 	bne.w	800cbde <_rclc_take_new_data+0xc6>
 800cd2c:	6860      	ldr	r0, [r4, #4]
 800cd2e:	a904      	add	r1, sp, #16
 800cd30:	f007 fe5c 	bl	80149ec <rclc_action_find_goal_handle_by_uuid>
 800cd34:	4607      	mov	r7, r0
 800cd36:	b160      	cbz	r0, 800cd52 <_rclc_take_new_data+0x23a>
 800cd38:	ad0a      	add	r5, sp, #40	@ 0x28
 800cd3a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800cd3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cd42:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd46:	f04f 0c02 	mov.w	ip, #2
 800cd4a:	e886 0003 	stmia.w	r6, {r0, r1}
 800cd4e:	f887 c008 	strb.w	ip, [r7, #8]
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	2300      	movs	r3, #0
 800cd56:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800cd5a:	e6fa      	b.n	800cb52 <_rclc_take_new_data+0x3a>
 800cd5c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800cd60:	a90a      	add	r1, sp, #40	@ 0x28
 800cd62:	3010      	adds	r0, #16
 800cd64:	f007 fa60 	bl	8014228 <rcl_action_take_cancel_response>
 800cd68:	4605      	mov	r5, r0
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f47f af37 	bne.w	800cbde <_rclc_take_new_data+0xc6>
 800cd70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd74:	6860      	ldr	r0, [r4, #4]
 800cd76:	f007 fe8d 	bl	8014a94 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	6860      	ldr	r0, [r4, #4]
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	f43f af40 	beq.w	800cc04 <_rclc_take_new_data+0xec>
 800cd84:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cd86:	2701      	movs	r7, #1
 800cd88:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f43f af3a 	beq.w	800cc04 <_rclc_take_new_data+0xec>
 800cd90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cd92:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cd96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cd9a:	f007 fe27 	bl	80149ec <rclc_action_find_goal_handle_by_uuid>
 800cd9e:	b138      	cbz	r0, 800cdb0 <_rclc_take_new_data+0x298>
 800cda0:	6860      	ldr	r0, [r4, #4]
 800cda2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cda4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800cda8:	3501      	adds	r5, #1
 800cdaa:	42ab      	cmp	r3, r5
 800cdac:	d8f0      	bhi.n	800cd90 <_rclc_take_new_data+0x278>
 800cdae:	e729      	b.n	800cc04 <_rclc_take_new_data+0xec>
 800cdb0:	6860      	ldr	r0, [r4, #4]
 800cdb2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cdb4:	3501      	adds	r5, #1
 800cdb6:	42ab      	cmp	r3, r5
 800cdb8:	d8ea      	bhi.n	800cd90 <_rclc_take_new_data+0x278>
 800cdba:	e723      	b.n	800cc04 <_rclc_take_new_data+0xec>
 800cdbc:	ab06      	add	r3, sp, #24
 800cdbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cdc4:	2103      	movs	r1, #3
 800cdc6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cdca:	6860      	ldr	r0, [r4, #4]
 800cdcc:	f007 fed8 	bl	8014b80 <rclc_action_server_goal_cancel_reject>
 800cdd0:	e6c4      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cdd2:	ab06      	add	r3, sp, #24
 800cdd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdd6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cdda:	2102      	movs	r1, #2
 800cddc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cde0:	6860      	ldr	r0, [r4, #4]
 800cde2:	f007 fecd 	bl	8014b80 <rclc_action_server_goal_cancel_reject>
 800cde6:	e6b9      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cde8:	6860      	ldr	r0, [r4, #4]
 800cdea:	e706      	b.n	800cbfa <_rclc_take_new_data+0xe2>
 800cdec:	6860      	ldr	r0, [r4, #4]
 800cdee:	4631      	mov	r1, r6
 800cdf0:	f007 fde6 	bl	80149c0 <rclc_action_remove_used_goal_handle>
 800cdf4:	f000 fe2c 	bl	800da50 <rcutils_reset_error>
 800cdf8:	e6b0      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cdfa:	2501      	movs	r5, #1
 800cdfc:	e6ae      	b.n	800cb5c <_rclc_take_new_data+0x44>
 800cdfe:	bf00      	nop

0800ce00 <_rclc_execute.part.0>:
 800ce00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce02:	7803      	ldrb	r3, [r0, #0]
 800ce04:	b087      	sub	sp, #28
 800ce06:	4604      	mov	r4, r0
 800ce08:	2b0a      	cmp	r3, #10
 800ce0a:	f200 8136 	bhi.w	800d07a <_rclc_execute.part.0+0x27a>
 800ce0e:	e8df f003 	tbb	[pc, r3]
 800ce12:	435e      	.short	0x435e
 800ce14:	06a1664f 	.word	0x06a1664f
 800ce18:	6c1e0606 	.word	0x6c1e0606
 800ce1c:	59          	.byte	0x59
 800ce1d:	00          	.byte	0x00
 800ce1e:	2b06      	cmp	r3, #6
 800ce20:	f000 8122 	beq.w	800d068 <_rclc_execute.part.0+0x268>
 800ce24:	2b07      	cmp	r3, #7
 800ce26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce28:	f040 8118 	bne.w	800d05c <_rclc_execute.part.0+0x25c>
 800ce2c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ce30:	6880      	ldr	r0, [r0, #8]
 800ce32:	4798      	blx	r3
 800ce34:	f104 0110 	add.w	r1, r4, #16
 800ce38:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ce3a:	6860      	ldr	r0, [r4, #4]
 800ce3c:	f005 ff32 	bl	8012ca4 <rcl_send_response>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d033      	beq.n	800ceac <_rclc_execute.part.0+0xac>
 800ce44:	9005      	str	r0, [sp, #20]
 800ce46:	f000 fe03 	bl	800da50 <rcutils_reset_error>
 800ce4a:	9805      	ldr	r0, [sp, #20]
 800ce4c:	e02e      	b.n	800ceac <_rclc_execute.part.0+0xac>
 800ce4e:	6840      	ldr	r0, [r0, #4]
 800ce50:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 8086 	beq.w	800cf66 <_rclc_execute.part.0+0x166>
 800ce5a:	2600      	movs	r6, #0
 800ce5c:	2701      	movs	r7, #1
 800ce5e:	e004      	b.n	800ce6a <_rclc_execute.part.0+0x6a>
 800ce60:	f007 fd78 	bl	8014954 <rclc_action_send_result_request>
 800ce64:	b998      	cbnz	r0, 800ce8e <_rclc_execute.part.0+0x8e>
 800ce66:	722f      	strb	r7, [r5, #8]
 800ce68:	6860      	ldr	r0, [r4, #4]
 800ce6a:	f007 fe25 	bl	8014ab8 <rclc_action_find_first_handle_with_goal_response>
 800ce6e:	4605      	mov	r5, r0
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d077      	beq.n	800cf64 <_rclc_execute.part.0+0x164>
 800ce74:	6863      	ldr	r3, [r4, #4]
 800ce76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ce7e:	f885 6020 	strb.w	r6, [r5, #32]
 800ce82:	4798      	blx	r3
 800ce84:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ce88:	4628      	mov	r0, r5
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e8      	bne.n	800ce60 <_rclc_execute.part.0+0x60>
 800ce8e:	6860      	ldr	r0, [r4, #4]
 800ce90:	4629      	mov	r1, r5
 800ce92:	f007 fd95 	bl	80149c0 <rclc_action_remove_used_goal_handle>
 800ce96:	e7e7      	b.n	800ce68 <_rclc_execute.part.0+0x68>
 800ce98:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ce9c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	f000 80c9 	beq.w	800d038 <_rclc_execute.part.0+0x238>
 800cea6:	6880      	ldr	r0, [r0, #8]
 800cea8:	4798      	blx	r3
 800ceaa:	2000      	movs	r0, #0
 800ceac:	b007      	add	sp, #28
 800ceae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb0:	6840      	ldr	r0, [r0, #4]
 800ceb2:	f006 f9bf 	bl	8013234 <rcl_timer_call>
 800ceb6:	f240 3321 	movw	r3, #801	@ 0x321
 800ceba:	4298      	cmp	r0, r3
 800cebc:	d004      	beq.n	800cec8 <_rclc_execute.part.0+0xc8>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d0f4      	beq.n	800ceac <_rclc_execute.part.0+0xac>
 800cec2:	e7bf      	b.n	800ce44 <_rclc_execute.part.0+0x44>
 800cec4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cec6:	4798      	blx	r3
 800cec8:	2000      	movs	r0, #0
 800ceca:	b007      	add	sp, #28
 800cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cece:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ced2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ced4:	b925      	cbnz	r5, 800cee0 <_rclc_execute.part.0+0xe0>
 800ced6:	4628      	mov	r0, r5
 800ced8:	4798      	blx	r3
 800ceda:	4628      	mov	r0, r5
 800cedc:	e7e6      	b.n	800ceac <_rclc_execute.part.0+0xac>
 800cede:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cee0:	68a0      	ldr	r0, [r4, #8]
 800cee2:	4798      	blx	r3
 800cee4:	2000      	movs	r0, #0
 800cee6:	b007      	add	sp, #28
 800cee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceea:	6840      	ldr	r0, [r0, #4]
 800ceec:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cef0:	bb3b      	cbnz	r3, 800cf42 <_rclc_execute.part.0+0x142>
 800cef2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d07b      	beq.n	800cff2 <_rclc_execute.part.0+0x1f2>
 800cefa:	f640 0634 	movw	r6, #2100	@ 0x834
 800cefe:	2701      	movs	r7, #1
 800cf00:	e007      	b.n	800cf12 <_rclc_execute.part.0+0x112>
 800cf02:	4628      	mov	r0, r5
 800cf04:	f007 fdf0 	bl	8014ae8 <rclc_action_server_response_goal_request>
 800cf08:	6860      	ldr	r0, [r4, #4]
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f007 fd58 	bl	80149c0 <rclc_action_remove_used_goal_handle>
 800cf10:	6860      	ldr	r0, [r4, #4]
 800cf12:	2100      	movs	r1, #0
 800cf14:	f007 fd82 	bl	8014a1c <rclc_action_find_first_handle_by_status>
 800cf18:	4605      	mov	r5, r0
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d066      	beq.n	800cfec <_rclc_execute.part.0+0x1ec>
 800cf1e:	6863      	ldr	r3, [r4, #4]
 800cf20:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	4798      	blx	r3
 800cf26:	42b0      	cmp	r0, r6
 800cf28:	f04f 0100 	mov.w	r1, #0
 800cf2c:	d1e9      	bne.n	800cf02 <_rclc_execute.part.0+0x102>
 800cf2e:	2101      	movs	r1, #1
 800cf30:	4628      	mov	r0, r5
 800cf32:	f007 fdd9 	bl	8014ae8 <rclc_action_server_response_goal_request>
 800cf36:	722f      	strb	r7, [r5, #8]
 800cf38:	e7ea      	b.n	800cf10 <_rclc_execute.part.0+0x110>
 800cf3a:	6848      	ldr	r0, [r1, #4]
 800cf3c:	f007 fd40 	bl	80149c0 <rclc_action_remove_used_goal_handle>
 800cf40:	6860      	ldr	r0, [r4, #4]
 800cf42:	f007 fd77 	bl	8014a34 <rclc_action_find_first_terminated_handle>
 800cf46:	4601      	mov	r1, r0
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d1f6      	bne.n	800cf3a <_rclc_execute.part.0+0x13a>
 800cf4c:	6860      	ldr	r0, [r4, #4]
 800cf4e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800cf52:	e7ce      	b.n	800cef2 <_rclc_execute.part.0+0xf2>
 800cf54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cf56:	6880      	ldr	r0, [r0, #8]
 800cf58:	f104 0110 	add.w	r1, r4, #16
 800cf5c:	4798      	blx	r3
 800cf5e:	2000      	movs	r0, #0
 800cf60:	b007      	add	sp, #28
 800cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf64:	6860      	ldr	r0, [r4, #4]
 800cf66:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf6a:	b18b      	cbz	r3, 800cf90 <_rclc_execute.part.0+0x190>
 800cf6c:	68c5      	ldr	r5, [r0, #12]
 800cf6e:	b32d      	cbz	r5, 800cfbc <_rclc_execute.part.0+0x1bc>
 800cf70:	2600      	movs	r6, #0
 800cf72:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cf76:	b143      	cbz	r3, 800cf8a <_rclc_execute.part.0+0x18a>
 800cf78:	69c3      	ldr	r3, [r0, #28]
 800cf7a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cf7e:	b123      	cbz	r3, 800cf8a <_rclc_execute.part.0+0x18a>
 800cf80:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cf82:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cf84:	4628      	mov	r0, r5
 800cf86:	4798      	blx	r3
 800cf88:	6860      	ldr	r0, [r4, #4]
 800cf8a:	682d      	ldr	r5, [r5, #0]
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d1f0      	bne.n	800cf72 <_rclc_execute.part.0+0x172>
 800cf90:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cf94:	b193      	cbz	r3, 800cfbc <_rclc_execute.part.0+0x1bc>
 800cf96:	68c5      	ldr	r5, [r0, #12]
 800cf98:	b185      	cbz	r5, 800cfbc <_rclc_execute.part.0+0x1bc>
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cfa0:	b14b      	cbz	r3, 800cfb6 <_rclc_execute.part.0+0x1b6>
 800cfa2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cfa4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cfa8:	b12b      	cbz	r3, 800cfb6 <_rclc_execute.part.0+0x1b6>
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cfb0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cfb2:	4798      	blx	r3
 800cfb4:	6860      	ldr	r0, [r4, #4]
 800cfb6:	682d      	ldr	r5, [r5, #0]
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	d1ef      	bne.n	800cf9c <_rclc_execute.part.0+0x19c>
 800cfbc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d081      	beq.n	800cec8 <_rclc_execute.part.0+0xc8>
 800cfc4:	2700      	movs	r7, #0
 800cfc6:	e00b      	b.n	800cfe0 <_rclc_execute.part.0+0x1e0>
 800cfc8:	6863      	ldr	r3, [r4, #4]
 800cfca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cfcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cfce:	6a1e      	ldr	r6, [r3, #32]
 800cfd0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cfd4:	47b0      	blx	r6
 800cfd6:	6860      	ldr	r0, [r4, #4]
 800cfd8:	4629      	mov	r1, r5
 800cfda:	f007 fcf1 	bl	80149c0 <rclc_action_remove_used_goal_handle>
 800cfde:	6860      	ldr	r0, [r4, #4]
 800cfe0:	f007 fd76 	bl	8014ad0 <rclc_action_find_first_handle_with_result_response>
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d1ee      	bne.n	800cfc8 <_rclc_execute.part.0+0x1c8>
 800cfea:	e76d      	b.n	800cec8 <_rclc_execute.part.0+0xc8>
 800cfec:	6860      	ldr	r0, [r4, #4]
 800cfee:	f880 5020 	strb.w	r5, [r0, #32]
 800cff2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f43f af66 	beq.w	800cec8 <_rclc_execute.part.0+0xc8>
 800cffc:	68c5      	ldr	r5, [r0, #12]
 800cffe:	b1b5      	cbz	r5, 800d02e <_rclc_execute.part.0+0x22e>
 800d000:	2602      	movs	r6, #2
 800d002:	e001      	b.n	800d008 <_rclc_execute.part.0+0x208>
 800d004:	682d      	ldr	r5, [r5, #0]
 800d006:	b195      	cbz	r5, 800d02e <_rclc_execute.part.0+0x22e>
 800d008:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d1f9      	bne.n	800d004 <_rclc_execute.part.0+0x204>
 800d010:	69c3      	ldr	r3, [r0, #28]
 800d012:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d014:	4628      	mov	r0, r5
 800d016:	4798      	blx	r3
 800d018:	4603      	mov	r3, r0
 800d01a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d01e:	4628      	mov	r0, r5
 800d020:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d024:	b163      	cbz	r3, 800d040 <_rclc_execute.part.0+0x240>
 800d026:	f007 fd7f 	bl	8014b28 <rclc_action_server_goal_cancel_accept>
 800d02a:	6860      	ldr	r0, [r4, #4]
 800d02c:	e7ea      	b.n	800d004 <_rclc_execute.part.0+0x204>
 800d02e:	2300      	movs	r3, #0
 800d030:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d034:	4618      	mov	r0, r3
 800d036:	e739      	b.n	800ceac <_rclc_execute.part.0+0xac>
 800d038:	4628      	mov	r0, r5
 800d03a:	4798      	blx	r3
 800d03c:	4628      	mov	r0, r5
 800d03e:	e735      	b.n	800ceac <_rclc_execute.part.0+0xac>
 800d040:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d042:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d046:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d04e:	6860      	ldr	r0, [r4, #4]
 800d050:	2101      	movs	r1, #1
 800d052:	f007 fd95 	bl	8014b80 <rclc_action_server_goal_cancel_reject>
 800d056:	722e      	strb	r6, [r5, #8]
 800d058:	6860      	ldr	r0, [r4, #4]
 800d05a:	e7d3      	b.n	800d004 <_rclc_execute.part.0+0x204>
 800d05c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d05e:	6880      	ldr	r0, [r0, #8]
 800d060:	4798      	blx	r3
 800d062:	f104 0110 	add.w	r1, r4, #16
 800d066:	e6e7      	b.n	800ce38 <_rclc_execute.part.0+0x38>
 800d068:	f100 0110 	add.w	r1, r0, #16
 800d06c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d06e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d070:	6880      	ldr	r0, [r0, #8]
 800d072:	9105      	str	r1, [sp, #20]
 800d074:	4798      	blx	r3
 800d076:	9905      	ldr	r1, [sp, #20]
 800d078:	e6de      	b.n	800ce38 <_rclc_execute.part.0+0x38>
 800d07a:	2001      	movs	r0, #1
 800d07c:	e716      	b.n	800ceac <_rclc_execute.part.0+0xac>
 800d07e:	bf00      	nop

0800d080 <rclc_executor_trigger_any>:
 800d080:	2800      	cmp	r0, #0
 800d082:	d03f      	beq.n	800d104 <rclc_executor_trigger_any+0x84>
 800d084:	2900      	cmp	r1, #0
 800d086:	d03e      	beq.n	800d106 <rclc_executor_trigger_any+0x86>
 800d088:	4603      	mov	r3, r0
 800d08a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d08e:	2200      	movs	r2, #0
 800d090:	2800      	cmp	r0, #0
 800d092:	d037      	beq.n	800d104 <rclc_executor_trigger_any+0x84>
 800d094:	b430      	push	{r4, r5}
 800d096:	f893 c000 	ldrb.w	ip, [r3]
 800d09a:	f1bc 0f08 	cmp.w	ip, #8
 800d09e:	d11e      	bne.n	800d0de <rclc_executor_trigger_any+0x5e>
 800d0a0:	685c      	ldr	r4, [r3, #4]
 800d0a2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d0a4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d0a8:	d105      	bne.n	800d0b6 <rclc_executor_trigger_any+0x36>
 800d0aa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d0ae:	b910      	cbnz	r0, 800d0b6 <rclc_executor_trigger_any+0x36>
 800d0b0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d0b4:	b128      	cbz	r0, 800d0c2 <rclc_executor_trigger_any+0x42>
 800d0b6:	bc30      	pop	{r4, r5}
 800d0b8:	4770      	bx	lr
 800d0ba:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d1f9      	bne.n	800d0b6 <rclc_executor_trigger_any+0x36>
 800d0c2:	3201      	adds	r2, #1
 800d0c4:	4291      	cmp	r1, r2
 800d0c6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d0ca:	d018      	beq.n	800d0fe <rclc_executor_trigger_any+0x7e>
 800d0cc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0f0      	beq.n	800d0b6 <rclc_executor_trigger_any+0x36>
 800d0d4:	f893 c000 	ldrb.w	ip, [r3]
 800d0d8:	f1bc 0f08 	cmp.w	ip, #8
 800d0dc:	d0e0      	beq.n	800d0a0 <rclc_executor_trigger_any+0x20>
 800d0de:	f1bc 0f09 	cmp.w	ip, #9
 800d0e2:	d1ea      	bne.n	800d0ba <rclc_executor_trigger_any+0x3a>
 800d0e4:	685c      	ldr	r4, [r3, #4]
 800d0e6:	6a25      	ldr	r5, [r4, #32]
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	d1e4      	bne.n	800d0b6 <rclc_executor_trigger_any+0x36>
 800d0ec:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d1e0      	bne.n	800d0b6 <rclc_executor_trigger_any+0x36>
 800d0f4:	3201      	adds	r2, #1
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d0fc:	d1e6      	bne.n	800d0cc <rclc_executor_trigger_any+0x4c>
 800d0fe:	2000      	movs	r0, #0
 800d100:	bc30      	pop	{r4, r5}
 800d102:	4770      	bx	lr
 800d104:	4770      	bx	lr
 800d106:	4608      	mov	r0, r1
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <rclc_executor_get_zero_initialized_executor>:
 800d10c:	b510      	push	{r4, lr}
 800d10e:	4903      	ldr	r1, [pc, #12]	@ (800d11c <rclc_executor_get_zero_initialized_executor+0x10>)
 800d110:	4604      	mov	r4, r0
 800d112:	2288      	movs	r2, #136	@ 0x88
 800d114:	f00b fca5 	bl	8018a62 <memcpy>
 800d118:	4620      	mov	r0, r4
 800d11a:	bd10      	pop	{r4, pc}
 800d11c:	0801b130 	.word	0x0801b130

0800d120 <rclc_executor_init>:
 800d120:	2800      	cmp	r0, #0
 800d122:	d05f      	beq.n	800d1e4 <rclc_executor_init+0xc4>
 800d124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d128:	460c      	mov	r4, r1
 800d12a:	b0b0      	sub	sp, #192	@ 0xc0
 800d12c:	2900      	cmp	r1, #0
 800d12e:	d051      	beq.n	800d1d4 <rclc_executor_init+0xb4>
 800d130:	4605      	mov	r5, r0
 800d132:	4618      	mov	r0, r3
 800d134:	4616      	mov	r6, r2
 800d136:	461f      	mov	r7, r3
 800d138:	f000 fc4e 	bl	800d9d8 <rcutils_allocator_is_valid>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d049      	beq.n	800d1d4 <rclc_executor_init+0xb4>
 800d140:	2e00      	cmp	r6, #0
 800d142:	d047      	beq.n	800d1d4 <rclc_executor_init+0xb4>
 800d144:	492c      	ldr	r1, [pc, #176]	@ (800d1f8 <rclc_executor_init+0xd8>)
 800d146:	2288      	movs	r2, #136	@ 0x88
 800d148:	a80e      	add	r0, sp, #56	@ 0x38
 800d14a:	f00b fc8a 	bl	8018a62 <memcpy>
 800d14e:	a90e      	add	r1, sp, #56	@ 0x38
 800d150:	2288      	movs	r2, #136	@ 0x88
 800d152:	4628      	mov	r0, r5
 800d154:	f00b fc85 	bl	8018a62 <memcpy>
 800d158:	602c      	str	r4, [r5, #0]
 800d15a:	4668      	mov	r0, sp
 800d15c:	60ae      	str	r6, [r5, #8]
 800d15e:	466c      	mov	r4, sp
 800d160:	f006 f9da 	bl	8013518 <rcl_get_zero_initialized_wait_set>
 800d164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d166:	f105 0c14 	add.w	ip, r5, #20
 800d16a:	f8d7 8000 	ldr.w	r8, [r7]
 800d16e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d17a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d17e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d1f0 <rclc_executor_init+0xd0>
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	f8cc 3000 	str.w	r3, [ip]
 800d188:	6939      	ldr	r1, [r7, #16]
 800d18a:	612f      	str	r7, [r5, #16]
 800d18c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d190:	01b0      	lsls	r0, r6, #6
 800d192:	47c0      	blx	r8
 800d194:	6068      	str	r0, [r5, #4]
 800d196:	b338      	cbz	r0, 800d1e8 <rclc_executor_init+0xc8>
 800d198:	2400      	movs	r4, #0
 800d19a:	e000      	b.n	800d19e <rclc_executor_init+0x7e>
 800d19c:	6868      	ldr	r0, [r5, #4]
 800d19e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	3401      	adds	r4, #1
 800d1a6:	f000 fa9f 	bl	800d6e8 <rclc_executor_handle_init>
 800d1aa:	42a6      	cmp	r6, r4
 800d1ac:	d1f6      	bne.n	800d19c <rclc_executor_init+0x7c>
 800d1ae:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d1b2:	f000 fa8d 	bl	800d6d0 <rclc_executor_handle_counters_zero_init>
 800d1b6:	4a11      	ldr	r2, [pc, #68]	@ (800d1fc <rclc_executor_init+0xdc>)
 800d1b8:	686b      	ldr	r3, [r5, #4]
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d1c0:	b163      	cbz	r3, 800d1dc <rclc_executor_init+0xbc>
 800d1c2:	692b      	ldr	r3, [r5, #16]
 800d1c4:	b153      	cbz	r3, 800d1dc <rclc_executor_init+0xbc>
 800d1c6:	68ab      	ldr	r3, [r5, #8]
 800d1c8:	b143      	cbz	r3, 800d1dc <rclc_executor_init+0xbc>
 800d1ca:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d1ce:	b030      	add	sp, #192	@ 0xc0
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	200b      	movs	r0, #11
 800d1d6:	b030      	add	sp, #192	@ 0xc0
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	b030      	add	sp, #192	@ 0xc0
 800d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e4:	200b      	movs	r0, #11
 800d1e6:	4770      	bx	lr
 800d1e8:	200a      	movs	r0, #10
 800d1ea:	e7f4      	b.n	800d1d6 <rclc_executor_init+0xb6>
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	3b9aca00 	.word	0x3b9aca00
 800d1f4:	00000000 	.word	0x00000000
 800d1f8:	0801b130 	.word	0x0801b130
 800d1fc:	0800d081 	.word	0x0800d081

0800d200 <rclc_executor_add_subscription>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d206:	b338      	cbz	r0, 800d258 <rclc_executor_add_subscription+0x58>
 800d208:	b331      	cbz	r1, 800d258 <rclc_executor_add_subscription+0x58>
 800d20a:	b32a      	cbz	r2, 800d258 <rclc_executor_add_subscription+0x58>
 800d20c:	b323      	cbz	r3, 800d258 <rclc_executor_add_subscription+0x58>
 800d20e:	4604      	mov	r4, r0
 800d210:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800d214:	42a8      	cmp	r0, r5
 800d216:	d301      	bcc.n	800d21c <rclc_executor_add_subscription+0x1c>
 800d218:	2001      	movs	r0, #1
 800d21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d21c:	6866      	ldr	r6, [r4, #4]
 800d21e:	0187      	lsls	r7, r0, #6
 800d220:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d224:	2500      	movs	r5, #0
 800d226:	55f5      	strb	r5, [r6, r7]
 800d228:	3001      	adds	r0, #1
 800d22a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d22e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d232:	2301      	movs	r3, #1
 800d234:	f104 0514 	add.w	r5, r4, #20
 800d238:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d23c:	f88c e001 	strb.w	lr, [ip, #1]
 800d240:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d244:	60e0      	str	r0, [r4, #12]
 800d246:	4628      	mov	r0, r5
 800d248:	f006 f97a 	bl	8013540 <rcl_wait_set_is_valid>
 800d24c:	b930      	cbnz	r0, 800d25c <rclc_executor_add_subscription+0x5c>
 800d24e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d250:	3301      	adds	r3, #1
 800d252:	2000      	movs	r0, #0
 800d254:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d258:	200b      	movs	r0, #11
 800d25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25c:	4628      	mov	r0, r5
 800d25e:	f006 f975 	bl	801354c <rcl_wait_set_fini>
 800d262:	2800      	cmp	r0, #0
 800d264:	d0f3      	beq.n	800d24e <rclc_executor_add_subscription+0x4e>
 800d266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d268 <rclc_executor_add_timer>:
 800d268:	b300      	cbz	r0, 800d2ac <rclc_executor_add_timer+0x44>
 800d26a:	b1f9      	cbz	r1, 800d2ac <rclc_executor_add_timer+0x44>
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d272:	4293      	cmp	r3, r2
 800d274:	4604      	mov	r4, r0
 800d276:	d301      	bcc.n	800d27c <rclc_executor_add_timer+0x14>
 800d278:	2001      	movs	r0, #1
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	6840      	ldr	r0, [r0, #4]
 800d27e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d282:	019d      	lsls	r5, r3, #6
 800d284:	6051      	str	r1, [r2, #4]
 800d286:	2102      	movs	r1, #2
 800d288:	5341      	strh	r1, [r0, r5]
 800d28a:	3301      	adds	r3, #1
 800d28c:	2000      	movs	r0, #0
 800d28e:	2101      	movs	r1, #1
 800d290:	f104 0514 	add.w	r5, r4, #20
 800d294:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d296:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d298:	4628      	mov	r0, r5
 800d29a:	60e3      	str	r3, [r4, #12]
 800d29c:	f006 f950 	bl	8013540 <rcl_wait_set_is_valid>
 800d2a0:	b930      	cbnz	r0, 800d2b0 <rclc_executor_add_timer+0x48>
 800d2a2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	200b      	movs	r0, #11
 800d2ae:	4770      	bx	lr
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f006 f94b 	bl	801354c <rcl_wait_set_fini>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d0f3      	beq.n	800d2a2 <rclc_executor_add_timer+0x3a>
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}

0800d2bc <rclc_executor_prepare>:
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d044      	beq.n	800d34a <rclc_executor_prepare+0x8e>
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	f100 0514 	add.w	r5, r0, #20
 800d2c6:	b09b      	sub	sp, #108	@ 0x6c
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f006 f938 	bl	8013540 <rcl_wait_set_is_valid>
 800d2d0:	b110      	cbz	r0, 800d2d8 <rclc_executor_prepare+0x1c>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	b01b      	add	sp, #108	@ 0x6c
 800d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d8:	4628      	mov	r0, r5
 800d2da:	f006 f937 	bl	801354c <rcl_wait_set_fini>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d130      	bne.n	800d344 <rclc_executor_prepare+0x88>
 800d2e2:	a80c      	add	r0, sp, #48	@ 0x30
 800d2e4:	f006 f918 	bl	8013518 <rcl_get_zero_initialized_wait_set>
 800d2e8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d2ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2f0:	46ae      	mov	lr, r5
 800d2f2:	6927      	ldr	r7, [r4, #16]
 800d2f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d300:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d304:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d308:	f8dc 3000 	ldr.w	r3, [ip]
 800d30c:	f8ce 3000 	str.w	r3, [lr]
 800d310:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d312:	ae04      	add	r6, sp, #16
 800d314:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	6822      	ldr	r2, [r4, #0]
 800d31a:	6033      	str	r3, [r6, #0]
 800d31c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d31e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d320:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d324:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d328:	e9cd 2100 	strd	r2, r1, [sp]
 800d32c:	4628      	mov	r0, r5
 800d32e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d330:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d332:	f006 fc09 	bl	8013b48 <rcl_wait_set_init>
 800d336:	2800      	cmp	r0, #0
 800d338:	d0cc      	beq.n	800d2d4 <rclc_executor_prepare+0x18>
 800d33a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d33c:	f000 fb88 	bl	800da50 <rcutils_reset_error>
 800d340:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d342:	e7c7      	b.n	800d2d4 <rclc_executor_prepare+0x18>
 800d344:	f000 fb84 	bl	800da50 <rcutils_reset_error>
 800d348:	e7cb      	b.n	800d2e2 <rclc_executor_prepare+0x26>
 800d34a:	200b      	movs	r0, #11
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop

0800d350 <rclc_executor_spin_some.part.0>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	f100 0614 	add.w	r6, r0, #20
 800d358:	b083      	sub	sp, #12
 800d35a:	4691      	mov	r9, r2
 800d35c:	4698      	mov	r8, r3
 800d35e:	4605      	mov	r5, r0
 800d360:	f7ff ffac 	bl	800d2bc <rclc_executor_prepare>
 800d364:	4630      	mov	r0, r6
 800d366:	f006 f9bd 	bl	80136e4 <rcl_wait_set_clear>
 800d36a:	4607      	mov	r7, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f040 80ed 	bne.w	800d54c <rclc_executor_spin_some.part.0+0x1fc>
 800d372:	68ab      	ldr	r3, [r5, #8]
 800d374:	4604      	mov	r4, r0
 800d376:	b303      	cbz	r3, 800d3ba <rclc_executor_spin_some.part.0+0x6a>
 800d378:	6869      	ldr	r1, [r5, #4]
 800d37a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d37e:	01a2      	lsls	r2, r4, #6
 800d380:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d384:	b1cb      	cbz	r3, 800d3ba <rclc_executor_spin_some.part.0+0x6a>
 800d386:	5c8b      	ldrb	r3, [r1, r2]
 800d388:	2b0a      	cmp	r3, #10
 800d38a:	f200 80d8 	bhi.w	800d53e <rclc_executor_spin_some.part.0+0x1ee>
 800d38e:	e8df f003 	tbb	[pc, r3]
 800d392:	9c9c      	.short	0x9c9c
 800d394:	068c8ca7 	.word	0x068c8ca7
 800d398:	bdc90606 	.word	0xbdc90606
 800d39c:	b2          	.byte	0xb2
 800d39d:	00          	.byte	0x00
 800d39e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d3a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f006 fce4 	bl	8013d74 <rcl_wait_set_add_service>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	f040 8086 	bne.w	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d3b2:	68ab      	ldr	r3, [r5, #8]
 800d3b4:	3401      	adds	r4, #1
 800d3b6:	429c      	cmp	r4, r3
 800d3b8:	d3de      	bcc.n	800d378 <rclc_executor_spin_some.part.0+0x28>
 800d3ba:	4643      	mov	r3, r8
 800d3bc:	464a      	mov	r2, r9
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f006 fd06 	bl	8013dd0 <rcl_wait>
 800d3c4:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 80c7 	beq.w	800d55c <rclc_executor_spin_some.part.0+0x20c>
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	f040 80b5 	bne.w	800d53e <rclc_executor_spin_some.part.0+0x1ee>
 800d3d4:	68ab      	ldr	r3, [r5, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8159 	beq.w	800d68e <rclc_executor_spin_some.part.0+0x33e>
 800d3dc:	2400      	movs	r4, #0
 800d3de:	46a0      	mov	r8, r4
 800d3e0:	f240 1991 	movw	r9, #401	@ 0x191
 800d3e4:	e00a      	b.n	800d3fc <rclc_executor_spin_some.part.0+0xac>
 800d3e6:	f7ff fb49 	bl	800ca7c <_rclc_check_for_new_data>
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	b110      	cbz	r0, 800d3f4 <rclc_executor_spin_some.part.0+0xa4>
 800d3ee:	4548      	cmp	r0, r9
 800d3f0:	f040 80b2 	bne.w	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d3f4:	68ab      	ldr	r3, [r5, #8]
 800d3f6:	4598      	cmp	r8, r3
 800d3f8:	f080 8126 	bcs.w	800d648 <rclc_executor_spin_some.part.0+0x2f8>
 800d3fc:	686a      	ldr	r2, [r5, #4]
 800d3fe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d402:	4631      	mov	r1, r6
 800d404:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d408:	f108 0801 	add.w	r8, r8, #1
 800d40c:	f1bc 0f00 	cmp.w	ip, #0
 800d410:	d1e9      	bne.n	800d3e6 <rclc_executor_spin_some.part.0+0x96>
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d41a:	4798      	blx	r3
 800d41c:	2800      	cmp	r0, #0
 800d41e:	f000 809b 	beq.w	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d422:	68ab      	ldr	r3, [r5, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 8097 	beq.w	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d42a:	f04f 0800 	mov.w	r8, #0
 800d42e:	f240 1991 	movw	r9, #401	@ 0x191
 800d432:	e009      	b.n	800d448 <rclc_executor_spin_some.part.0+0xf8>
 800d434:	f7ff fb70 	bl	800cb18 <_rclc_take_new_data>
 800d438:	4604      	mov	r4, r0
 800d43a:	b110      	cbz	r0, 800d442 <rclc_executor_spin_some.part.0+0xf2>
 800d43c:	4548      	cmp	r0, r9
 800d43e:	f040 808b 	bne.w	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d442:	68ab      	ldr	r3, [r5, #8]
 800d444:	4598      	cmp	r8, r3
 800d446:	d209      	bcs.n	800d45c <rclc_executor_spin_some.part.0+0x10c>
 800d448:	6868      	ldr	r0, [r5, #4]
 800d44a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d44e:	4631      	mov	r1, r6
 800d450:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d454:	f108 0801 	add.w	r8, r8, #1
 800d458:	2a00      	cmp	r2, #0
 800d45a:	d1eb      	bne.n	800d434 <rclc_executor_spin_some.part.0+0xe4>
 800d45c:	2600      	movs	r6, #0
 800d45e:	b97b      	cbnz	r3, 800d480 <rclc_executor_spin_some.part.0+0x130>
 800d460:	e07a      	b.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d462:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d466:	2a08      	cmp	r2, #8
 800d468:	f000 80fd 	beq.w	800d666 <rclc_executor_spin_some.part.0+0x316>
 800d46c:	2a09      	cmp	r2, #9
 800d46e:	f000 80ef 	beq.w	800d650 <rclc_executor_spin_some.part.0+0x300>
 800d472:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d476:	b98a      	cbnz	r2, 800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d478:	3601      	adds	r6, #1
 800d47a:	429e      	cmp	r6, r3
 800d47c:	d262      	bcs.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d47e:	2400      	movs	r4, #0
 800d480:	686a      	ldr	r2, [r5, #4]
 800d482:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d486:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d48a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d48e:	2900      	cmp	r1, #0
 800d490:	d062      	beq.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d492:	7841      	ldrb	r1, [r0, #1]
 800d494:	2900      	cmp	r1, #0
 800d496:	d0e4      	beq.n	800d462 <rclc_executor_spin_some.part.0+0x112>
 800d498:	2901      	cmp	r1, #1
 800d49a:	d1ed      	bne.n	800d478 <rclc_executor_spin_some.part.0+0x128>
 800d49c:	f7ff fcb0 	bl	800ce00 <_rclc_execute.part.0>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f040 80b6 	bne.w	800d612 <rclc_executor_spin_some.part.0+0x2c2>
 800d4a6:	68ab      	ldr	r3, [r5, #8]
 800d4a8:	e7e6      	b.n	800d478 <rclc_executor_spin_some.part.0+0x128>
 800d4aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4ae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f006 fc32 	bl	8013d1c <rcl_wait_set_add_client>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	f43f af7a 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d4be:	9001      	str	r0, [sp, #4]
 800d4c0:	f000 fac6 	bl	800da50 <rcutils_reset_error>
 800d4c4:	9801      	ldr	r0, [sp, #4]
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	e03c      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d4ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4ce:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f006 f8da 	bl	801368c <rcl_wait_set_add_subscription>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f43f af6a 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d4de:	e7ee      	b.n	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d4e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4e4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f006 fbe7 	bl	8013cbc <rcl_wait_set_add_timer>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f43f af5f 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d4f4:	e7e3      	b.n	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d4f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d4fa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d4fe:	4630      	mov	r0, r6
 800d500:	f006 fbb0 	bl	8013c64 <rcl_wait_set_add_guard_condition>
 800d504:	2800      	cmp	r0, #0
 800d506:	f43f af54 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d50a:	e7d8      	b.n	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d50c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d510:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d514:	3110      	adds	r1, #16
 800d516:	4630      	mov	r0, r6
 800d518:	f007 f932 	bl	8014780 <rcl_action_wait_set_add_action_server>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	f43f af48 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d522:	e7cc      	b.n	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d524:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d528:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d52c:	3110      	adds	r1, #16
 800d52e:	2300      	movs	r3, #0
 800d530:	4630      	mov	r0, r6
 800d532:	f006 fefd 	bl	8014330 <rcl_action_wait_set_add_action_client>
 800d536:	2800      	cmp	r0, #0
 800d538:	f43f af3b 	beq.w	800d3b2 <rclc_executor_spin_some.part.0+0x62>
 800d53c:	e7bf      	b.n	800d4be <rclc_executor_spin_some.part.0+0x16e>
 800d53e:	f000 fa87 	bl	800da50 <rcutils_reset_error>
 800d542:	2701      	movs	r7, #1
 800d544:	4638      	mov	r0, r7
 800d546:	b003      	add	sp, #12
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	f000 fa80 	bl	800da50 <rcutils_reset_error>
 800d550:	4638      	mov	r0, r7
 800d552:	b003      	add	sp, #12
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d558:	4627      	mov	r7, r4
 800d55a:	e7f3      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d55c:	68ab      	ldr	r3, [r5, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 8092 	beq.w	800d688 <rclc_executor_spin_some.part.0+0x338>
 800d564:	2400      	movs	r4, #0
 800d566:	46a0      	mov	r8, r4
 800d568:	f240 1991 	movw	r9, #401	@ 0x191
 800d56c:	e008      	b.n	800d580 <rclc_executor_spin_some.part.0+0x230>
 800d56e:	f7ff fa85 	bl	800ca7c <_rclc_check_for_new_data>
 800d572:	4604      	mov	r4, r0
 800d574:	b108      	cbz	r0, 800d57a <rclc_executor_spin_some.part.0+0x22a>
 800d576:	4548      	cmp	r0, r9
 800d578:	d1ee      	bne.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d57a:	68ab      	ldr	r3, [r5, #8]
 800d57c:	4598      	cmp	r8, r3
 800d57e:	d265      	bcs.n	800d64c <rclc_executor_spin_some.part.0+0x2fc>
 800d580:	686a      	ldr	r2, [r5, #4]
 800d582:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d586:	4631      	mov	r1, r6
 800d588:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d58c:	f108 0801 	add.w	r8, r8, #1
 800d590:	f1bc 0f00 	cmp.w	ip, #0
 800d594:	d1eb      	bne.n	800d56e <rclc_executor_spin_some.part.0+0x21e>
 800d596:	4619      	mov	r1, r3
 800d598:	4610      	mov	r0, r2
 800d59a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d59e:	4798      	blx	r3
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d0d9      	beq.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d5a4:	68ab      	ldr	r3, [r5, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d0d6      	beq.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d5aa:	f04f 0800 	mov.w	r8, #0
 800d5ae:	f240 1991 	movw	r9, #401	@ 0x191
 800d5b2:	f240 2a59 	movw	sl, #601	@ 0x259
 800d5b6:	e00e      	b.n	800d5d6 <rclc_executor_spin_some.part.0+0x286>
 800d5b8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d033      	beq.n	800d628 <rclc_executor_spin_some.part.0+0x2d8>
 800d5c0:	2b09      	cmp	r3, #9
 800d5c2:	d028      	beq.n	800d616 <rclc_executor_spin_some.part.0+0x2c6>
 800d5c4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d5c8:	b9fb      	cbnz	r3, 800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d5ca:	68ab      	ldr	r3, [r5, #8]
 800d5cc:	f108 0801 	add.w	r8, r8, #1
 800d5d0:	4598      	cmp	r8, r3
 800d5d2:	d2b7      	bcs.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d5d4:	2400      	movs	r4, #0
 800d5d6:	6868      	ldr	r0, [r5, #4]
 800d5d8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d5dc:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d5e0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0b7      	beq.n	800d558 <rclc_executor_spin_some.part.0+0x208>
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	f7ff fa95 	bl	800cb18 <_rclc_take_new_data>
 800d5ee:	b118      	cbz	r0, 800d5f8 <rclc_executor_spin_some.part.0+0x2a8>
 800d5f0:	4548      	cmp	r0, r9
 800d5f2:	d001      	beq.n	800d5f8 <rclc_executor_spin_some.part.0+0x2a8>
 800d5f4:	4550      	cmp	r0, sl
 800d5f6:	d10c      	bne.n	800d612 <rclc_executor_spin_some.part.0+0x2c2>
 800d5f8:	686b      	ldr	r3, [r5, #4]
 800d5fa:	eb13 000b 	adds.w	r0, r3, fp
 800d5fe:	d021      	beq.n	800d644 <rclc_executor_spin_some.part.0+0x2f4>
 800d600:	7842      	ldrb	r2, [r0, #1]
 800d602:	2a00      	cmp	r2, #0
 800d604:	d0d8      	beq.n	800d5b8 <rclc_executor_spin_some.part.0+0x268>
 800d606:	2a01      	cmp	r2, #1
 800d608:	d1df      	bne.n	800d5ca <rclc_executor_spin_some.part.0+0x27a>
 800d60a:	f7ff fbf9 	bl	800ce00 <_rclc_execute.part.0>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d0db      	beq.n	800d5ca <rclc_executor_spin_some.part.0+0x27a>
 800d612:	4607      	mov	r7, r0
 800d614:	e796      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d616:	6843      	ldr	r3, [r0, #4]
 800d618:	6a1a      	ldr	r2, [r3, #32]
 800d61a:	2a00      	cmp	r2, #0
 800d61c:	d1f5      	bne.n	800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d61e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0d1      	beq.n	800d5ca <rclc_executor_spin_some.part.0+0x27a>
 800d626:	e7f0      	b.n	800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d628:	6843      	ldr	r3, [r0, #4]
 800d62a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d62c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d630:	d1eb      	bne.n	800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d632:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d636:	2a00      	cmp	r2, #0
 800d638:	d1e7      	bne.n	800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d63a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d0c3      	beq.n	800d5ca <rclc_executor_spin_some.part.0+0x27a>
 800d642:	e7e2      	b.n	800d60a <rclc_executor_spin_some.part.0+0x2ba>
 800d644:	270b      	movs	r7, #11
 800d646:	e77d      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1f4>
 800d648:	686a      	ldr	r2, [r5, #4]
 800d64a:	e6e2      	b.n	800d412 <rclc_executor_spin_some.part.0+0xc2>
 800d64c:	686a      	ldr	r2, [r5, #4]
 800d64e:	e7a2      	b.n	800d596 <rclc_executor_spin_some.part.0+0x246>
 800d650:	6842      	ldr	r2, [r0, #4]
 800d652:	6a11      	ldr	r1, [r2, #32]
 800d654:	2900      	cmp	r1, #0
 800d656:	f47f af21 	bne.w	800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d65a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d65e:	2a00      	cmp	r2, #0
 800d660:	f43f af0a 	beq.w	800d478 <rclc_executor_spin_some.part.0+0x128>
 800d664:	e71a      	b.n	800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d666:	6842      	ldr	r2, [r0, #4]
 800d668:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d66a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d66e:	f47f af15 	bne.w	800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d672:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d676:	2900      	cmp	r1, #0
 800d678:	f47f af10 	bne.w	800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d67c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d680:	2a00      	cmp	r2, #0
 800d682:	f43f aef9 	beq.w	800d478 <rclc_executor_spin_some.part.0+0x128>
 800d686:	e709      	b.n	800d49c <rclc_executor_spin_some.part.0+0x14c>
 800d688:	686a      	ldr	r2, [r5, #4]
 800d68a:	461c      	mov	r4, r3
 800d68c:	e783      	b.n	800d596 <rclc_executor_spin_some.part.0+0x246>
 800d68e:	686a      	ldr	r2, [r5, #4]
 800d690:	461c      	mov	r4, r3
 800d692:	e6be      	b.n	800d412 <rclc_executor_spin_some.part.0+0xc2>

0800d694 <rclc_executor_spin>:
 800d694:	b1d0      	cbz	r0, 800d6cc <rclc_executor_spin+0x38>
 800d696:	b510      	push	{r4, lr}
 800d698:	4604      	mov	r4, r0
 800d69a:	b082      	sub	sp, #8
 800d69c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d6a0:	6820      	ldr	r0, [r4, #0]
 800d6a2:	e9cd 2300 	strd	r2, r3, [sp]
 800d6a6:	f004 fd7b 	bl	80121a0 <rcl_context_is_valid>
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	b131      	cbz	r1, 800d6c2 <rclc_executor_spin+0x2e>
 800d6b4:	f7ff fe4c 	bl	800d350 <rclc_executor_spin_some.part.0>
 800d6b8:	f030 0302 	bics.w	r3, r0, #2
 800d6bc:	d0ee      	beq.n	800d69c <rclc_executor_spin+0x8>
 800d6be:	b002      	add	sp, #8
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	f000 f9c5 	bl	800da50 <rcutils_reset_error>
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	b002      	add	sp, #8
 800d6ca:	bd10      	pop	{r4, pc}
 800d6cc:	200b      	movs	r0, #11
 800d6ce:	4770      	bx	lr

0800d6d0 <rclc_executor_handle_counters_zero_init>:
 800d6d0:	b130      	cbz	r0, 800d6e0 <rclc_executor_handle_counters_zero_init+0x10>
 800d6d2:	b508      	push	{r3, lr}
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	f00b f8a4 	bl	8018824 <memset>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	bd08      	pop	{r3, pc}
 800d6e0:	200b      	movs	r0, #11
 800d6e2:	4770      	bx	lr
 800d6e4:	0000      	movs	r0, r0
	...

0800d6e8 <rclc_executor_handle_init>:
 800d6e8:	b168      	cbz	r0, 800d706 <rclc_executor_handle_init+0x1e>
 800d6ea:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d710 <rclc_executor_handle_init+0x28>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	220b      	movs	r2, #11
 800d6f2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d6f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d6fa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d6fe:	8002      	strh	r2, [r0, #0]
 800d700:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d702:	4618      	mov	r0, r3
 800d704:	4770      	bx	lr
 800d706:	200b      	movs	r0, #11
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	f3af 8000 	nop.w
	...

0800d718 <rclc_support_init>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	b086      	sub	sp, #24
 800d71e:	b3b8      	cbz	r0, 800d790 <rclc_support_init+0x78>
 800d720:	461c      	mov	r4, r3
 800d722:	b3ab      	cbz	r3, 800d790 <rclc_support_init+0x78>
 800d724:	460f      	mov	r7, r1
 800d726:	4690      	mov	r8, r2
 800d728:	4606      	mov	r6, r0
 800d72a:	f004 ffb1 	bl	8012690 <rcl_get_zero_initialized_init_options>
 800d72e:	f104 030c 	add.w	r3, r4, #12
 800d732:	9005      	str	r0, [sp, #20]
 800d734:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d738:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d73c:	a805      	add	r0, sp, #20
 800d73e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d742:	f004 ffa7 	bl	8012694 <rcl_init_options_init>
 800d746:	4605      	mov	r5, r0
 800d748:	b9e0      	cbnz	r0, 800d784 <rclc_support_init+0x6c>
 800d74a:	ad02      	add	r5, sp, #8
 800d74c:	4628      	mov	r0, r5
 800d74e:	f004 fd1d 	bl	801218c <rcl_get_zero_initialized_context>
 800d752:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d756:	4633      	mov	r3, r6
 800d758:	e886 0003 	stmia.w	r6, {r0, r1}
 800d75c:	aa05      	add	r2, sp, #20
 800d75e:	4641      	mov	r1, r8
 800d760:	4638      	mov	r0, r7
 800d762:	f004 fe91 	bl	8012488 <rcl_init>
 800d766:	4605      	mov	r5, r0
 800d768:	b9b8      	cbnz	r0, 800d79a <rclc_support_init+0x82>
 800d76a:	60b4      	str	r4, [r6, #8]
 800d76c:	4622      	mov	r2, r4
 800d76e:	f106 010c 	add.w	r1, r6, #12
 800d772:	2003      	movs	r0, #3
 800d774:	f005 fad0 	bl	8012d18 <rcl_clock_init>
 800d778:	4605      	mov	r5, r0
 800d77a:	b970      	cbnz	r0, 800d79a <rclc_support_init+0x82>
 800d77c:	a805      	add	r0, sp, #20
 800d77e:	f004 ffef 	bl	8012760 <rcl_init_options_fini>
 800d782:	b108      	cbz	r0, 800d788 <rclc_support_init+0x70>
 800d784:	f000 f964 	bl	800da50 <rcutils_reset_error>
 800d788:	4628      	mov	r0, r5
 800d78a:	b006      	add	sp, #24
 800d78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d790:	250b      	movs	r5, #11
 800d792:	4628      	mov	r0, r5
 800d794:	b006      	add	sp, #24
 800d796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d79a:	f000 f959 	bl	800da50 <rcutils_reset_error>
 800d79e:	a805      	add	r0, sp, #20
 800d7a0:	f004 ffde 	bl	8012760 <rcl_init_options_fini>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d0ef      	beq.n	800d788 <rclc_support_init+0x70>
 800d7a8:	e7ec      	b.n	800d784 <rclc_support_init+0x6c>
 800d7aa:	bf00      	nop

0800d7ac <rclc_node_init_default>:
 800d7ac:	b3b8      	cbz	r0, 800d81e <rclc_node_init_default+0x72>
 800d7ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	b0a1      	sub	sp, #132	@ 0x84
 800d7b6:	b329      	cbz	r1, 800d804 <rclc_node_init_default+0x58>
 800d7b8:	4616      	mov	r6, r2
 800d7ba:	b31a      	cbz	r2, 800d804 <rclc_node_init_default+0x58>
 800d7bc:	461f      	mov	r7, r3
 800d7be:	b30b      	cbz	r3, 800d804 <rclc_node_init_default+0x58>
 800d7c0:	f10d 0810 	add.w	r8, sp, #16
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	f7fe fcda 	bl	800c180 <rcl_get_zero_initialized_node>
 800d7cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d7d0:	f10d 0918 	add.w	r9, sp, #24
 800d7d4:	e884 0003 	stmia.w	r4, {r0, r1}
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f7fe fe7b 	bl	800c4d4 <rcl_node_get_default_options>
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f7fe fcce 	bl	800c180 <rcl_get_zero_initialized_node>
 800d7e4:	f8cd 9000 	str.w	r9, [sp]
 800d7e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d7ec:	463b      	mov	r3, r7
 800d7ee:	e884 0003 	stmia.w	r4, {r0, r1}
 800d7f2:	4632      	mov	r2, r6
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f7fe fccc 	bl	800c194 <rcl_node_init>
 800d7fc:	b930      	cbnz	r0, 800d80c <rclc_node_init_default+0x60>
 800d7fe:	b021      	add	sp, #132	@ 0x84
 800d800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d804:	200b      	movs	r0, #11
 800d806:	b021      	add	sp, #132	@ 0x84
 800d808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d80c:	9003      	str	r0, [sp, #12]
 800d80e:	f000 f91f 	bl	800da50 <rcutils_reset_error>
 800d812:	f000 f91d 	bl	800da50 <rcutils_reset_error>
 800d816:	9803      	ldr	r0, [sp, #12]
 800d818:	b021      	add	sp, #132	@ 0x84
 800d81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d81e:	200b      	movs	r0, #11
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop

0800d824 <rclc_publisher_init_default>:
 800d824:	b368      	cbz	r0, 800d882 <rclc_publisher_init_default+0x5e>
 800d826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d82a:	460d      	mov	r5, r1
 800d82c:	b0a0      	sub	sp, #128	@ 0x80
 800d82e:	b321      	cbz	r1, 800d87a <rclc_publisher_init_default+0x56>
 800d830:	4616      	mov	r6, r2
 800d832:	b312      	cbz	r2, 800d87a <rclc_publisher_init_default+0x56>
 800d834:	461f      	mov	r7, r3
 800d836:	b303      	cbz	r3, 800d87a <rclc_publisher_init_default+0x56>
 800d838:	4604      	mov	r4, r0
 800d83a:	f7fe fe77 	bl	800c52c <rcl_get_zero_initialized_publisher>
 800d83e:	f10d 0810 	add.w	r8, sp, #16
 800d842:	6020      	str	r0, [r4, #0]
 800d844:	4640      	mov	r0, r8
 800d846:	f7fe ff0d 	bl	800c664 <rcl_publisher_get_default_options>
 800d84a:	490f      	ldr	r1, [pc, #60]	@ (800d888 <rclc_publisher_init_default+0x64>)
 800d84c:	2250      	movs	r2, #80	@ 0x50
 800d84e:	4640      	mov	r0, r8
 800d850:	f00b f907 	bl	8018a62 <memcpy>
 800d854:	f8cd 8000 	str.w	r8, [sp]
 800d858:	463b      	mov	r3, r7
 800d85a:	4632      	mov	r2, r6
 800d85c:	4629      	mov	r1, r5
 800d85e:	4620      	mov	r0, r4
 800d860:	f7fe fe6a 	bl	800c538 <rcl_publisher_init>
 800d864:	b910      	cbnz	r0, 800d86c <rclc_publisher_init_default+0x48>
 800d866:	b020      	add	sp, #128	@ 0x80
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	9003      	str	r0, [sp, #12]
 800d86e:	f000 f8ef 	bl	800da50 <rcutils_reset_error>
 800d872:	9803      	ldr	r0, [sp, #12]
 800d874:	b020      	add	sp, #128	@ 0x80
 800d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87a:	200b      	movs	r0, #11
 800d87c:	b020      	add	sp, #128	@ 0x80
 800d87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d882:	200b      	movs	r0, #11
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	0801b1b8 	.word	0x0801b1b8

0800d88c <rclc_subscription_init_default>:
 800d88c:	b368      	cbz	r0, 800d8ea <rclc_subscription_init_default+0x5e>
 800d88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d892:	460d      	mov	r5, r1
 800d894:	b0a0      	sub	sp, #128	@ 0x80
 800d896:	b321      	cbz	r1, 800d8e2 <rclc_subscription_init_default+0x56>
 800d898:	4616      	mov	r6, r2
 800d89a:	b312      	cbz	r2, 800d8e2 <rclc_subscription_init_default+0x56>
 800d89c:	461f      	mov	r7, r3
 800d89e:	b303      	cbz	r3, 800d8e2 <rclc_subscription_init_default+0x56>
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	f7fe ff53 	bl	800c74c <rcl_get_zero_initialized_subscription>
 800d8a6:	f10d 0810 	add.w	r8, sp, #16
 800d8aa:	6020      	str	r0, [r4, #0]
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	f7ff f84f 	bl	800c950 <rcl_subscription_get_default_options>
 800d8b2:	490f      	ldr	r1, [pc, #60]	@ (800d8f0 <rclc_subscription_init_default+0x64>)
 800d8b4:	2250      	movs	r2, #80	@ 0x50
 800d8b6:	4640      	mov	r0, r8
 800d8b8:	f00b f8d3 	bl	8018a62 <memcpy>
 800d8bc:	f8cd 8000 	str.w	r8, [sp]
 800d8c0:	463b      	mov	r3, r7
 800d8c2:	4632      	mov	r2, r6
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7fe ff46 	bl	800c758 <rcl_subscription_init>
 800d8cc:	b910      	cbnz	r0, 800d8d4 <rclc_subscription_init_default+0x48>
 800d8ce:	b020      	add	sp, #128	@ 0x80
 800d8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d4:	9003      	str	r0, [sp, #12]
 800d8d6:	f000 f8bb 	bl	800da50 <rcutils_reset_error>
 800d8da:	9803      	ldr	r0, [sp, #12]
 800d8dc:	b020      	add	sp, #128	@ 0x80
 800d8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e2:	200b      	movs	r0, #11
 800d8e4:	b020      	add	sp, #128	@ 0x80
 800d8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ea:	200b      	movs	r0, #11
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	0801b208 	.word	0x0801b208

0800d8f4 <rclc_timer_init_default>:
 800d8f4:	b360      	cbz	r0, 800d950 <rclc_timer_init_default+0x5c>
 800d8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fa:	460e      	mov	r6, r1
 800d8fc:	b08a      	sub	sp, #40	@ 0x28
 800d8fe:	b319      	cbz	r1, 800d948 <rclc_timer_init_default+0x54>
 800d900:	4690      	mov	r8, r2
 800d902:	461f      	mov	r7, r3
 800d904:	4605      	mov	r5, r0
 800d906:	f005 fbe5 	bl	80130d4 <rcl_get_zero_initialized_timer>
 800d90a:	68b4      	ldr	r4, [r6, #8]
 800d90c:	6028      	str	r0, [r5, #0]
 800d90e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d910:	f10d 0c0c 	add.w	ip, sp, #12
 800d914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	f8cc 3000 	str.w	r3, [ip]
 800d91e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d920:	9302      	str	r3, [sp, #8]
 800d922:	e9cd 8700 	strd	r8, r7, [sp]
 800d926:	4628      	mov	r0, r5
 800d928:	4632      	mov	r2, r6
 800d92a:	f106 010c 	add.w	r1, r6, #12
 800d92e:	f005 fbd7 	bl	80130e0 <rcl_timer_init>
 800d932:	b910      	cbnz	r0, 800d93a <rclc_timer_init_default+0x46>
 800d934:	b00a      	add	sp, #40	@ 0x28
 800d936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d93a:	9009      	str	r0, [sp, #36]	@ 0x24
 800d93c:	f000 f888 	bl	800da50 <rcutils_reset_error>
 800d940:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d942:	b00a      	add	sp, #40	@ 0x28
 800d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d948:	200b      	movs	r0, #11
 800d94a:	b00a      	add	sp, #40	@ 0x28
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	200b      	movs	r0, #11
 800d952:	4770      	bx	lr

0800d954 <__default_zero_allocate>:
 800d954:	f00a ba8a 	b.w	8017e6c <calloc>

0800d958 <__default_reallocate>:
 800d958:	f00a bc16 	b.w	8018188 <realloc>

0800d95c <__default_deallocate>:
 800d95c:	f00a baf2 	b.w	8017f44 <free>

0800d960 <__default_allocate>:
 800d960:	f00a bae8 	b.w	8017f34 <malloc>

0800d964 <rcutils_get_zero_initialized_allocator>:
 800d964:	b510      	push	{r4, lr}
 800d966:	4c05      	ldr	r4, [pc, #20]	@ (800d97c <rcutils_get_zero_initialized_allocator+0x18>)
 800d968:	4686      	mov	lr, r0
 800d96a:	4684      	mov	ip, r0
 800d96c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d96e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	f8cc 3000 	str.w	r3, [ip]
 800d978:	4670      	mov	r0, lr
 800d97a:	bd10      	pop	{r4, pc}
 800d97c:	0801b258 	.word	0x0801b258

0800d980 <rcutils_set_default_allocator>:
 800d980:	b1a8      	cbz	r0, 800d9ae <rcutils_set_default_allocator+0x2e>
 800d982:	6802      	ldr	r2, [r0, #0]
 800d984:	b1a2      	cbz	r2, 800d9b0 <rcutils_set_default_allocator+0x30>
 800d986:	6841      	ldr	r1, [r0, #4]
 800d988:	b1a1      	cbz	r1, 800d9b4 <rcutils_set_default_allocator+0x34>
 800d98a:	b410      	push	{r4}
 800d98c:	68c4      	ldr	r4, [r0, #12]
 800d98e:	b164      	cbz	r4, 800d9aa <rcutils_set_default_allocator+0x2a>
 800d990:	6880      	ldr	r0, [r0, #8]
 800d992:	b138      	cbz	r0, 800d9a4 <rcutils_set_default_allocator+0x24>
 800d994:	4b08      	ldr	r3, [pc, #32]	@ (800d9b8 <rcutils_set_default_allocator+0x38>)
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	2200      	movs	r2, #0
 800d99a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d99e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d9a2:	2001      	movs	r0, #1
 800d9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	e7fa      	b.n	800d9a4 <rcutils_set_default_allocator+0x24>
 800d9ae:	4770      	bx	lr
 800d9b0:	4610      	mov	r0, r2
 800d9b2:	4770      	bx	lr
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4770      	bx	lr
 800d9b8:	200001dc 	.word	0x200001dc

0800d9bc <rcutils_get_default_allocator>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	4c05      	ldr	r4, [pc, #20]	@ (800d9d4 <rcutils_get_default_allocator+0x18>)
 800d9c0:	4686      	mov	lr, r0
 800d9c2:	4684      	mov	ip, r0
 800d9c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	f8cc 3000 	str.w	r3, [ip]
 800d9d0:	4670      	mov	r0, lr
 800d9d2:	bd10      	pop	{r4, pc}
 800d9d4:	200001dc 	.word	0x200001dc

0800d9d8 <rcutils_allocator_is_valid>:
 800d9d8:	b158      	cbz	r0, 800d9f2 <rcutils_allocator_is_valid+0x1a>
 800d9da:	6803      	ldr	r3, [r0, #0]
 800d9dc:	b143      	cbz	r3, 800d9f0 <rcutils_allocator_is_valid+0x18>
 800d9de:	6843      	ldr	r3, [r0, #4]
 800d9e0:	b133      	cbz	r3, 800d9f0 <rcutils_allocator_is_valid+0x18>
 800d9e2:	68c3      	ldr	r3, [r0, #12]
 800d9e4:	b123      	cbz	r3, 800d9f0 <rcutils_allocator_is_valid+0x18>
 800d9e6:	6880      	ldr	r0, [r0, #8]
 800d9e8:	3800      	subs	r0, #0
 800d9ea:	bf18      	it	ne
 800d9ec:	2001      	movne	r0, #1
 800d9ee:	4770      	bx	lr
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	4770      	bx	lr

0800d9f4 <rcutils_get_env>:
 800d9f4:	b168      	cbz	r0, 800da12 <rcutils_get_env+0x1e>
 800d9f6:	b510      	push	{r4, lr}
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	b129      	cbz	r1, 800da08 <rcutils_get_env+0x14>
 800d9fc:	f00a fa52 	bl	8017ea4 <getenv>
 800da00:	b120      	cbz	r0, 800da0c <rcutils_get_env+0x18>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	2000      	movs	r0, #0
 800da06:	bd10      	pop	{r4, pc}
 800da08:	4803      	ldr	r0, [pc, #12]	@ (800da18 <rcutils_get_env+0x24>)
 800da0a:	bd10      	pop	{r4, pc}
 800da0c:	4b03      	ldr	r3, [pc, #12]	@ (800da1c <rcutils_get_env+0x28>)
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	bd10      	pop	{r4, pc}
 800da12:	4803      	ldr	r0, [pc, #12]	@ (800da20 <rcutils_get_env+0x2c>)
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	0801b288 	.word	0x0801b288
 800da1c:	0801b3b0 	.word	0x0801b3b0
 800da20:	0801b26c 	.word	0x0801b26c

0800da24 <rcutils_get_error_string>:
 800da24:	4b06      	ldr	r3, [pc, #24]	@ (800da40 <rcutils_get_error_string+0x1c>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	b13b      	cbz	r3, 800da3a <rcutils_get_error_string+0x16>
 800da2a:	4b06      	ldr	r3, [pc, #24]	@ (800da44 <rcutils_get_error_string+0x20>)
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	b90a      	cbnz	r2, 800da34 <rcutils_get_error_string+0x10>
 800da30:	2201      	movs	r2, #1
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	4b04      	ldr	r3, [pc, #16]	@ (800da48 <rcutils_get_error_string+0x24>)
 800da36:	7818      	ldrb	r0, [r3, #0]
 800da38:	4770      	bx	lr
 800da3a:	4b04      	ldr	r3, [pc, #16]	@ (800da4c <rcutils_get_error_string+0x28>)
 800da3c:	7818      	ldrb	r0, [r3, #0]
 800da3e:	4770      	bx	lr
 800da40:	2000c430 	.word	0x2000c430
 800da44:	2000c449 	.word	0x2000c449
 800da48:	2000c448 	.word	0x2000c448
 800da4c:	0801b2a4 	.word	0x0801b2a4

0800da50 <rcutils_reset_error>:
 800da50:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800da70 <rcutils_reset_error+0x20>
 800da54:	4a08      	ldr	r2, [pc, #32]	@ (800da78 <rcutils_reset_error+0x28>)
 800da56:	4809      	ldr	r0, [pc, #36]	@ (800da7c <rcutils_reset_error+0x2c>)
 800da58:	4909      	ldr	r1, [pc, #36]	@ (800da80 <rcutils_reset_error+0x30>)
 800da5a:	2300      	movs	r3, #0
 800da5c:	8013      	strh	r3, [r2, #0]
 800da5e:	ed82 7b02 	vstr	d7, [r2, #8]
 800da62:	4a08      	ldr	r2, [pc, #32]	@ (800da84 <rcutils_reset_error+0x34>)
 800da64:	7003      	strb	r3, [r0, #0]
 800da66:	700b      	strb	r3, [r1, #0]
 800da68:	7013      	strb	r3, [r2, #0]
 800da6a:	4770      	bx	lr
 800da6c:	f3af 8000 	nop.w
	...
 800da78:	2000c438 	.word	0x2000c438
 800da7c:	2000c449 	.word	0x2000c449
 800da80:	2000c448 	.word	0x2000c448
 800da84:	2000c430 	.word	0x2000c430

0800da88 <rcutils_format_string_limit>:
 800da88:	b40f      	push	{r0, r1, r2, r3}
 800da8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da8c:	b083      	sub	sp, #12
 800da8e:	ac08      	add	r4, sp, #32
 800da90:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800da92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da96:	b34e      	cbz	r6, 800daec <rcutils_format_string_limit+0x64>
 800da98:	a808      	add	r0, sp, #32
 800da9a:	f7ff ff9d 	bl	800d9d8 <rcutils_allocator_is_valid>
 800da9e:	b328      	cbz	r0, 800daec <rcutils_format_string_limit+0x64>
 800daa0:	2100      	movs	r1, #0
 800daa2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800daa4:	4632      	mov	r2, r6
 800daa6:	4608      	mov	r0, r1
 800daa8:	e9cd 3300 	strd	r3, r3, [sp]
 800daac:	f000 f8f4 	bl	800dc98 <rcutils_vsnprintf>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	4605      	mov	r5, r0
 800dab4:	d01a      	beq.n	800daec <rcutils_format_string_limit+0x64>
 800dab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dab8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800daba:	1c47      	adds	r7, r0, #1
 800dabc:	429f      	cmp	r7, r3
 800dabe:	bf84      	itt	hi
 800dac0:	461f      	movhi	r7, r3
 800dac2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800dac6:	4638      	mov	r0, r7
 800dac8:	9b08      	ldr	r3, [sp, #32]
 800daca:	4798      	blx	r3
 800dacc:	4604      	mov	r4, r0
 800dace:	b168      	cbz	r0, 800daec <rcutils_format_string_limit+0x64>
 800dad0:	9b01      	ldr	r3, [sp, #4]
 800dad2:	4632      	mov	r2, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f000 f8df 	bl	800dc98 <rcutils_vsnprintf>
 800dada:	2800      	cmp	r0, #0
 800dadc:	db02      	blt.n	800dae4 <rcutils_format_string_limit+0x5c>
 800dade:	2300      	movs	r3, #0
 800dae0:	5563      	strb	r3, [r4, r5]
 800dae2:	e004      	b.n	800daee <rcutils_format_string_limit+0x66>
 800dae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dae8:	4620      	mov	r0, r4
 800daea:	4798      	blx	r3
 800daec:	2400      	movs	r4, #0
 800daee:	4620      	mov	r0, r4
 800daf0:	b003      	add	sp, #12
 800daf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800daf6:	b004      	add	sp, #16
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop

0800dafc <rcutils_repl_str>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	ed2d 8b02 	vpush	{d8}
 800db04:	b087      	sub	sp, #28
 800db06:	4680      	mov	r8, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	f8cd 8004 	str.w	r8, [sp, #4]
 800db0e:	ee08 2a10 	vmov	s16, r2
 800db12:	468a      	mov	sl, r1
 800db14:	4699      	mov	r9, r3
 800db16:	f7f2 fb85 	bl	8000224 <strlen>
 800db1a:	2600      	movs	r6, #0
 800db1c:	4647      	mov	r7, r8
 800db1e:	9002      	str	r0, [sp, #8]
 800db20:	46b3      	mov	fp, r6
 800db22:	2510      	movs	r5, #16
 800db24:	46b0      	mov	r8, r6
 800db26:	e01d      	b.n	800db64 <rcutils_repl_str+0x68>
 800db28:	f10b 0b01 	add.w	fp, fp, #1
 800db2c:	455e      	cmp	r6, fp
 800db2e:	d211      	bcs.n	800db54 <rcutils_repl_str+0x58>
 800db30:	442e      	add	r6, r5
 800db32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800db3a:	00b1      	lsls	r1, r6, #2
 800db3c:	4798      	blx	r3
 800db3e:	2800      	cmp	r0, #0
 800db40:	f000 8088 	beq.w	800dc54 <rcutils_repl_str+0x158>
 800db44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db48:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800db4c:	4680      	mov	r8, r0
 800db4e:	bf28      	it	cs
 800db50:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800db54:	9a01      	ldr	r2, [sp, #4]
 800db56:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800db5a:	1aa2      	subs	r2, r4, r2
 800db5c:	f843 2c04 	str.w	r2, [r3, #-4]
 800db60:	9b02      	ldr	r3, [sp, #8]
 800db62:	18e7      	adds	r7, r4, r3
 800db64:	4651      	mov	r1, sl
 800db66:	4638      	mov	r0, r7
 800db68:	f00a fe83 	bl	8018872 <strstr>
 800db6c:	4604      	mov	r4, r0
 800db6e:	4640      	mov	r0, r8
 800db70:	2c00      	cmp	r4, #0
 800db72:	d1d9      	bne.n	800db28 <rcutils_repl_str+0x2c>
 800db74:	46b8      	mov	r8, r7
 800db76:	4607      	mov	r7, r0
 800db78:	4640      	mov	r0, r8
 800db7a:	f7f2 fb53 	bl	8000224 <strlen>
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	eba8 0303 	sub.w	r3, r8, r3
 800db84:	181c      	adds	r4, r3, r0
 800db86:	9404      	str	r4, [sp, #16]
 800db88:	f1bb 0f00 	cmp.w	fp, #0
 800db8c:	d04a      	beq.n	800dc24 <rcutils_repl_str+0x128>
 800db8e:	ee18 0a10 	vmov	r0, s16
 800db92:	f7f2 fb47 	bl	8000224 <strlen>
 800db96:	9b02      	ldr	r3, [sp, #8]
 800db98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800db9c:	1ac3      	subs	r3, r0, r3
 800db9e:	fb0b 4303 	mla	r3, fp, r3, r4
 800dba2:	461a      	mov	r2, r3
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	4606      	mov	r6, r0
 800dba8:	f8d9 3000 	ldr.w	r3, [r9]
 800dbac:	1c50      	adds	r0, r2, #1
 800dbae:	4798      	blx	r3
 800dbb0:	9003      	str	r0, [sp, #12]
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d04f      	beq.n	800dc56 <rcutils_repl_str+0x15a>
 800dbb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	4641      	mov	r1, r8
 800dbbe:	f00a ff50 	bl	8018a62 <memcpy>
 800dbc2:	683d      	ldr	r5, [r7, #0]
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	9701      	str	r7, [sp, #4]
 800dbc8:	46ba      	mov	sl, r7
 800dbca:	441d      	add	r5, r3
 800dbcc:	9f02      	ldr	r7, [sp, #8]
 800dbce:	f8cd 9008 	str.w	r9, [sp, #8]
 800dbd2:	2401      	movs	r4, #1
 800dbd4:	46d1      	mov	r9, sl
 800dbd6:	ee18 aa10 	vmov	sl, s16
 800dbda:	e00a      	b.n	800dbf2 <rcutils_repl_str+0xf6>
 800dbdc:	f8d9 5000 	ldr.w	r5, [r9]
 800dbe0:	1aaa      	subs	r2, r5, r2
 800dbe2:	1885      	adds	r5, r0, r2
 800dbe4:	f00a ff3d 	bl	8018a62 <memcpy>
 800dbe8:	45a3      	cmp	fp, r4
 800dbea:	f104 0201 	add.w	r2, r4, #1
 800dbee:	d935      	bls.n	800dc5c <rcutils_repl_str+0x160>
 800dbf0:	4614      	mov	r4, r2
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	4651      	mov	r1, sl
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f00a ff33 	bl	8018a62 <memcpy>
 800dbfc:	f859 2b04 	ldr.w	r2, [r9], #4
 800dc00:	45a3      	cmp	fp, r4
 800dc02:	443a      	add	r2, r7
 800dc04:	eb05 0006 	add.w	r0, r5, r6
 800dc08:	eb08 0102 	add.w	r1, r8, r2
 800dc0c:	d1e6      	bne.n	800dbdc <rcutils_repl_str+0xe0>
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	1a9a      	subs	r2, r3, r2
 800dc12:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dc16:	f00a ff24 	bl	8018a62 <memcpy>
 800dc1a:	9a03      	ldr	r2, [sp, #12]
 800dc1c:	9905      	ldr	r1, [sp, #20]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	5453      	strb	r3, [r2, r1]
 800dc22:	e00b      	b.n	800dc3c <rcutils_repl_str+0x140>
 800dc24:	4620      	mov	r0, r4
 800dc26:	f8d9 3000 	ldr.w	r3, [r9]
 800dc2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc2e:	3001      	adds	r0, #1
 800dc30:	4798      	blx	r3
 800dc32:	9003      	str	r0, [sp, #12]
 800dc34:	b110      	cbz	r0, 800dc3c <rcutils_repl_str+0x140>
 800dc36:	9901      	ldr	r1, [sp, #4]
 800dc38:	f00a ff0b 	bl	8018a52 <strcpy>
 800dc3c:	4638      	mov	r0, r7
 800dc3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dc42:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc46:	4798      	blx	r3
 800dc48:	9803      	ldr	r0, [sp, #12]
 800dc4a:	b007      	add	sp, #28
 800dc4c:	ecbd 8b02 	vpop	{d8}
 800dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc54:	4647      	mov	r7, r8
 800dc56:	2300      	movs	r3, #0
 800dc58:	9303      	str	r3, [sp, #12]
 800dc5a:	e7ef      	b.n	800dc3c <rcutils_repl_str+0x140>
 800dc5c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dc60:	e7db      	b.n	800dc1a <rcutils_repl_str+0x11e>
 800dc62:	bf00      	nop

0800dc64 <rcutils_snprintf>:
 800dc64:	b40c      	push	{r2, r3}
 800dc66:	b530      	push	{r4, r5, lr}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	ab06      	add	r3, sp, #24
 800dc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	b152      	cbz	r2, 800dc8a <rcutils_snprintf+0x26>
 800dc74:	b138      	cbz	r0, 800dc86 <rcutils_snprintf+0x22>
 800dc76:	b141      	cbz	r1, 800dc8a <rcutils_snprintf+0x26>
 800dc78:	f00a fd08 	bl	801868c <vsniprintf>
 800dc7c:	b003      	add	sp, #12
 800dc7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc82:	b002      	add	sp, #8
 800dc84:	4770      	bx	lr
 800dc86:	2900      	cmp	r1, #0
 800dc88:	d0f6      	beq.n	800dc78 <rcutils_snprintf+0x14>
 800dc8a:	f00a feb5 	bl	80189f8 <__errno>
 800dc8e:	2316      	movs	r3, #22
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc96:	e7f1      	b.n	800dc7c <rcutils_snprintf+0x18>

0800dc98 <rcutils_vsnprintf>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	b13a      	cbz	r2, 800dcac <rcutils_vsnprintf+0x14>
 800dc9c:	b120      	cbz	r0, 800dca8 <rcutils_vsnprintf+0x10>
 800dc9e:	b129      	cbz	r1, 800dcac <rcutils_vsnprintf+0x14>
 800dca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dca4:	f00a bcf2 	b.w	801868c <vsniprintf>
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d0f9      	beq.n	800dca0 <rcutils_vsnprintf+0x8>
 800dcac:	f00a fea4 	bl	80189f8 <__errno>
 800dcb0:	2316      	movs	r3, #22
 800dcb2:	6003      	str	r3, [r0, #0]
 800dcb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcb8:	bd70      	pop	{r4, r5, r6, pc}
 800dcba:	bf00      	nop

0800dcbc <rcutils_strdup>:
 800dcbc:	b084      	sub	sp, #16
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	ac07      	add	r4, sp, #28
 800dcc4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800dcc8:	4605      	mov	r5, r0
 800dcca:	b1b0      	cbz	r0, 800dcfa <rcutils_strdup+0x3e>
 800dccc:	f7f2 faaa 	bl	8000224 <strlen>
 800dcd0:	1c42      	adds	r2, r0, #1
 800dcd2:	9b07      	ldr	r3, [sp, #28]
 800dcd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dcd6:	9201      	str	r2, [sp, #4]
 800dcd8:	4606      	mov	r6, r0
 800dcda:	4610      	mov	r0, r2
 800dcdc:	4798      	blx	r3
 800dcde:	4604      	mov	r4, r0
 800dce0:	b128      	cbz	r0, 800dcee <rcutils_strdup+0x32>
 800dce2:	9a01      	ldr	r2, [sp, #4]
 800dce4:	4629      	mov	r1, r5
 800dce6:	f00a febc 	bl	8018a62 <memcpy>
 800dcea:	2300      	movs	r3, #0
 800dcec:	55a3      	strb	r3, [r4, r6]
 800dcee:	4620      	mov	r0, r4
 800dcf0:	b002      	add	sp, #8
 800dcf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcf6:	b004      	add	sp, #16
 800dcf8:	4770      	bx	lr
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	e7f7      	b.n	800dcee <rcutils_strdup+0x32>
 800dcfe:	bf00      	nop

0800dd00 <rcutils_strndup>:
 800dd00:	b082      	sub	sp, #8
 800dd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd04:	ac06      	add	r4, sp, #24
 800dd06:	e884 000c 	stmia.w	r4, {r2, r3}
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b188      	cbz	r0, 800dd32 <rcutils_strndup+0x32>
 800dd0e:	1c4f      	adds	r7, r1, #1
 800dd10:	460e      	mov	r6, r1
 800dd12:	4638      	mov	r0, r7
 800dd14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd16:	4790      	blx	r2
 800dd18:	4604      	mov	r4, r0
 800dd1a:	b128      	cbz	r0, 800dd28 <rcutils_strndup+0x28>
 800dd1c:	463a      	mov	r2, r7
 800dd1e:	4629      	mov	r1, r5
 800dd20:	f00a fe9f 	bl	8018a62 <memcpy>
 800dd24:	2300      	movs	r3, #0
 800dd26:	55a3      	strb	r3, [r4, r6]
 800dd28:	4620      	mov	r0, r4
 800dd2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd2e:	b002      	add	sp, #8
 800dd30:	4770      	bx	lr
 800dd32:	4604      	mov	r4, r0
 800dd34:	e7f8      	b.n	800dd28 <rcutils_strndup+0x28>
 800dd36:	bf00      	nop

0800dd38 <rcutils_system_time_now>:
 800dd38:	b308      	cbz	r0, 800dd7e <rcutils_system_time_now+0x46>
 800dd3a:	b570      	push	{r4, r5, r6, lr}
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4669      	mov	r1, sp
 800dd42:	2001      	movs	r0, #1
 800dd44:	f7f5 f848 	bl	8002dd8 <clock_gettime>
 800dd48:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dd4c:	2d00      	cmp	r5, #0
 800dd4e:	db13      	blt.n	800dd78 <rcutils_system_time_now+0x40>
 800dd50:	9902      	ldr	r1, [sp, #8]
 800dd52:	2900      	cmp	r1, #0
 800dd54:	db0d      	blt.n	800dd72 <rcutils_system_time_now+0x3a>
 800dd56:	4e0b      	ldr	r6, [pc, #44]	@ (800dd84 <rcutils_system_time_now+0x4c>)
 800dd58:	fba3 3206 	umull	r3, r2, r3, r6
 800dd5c:	185b      	adds	r3, r3, r1
 800dd5e:	fb06 2205 	mla	r2, r6, r5, r2
 800dd62:	f04f 0000 	mov.w	r0, #0
 800dd66:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dd6a:	e9c4 3200 	strd	r3, r2, [r4]
 800dd6e:	b004      	add	sp, #16
 800dd70:	bd70      	pop	{r4, r5, r6, pc}
 800dd72:	ea53 0205 	orrs.w	r2, r3, r5
 800dd76:	d1ee      	bne.n	800dd56 <rcutils_system_time_now+0x1e>
 800dd78:	2002      	movs	r0, #2
 800dd7a:	b004      	add	sp, #16
 800dd7c:	bd70      	pop	{r4, r5, r6, pc}
 800dd7e:	200b      	movs	r0, #11
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	3b9aca00 	.word	0x3b9aca00

0800dd88 <rcutils_steady_time_now>:
 800dd88:	b308      	cbz	r0, 800ddce <rcutils_steady_time_now+0x46>
 800dd8a:	b570      	push	{r4, r5, r6, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4669      	mov	r1, sp
 800dd92:	2000      	movs	r0, #0
 800dd94:	f7f5 f820 	bl	8002dd8 <clock_gettime>
 800dd98:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dd9c:	2d00      	cmp	r5, #0
 800dd9e:	db13      	blt.n	800ddc8 <rcutils_steady_time_now+0x40>
 800dda0:	9902      	ldr	r1, [sp, #8]
 800dda2:	2900      	cmp	r1, #0
 800dda4:	db0d      	blt.n	800ddc2 <rcutils_steady_time_now+0x3a>
 800dda6:	4e0b      	ldr	r6, [pc, #44]	@ (800ddd4 <rcutils_steady_time_now+0x4c>)
 800dda8:	fba3 3206 	umull	r3, r2, r3, r6
 800ddac:	185b      	adds	r3, r3, r1
 800ddae:	fb06 2205 	mla	r2, r6, r5, r2
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ddba:	e9c4 3200 	strd	r3, r2, [r4]
 800ddbe:	b004      	add	sp, #16
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	ea53 0205 	orrs.w	r2, r3, r5
 800ddc6:	d1ee      	bne.n	800dda6 <rcutils_steady_time_now+0x1e>
 800ddc8:	2002      	movs	r0, #2
 800ddca:	b004      	add	sp, #16
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	200b      	movs	r0, #11
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	3b9aca00 	.word	0x3b9aca00

0800ddd8 <rmw_get_default_publisher_options>:
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6002      	str	r2, [r0, #0]
 800dddc:	7102      	strb	r2, [r0, #4]
 800ddde:	4770      	bx	lr

0800dde0 <rmw_subscription_content_filter_options_fini>:
 800dde0:	b1b0      	cbz	r0, 800de10 <rmw_subscription_content_filter_options_fini+0x30>
 800dde2:	b538      	push	{r3, r4, r5, lr}
 800dde4:	4604      	mov	r4, r0
 800dde6:	4608      	mov	r0, r1
 800dde8:	460d      	mov	r5, r1
 800ddea:	f7ff fdf5 	bl	800d9d8 <rcutils_allocator_is_valid>
 800ddee:	b168      	cbz	r0, 800de0c <rmw_subscription_content_filter_options_fini+0x2c>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	b120      	cbz	r0, 800ddfe <rmw_subscription_content_filter_options_fini+0x1e>
 800ddf4:	686b      	ldr	r3, [r5, #4]
 800ddf6:	6929      	ldr	r1, [r5, #16]
 800ddf8:	4798      	blx	r3
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	1d20      	adds	r0, r4, #4
 800de00:	f006 ff92 	bl	8014d28 <rcutils_string_array_fini>
 800de04:	3800      	subs	r0, #0
 800de06:	bf18      	it	ne
 800de08:	2001      	movne	r0, #1
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	200b      	movs	r0, #11
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	200b      	movs	r0, #11
 800de12:	4770      	bx	lr

0800de14 <rmw_get_default_subscription_options>:
 800de14:	2200      	movs	r2, #0
 800de16:	e9c0 2200 	strd	r2, r2, [r0]
 800de1a:	6082      	str	r2, [r0, #8]
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop

0800de20 <rmw_get_zero_initialized_message_info>:
 800de20:	b510      	push	{r4, lr}
 800de22:	2240      	movs	r2, #64	@ 0x40
 800de24:	4604      	mov	r4, r0
 800de26:	2100      	movs	r1, #0
 800de28:	f00a fcfc 	bl	8018824 <memset>
 800de2c:	4620      	mov	r0, r4
 800de2e:	bd10      	pop	{r4, pc}

0800de30 <rmw_validate_namespace_with_size>:
 800de30:	b340      	cbz	r0, 800de84 <rmw_validate_namespace_with_size+0x54>
 800de32:	b570      	push	{r4, r5, r6, lr}
 800de34:	4614      	mov	r4, r2
 800de36:	b0c2      	sub	sp, #264	@ 0x108
 800de38:	b332      	cbz	r2, 800de88 <rmw_validate_namespace_with_size+0x58>
 800de3a:	2901      	cmp	r1, #1
 800de3c:	460d      	mov	r5, r1
 800de3e:	461e      	mov	r6, r3
 800de40:	d102      	bne.n	800de48 <rmw_validate_namespace_with_size+0x18>
 800de42:	7803      	ldrb	r3, [r0, #0]
 800de44:	2b2f      	cmp	r3, #47	@ 0x2f
 800de46:	d012      	beq.n	800de6e <rmw_validate_namespace_with_size+0x3e>
 800de48:	aa01      	add	r2, sp, #4
 800de4a:	4669      	mov	r1, sp
 800de4c:	f007 f968 	bl	8015120 <rmw_validate_full_topic_name>
 800de50:	b978      	cbnz	r0, 800de72 <rmw_validate_namespace_with_size+0x42>
 800de52:	9b00      	ldr	r3, [sp, #0]
 800de54:	b14b      	cbz	r3, 800de6a <rmw_validate_namespace_with_size+0x3a>
 800de56:	2b07      	cmp	r3, #7
 800de58:	d007      	beq.n	800de6a <rmw_validate_namespace_with_size+0x3a>
 800de5a:	1e5a      	subs	r2, r3, #1
 800de5c:	2a05      	cmp	r2, #5
 800de5e:	d82b      	bhi.n	800deb8 <rmw_validate_namespace_with_size+0x88>
 800de60:	e8df f002 	tbb	[pc, r2]
 800de64:	1e212427 	.word	0x1e212427
 800de68:	141b      	.short	0x141b
 800de6a:	2df5      	cmp	r5, #245	@ 0xf5
 800de6c:	d803      	bhi.n	800de76 <rmw_validate_namespace_with_size+0x46>
 800de6e:	2000      	movs	r0, #0
 800de70:	6020      	str	r0, [r4, #0]
 800de72:	b042      	add	sp, #264	@ 0x108
 800de74:	bd70      	pop	{r4, r5, r6, pc}
 800de76:	2307      	movs	r3, #7
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	2e00      	cmp	r6, #0
 800de7c:	d0f9      	beq.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800de7e:	23f4      	movs	r3, #244	@ 0xf4
 800de80:	6033      	str	r3, [r6, #0]
 800de82:	e7f6      	b.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800de84:	200b      	movs	r0, #11
 800de86:	4770      	bx	lr
 800de88:	200b      	movs	r0, #11
 800de8a:	e7f2      	b.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800de8c:	2306      	movs	r3, #6
 800de8e:	6023      	str	r3, [r4, #0]
 800de90:	2e00      	cmp	r6, #0
 800de92:	d0ee      	beq.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	6033      	str	r3, [r6, #0]
 800de98:	e7eb      	b.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800de9a:	2305      	movs	r3, #5
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	e7f7      	b.n	800de90 <rmw_validate_namespace_with_size+0x60>
 800dea0:	2304      	movs	r3, #4
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	e7f4      	b.n	800de90 <rmw_validate_namespace_with_size+0x60>
 800dea6:	2303      	movs	r3, #3
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	e7f1      	b.n	800de90 <rmw_validate_namespace_with_size+0x60>
 800deac:	2302      	movs	r3, #2
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	e7ee      	b.n	800de90 <rmw_validate_namespace_with_size+0x60>
 800deb2:	2301      	movs	r3, #1
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	e7eb      	b.n	800de90 <rmw_validate_namespace_with_size+0x60>
 800deb8:	4a03      	ldr	r2, [pc, #12]	@ (800dec8 <rmw_validate_namespace_with_size+0x98>)
 800deba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800debe:	a802      	add	r0, sp, #8
 800dec0:	f7ff fed0 	bl	800dc64 <rcutils_snprintf>
 800dec4:	2001      	movs	r0, #1
 800dec6:	e7d4      	b.n	800de72 <rmw_validate_namespace_with_size+0x42>
 800dec8:	0801b2a8 	.word	0x0801b2a8

0800decc <rmw_validate_namespace>:
 800decc:	b168      	cbz	r0, 800deea <rmw_validate_namespace+0x1e>
 800dece:	b570      	push	{r4, r5, r6, lr}
 800ded0:	460d      	mov	r5, r1
 800ded2:	4616      	mov	r6, r2
 800ded4:	4604      	mov	r4, r0
 800ded6:	f7f2 f9a5 	bl	8000224 <strlen>
 800deda:	4633      	mov	r3, r6
 800dedc:	4601      	mov	r1, r0
 800dede:	462a      	mov	r2, r5
 800dee0:	4620      	mov	r0, r4
 800dee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dee6:	f7ff bfa3 	b.w	800de30 <rmw_validate_namespace_with_size>
 800deea:	200b      	movs	r0, #11
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop

0800def0 <rmw_namespace_validation_result_string>:
 800def0:	2807      	cmp	r0, #7
 800def2:	bf9a      	itte	ls
 800def4:	4b02      	ldrls	r3, [pc, #8]	@ (800df00 <rmw_namespace_validation_result_string+0x10>)
 800def6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800defa:	4802      	ldrhi	r0, [pc, #8]	@ (800df04 <rmw_namespace_validation_result_string+0x14>)
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	0801b4a0 	.word	0x0801b4a0
 800df04:	0801b2f8 	.word	0x0801b2f8

0800df08 <rmw_validate_node_name>:
 800df08:	2800      	cmp	r0, #0
 800df0a:	d03b      	beq.n	800df84 <rmw_validate_node_name+0x7c>
 800df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	2900      	cmp	r1, #0
 800df14:	d038      	beq.n	800df88 <rmw_validate_node_name+0x80>
 800df16:	4616      	mov	r6, r2
 800df18:	4604      	mov	r4, r0
 800df1a:	f7f2 f983 	bl	8000224 <strlen>
 800df1e:	b1e0      	cbz	r0, 800df5a <rmw_validate_node_name+0x52>
 800df20:	1e63      	subs	r3, r4, #1
 800df22:	eb03 0800 	add.w	r8, r3, r0
 800df26:	f1c4 0101 	rsb	r1, r4, #1
 800df2a:	18cf      	adds	r7, r1, r3
 800df2c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800df30:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800df34:	f02e 0c20 	bic.w	ip, lr, #32
 800df38:	2a09      	cmp	r2, #9
 800df3a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800df3e:	d914      	bls.n	800df6a <rmw_validate_node_name+0x62>
 800df40:	f1bc 0f19 	cmp.w	ip, #25
 800df44:	d911      	bls.n	800df6a <rmw_validate_node_name+0x62>
 800df46:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800df4a:	d00e      	beq.n	800df6a <rmw_validate_node_name+0x62>
 800df4c:	2302      	movs	r3, #2
 800df4e:	602b      	str	r3, [r5, #0]
 800df50:	b106      	cbz	r6, 800df54 <rmw_validate_node_name+0x4c>
 800df52:	6037      	str	r7, [r6, #0]
 800df54:	2000      	movs	r0, #0
 800df56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df5a:	2301      	movs	r3, #1
 800df5c:	602b      	str	r3, [r5, #0]
 800df5e:	2e00      	cmp	r6, #0
 800df60:	d0f8      	beq.n	800df54 <rmw_validate_node_name+0x4c>
 800df62:	2000      	movs	r0, #0
 800df64:	6030      	str	r0, [r6, #0]
 800df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6a:	4543      	cmp	r3, r8
 800df6c:	d1dd      	bne.n	800df2a <rmw_validate_node_name+0x22>
 800df6e:	7822      	ldrb	r2, [r4, #0]
 800df70:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa8 <rmw_validate_node_name+0xa0>)
 800df72:	5cd3      	ldrb	r3, [r2, r3]
 800df74:	f013 0304 	ands.w	r3, r3, #4
 800df78:	d110      	bne.n	800df9c <rmw_validate_node_name+0x94>
 800df7a:	28ff      	cmp	r0, #255	@ 0xff
 800df7c:	d806      	bhi.n	800df8c <rmw_validate_node_name+0x84>
 800df7e:	602b      	str	r3, [r5, #0]
 800df80:	4618      	mov	r0, r3
 800df82:	e7e8      	b.n	800df56 <rmw_validate_node_name+0x4e>
 800df84:	200b      	movs	r0, #11
 800df86:	4770      	bx	lr
 800df88:	200b      	movs	r0, #11
 800df8a:	e7e4      	b.n	800df56 <rmw_validate_node_name+0x4e>
 800df8c:	2204      	movs	r2, #4
 800df8e:	602a      	str	r2, [r5, #0]
 800df90:	2e00      	cmp	r6, #0
 800df92:	d0df      	beq.n	800df54 <rmw_validate_node_name+0x4c>
 800df94:	22fe      	movs	r2, #254	@ 0xfe
 800df96:	6032      	str	r2, [r6, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	e7dc      	b.n	800df56 <rmw_validate_node_name+0x4e>
 800df9c:	2303      	movs	r3, #3
 800df9e:	602b      	str	r3, [r5, #0]
 800dfa0:	2e00      	cmp	r6, #0
 800dfa2:	d1de      	bne.n	800df62 <rmw_validate_node_name+0x5a>
 800dfa4:	e7d6      	b.n	800df54 <rmw_validate_node_name+0x4c>
 800dfa6:	bf00      	nop
 800dfa8:	0801baa4 	.word	0x0801baa4

0800dfac <rmw_node_name_validation_result_string>:
 800dfac:	2804      	cmp	r0, #4
 800dfae:	bf9a      	itte	ls
 800dfb0:	4b02      	ldrls	r3, [pc, #8]	@ (800dfbc <rmw_node_name_validation_result_string+0x10>)
 800dfb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dfb6:	4802      	ldrhi	r0, [pc, #8]	@ (800dfc0 <rmw_node_name_validation_result_string+0x14>)
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	0801b5ac 	.word	0x0801b5ac
 800dfc0:	0801b4c0 	.word	0x0801b4c0

0800dfc4 <rmw_uros_set_custom_transport>:
 800dfc4:	b470      	push	{r4, r5, r6}
 800dfc6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dfca:	b162      	cbz	r2, 800dfe6 <rmw_uros_set_custom_transport+0x22>
 800dfcc:	b15b      	cbz	r3, 800dfe6 <rmw_uros_set_custom_transport+0x22>
 800dfce:	b155      	cbz	r5, 800dfe6 <rmw_uros_set_custom_transport+0x22>
 800dfd0:	b14e      	cbz	r6, 800dfe6 <rmw_uros_set_custom_transport+0x22>
 800dfd2:	4c06      	ldr	r4, [pc, #24]	@ (800dfec <rmw_uros_set_custom_transport+0x28>)
 800dfd4:	7020      	strb	r0, [r4, #0]
 800dfd6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dfda:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dfde:	6166      	str	r6, [r4, #20]
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	bc70      	pop	{r4, r5, r6}
 800dfe4:	4770      	bx	lr
 800dfe6:	200b      	movs	r0, #11
 800dfe8:	bc70      	pop	{r4, r5, r6}
 800dfea:	4770      	bx	lr
 800dfec:	2000c44c 	.word	0x2000c44c

0800dff0 <create_node>:
 800dff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dff4:	b083      	sub	sp, #12
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d05f      	beq.n	800e0ba <create_node+0xca>
 800dffa:	4606      	mov	r6, r0
 800dffc:	4835      	ldr	r0, [pc, #212]	@ (800e0d4 <create_node+0xe4>)
 800dffe:	460f      	mov	r7, r1
 800e000:	4690      	mov	r8, r2
 800e002:	461d      	mov	r5, r3
 800e004:	f007 f902 	bl	801520c <get_memory>
 800e008:	2800      	cmp	r0, #0
 800e00a:	d056      	beq.n	800e0ba <create_node+0xca>
 800e00c:	6884      	ldr	r4, [r0, #8]
 800e00e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e010:	6123      	str	r3, [r4, #16]
 800e012:	f007 f963 	bl	80152dc <rmw_get_implementation_identifier>
 800e016:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e01a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e01e:	f8c4 9020 	str.w	r9, [r4, #32]
 800e022:	4630      	mov	r0, r6
 800e024:	f7f2 f8fe 	bl	8000224 <strlen>
 800e028:	1c42      	adds	r2, r0, #1
 800e02a:	2a3c      	cmp	r2, #60	@ 0x3c
 800e02c:	f104 0518 	add.w	r5, r4, #24
 800e030:	d840      	bhi.n	800e0b4 <create_node+0xc4>
 800e032:	4648      	mov	r0, r9
 800e034:	4631      	mov	r1, r6
 800e036:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e03a:	f00a fd12 	bl	8018a62 <memcpy>
 800e03e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e042:	4638      	mov	r0, r7
 800e044:	f7f2 f8ee 	bl	8000224 <strlen>
 800e048:	1c42      	adds	r2, r0, #1
 800e04a:	2a3c      	cmp	r2, #60	@ 0x3c
 800e04c:	d832      	bhi.n	800e0b4 <create_node+0xc4>
 800e04e:	4639      	mov	r1, r7
 800e050:	4648      	mov	r0, r9
 800e052:	f00a fd06 	bl	8018a62 <memcpy>
 800e056:	6923      	ldr	r3, [r4, #16]
 800e058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e05c:	2101      	movs	r1, #1
 800e05e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e062:	1842      	adds	r2, r0, r1
 800e064:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e068:	f001 fa3c 	bl	800f4e4 <uxr_object_id>
 800e06c:	6160      	str	r0, [r4, #20]
 800e06e:	783b      	ldrb	r3, [r7, #0]
 800e070:	2b2f      	cmp	r3, #47	@ 0x2f
 800e072:	d127      	bne.n	800e0c4 <create_node+0xd4>
 800e074:	787b      	ldrb	r3, [r7, #1]
 800e076:	bb2b      	cbnz	r3, 800e0c4 <create_node+0xd4>
 800e078:	4a17      	ldr	r2, [pc, #92]	@ (800e0d8 <create_node+0xe8>)
 800e07a:	4818      	ldr	r0, [pc, #96]	@ (800e0dc <create_node+0xec>)
 800e07c:	4633      	mov	r3, r6
 800e07e:	213c      	movs	r1, #60	@ 0x3c
 800e080:	f00a fa62 	bl	8018548 <sniprintf>
 800e084:	6920      	ldr	r0, [r4, #16]
 800e086:	4915      	ldr	r1, [pc, #84]	@ (800e0dc <create_node+0xec>)
 800e088:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e08c:	9100      	str	r1, [sp, #0]
 800e08e:	2106      	movs	r1, #6
 800e090:	9101      	str	r1, [sp, #4]
 800e092:	6811      	ldr	r1, [r2, #0]
 800e094:	6962      	ldr	r2, [r4, #20]
 800e096:	fa1f f388 	uxth.w	r3, r8
 800e09a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e09e:	f001 f86b 	bl	800f178 <uxr_buffer_create_participant_bin>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	6920      	ldr	r0, [r4, #16]
 800e0a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e0aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e0ae:	f000 ff19 	bl	800eee4 <run_xrce_session>
 800e0b2:	b918      	cbnz	r0, 800e0bc <create_node+0xcc>
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f000 fda3 	bl	800ec00 <rmw_uxrce_fini_node_memory>
 800e0ba:	2500      	movs	r5, #0
 800e0bc:	4628      	mov	r0, r5
 800e0be:	b003      	add	sp, #12
 800e0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0c4:	4a06      	ldr	r2, [pc, #24]	@ (800e0e0 <create_node+0xf0>)
 800e0c6:	9600      	str	r6, [sp, #0]
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	213c      	movs	r1, #60	@ 0x3c
 800e0cc:	4803      	ldr	r0, [pc, #12]	@ (800e0dc <create_node+0xec>)
 800e0ce:	f00a fa3b 	bl	8018548 <sniprintf>
 800e0d2:	e7d7      	b.n	800e084 <create_node+0x94>
 800e0d4:	20010d74 	.word	0x20010d74
 800e0d8:	0801b5d0 	.word	0x0801b5d0
 800e0dc:	2000c468 	.word	0x2000c468
 800e0e0:	0801b074 	.word	0x0801b074

0800e0e4 <rmw_create_node>:
 800e0e4:	b199      	cbz	r1, 800e10e <rmw_create_node+0x2a>
 800e0e6:	780b      	ldrb	r3, [r1, #0]
 800e0e8:	468c      	mov	ip, r1
 800e0ea:	b183      	cbz	r3, 800e10e <rmw_create_node+0x2a>
 800e0ec:	b410      	push	{r4}
 800e0ee:	4614      	mov	r4, r2
 800e0f0:	b14a      	cbz	r2, 800e106 <rmw_create_node+0x22>
 800e0f2:	7813      	ldrb	r3, [r2, #0]
 800e0f4:	b13b      	cbz	r3, 800e106 <rmw_create_node+0x22>
 800e0f6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4660      	mov	r0, ip
 800e0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e102:	f7ff bf75 	b.w	800dff0 <create_node>
 800e106:	2000      	movs	r0, #0
 800e108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	2000      	movs	r0, #0
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop

0800e114 <rmw_destroy_node>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	b328      	cbz	r0, 800e164 <rmw_destroy_node+0x50>
 800e118:	4607      	mov	r7, r0
 800e11a:	6800      	ldr	r0, [r0, #0]
 800e11c:	b120      	cbz	r0, 800e128 <rmw_destroy_node+0x14>
 800e11e:	4b36      	ldr	r3, [pc, #216]	@ (800e1f8 <rmw_destroy_node+0xe4>)
 800e120:	6819      	ldr	r1, [r3, #0]
 800e122:	f7f2 f875 	bl	8000210 <strcmp>
 800e126:	b9e8      	cbnz	r0, 800e164 <rmw_destroy_node+0x50>
 800e128:	687d      	ldr	r5, [r7, #4]
 800e12a:	b1dd      	cbz	r5, 800e164 <rmw_destroy_node+0x50>
 800e12c:	4b33      	ldr	r3, [pc, #204]	@ (800e1fc <rmw_destroy_node+0xe8>)
 800e12e:	681c      	ldr	r4, [r3, #0]
 800e130:	2c00      	cmp	r4, #0
 800e132:	d05f      	beq.n	800e1f4 <rmw_destroy_node+0xe0>
 800e134:	2600      	movs	r6, #0
 800e136:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e13a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e13e:	429d      	cmp	r5, r3
 800e140:	d013      	beq.n	800e16a <rmw_destroy_node+0x56>
 800e142:	2c00      	cmp	r4, #0
 800e144:	d1f7      	bne.n	800e136 <rmw_destroy_node+0x22>
 800e146:	4b2e      	ldr	r3, [pc, #184]	@ (800e200 <rmw_destroy_node+0xec>)
 800e148:	681c      	ldr	r4, [r3, #0]
 800e14a:	b1c4      	cbz	r4, 800e17e <rmw_destroy_node+0x6a>
 800e14c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e150:	6a0b      	ldr	r3, [r1, #32]
 800e152:	429d      	cmp	r5, r3
 800e154:	d1f9      	bne.n	800e14a <rmw_destroy_node+0x36>
 800e156:	317c      	adds	r1, #124	@ 0x7c
 800e158:	4638      	mov	r0, r7
 800e15a:	f000 fb37 	bl	800e7cc <rmw_destroy_subscription>
 800e15e:	2801      	cmp	r0, #1
 800e160:	4606      	mov	r6, r0
 800e162:	d1f2      	bne.n	800e14a <rmw_destroy_node+0x36>
 800e164:	2601      	movs	r6, #1
 800e166:	4630      	mov	r0, r6
 800e168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e16a:	3184      	adds	r1, #132	@ 0x84
 800e16c:	4638      	mov	r0, r7
 800e16e:	f000 f9a5 	bl	800e4bc <rmw_destroy_publisher>
 800e172:	2801      	cmp	r0, #1
 800e174:	4606      	mov	r6, r0
 800e176:	d0f5      	beq.n	800e164 <rmw_destroy_node+0x50>
 800e178:	2c00      	cmp	r4, #0
 800e17a:	d1dc      	bne.n	800e136 <rmw_destroy_node+0x22>
 800e17c:	e7e3      	b.n	800e146 <rmw_destroy_node+0x32>
 800e17e:	4b21      	ldr	r3, [pc, #132]	@ (800e204 <rmw_destroy_node+0xf0>)
 800e180:	681c      	ldr	r4, [r3, #0]
 800e182:	b16c      	cbz	r4, 800e1a0 <rmw_destroy_node+0x8c>
 800e184:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e188:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e18a:	429d      	cmp	r5, r3
 800e18c:	d1f9      	bne.n	800e182 <rmw_destroy_node+0x6e>
 800e18e:	317c      	adds	r1, #124	@ 0x7c
 800e190:	4638      	mov	r0, r7
 800e192:	f000 f9e5 	bl	800e560 <rmw_destroy_service>
 800e196:	2801      	cmp	r0, #1
 800e198:	4606      	mov	r6, r0
 800e19a:	d0e3      	beq.n	800e164 <rmw_destroy_node+0x50>
 800e19c:	2c00      	cmp	r4, #0
 800e19e:	d1f1      	bne.n	800e184 <rmw_destroy_node+0x70>
 800e1a0:	4b19      	ldr	r3, [pc, #100]	@ (800e208 <rmw_destroy_node+0xf4>)
 800e1a2:	681c      	ldr	r4, [r3, #0]
 800e1a4:	b16c      	cbz	r4, 800e1c2 <rmw_destroy_node+0xae>
 800e1a6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e1aa:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e1ac:	429d      	cmp	r5, r3
 800e1ae:	d1f9      	bne.n	800e1a4 <rmw_destroy_node+0x90>
 800e1b0:	317c      	adds	r1, #124	@ 0x7c
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f007 f84e 	bl	8015254 <rmw_destroy_client>
 800e1b8:	2801      	cmp	r0, #1
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	d0d2      	beq.n	800e164 <rmw_destroy_node+0x50>
 800e1be:	2c00      	cmp	r4, #0
 800e1c0:	d1f1      	bne.n	800e1a6 <rmw_destroy_node+0x92>
 800e1c2:	6928      	ldr	r0, [r5, #16]
 800e1c4:	696a      	ldr	r2, [r5, #20]
 800e1c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1ce:	6819      	ldr	r1, [r3, #0]
 800e1d0:	f000 ff86 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	6928      	ldr	r0, [r5, #16]
 800e1d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e1dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e1e0:	f000 fe80 	bl	800eee4 <run_xrce_session>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	bf08      	it	eq
 800e1e8:	2602      	moveq	r6, #2
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f000 fd08 	bl	800ec00 <rmw_uxrce_fini_node_memory>
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f4:	4626      	mov	r6, r4
 800e1f6:	e7a6      	b.n	800e146 <rmw_destroy_node+0x32>
 800e1f8:	0801b7fc 	.word	0x0801b7fc
 800e1fc:	20010d84 	.word	0x20010d84
 800e200:	20010dc4 	.word	0x20010dc4
 800e204:	20010d94 	.word	0x20010d94
 800e208:	2000c4a4 	.word	0x2000c4a4

0800e20c <rmw_node_get_graph_guard_condition>:
 800e20c:	6843      	ldr	r3, [r0, #4]
 800e20e:	6918      	ldr	r0, [r3, #16]
 800e210:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop

0800e218 <flush_session>:
 800e218:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e21a:	f001 bfa1 	b.w	8010160 <uxr_run_session_until_confirm_delivery>
 800e21e:	bf00      	nop

0800e220 <rmw_publish>:
 800e220:	2800      	cmp	r0, #0
 800e222:	d053      	beq.n	800e2cc <rmw_publish+0xac>
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	460d      	mov	r5, r1
 800e228:	b08e      	sub	sp, #56	@ 0x38
 800e22a:	2900      	cmp	r1, #0
 800e22c:	d04b      	beq.n	800e2c6 <rmw_publish+0xa6>
 800e22e:	4604      	mov	r4, r0
 800e230:	6800      	ldr	r0, [r0, #0]
 800e232:	f000 fed7 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e236:	2800      	cmp	r0, #0
 800e238:	d045      	beq.n	800e2c6 <rmw_publish+0xa6>
 800e23a:	6866      	ldr	r6, [r4, #4]
 800e23c:	2e00      	cmp	r6, #0
 800e23e:	d042      	beq.n	800e2c6 <rmw_publish+0xa6>
 800e240:	69b4      	ldr	r4, [r6, #24]
 800e242:	4628      	mov	r0, r5
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	4798      	blx	r3
 800e248:	69f3      	ldr	r3, [r6, #28]
 800e24a:	9005      	str	r0, [sp, #20]
 800e24c:	b113      	cbz	r3, 800e254 <rmw_publish+0x34>
 800e24e:	a805      	add	r0, sp, #20
 800e250:	4798      	blx	r3
 800e252:	9805      	ldr	r0, [sp, #20]
 800e254:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	9000      	str	r0, [sp, #0]
 800e25c:	6972      	ldr	r2, [r6, #20]
 800e25e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e260:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e264:	ab06      	add	r3, sp, #24
 800e266:	f002 fd67 	bl	8010d38 <uxr_prepare_output_stream>
 800e26a:	b1d8      	cbz	r0, 800e2a4 <rmw_publish+0x84>
 800e26c:	68a3      	ldr	r3, [r4, #8]
 800e26e:	a906      	add	r1, sp, #24
 800e270:	4628      	mov	r0, r5
 800e272:	4798      	blx	r3
 800e274:	6a33      	ldr	r3, [r6, #32]
 800e276:	4604      	mov	r4, r0
 800e278:	b10b      	cbz	r3, 800e27e <rmw_publish+0x5e>
 800e27a:	a806      	add	r0, sp, #24
 800e27c:	4798      	blx	r3
 800e27e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e282:	2b01      	cmp	r3, #1
 800e284:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e288:	d022      	beq.n	800e2d0 <rmw_publish+0xb0>
 800e28a:	6918      	ldr	r0, [r3, #16]
 800e28c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e28e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e292:	f001 ff65 	bl	8010160 <uxr_run_session_until_confirm_delivery>
 800e296:	4020      	ands	r0, r4
 800e298:	b2c4      	uxtb	r4, r0
 800e29a:	f084 0001 	eor.w	r0, r4, #1
 800e29e:	b2c0      	uxtb	r0, r0
 800e2a0:	b00e      	add	sp, #56	@ 0x38
 800e2a2:	bd70      	pop	{r4, r5, r6, pc}
 800e2a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e2a8:	6918      	ldr	r0, [r3, #16]
 800e2aa:	9b05      	ldr	r3, [sp, #20]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e2dc <rmw_publish+0xbc>)
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	9602      	str	r6, [sp, #8]
 800e2b4:	6972      	ldr	r2, [r6, #20]
 800e2b6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e2b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2bc:	ab06      	add	r3, sp, #24
 800e2be:	f002 fd6b 	bl	8010d98 <uxr_prepare_output_stream_fragmented>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d1d2      	bne.n	800e26c <rmw_publish+0x4c>
 800e2c6:	2001      	movs	r0, #1
 800e2c8:	b00e      	add	sp, #56	@ 0x38
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	2001      	movs	r0, #1
 800e2ce:	4770      	bx	lr
 800e2d0:	6918      	ldr	r0, [r3, #16]
 800e2d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2d6:	f001 fb83 	bl	800f9e0 <uxr_flash_output_streams>
 800e2da:	e7de      	b.n	800e29a <rmw_publish+0x7a>
 800e2dc:	0800e219 	.word	0x0800e219

0800e2e0 <rmw_create_publisher>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f000 80cc 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e2ec:	460e      	mov	r6, r1
 800e2ee:	2900      	cmp	r1, #0
 800e2f0:	f000 80c8 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	6800      	ldr	r0, [r0, #0]
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	4698      	mov	r8, r3
 800e2fc:	f000 fe72 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e300:	2800      	cmp	r0, #0
 800e302:	f000 80bf 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e306:	2d00      	cmp	r5, #0
 800e308:	f000 80bc 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e30c:	782b      	ldrb	r3, [r5, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f000 80b8 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e314:	f1b8 0f00 	cmp.w	r8, #0
 800e318:	f000 80b4 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e31c:	485c      	ldr	r0, [pc, #368]	@ (800e490 <rmw_create_publisher+0x1b0>)
 800e31e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e322:	f006 ff73 	bl	801520c <get_memory>
 800e326:	2800      	cmp	r0, #0
 800e328:	f000 80ac 	beq.w	800e484 <rmw_create_publisher+0x1a4>
 800e32c:	6884      	ldr	r4, [r0, #8]
 800e32e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e332:	f006 ffd3 	bl	80152dc <rmw_get_implementation_identifier>
 800e336:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e33a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e33e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e342:	4628      	mov	r0, r5
 800e344:	f7f1 ff6e 	bl	8000224 <strlen>
 800e348:	3001      	adds	r0, #1
 800e34a:	283c      	cmp	r0, #60	@ 0x3c
 800e34c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e350:	f200 8091 	bhi.w	800e476 <rmw_create_publisher+0x196>
 800e354:	4a4f      	ldr	r2, [pc, #316]	@ (800e494 <rmw_create_publisher+0x1b4>)
 800e356:	462b      	mov	r3, r5
 800e358:	213c      	movs	r1, #60	@ 0x3c
 800e35a:	4650      	mov	r0, sl
 800e35c:	f00a f8f4 	bl	8018548 <sniprintf>
 800e360:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e364:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e366:	4641      	mov	r1, r8
 800e368:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e36c:	2250      	movs	r2, #80	@ 0x50
 800e36e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e372:	f00a fb76 	bl	8018a62 <memcpy>
 800e376:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e37a:	4947      	ldr	r1, [pc, #284]	@ (800e498 <rmw_create_publisher+0x1b8>)
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e382:	bf0c      	ite	eq
 800e384:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e388:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e38c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e38e:	2300      	movs	r3, #0
 800e390:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e394:	4630      	mov	r0, r6
 800e396:	f000 fe33 	bl	800f000 <get_message_typesupport_handle>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d06b      	beq.n	800e476 <rmw_create_publisher+0x196>
 800e39e:	6842      	ldr	r2, [r0, #4]
 800e3a0:	61a2      	str	r2, [r4, #24]
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	d067      	beq.n	800e476 <rmw_create_publisher+0x196>
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4643      	mov	r3, r8
 800e3aa:	4648      	mov	r0, r9
 800e3ac:	f007 fa24 	bl	80157f8 <create_topic>
 800e3b0:	6260      	str	r0, [r4, #36]	@ 0x24
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d063      	beq.n	800e47e <rmw_create_publisher+0x19e>
 800e3b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3be:	2103      	movs	r1, #3
 800e3c0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e3c4:	1c42      	adds	r2, r0, #1
 800e3c6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e3ca:	f001 f88b 	bl	800f4e4 <uxr_object_id>
 800e3ce:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e3d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3d6:	6120      	str	r0, [r4, #16]
 800e3d8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e3dc:	6910      	ldr	r0, [r2, #16]
 800e3de:	2506      	movs	r5, #6
 800e3e0:	9500      	str	r5, [sp, #0]
 800e3e2:	6819      	ldr	r1, [r3, #0]
 800e3e4:	6922      	ldr	r2, [r4, #16]
 800e3e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e3ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3ee:	f000 ff2b 	bl	800f248 <uxr_buffer_create_publisher_bin>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e3f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e3fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e400:	f000 fd70 	bl	800eee4 <run_xrce_session>
 800e404:	b3b8      	cbz	r0, 800e476 <rmw_create_publisher+0x196>
 800e406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e40e:	2105      	movs	r1, #5
 800e410:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e414:	1c42      	adds	r2, r0, #1
 800e416:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e41a:	f001 f863 	bl	800f4e4 <uxr_object_id>
 800e41e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e422:	6160      	str	r0, [r4, #20]
 800e424:	691e      	ldr	r6, [r3, #16]
 800e426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e42a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e42e:	f10d 0a10 	add.w	sl, sp, #16
 800e432:	4641      	mov	r1, r8
 800e434:	4650      	mov	r0, sl
 800e436:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e43a:	f000 fd6f 	bl	800ef1c <convert_qos_profile>
 800e43e:	9503      	str	r5, [sp, #12]
 800e440:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e444:	9001      	str	r0, [sp, #4]
 800e446:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e44a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e454:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e458:	f8d8 1000 	ldr.w	r1, [r8]
 800e45c:	4630      	mov	r0, r6
 800e45e:	f000 ff53 	bl	800f308 <uxr_buffer_create_datawriter_bin>
 800e462:	4602      	mov	r2, r0
 800e464:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e468:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e46c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e470:	f000 fd38 	bl	800eee4 <run_xrce_session>
 800e474:	b938      	cbnz	r0, 800e486 <rmw_create_publisher+0x1a6>
 800e476:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e478:	b108      	cbz	r0, 800e47e <rmw_create_publisher+0x19e>
 800e47a:	f000 fc31 	bl	800ece0 <rmw_uxrce_fini_topic_memory>
 800e47e:	4638      	mov	r0, r7
 800e480:	f000 fbd6 	bl	800ec30 <rmw_uxrce_fini_publisher_memory>
 800e484:	2700      	movs	r7, #0
 800e486:	4638      	mov	r0, r7
 800e488:	b007      	add	sp, #28
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48e:	bf00      	nop
 800e490:	20010d84 	.word	0x20010d84
 800e494:	0801b5d0 	.word	0x0801b5d0
 800e498:	0801aeb4 	.word	0x0801aeb4

0800e49c <rmw_publisher_get_actual_qos>:
 800e49c:	b150      	cbz	r0, 800e4b4 <rmw_publisher_get_actual_qos+0x18>
 800e49e:	b508      	push	{r3, lr}
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	b149      	cbz	r1, 800e4b8 <rmw_publisher_get_actual_qos+0x1c>
 800e4a4:	6841      	ldr	r1, [r0, #4]
 800e4a6:	2250      	movs	r2, #80	@ 0x50
 800e4a8:	3128      	adds	r1, #40	@ 0x28
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f00a fad9 	bl	8018a62 <memcpy>
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	bd08      	pop	{r3, pc}
 800e4b4:	200b      	movs	r0, #11
 800e4b6:	4770      	bx	lr
 800e4b8:	200b      	movs	r0, #11
 800e4ba:	bd08      	pop	{r3, pc}

0800e4bc <rmw_destroy_publisher>:
 800e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4be:	b128      	cbz	r0, 800e4cc <rmw_destroy_publisher+0x10>
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	6800      	ldr	r0, [r0, #0]
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	f000 fd8d 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e4ca:	b910      	cbnz	r0, 800e4d2 <rmw_destroy_publisher+0x16>
 800e4cc:	2401      	movs	r4, #1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d2:	6863      	ldr	r3, [r4, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d0f9      	beq.n	800e4cc <rmw_destroy_publisher+0x10>
 800e4d8:	2d00      	cmp	r5, #0
 800e4da:	d0f7      	beq.n	800e4cc <rmw_destroy_publisher+0x10>
 800e4dc:	6828      	ldr	r0, [r5, #0]
 800e4de:	f000 fd81 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0f2      	beq.n	800e4cc <rmw_destroy_publisher+0x10>
 800e4e6:	686c      	ldr	r4, [r5, #4]
 800e4e8:	2c00      	cmp	r4, #0
 800e4ea:	d0ef      	beq.n	800e4cc <rmw_destroy_publisher+0x10>
 800e4ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e4ee:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e4f2:	f007 f9d1 	bl	8015898 <destroy_topic>
 800e4f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e4fa:	6962      	ldr	r2, [r4, #20]
 800e4fc:	6918      	ldr	r0, [r3, #16]
 800e4fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e502:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e506:	6819      	ldr	r1, [r3, #0]
 800e508:	f000 fdea 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e50c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e510:	6922      	ldr	r2, [r4, #16]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e518:	4604      	mov	r4, r0
 800e51a:	6809      	ldr	r1, [r1, #0]
 800e51c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e520:	f000 fdde 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e524:	693e      	ldr	r6, [r7, #16]
 800e526:	4622      	mov	r2, r4
 800e528:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e52c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e530:	4604      	mov	r4, r0
 800e532:	4630      	mov	r0, r6
 800e534:	f000 fcd6 	bl	800eee4 <run_xrce_session>
 800e538:	693e      	ldr	r6, [r7, #16]
 800e53a:	4622      	mov	r2, r4
 800e53c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e540:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e544:	4604      	mov	r4, r0
 800e546:	4630      	mov	r0, r6
 800e548:	f000 fccc 	bl	800eee4 <run_xrce_session>
 800e54c:	b12c      	cbz	r4, 800e55a <rmw_destroy_publisher+0x9e>
 800e54e:	b120      	cbz	r0, 800e55a <rmw_destroy_publisher+0x9e>
 800e550:	2400      	movs	r4, #0
 800e552:	4628      	mov	r0, r5
 800e554:	f000 fb6c 	bl	800ec30 <rmw_uxrce_fini_publisher_memory>
 800e558:	e7b9      	b.n	800e4ce <rmw_destroy_publisher+0x12>
 800e55a:	2402      	movs	r4, #2
 800e55c:	e7f9      	b.n	800e552 <rmw_destroy_publisher+0x96>
 800e55e:	bf00      	nop

0800e560 <rmw_destroy_service>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	b128      	cbz	r0, 800e570 <rmw_destroy_service+0x10>
 800e564:	4604      	mov	r4, r0
 800e566:	6800      	ldr	r0, [r0, #0]
 800e568:	460d      	mov	r5, r1
 800e56a:	f000 fd3b 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e56e:	b910      	cbnz	r0, 800e576 <rmw_destroy_service+0x16>
 800e570:	2401      	movs	r4, #1
 800e572:	4620      	mov	r0, r4
 800e574:	bd70      	pop	{r4, r5, r6, pc}
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d0f9      	beq.n	800e570 <rmw_destroy_service+0x10>
 800e57c:	2d00      	cmp	r5, #0
 800e57e:	d0f7      	beq.n	800e570 <rmw_destroy_service+0x10>
 800e580:	6828      	ldr	r0, [r5, #0]
 800e582:	f000 fd2f 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e586:	2800      	cmp	r0, #0
 800e588:	d0f2      	beq.n	800e570 <rmw_destroy_service+0x10>
 800e58a:	686e      	ldr	r6, [r5, #4]
 800e58c:	2e00      	cmp	r6, #0
 800e58e:	d0ef      	beq.n	800e570 <rmw_destroy_service+0x10>
 800e590:	6864      	ldr	r4, [r4, #4]
 800e592:	6932      	ldr	r2, [r6, #16]
 800e594:	6920      	ldr	r0, [r4, #16]
 800e596:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e59a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	f001 f80a 	bl	800f5b8 <uxr_buffer_cancel_data>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	6920      	ldr	r0, [r4, #16]
 800e5a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e5ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e5b0:	f000 fc98 	bl	800eee4 <run_xrce_session>
 800e5b4:	6920      	ldr	r0, [r4, #16]
 800e5b6:	6932      	ldr	r2, [r6, #16]
 800e5b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e5bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5c0:	6819      	ldr	r1, [r3, #0]
 800e5c2:	f000 fd8d 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	6920      	ldr	r0, [r4, #16]
 800e5ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e5ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e5d2:	f000 fc87 	bl	800eee4 <run_xrce_session>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	4628      	mov	r0, r5
 800e5da:	bf14      	ite	ne
 800e5dc:	2400      	movne	r4, #0
 800e5de:	2402      	moveq	r4, #2
 800e5e0:	f000 fb52 	bl	800ec88 <rmw_uxrce_fini_service_memory>
 800e5e4:	e7c5      	b.n	800e572 <rmw_destroy_service+0x12>
 800e5e6:	bf00      	nop

0800e5e8 <rmw_create_subscription>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	b08d      	sub	sp, #52	@ 0x34
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f000 80d1 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	2900      	cmp	r1, #0
 800e5f8:	f000 80cd 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	6800      	ldr	r0, [r0, #0]
 800e600:	4615      	mov	r5, r2
 800e602:	4698      	mov	r8, r3
 800e604:	f000 fcee 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e608:	2800      	cmp	r0, #0
 800e60a:	f000 80c4 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e60e:	2d00      	cmp	r5, #0
 800e610:	f000 80c1 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e614:	782b      	ldrb	r3, [r5, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 80bd 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e61c:	f1b8 0f00 	cmp.w	r8, #0
 800e620:	f000 80b9 	beq.w	800e796 <rmw_create_subscription+0x1ae>
 800e624:	485e      	ldr	r0, [pc, #376]	@ (800e7a0 <rmw_create_subscription+0x1b8>)
 800e626:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e62a:	f006 fdef 	bl	801520c <get_memory>
 800e62e:	4604      	mov	r4, r0
 800e630:	2800      	cmp	r0, #0
 800e632:	f000 80b1 	beq.w	800e798 <rmw_create_subscription+0x1b0>
 800e636:	6887      	ldr	r7, [r0, #8]
 800e638:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e63c:	f006 fe4e 	bl	80152dc <rmw_get_implementation_identifier>
 800e640:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800e644:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e646:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7f1 fdea 	bl	8000224 <strlen>
 800e650:	3001      	adds	r0, #1
 800e652:	283c      	cmp	r0, #60	@ 0x3c
 800e654:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800e658:	f200 8096 	bhi.w	800e788 <rmw_create_subscription+0x1a0>
 800e65c:	4a51      	ldr	r2, [pc, #324]	@ (800e7a4 <rmw_create_subscription+0x1bc>)
 800e65e:	462b      	mov	r3, r5
 800e660:	213c      	movs	r1, #60	@ 0x3c
 800e662:	4650      	mov	r0, sl
 800e664:	f009 ff70 	bl	8018548 <sniprintf>
 800e668:	4641      	mov	r1, r8
 800e66a:	f8c7 9020 	str.w	r9, [r7, #32]
 800e66e:	2250      	movs	r2, #80	@ 0x50
 800e670:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800e674:	f00a f9f5 	bl	8018a62 <memcpy>
 800e678:	494b      	ldr	r1, [pc, #300]	@ (800e7a8 <rmw_create_subscription+0x1c0>)
 800e67a:	4630      	mov	r0, r6
 800e67c:	f000 fcc0 	bl	800f000 <get_message_typesupport_handle>
 800e680:	2800      	cmp	r0, #0
 800e682:	f000 8081 	beq.w	800e788 <rmw_create_subscription+0x1a0>
 800e686:	6842      	ldr	r2, [r0, #4]
 800e688:	61ba      	str	r2, [r7, #24]
 800e68a:	2a00      	cmp	r2, #0
 800e68c:	d07c      	beq.n	800e788 <rmw_create_subscription+0x1a0>
 800e68e:	4629      	mov	r1, r5
 800e690:	4643      	mov	r3, r8
 800e692:	4648      	mov	r0, r9
 800e694:	f007 f8b0 	bl	80157f8 <create_topic>
 800e698:	61f8      	str	r0, [r7, #28]
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d078      	beq.n	800e790 <rmw_create_subscription+0x1a8>
 800e69e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6a6:	2104      	movs	r1, #4
 800e6a8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800e6ac:	1c42      	adds	r2, r0, #1
 800e6ae:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800e6b2:	f000 ff17 	bl	800f4e4 <uxr_object_id>
 800e6b6:	6138      	str	r0, [r7, #16]
 800e6b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6bc:	2506      	movs	r5, #6
 800e6be:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800e6c2:	9500      	str	r5, [sp, #0]
 800e6c4:	6819      	ldr	r1, [r3, #0]
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e6cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6d0:	f000 fdea 	bl	800f2a8 <uxr_buffer_create_subscriber_bin>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6da:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e6de:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e6e2:	f000 fbff 	bl	800eee4 <run_xrce_session>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d04e      	beq.n	800e788 <rmw_create_subscription+0x1a0>
 800e6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800e6f8:	1c42      	adds	r2, r0, #1
 800e6fa:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800e6fe:	f000 fef1 	bl	800f4e4 <uxr_object_id>
 800e702:	ae08      	add	r6, sp, #32
 800e704:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	6178      	str	r0, [r7, #20]
 800e70c:	4641      	mov	r1, r8
 800e70e:	4630      	mov	r0, r6
 800e710:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800e714:	9305      	str	r3, [sp, #20]
 800e716:	f000 fc01 	bl	800ef1c <convert_qos_profile>
 800e71a:	9503      	str	r5, [sp, #12]
 800e71c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e720:	9b05      	ldr	r3, [sp, #20]
 800e722:	9001      	str	r0, [sp, #4]
 800e724:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e730:	f8db 1000 	ldr.w	r1, [fp]
 800e734:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800e738:	f000 fe5c 	bl	800f3f4 <uxr_buffer_create_datareader_bin>
 800e73c:	4602      	mov	r2, r0
 800e73e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e742:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e746:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e74a:	f000 fbcb 	bl	800eee4 <run_xrce_session>
 800e74e:	b1d8      	cbz	r0, 800e788 <rmw_create_subscription+0x1a0>
 800e750:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e754:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	bf0c      	ite	eq
 800e75c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800e760:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800e764:	9307      	str	r3, [sp, #28]
 800e766:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e76a:	2200      	movs	r2, #0
 800e76c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800e770:	ab0a      	add	r3, sp, #40	@ 0x28
 800e772:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	697a      	ldr	r2, [r7, #20]
 800e77a:	9b07      	ldr	r3, [sp, #28]
 800e77c:	6809      	ldr	r1, [r1, #0]
 800e77e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e782:	f000 fedf 	bl	800f544 <uxr_buffer_request_data>
 800e786:	e007      	b.n	800e798 <rmw_create_subscription+0x1b0>
 800e788:	69f8      	ldr	r0, [r7, #28]
 800e78a:	b108      	cbz	r0, 800e790 <rmw_create_subscription+0x1a8>
 800e78c:	f000 faa8 	bl	800ece0 <rmw_uxrce_fini_topic_memory>
 800e790:	4620      	mov	r0, r4
 800e792:	f000 fa63 	bl	800ec5c <rmw_uxrce_fini_subscription_memory>
 800e796:	2400      	movs	r4, #0
 800e798:	4620      	mov	r0, r4
 800e79a:	b00d      	add	sp, #52	@ 0x34
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	20010dc4 	.word	0x20010dc4
 800e7a4:	0801b5d0 	.word	0x0801b5d0
 800e7a8:	0801aeb4 	.word	0x0801aeb4

0800e7ac <rmw_subscription_get_actual_qos>:
 800e7ac:	b150      	cbz	r0, 800e7c4 <rmw_subscription_get_actual_qos+0x18>
 800e7ae:	b508      	push	{r3, lr}
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	b149      	cbz	r1, 800e7c8 <rmw_subscription_get_actual_qos+0x1c>
 800e7b4:	6841      	ldr	r1, [r0, #4]
 800e7b6:	2250      	movs	r2, #80	@ 0x50
 800e7b8:	3128      	adds	r1, #40	@ 0x28
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f00a f951 	bl	8018a62 <memcpy>
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	bd08      	pop	{r3, pc}
 800e7c4:	200b      	movs	r0, #11
 800e7c6:	4770      	bx	lr
 800e7c8:	200b      	movs	r0, #11
 800e7ca:	bd08      	pop	{r3, pc}

0800e7cc <rmw_destroy_subscription>:
 800e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ce:	b128      	cbz	r0, 800e7dc <rmw_destroy_subscription+0x10>
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	6800      	ldr	r0, [r0, #0]
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	f000 fc05 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e7da:	b910      	cbnz	r0, 800e7e2 <rmw_destroy_subscription+0x16>
 800e7dc:	2401      	movs	r4, #1
 800e7de:	4620      	mov	r0, r4
 800e7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e2:	6863      	ldr	r3, [r4, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d0f9      	beq.n	800e7dc <rmw_destroy_subscription+0x10>
 800e7e8:	2d00      	cmp	r5, #0
 800e7ea:	d0f7      	beq.n	800e7dc <rmw_destroy_subscription+0x10>
 800e7ec:	6828      	ldr	r0, [r5, #0]
 800e7ee:	f000 fbf9 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d0f2      	beq.n	800e7dc <rmw_destroy_subscription+0x10>
 800e7f6:	686c      	ldr	r4, [r5, #4]
 800e7f8:	2c00      	cmp	r4, #0
 800e7fa:	d0ef      	beq.n	800e7dc <rmw_destroy_subscription+0x10>
 800e7fc:	6a26      	ldr	r6, [r4, #32]
 800e7fe:	6962      	ldr	r2, [r4, #20]
 800e800:	6930      	ldr	r0, [r6, #16]
 800e802:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e806:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e80a:	6819      	ldr	r1, [r3, #0]
 800e80c:	f000 fed4 	bl	800f5b8 <uxr_buffer_cancel_data>
 800e810:	4602      	mov	r2, r0
 800e812:	6930      	ldr	r0, [r6, #16]
 800e814:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e818:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e81c:	f000 fb62 	bl	800eee4 <run_xrce_session>
 800e820:	69e0      	ldr	r0, [r4, #28]
 800e822:	f007 f839 	bl	8015898 <destroy_topic>
 800e826:	6a23      	ldr	r3, [r4, #32]
 800e828:	6962      	ldr	r2, [r4, #20]
 800e82a:	6918      	ldr	r0, [r3, #16]
 800e82c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e830:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e834:	6819      	ldr	r1, [r3, #0]
 800e836:	f000 fc53 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e83a:	6a23      	ldr	r3, [r4, #32]
 800e83c:	6922      	ldr	r2, [r4, #16]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e844:	4604      	mov	r4, r0
 800e846:	6809      	ldr	r1, [r1, #0]
 800e848:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e84c:	f000 fc48 	bl	800f0e0 <uxr_buffer_delete_entity>
 800e850:	6937      	ldr	r7, [r6, #16]
 800e852:	4622      	mov	r2, r4
 800e854:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e858:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e85c:	4604      	mov	r4, r0
 800e85e:	4638      	mov	r0, r7
 800e860:	f000 fb40 	bl	800eee4 <run_xrce_session>
 800e864:	6936      	ldr	r6, [r6, #16]
 800e866:	4622      	mov	r2, r4
 800e868:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e86c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e870:	4604      	mov	r4, r0
 800e872:	4630      	mov	r0, r6
 800e874:	f000 fb36 	bl	800eee4 <run_xrce_session>
 800e878:	b12c      	cbz	r4, 800e886 <rmw_destroy_subscription+0xba>
 800e87a:	b120      	cbz	r0, 800e886 <rmw_destroy_subscription+0xba>
 800e87c:	2400      	movs	r4, #0
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 f9ec 	bl	800ec5c <rmw_uxrce_fini_subscription_memory>
 800e884:	e7ab      	b.n	800e7de <rmw_destroy_subscription+0x12>
 800e886:	2402      	movs	r4, #2
 800e888:	e7f9      	b.n	800e87e <rmw_destroy_subscription+0xb2>
 800e88a:	bf00      	nop

0800e88c <rmw_take_with_info>:
 800e88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88e:	4604      	mov	r4, r0
 800e890:	6800      	ldr	r0, [r0, #0]
 800e892:	b089      	sub	sp, #36	@ 0x24
 800e894:	460f      	mov	r7, r1
 800e896:	4615      	mov	r5, r2
 800e898:	b128      	cbz	r0, 800e8a6 <rmw_take_with_info+0x1a>
 800e89a:	4b24      	ldr	r3, [pc, #144]	@ (800e92c <rmw_take_with_info+0xa0>)
 800e89c:	6819      	ldr	r1, [r3, #0]
 800e89e:	f7f1 fcb7 	bl	8000210 <strcmp>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d13e      	bne.n	800e924 <rmw_take_with_info+0x98>
 800e8a6:	b305      	cbz	r5, 800e8ea <rmw_take_with_info+0x5e>
 800e8a8:	6864      	ldr	r4, [r4, #4]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	702b      	strb	r3, [r5, #0]
 800e8ae:	f000 fa9b 	bl	800ede8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 fa70 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	b1f0      	cbz	r0, 800e8fa <rmw_take_with_info+0x6e>
 800e8bc:	6881      	ldr	r1, [r0, #8]
 800e8be:	4668      	mov	r0, sp
 800e8c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e8c4:	3110      	adds	r1, #16
 800e8c6:	f7fd fbeb 	bl	800c0a0 <ucdr_init_buffer>
 800e8ca:	69a3      	ldr	r3, [r4, #24]
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	4668      	mov	r0, sp
 800e8d2:	4798      	blx	r3
 800e8d4:	4631      	mov	r1, r6
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4815      	ldr	r0, [pc, #84]	@ (800e930 <rmw_take_with_info+0xa4>)
 800e8da:	f006 fca7 	bl	801522c <put_memory>
 800e8de:	702c      	strb	r4, [r5, #0]
 800e8e0:	f084 0001 	eor.w	r0, r4, #1
 800e8e4:	b2c0      	uxtb	r0, r0
 800e8e6:	b009      	add	sp, #36	@ 0x24
 800e8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ea:	6864      	ldr	r4, [r4, #4]
 800e8ec:	f000 fa7c 	bl	800ede8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f000 fa51 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b910      	cbnz	r0, 800e900 <rmw_take_with_info+0x74>
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	b009      	add	sp, #36	@ 0x24
 800e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e900:	68a9      	ldr	r1, [r5, #8]
 800e902:	4668      	mov	r0, sp
 800e904:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e908:	3110      	adds	r1, #16
 800e90a:	f7fd fbc9 	bl	800c0a0 <ucdr_init_buffer>
 800e90e:	69a3      	ldr	r3, [r4, #24]
 800e910:	4639      	mov	r1, r7
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	4668      	mov	r0, sp
 800e916:	4798      	blx	r3
 800e918:	4629      	mov	r1, r5
 800e91a:	4604      	mov	r4, r0
 800e91c:	4804      	ldr	r0, [pc, #16]	@ (800e930 <rmw_take_with_info+0xa4>)
 800e91e:	f006 fc85 	bl	801522c <put_memory>
 800e922:	e7dd      	b.n	800e8e0 <rmw_take_with_info+0x54>
 800e924:	200c      	movs	r0, #12
 800e926:	b009      	add	sp, #36	@ 0x24
 800e928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e92a:	bf00      	nop
 800e92c:	0801b7fc 	.word	0x0801b7fc
 800e930:	20010db4 	.word	0x20010db4

0800e934 <rmw_uxrce_init_service_memory>:
 800e934:	b1e2      	cbz	r2, 800e970 <rmw_uxrce_init_service_memory+0x3c>
 800e936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93a:	7b05      	ldrb	r5, [r0, #12]
 800e93c:	4606      	mov	r6, r0
 800e93e:	b9ad      	cbnz	r5, 800e96c <rmw_uxrce_init_service_memory+0x38>
 800e940:	23c8      	movs	r3, #200	@ 0xc8
 800e942:	e9c0 5500 	strd	r5, r5, [r0]
 800e946:	6083      	str	r3, [r0, #8]
 800e948:	f240 1301 	movw	r3, #257	@ 0x101
 800e94c:	4617      	mov	r7, r2
 800e94e:	8183      	strh	r3, [r0, #12]
 800e950:	460c      	mov	r4, r1
 800e952:	46a8      	mov	r8, r5
 800e954:	4621      	mov	r1, r4
 800e956:	4630      	mov	r0, r6
 800e958:	3501      	adds	r5, #1
 800e95a:	f006 fc67 	bl	801522c <put_memory>
 800e95e:	42af      	cmp	r7, r5
 800e960:	60a4      	str	r4, [r4, #8]
 800e962:	f884 800c 	strb.w	r8, [r4, #12]
 800e966:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e96a:	d1f3      	bne.n	800e954 <rmw_uxrce_init_service_memory+0x20>
 800e96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop

0800e974 <rmw_uxrce_init_client_memory>:
 800e974:	b1e2      	cbz	r2, 800e9b0 <rmw_uxrce_init_client_memory+0x3c>
 800e976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97a:	7b05      	ldrb	r5, [r0, #12]
 800e97c:	4606      	mov	r6, r0
 800e97e:	b9ad      	cbnz	r5, 800e9ac <rmw_uxrce_init_client_memory+0x38>
 800e980:	23c8      	movs	r3, #200	@ 0xc8
 800e982:	e9c0 5500 	strd	r5, r5, [r0]
 800e986:	6083      	str	r3, [r0, #8]
 800e988:	f240 1301 	movw	r3, #257	@ 0x101
 800e98c:	4617      	mov	r7, r2
 800e98e:	8183      	strh	r3, [r0, #12]
 800e990:	460c      	mov	r4, r1
 800e992:	46a8      	mov	r8, r5
 800e994:	4621      	mov	r1, r4
 800e996:	4630      	mov	r0, r6
 800e998:	3501      	adds	r5, #1
 800e99a:	f006 fc47 	bl	801522c <put_memory>
 800e99e:	42af      	cmp	r7, r5
 800e9a0:	60a4      	str	r4, [r4, #8]
 800e9a2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9a6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e9aa:	d1f3      	bne.n	800e994 <rmw_uxrce_init_client_memory+0x20>
 800e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop

0800e9b4 <rmw_uxrce_init_publisher_memory>:
 800e9b4:	b1e2      	cbz	r2, 800e9f0 <rmw_uxrce_init_publisher_memory+0x3c>
 800e9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ba:	7b05      	ldrb	r5, [r0, #12]
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b9ad      	cbnz	r5, 800e9ec <rmw_uxrce_init_publisher_memory+0x38>
 800e9c0:	23d8      	movs	r3, #216	@ 0xd8
 800e9c2:	e9c0 5500 	strd	r5, r5, [r0]
 800e9c6:	6083      	str	r3, [r0, #8]
 800e9c8:	f240 1301 	movw	r3, #257	@ 0x101
 800e9cc:	4617      	mov	r7, r2
 800e9ce:	8183      	strh	r3, [r0, #12]
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	46a8      	mov	r8, r5
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	3501      	adds	r5, #1
 800e9da:	f006 fc27 	bl	801522c <put_memory>
 800e9de:	42af      	cmp	r7, r5
 800e9e0:	60a4      	str	r4, [r4, #8]
 800e9e2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9e6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e9ea:	d1f3      	bne.n	800e9d4 <rmw_uxrce_init_publisher_memory+0x20>
 800e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop

0800e9f4 <rmw_uxrce_init_subscription_memory>:
 800e9f4:	b1e2      	cbz	r2, 800ea30 <rmw_uxrce_init_subscription_memory+0x3c>
 800e9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fa:	7b05      	ldrb	r5, [r0, #12]
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	b9ad      	cbnz	r5, 800ea2c <rmw_uxrce_init_subscription_memory+0x38>
 800ea00:	23d8      	movs	r3, #216	@ 0xd8
 800ea02:	e9c0 5500 	strd	r5, r5, [r0]
 800ea06:	6083      	str	r3, [r0, #8]
 800ea08:	f240 1301 	movw	r3, #257	@ 0x101
 800ea0c:	4617      	mov	r7, r2
 800ea0e:	8183      	strh	r3, [r0, #12]
 800ea10:	460c      	mov	r4, r1
 800ea12:	46a8      	mov	r8, r5
 800ea14:	4621      	mov	r1, r4
 800ea16:	4630      	mov	r0, r6
 800ea18:	3501      	adds	r5, #1
 800ea1a:	f006 fc07 	bl	801522c <put_memory>
 800ea1e:	42af      	cmp	r7, r5
 800ea20:	60a4      	str	r4, [r4, #8]
 800ea22:	f884 800c 	strb.w	r8, [r4, #12]
 800ea26:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ea2a:	d1f3      	bne.n	800ea14 <rmw_uxrce_init_subscription_memory+0x20>
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop

0800ea34 <rmw_uxrce_init_node_memory>:
 800ea34:	b1e2      	cbz	r2, 800ea70 <rmw_uxrce_init_node_memory+0x3c>
 800ea36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3a:	7b05      	ldrb	r5, [r0, #12]
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	b9ad      	cbnz	r5, 800ea6c <rmw_uxrce_init_node_memory+0x38>
 800ea40:	23a4      	movs	r3, #164	@ 0xa4
 800ea42:	e9c0 5500 	strd	r5, r5, [r0]
 800ea46:	6083      	str	r3, [r0, #8]
 800ea48:	f240 1301 	movw	r3, #257	@ 0x101
 800ea4c:	4617      	mov	r7, r2
 800ea4e:	8183      	strh	r3, [r0, #12]
 800ea50:	460c      	mov	r4, r1
 800ea52:	46a8      	mov	r8, r5
 800ea54:	4621      	mov	r1, r4
 800ea56:	4630      	mov	r0, r6
 800ea58:	3501      	adds	r5, #1
 800ea5a:	f006 fbe7 	bl	801522c <put_memory>
 800ea5e:	42af      	cmp	r7, r5
 800ea60:	60a4      	str	r4, [r4, #8]
 800ea62:	f884 800c 	strb.w	r8, [r4, #12]
 800ea66:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ea6a:	d1f3      	bne.n	800ea54 <rmw_uxrce_init_node_memory+0x20>
 800ea6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop

0800ea74 <rmw_uxrce_init_session_memory>:
 800ea74:	b1ea      	cbz	r2, 800eab2 <rmw_uxrce_init_session_memory+0x3e>
 800ea76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea7a:	7b05      	ldrb	r5, [r0, #12]
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	b9b5      	cbnz	r5, 800eaae <rmw_uxrce_init_session_memory+0x3a>
 800ea80:	e9c0 5500 	strd	r5, r5, [r0]
 800ea84:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ea88:	f240 1301 	movw	r3, #257	@ 0x101
 800ea8c:	4617      	mov	r7, r2
 800ea8e:	f8c0 8008 	str.w	r8, [r0, #8]
 800ea92:	460c      	mov	r4, r1
 800ea94:	8183      	strh	r3, [r0, #12]
 800ea96:	46a9      	mov	r9, r5
 800ea98:	4621      	mov	r1, r4
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	3501      	adds	r5, #1
 800ea9e:	f006 fbc5 	bl	801522c <put_memory>
 800eaa2:	42af      	cmp	r7, r5
 800eaa4:	60a4      	str	r4, [r4, #8]
 800eaa6:	f884 900c 	strb.w	r9, [r4, #12]
 800eaaa:	4444      	add	r4, r8
 800eaac:	d1f4      	bne.n	800ea98 <rmw_uxrce_init_session_memory+0x24>
 800eaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab2:	4770      	bx	lr

0800eab4 <rmw_uxrce_init_topic_memory>:
 800eab4:	b1e2      	cbz	r2, 800eaf0 <rmw_uxrce_init_topic_memory+0x3c>
 800eab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaba:	7b05      	ldrb	r5, [r0, #12]
 800eabc:	4606      	mov	r6, r0
 800eabe:	b9ad      	cbnz	r5, 800eaec <rmw_uxrce_init_topic_memory+0x38>
 800eac0:	231c      	movs	r3, #28
 800eac2:	e9c0 5500 	strd	r5, r5, [r0]
 800eac6:	6083      	str	r3, [r0, #8]
 800eac8:	f240 1301 	movw	r3, #257	@ 0x101
 800eacc:	4617      	mov	r7, r2
 800eace:	8183      	strh	r3, [r0, #12]
 800ead0:	460c      	mov	r4, r1
 800ead2:	46a8      	mov	r8, r5
 800ead4:	4621      	mov	r1, r4
 800ead6:	4630      	mov	r0, r6
 800ead8:	3501      	adds	r5, #1
 800eada:	f006 fba7 	bl	801522c <put_memory>
 800eade:	42af      	cmp	r7, r5
 800eae0:	60a4      	str	r4, [r4, #8]
 800eae2:	f884 800c 	strb.w	r8, [r4, #12]
 800eae6:	f104 041c 	add.w	r4, r4, #28
 800eaea:	d1f3      	bne.n	800ead4 <rmw_uxrce_init_topic_memory+0x20>
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop

0800eaf4 <rmw_uxrce_init_static_input_buffer_memory>:
 800eaf4:	b1ea      	cbz	r2, 800eb32 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800eaf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafa:	7b05      	ldrb	r5, [r0, #12]
 800eafc:	4606      	mov	r6, r0
 800eafe:	b9b5      	cbnz	r5, 800eb2e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800eb00:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800eb04:	e9c0 5500 	strd	r5, r5, [r0]
 800eb08:	6083      	str	r3, [r0, #8]
 800eb0a:	f240 1301 	movw	r3, #257	@ 0x101
 800eb0e:	4617      	mov	r7, r2
 800eb10:	8183      	strh	r3, [r0, #12]
 800eb12:	460c      	mov	r4, r1
 800eb14:	46a8      	mov	r8, r5
 800eb16:	4621      	mov	r1, r4
 800eb18:	4630      	mov	r0, r6
 800eb1a:	3501      	adds	r5, #1
 800eb1c:	f006 fb86 	bl	801522c <put_memory>
 800eb20:	42af      	cmp	r7, r5
 800eb22:	60a4      	str	r4, [r4, #8]
 800eb24:	f884 800c 	strb.w	r8, [r4, #12]
 800eb28:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800eb2c:	d1f3      	bne.n	800eb16 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb32:	4770      	bx	lr

0800eb34 <rmw_uxrce_init_init_options_impl_memory>:
 800eb34:	b1e2      	cbz	r2, 800eb70 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800eb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	7b05      	ldrb	r5, [r0, #12]
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	b9ad      	cbnz	r5, 800eb6c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800eb40:	232c      	movs	r3, #44	@ 0x2c
 800eb42:	e9c0 5500 	strd	r5, r5, [r0]
 800eb46:	6083      	str	r3, [r0, #8]
 800eb48:	f240 1301 	movw	r3, #257	@ 0x101
 800eb4c:	4617      	mov	r7, r2
 800eb4e:	8183      	strh	r3, [r0, #12]
 800eb50:	460c      	mov	r4, r1
 800eb52:	46a8      	mov	r8, r5
 800eb54:	4621      	mov	r1, r4
 800eb56:	4630      	mov	r0, r6
 800eb58:	3501      	adds	r5, #1
 800eb5a:	f006 fb67 	bl	801522c <put_memory>
 800eb5e:	42af      	cmp	r7, r5
 800eb60:	60a4      	str	r4, [r4, #8]
 800eb62:	f884 800c 	strb.w	r8, [r4, #12]
 800eb66:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800eb6a:	d1f3      	bne.n	800eb54 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop

0800eb74 <rmw_uxrce_init_wait_set_memory>:
 800eb74:	b1e2      	cbz	r2, 800ebb0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800eb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7a:	7b05      	ldrb	r5, [r0, #12]
 800eb7c:	4606      	mov	r6, r0
 800eb7e:	b9ad      	cbnz	r5, 800ebac <rmw_uxrce_init_wait_set_memory+0x38>
 800eb80:	231c      	movs	r3, #28
 800eb82:	e9c0 5500 	strd	r5, r5, [r0]
 800eb86:	6083      	str	r3, [r0, #8]
 800eb88:	f240 1301 	movw	r3, #257	@ 0x101
 800eb8c:	4617      	mov	r7, r2
 800eb8e:	8183      	strh	r3, [r0, #12]
 800eb90:	460c      	mov	r4, r1
 800eb92:	46a8      	mov	r8, r5
 800eb94:	4621      	mov	r1, r4
 800eb96:	4630      	mov	r0, r6
 800eb98:	3501      	adds	r5, #1
 800eb9a:	f006 fb47 	bl	801522c <put_memory>
 800eb9e:	42af      	cmp	r7, r5
 800eba0:	60a4      	str	r4, [r4, #8]
 800eba2:	f884 800c 	strb.w	r8, [r4, #12]
 800eba6:	f104 041c 	add.w	r4, r4, #28
 800ebaa:	d1f3      	bne.n	800eb94 <rmw_uxrce_init_wait_set_memory+0x20>
 800ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop

0800ebb4 <rmw_uxrce_init_guard_condition_memory>:
 800ebb4:	b1e2      	cbz	r2, 800ebf0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ebb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebba:	7b05      	ldrb	r5, [r0, #12]
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	b9ad      	cbnz	r5, 800ebec <rmw_uxrce_init_guard_condition_memory+0x38>
 800ebc0:	2320      	movs	r3, #32
 800ebc2:	e9c0 5500 	strd	r5, r5, [r0]
 800ebc6:	6083      	str	r3, [r0, #8]
 800ebc8:	f240 1301 	movw	r3, #257	@ 0x101
 800ebcc:	4617      	mov	r7, r2
 800ebce:	8183      	strh	r3, [r0, #12]
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	46a8      	mov	r8, r5
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	3501      	adds	r5, #1
 800ebda:	f006 fb27 	bl	801522c <put_memory>
 800ebde:	42af      	cmp	r7, r5
 800ebe0:	60a4      	str	r4, [r4, #8]
 800ebe2:	f884 800c 	strb.w	r8, [r4, #12]
 800ebe6:	f104 0420 	add.w	r4, r4, #32
 800ebea:	d1f3      	bne.n	800ebd4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ebec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop

0800ebf4 <rmw_uxrce_fini_session_memory>:
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	4801      	ldr	r0, [pc, #4]	@ (800ebfc <rmw_uxrce_fini_session_memory+0x8>)
 800ebf8:	f006 bb18 	b.w	801522c <put_memory>
 800ebfc:	20010da4 	.word	0x20010da4

0800ec00 <rmw_uxrce_fini_node_memory>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4604      	mov	r4, r0
 800ec04:	6800      	ldr	r0, [r0, #0]
 800ec06:	b128      	cbz	r0, 800ec14 <rmw_uxrce_fini_node_memory+0x14>
 800ec08:	4b07      	ldr	r3, [pc, #28]	@ (800ec28 <rmw_uxrce_fini_node_memory+0x28>)
 800ec0a:	6819      	ldr	r1, [r3, #0]
 800ec0c:	f7f1 fb00 	bl	8000210 <strcmp>
 800ec10:	b940      	cbnz	r0, 800ec24 <rmw_uxrce_fini_node_memory+0x24>
 800ec12:	6020      	str	r0, [r4, #0]
 800ec14:	6861      	ldr	r1, [r4, #4]
 800ec16:	b129      	cbz	r1, 800ec24 <rmw_uxrce_fini_node_memory+0x24>
 800ec18:	2500      	movs	r5, #0
 800ec1a:	4804      	ldr	r0, [pc, #16]	@ (800ec2c <rmw_uxrce_fini_node_memory+0x2c>)
 800ec1c:	610d      	str	r5, [r1, #16]
 800ec1e:	f006 fb05 	bl	801522c <put_memory>
 800ec22:	6065      	str	r5, [r4, #4]
 800ec24:	bd38      	pop	{r3, r4, r5, pc}
 800ec26:	bf00      	nop
 800ec28:	0801b7fc 	.word	0x0801b7fc
 800ec2c:	20010d74 	.word	0x20010d74

0800ec30 <rmw_uxrce_fini_publisher_memory>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	6800      	ldr	r0, [r0, #0]
 800ec36:	b128      	cbz	r0, 800ec44 <rmw_uxrce_fini_publisher_memory+0x14>
 800ec38:	4b06      	ldr	r3, [pc, #24]	@ (800ec54 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ec3a:	6819      	ldr	r1, [r3, #0]
 800ec3c:	f7f1 fae8 	bl	8000210 <strcmp>
 800ec40:	b938      	cbnz	r0, 800ec52 <rmw_uxrce_fini_publisher_memory+0x22>
 800ec42:	6020      	str	r0, [r4, #0]
 800ec44:	6861      	ldr	r1, [r4, #4]
 800ec46:	b121      	cbz	r1, 800ec52 <rmw_uxrce_fini_publisher_memory+0x22>
 800ec48:	4803      	ldr	r0, [pc, #12]	@ (800ec58 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ec4a:	f006 faef 	bl	801522c <put_memory>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	6063      	str	r3, [r4, #4]
 800ec52:	bd10      	pop	{r4, pc}
 800ec54:	0801b7fc 	.word	0x0801b7fc
 800ec58:	20010d84 	.word	0x20010d84

0800ec5c <rmw_uxrce_fini_subscription_memory>:
 800ec5c:	b510      	push	{r4, lr}
 800ec5e:	4604      	mov	r4, r0
 800ec60:	6800      	ldr	r0, [r0, #0]
 800ec62:	b128      	cbz	r0, 800ec70 <rmw_uxrce_fini_subscription_memory+0x14>
 800ec64:	4b06      	ldr	r3, [pc, #24]	@ (800ec80 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ec66:	6819      	ldr	r1, [r3, #0]
 800ec68:	f7f1 fad2 	bl	8000210 <strcmp>
 800ec6c:	b938      	cbnz	r0, 800ec7e <rmw_uxrce_fini_subscription_memory+0x22>
 800ec6e:	6020      	str	r0, [r4, #0]
 800ec70:	6861      	ldr	r1, [r4, #4]
 800ec72:	b121      	cbz	r1, 800ec7e <rmw_uxrce_fini_subscription_memory+0x22>
 800ec74:	4803      	ldr	r0, [pc, #12]	@ (800ec84 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ec76:	f006 fad9 	bl	801522c <put_memory>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6063      	str	r3, [r4, #4]
 800ec7e:	bd10      	pop	{r4, pc}
 800ec80:	0801b7fc 	.word	0x0801b7fc
 800ec84:	20010dc4 	.word	0x20010dc4

0800ec88 <rmw_uxrce_fini_service_memory>:
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	6800      	ldr	r0, [r0, #0]
 800ec8e:	b128      	cbz	r0, 800ec9c <rmw_uxrce_fini_service_memory+0x14>
 800ec90:	4b06      	ldr	r3, [pc, #24]	@ (800ecac <rmw_uxrce_fini_service_memory+0x24>)
 800ec92:	6819      	ldr	r1, [r3, #0]
 800ec94:	f7f1 fabc 	bl	8000210 <strcmp>
 800ec98:	b938      	cbnz	r0, 800ecaa <rmw_uxrce_fini_service_memory+0x22>
 800ec9a:	6020      	str	r0, [r4, #0]
 800ec9c:	6861      	ldr	r1, [r4, #4]
 800ec9e:	b121      	cbz	r1, 800ecaa <rmw_uxrce_fini_service_memory+0x22>
 800eca0:	4803      	ldr	r0, [pc, #12]	@ (800ecb0 <rmw_uxrce_fini_service_memory+0x28>)
 800eca2:	f006 fac3 	bl	801522c <put_memory>
 800eca6:	2300      	movs	r3, #0
 800eca8:	6063      	str	r3, [r4, #4]
 800ecaa:	bd10      	pop	{r4, pc}
 800ecac:	0801b7fc 	.word	0x0801b7fc
 800ecb0:	20010d94 	.word	0x20010d94

0800ecb4 <rmw_uxrce_fini_client_memory>:
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	6800      	ldr	r0, [r0, #0]
 800ecba:	b128      	cbz	r0, 800ecc8 <rmw_uxrce_fini_client_memory+0x14>
 800ecbc:	4b06      	ldr	r3, [pc, #24]	@ (800ecd8 <rmw_uxrce_fini_client_memory+0x24>)
 800ecbe:	6819      	ldr	r1, [r3, #0]
 800ecc0:	f7f1 faa6 	bl	8000210 <strcmp>
 800ecc4:	b938      	cbnz	r0, 800ecd6 <rmw_uxrce_fini_client_memory+0x22>
 800ecc6:	6020      	str	r0, [r4, #0]
 800ecc8:	6861      	ldr	r1, [r4, #4]
 800ecca:	b121      	cbz	r1, 800ecd6 <rmw_uxrce_fini_client_memory+0x22>
 800eccc:	4803      	ldr	r0, [pc, #12]	@ (800ecdc <rmw_uxrce_fini_client_memory+0x28>)
 800ecce:	f006 faad 	bl	801522c <put_memory>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	6063      	str	r3, [r4, #4]
 800ecd6:	bd10      	pop	{r4, pc}
 800ecd8:	0801b7fc 	.word	0x0801b7fc
 800ecdc:	2000c4a4 	.word	0x2000c4a4

0800ece0 <rmw_uxrce_fini_topic_memory>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	4604      	mov	r4, r0
 800ece4:	4621      	mov	r1, r4
 800ece6:	4803      	ldr	r0, [pc, #12]	@ (800ecf4 <rmw_uxrce_fini_topic_memory+0x14>)
 800ece8:	f006 faa0 	bl	801522c <put_memory>
 800ecec:	2300      	movs	r3, #0
 800ecee:	61a3      	str	r3, [r4, #24]
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20010dd4 	.word	0x20010dd4

0800ecf8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ecf8:	b082      	sub	sp, #8
 800ecfa:	b530      	push	{r4, r5, lr}
 800ecfc:	4925      	ldr	r1, [pc, #148]	@ (800ed94 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ecfe:	680d      	ldr	r5, [r1, #0]
 800ed00:	ac03      	add	r4, sp, #12
 800ed02:	e884 000c 	stmia.w	r4, {r2, r3}
 800ed06:	461c      	mov	r4, r3
 800ed08:	2d00      	cmp	r5, #0
 800ed0a:	d041      	beq.n	800ed90 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ed0c:	462b      	mov	r3, r5
 800ed0e:	2100      	movs	r1, #0
 800ed10:	689a      	ldr	r2, [r3, #8]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ed18:	4290      	cmp	r0, r2
 800ed1a:	bf08      	it	eq
 800ed1c:	3101      	addeq	r1, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1f6      	bne.n	800ed10 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ed22:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	d029      	beq.n	800ed7e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ed2a:	d907      	bls.n	800ed3c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed2c:	2b03      	cmp	r3, #3
 800ed2e:	d005      	beq.n	800ed3c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ed30:	2100      	movs	r1, #0
 800ed32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed36:	4608      	mov	r0, r1
 800ed38:	b002      	add	sp, #8
 800ed3a:	4770      	bx	lr
 800ed3c:	b314      	cbz	r4, 800ed84 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed3e:	428c      	cmp	r4, r1
 800ed40:	d820      	bhi.n	800ed84 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	d0f4      	beq.n	800ed30 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed46:	2100      	movs	r1, #0
 800ed48:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800ed4c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ed50:	e002      	b.n	800ed58 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ed52:	686d      	ldr	r5, [r5, #4]
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d0ec      	beq.n	800ed32 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ed58:	68ab      	ldr	r3, [r5, #8]
 800ed5a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800ed5e:	4290      	cmp	r0, r2
 800ed60:	d1f7      	bne.n	800ed52 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed62:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ed66:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ed6a:	4562      	cmp	r2, ip
 800ed6c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ed70:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ed74:	daed      	bge.n	800ed52 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed76:	4694      	mov	ip, r2
 800ed78:	461c      	mov	r4, r3
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	e7e9      	b.n	800ed52 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ed7e:	b10c      	cbz	r4, 800ed84 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ed80:	428c      	cmp	r4, r1
 800ed82:	d9d5      	bls.n	800ed30 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed88:	4802      	ldr	r0, [pc, #8]	@ (800ed94 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ed8a:	b002      	add	sp, #8
 800ed8c:	f006 ba3e 	b.w	801520c <get_memory>
 800ed90:	4629      	mov	r1, r5
 800ed92:	e7c6      	b.n	800ed22 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ed94:	20010db4 	.word	0x20010db4

0800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ed98:	4b11      	ldr	r3, [pc, #68]	@ (800ede0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	b530      	push	{r4, r5, lr}
 800ed9e:	b1e3      	cbz	r3, 800edda <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800eda0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800eda4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800eda8:	2400      	movs	r4, #0
 800edaa:	e001      	b.n	800edb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	b193      	cbz	r3, 800edd6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800edb0:	689a      	ldr	r2, [r3, #8]
 800edb2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800edb6:	4288      	cmp	r0, r1
 800edb8:	d1f8      	bne.n	800edac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800edba:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800edbe:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800edc2:	4571      	cmp	r1, lr
 800edc4:	eb72 050c 	sbcs.w	r5, r2, ip
 800edc8:	daf0      	bge.n	800edac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800edca:	461c      	mov	r4, r3
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	468e      	mov	lr, r1
 800edd0:	4694      	mov	ip, r2
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1ec      	bne.n	800edb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800edd6:	4620      	mov	r0, r4
 800edd8:	bd30      	pop	{r4, r5, pc}
 800edda:	461c      	mov	r4, r3
 800eddc:	4620      	mov	r0, r4
 800edde:	bd30      	pop	{r4, r5, pc}
 800ede0:	20010db4 	.word	0x20010db4
 800ede4:	00000000 	.word	0x00000000

0800ede8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	4b3c      	ldr	r3, [pc, #240]	@ (800eee0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800edee:	ed2d 8b06 	vpush	{d8-d10}
 800edf2:	681f      	ldr	r7, [r3, #0]
 800edf4:	b08d      	sub	sp, #52	@ 0x34
 800edf6:	f007 f881 	bl	8015efc <rmw_uros_epoch_nanos>
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	d05d      	beq.n	800eeba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800edfe:	46b8      	mov	r8, r7
 800ee00:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800eec8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ee04:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee08:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ee0c:	2b04      	cmp	r3, #4
 800ee0e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800eed0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ee12:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800eed8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ee16:	4681      	mov	r9, r0
 800ee18:	468a      	mov	sl, r1
 800ee1a:	ac04      	add	r4, sp, #16
 800ee1c:	d03f      	beq.n	800ee9e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ee1e:	2b05      	cmp	r3, #5
 800ee20:	d044      	beq.n	800eeac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d03b      	beq.n	800ee9e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ee26:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ee2a:	ed8d ab06 	vstr	d10, [sp, #24]
 800ee2e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ee32:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ee36:	ab08      	add	r3, sp, #32
 800ee38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ee3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee42:	f006 f8e9 	bl	8015018 <rmw_time_equal>
 800ee46:	b118      	cbz	r0, 800ee50 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ee48:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ee4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ee50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee54:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ee58:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ee5c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ee60:	f006 f92e 	bl	80150c0 <rmw_time_total_nsec>
 800ee64:	1830      	adds	r0, r6, r0
 800ee66:	eb47 0101 	adc.w	r1, r7, r1
 800ee6a:	4548      	cmp	r0, r9
 800ee6c:	eb71 030a 	sbcs.w	r3, r1, sl
 800ee70:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ee74:	db05      	blt.n	800ee82 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ee76:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ee7a:	4591      	cmp	r9, r2
 800ee7c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ee80:	da03      	bge.n	800ee8a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ee82:	4817      	ldr	r0, [pc, #92]	@ (800eee0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ee84:	4641      	mov	r1, r8
 800ee86:	f006 f9d1 	bl	801522c <put_memory>
 800ee8a:	f1bb 0f00 	cmp.w	fp, #0
 800ee8e:	d014      	beq.n	800eeba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ee90:	46d8      	mov	r8, fp
 800ee92:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee96:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	d1bf      	bne.n	800ee1e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ee9e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eea2:	3340      	adds	r3, #64	@ 0x40
 800eea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eeaa:	e7c0      	b.n	800ee2e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eeac:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eeb0:	3348      	adds	r3, #72	@ 0x48
 800eeb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eeb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eeb8:	e7b9      	b.n	800ee2e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eeba:	b00d      	add	sp, #52	@ 0x34
 800eebc:	ecbd 8b06 	vpop	{d8-d10}
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec4:	f3af 8000 	nop.w
	...
 800eed0:	00000001 	.word	0x00000001
 800eed4:	00000000 	.word	0x00000000
 800eed8:	0000001e 	.word	0x0000001e
 800eedc:	00000000 	.word	0x00000000
 800eee0:	20010db4 	.word	0x20010db4

0800eee4 <run_xrce_session>:
 800eee4:	b510      	push	{r4, lr}
 800eee6:	788c      	ldrb	r4, [r1, #2]
 800eee8:	b086      	sub	sp, #24
 800eeea:	2c01      	cmp	r4, #1
 800eeec:	f8ad 200e 	strh.w	r2, [sp, #14]
 800eef0:	d00c      	beq.n	800ef0c <run_xrce_session+0x28>
 800eef2:	4619      	mov	r1, r3
 800eef4:	2301      	movs	r3, #1
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	f10d 020e 	add.w	r2, sp, #14
 800eefc:	f10d 0317 	add.w	r3, sp, #23
 800ef00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef04:	f001 f952 	bl	80101ac <uxr_run_session_until_all_status>
 800ef08:	b006      	add	sp, #24
 800ef0a:	bd10      	pop	{r4, pc}
 800ef0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef10:	f000 fd66 	bl	800f9e0 <uxr_flash_output_streams>
 800ef14:	4620      	mov	r0, r4
 800ef16:	b006      	add	sp, #24
 800ef18:	bd10      	pop	{r4, pc}
 800ef1a:	bf00      	nop

0800ef1c <convert_qos_profile>:
 800ef1c:	7a4a      	ldrb	r2, [r1, #9]
 800ef1e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ef22:	2a02      	cmp	r2, #2
 800ef24:	bf18      	it	ne
 800ef26:	2200      	movne	r2, #0
 800ef28:	7002      	strb	r2, [r0, #0]
 800ef2a:	780a      	ldrb	r2, [r1, #0]
 800ef2c:	8889      	ldrh	r1, [r1, #4]
 800ef2e:	8081      	strh	r1, [r0, #4]
 800ef30:	f1ac 0c02 	sub.w	ip, ip, #2
 800ef34:	f1a2 0202 	sub.w	r2, r2, #2
 800ef38:	fabc fc8c 	clz	ip, ip
 800ef3c:	fab2 f282 	clz	r2, r2
 800ef40:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ef44:	0952      	lsrs	r2, r2, #5
 800ef46:	f880 c001 	strb.w	ip, [r0, #1]
 800ef4a:	7082      	strb	r2, [r0, #2]
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop

0800ef50 <generate_type_name>:
 800ef50:	b530      	push	{r4, r5, lr}
 800ef52:	2300      	movs	r3, #0
 800ef54:	700b      	strb	r3, [r1, #0]
 800ef56:	6803      	ldr	r3, [r0, #0]
 800ef58:	b087      	sub	sp, #28
 800ef5a:	4614      	mov	r4, r2
 800ef5c:	b1d3      	cbz	r3, 800ef94 <generate_type_name+0x44>
 800ef5e:	4a0f      	ldr	r2, [pc, #60]	@ (800ef9c <generate_type_name+0x4c>)
 800ef60:	4615      	mov	r5, r2
 800ef62:	9203      	str	r2, [sp, #12]
 800ef64:	9500      	str	r5, [sp, #0]
 800ef66:	6842      	ldr	r2, [r0, #4]
 800ef68:	480d      	ldr	r0, [pc, #52]	@ (800efa0 <generate_type_name+0x50>)
 800ef6a:	9001      	str	r0, [sp, #4]
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	490d      	ldr	r1, [pc, #52]	@ (800efa4 <generate_type_name+0x54>)
 800ef70:	9204      	str	r2, [sp, #16]
 800ef72:	9105      	str	r1, [sp, #20]
 800ef74:	9102      	str	r1, [sp, #8]
 800ef76:	4a0c      	ldr	r2, [pc, #48]	@ (800efa8 <generate_type_name+0x58>)
 800ef78:	4621      	mov	r1, r4
 800ef7a:	f009 fae5 	bl	8018548 <sniprintf>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	db05      	blt.n	800ef8e <generate_type_name+0x3e>
 800ef82:	4284      	cmp	r4, r0
 800ef84:	bfd4      	ite	le
 800ef86:	2000      	movle	r0, #0
 800ef88:	2001      	movgt	r0, #1
 800ef8a:	b007      	add	sp, #28
 800ef8c:	bd30      	pop	{r4, r5, pc}
 800ef8e:	2000      	movs	r0, #0
 800ef90:	b007      	add	sp, #28
 800ef92:	bd30      	pop	{r4, r5, pc}
 800ef94:	4b05      	ldr	r3, [pc, #20]	@ (800efac <generate_type_name+0x5c>)
 800ef96:	4a01      	ldr	r2, [pc, #4]	@ (800ef9c <generate_type_name+0x4c>)
 800ef98:	461d      	mov	r5, r3
 800ef9a:	e7e2      	b.n	800ef62 <generate_type_name+0x12>
 800ef9c:	0801b5c0 	.word	0x0801b5c0
 800efa0:	0801b5d8 	.word	0x0801b5d8
 800efa4:	0801b5d4 	.word	0x0801b5d4
 800efa8:	0801b5c4 	.word	0x0801b5c4
 800efac:	0801b3b0 	.word	0x0801b3b0

0800efb0 <generate_topic_name>:
 800efb0:	b510      	push	{r4, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	4614      	mov	r4, r2
 800efb6:	9000      	str	r0, [sp, #0]
 800efb8:	4b08      	ldr	r3, [pc, #32]	@ (800efdc <generate_topic_name+0x2c>)
 800efba:	4a09      	ldr	r2, [pc, #36]	@ (800efe0 <generate_topic_name+0x30>)
 800efbc:	4608      	mov	r0, r1
 800efbe:	4621      	mov	r1, r4
 800efc0:	f009 fac2 	bl	8018548 <sniprintf>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	db05      	blt.n	800efd4 <generate_topic_name+0x24>
 800efc8:	4284      	cmp	r4, r0
 800efca:	bfd4      	ite	le
 800efcc:	2000      	movle	r0, #0
 800efce:	2001      	movgt	r0, #1
 800efd0:	b002      	add	sp, #8
 800efd2:	bd10      	pop	{r4, pc}
 800efd4:	2000      	movs	r0, #0
 800efd6:	b002      	add	sp, #8
 800efd8:	bd10      	pop	{r4, pc}
 800efda:	bf00      	nop
 800efdc:	0801b5dc 	.word	0x0801b5dc
 800efe0:	0801b06c 	.word	0x0801b06c

0800efe4 <is_uxrce_rmw_identifier_valid>:
 800efe4:	b510      	push	{r4, lr}
 800efe6:	4604      	mov	r4, r0
 800efe8:	b140      	cbz	r0, 800effc <is_uxrce_rmw_identifier_valid+0x18>
 800efea:	f006 f977 	bl	80152dc <rmw_get_implementation_identifier>
 800efee:	4601      	mov	r1, r0
 800eff0:	4620      	mov	r0, r4
 800eff2:	f7f1 f90d 	bl	8000210 <strcmp>
 800eff6:	fab0 f080 	clz	r0, r0
 800effa:	0940      	lsrs	r0, r0, #5
 800effc:	bd10      	pop	{r4, pc}
 800effe:	bf00      	nop

0800f000 <get_message_typesupport_handle>:
 800f000:	6883      	ldr	r3, [r0, #8]
 800f002:	4718      	bx	r3

0800f004 <get_message_typesupport_handle_function>:
 800f004:	b510      	push	{r4, lr}
 800f006:	4604      	mov	r4, r0
 800f008:	6800      	ldr	r0, [r0, #0]
 800f00a:	f7f1 f901 	bl	8000210 <strcmp>
 800f00e:	2800      	cmp	r0, #0
 800f010:	bf0c      	ite	eq
 800f012:	4620      	moveq	r0, r4
 800f014:	2000      	movne	r0, #0
 800f016:	bd10      	pop	{r4, pc}

0800f018 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f01c:	6805      	ldr	r5, [r0, #0]
 800f01e:	4604      	mov	r4, r0
 800f020:	4628      	mov	r0, r5
 800f022:	460e      	mov	r6, r1
 800f024:	f7f1 f8f4 	bl	8000210 <strcmp>
 800f028:	b1c8      	cbz	r0, 800f05e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f02a:	4b11      	ldr	r3, [pc, #68]	@ (800f070 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	429d      	cmp	r5, r3
 800f030:	d112      	bne.n	800f058 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f032:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f036:	f8d8 4000 	ldr.w	r4, [r8]
 800f03a:	b16c      	cbz	r4, 800f058 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f03c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f040:	2700      	movs	r7, #0
 800f042:	3d04      	subs	r5, #4
 800f044:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f048:	4631      	mov	r1, r6
 800f04a:	f7f1 f8e1 	bl	8000210 <strcmp>
 800f04e:	00bb      	lsls	r3, r7, #2
 800f050:	b140      	cbz	r0, 800f064 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f052:	3701      	adds	r7, #1
 800f054:	42bc      	cmp	r4, r7
 800f056:	d1f5      	bne.n	800f044 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f058:	2000      	movs	r0, #0
 800f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f05e:	4620      	mov	r0, r4
 800f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f064:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f06c:	58d3      	ldr	r3, [r2, r3]
 800f06e:	4718      	bx	r3
 800f070:	200001f0 	.word	0x200001f0

0800f074 <geometry_msgs__msg__Twist__init>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	4605      	mov	r5, r0
 800f078:	b1a8      	cbz	r0, 800f0a6 <geometry_msgs__msg__Twist__init+0x32>
 800f07a:	f000 f82b 	bl	800f0d4 <geometry_msgs__msg__Vector3__init>
 800f07e:	4604      	mov	r4, r0
 800f080:	b140      	cbz	r0, 800f094 <geometry_msgs__msg__Twist__init+0x20>
 800f082:	f105 0618 	add.w	r6, r5, #24
 800f086:	4630      	mov	r0, r6
 800f088:	f000 f824 	bl	800f0d4 <geometry_msgs__msg__Vector3__init>
 800f08c:	4604      	mov	r4, r0
 800f08e:	b168      	cbz	r0, 800f0ac <geometry_msgs__msg__Twist__init+0x38>
 800f090:	4620      	mov	r0, r4
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	4628      	mov	r0, r5
 800f096:	f000 f821 	bl	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f09a:	f105 0018 	add.w	r0, r5, #24
 800f09e:	f000 f81d 	bl	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	bd70      	pop	{r4, r5, r6, pc}
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f000 f815 	bl	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f000 f812 	bl	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f0b8:	e7ea      	b.n	800f090 <geometry_msgs__msg__Twist__init+0x1c>
 800f0ba:	bf00      	nop

0800f0bc <geometry_msgs__msg__Twist__fini>:
 800f0bc:	b148      	cbz	r0, 800f0d2 <geometry_msgs__msg__Twist__fini+0x16>
 800f0be:	b510      	push	{r4, lr}
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	f000 f80b 	bl	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f0c6:	f104 0018 	add.w	r0, r4, #24
 800f0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0ce:	f000 b805 	b.w	800f0dc <geometry_msgs__msg__Vector3__fini>
 800f0d2:	4770      	bx	lr

0800f0d4 <geometry_msgs__msg__Vector3__init>:
 800f0d4:	3800      	subs	r0, #0
 800f0d6:	bf18      	it	ne
 800f0d8:	2001      	movne	r0, #1
 800f0da:	4770      	bx	lr

0800f0dc <geometry_msgs__msg__Vector3__fini>:
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop

0800f0e0 <uxr_buffer_delete_entity>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	b08e      	sub	sp, #56	@ 0x38
 800f0e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	2204      	movs	r2, #4
 800f0f0:	ab06      	add	r3, sp, #24
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	f001 fa81 	bl	80105fc <uxr_prepare_stream_to_write_submessage>
 800f0fa:	b918      	cbnz	r0, 800f104 <uxr_buffer_delete_entity+0x24>
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	4620      	mov	r0, r4
 800f100:	b00e      	add	sp, #56	@ 0x38
 800f102:	bd10      	pop	{r4, pc}
 800f104:	9902      	ldr	r1, [sp, #8]
 800f106:	aa05      	add	r2, sp, #20
 800f108:	4620      	mov	r0, r4
 800f10a:	f001 fbad 	bl	8010868 <uxr_init_base_object_request>
 800f10e:	a905      	add	r1, sp, #20
 800f110:	4604      	mov	r4, r0
 800f112:	a806      	add	r0, sp, #24
 800f114:	f002 fdfe 	bl	8011d14 <uxr_serialize_DELETE_Payload>
 800f118:	4620      	mov	r0, r4
 800f11a:	b00e      	add	sp, #56	@ 0x38
 800f11c:	bd10      	pop	{r4, pc}
 800f11e:	bf00      	nop

0800f120 <uxr_common_create_entity>:
 800f120:	b510      	push	{r4, lr}
 800f122:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f126:	b08c      	sub	sp, #48	@ 0x30
 800f128:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f12c:	f1bc 0f01 	cmp.w	ip, #1
 800f130:	bf0c      	ite	eq
 800f132:	f003 0201 	andeq.w	r2, r3, #1
 800f136:	2200      	movne	r2, #0
 800f138:	330e      	adds	r3, #14
 800f13a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f13e:	9101      	str	r1, [sp, #4]
 800f140:	441a      	add	r2, r3
 800f142:	2301      	movs	r3, #1
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	9903      	ldr	r1, [sp, #12]
 800f148:	ab04      	add	r3, sp, #16
 800f14a:	b292      	uxth	r2, r2
 800f14c:	4604      	mov	r4, r0
 800f14e:	f001 fa55 	bl	80105fc <uxr_prepare_stream_to_write_submessage>
 800f152:	b918      	cbnz	r0, 800f15c <uxr_common_create_entity+0x3c>
 800f154:	4604      	mov	r4, r0
 800f156:	4620      	mov	r0, r4
 800f158:	b00c      	add	sp, #48	@ 0x30
 800f15a:	bd10      	pop	{r4, pc}
 800f15c:	9902      	ldr	r1, [sp, #8]
 800f15e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f160:	4620      	mov	r0, r4
 800f162:	f001 fb81 	bl	8010868 <uxr_init_base_object_request>
 800f166:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f168:	4604      	mov	r4, r0
 800f16a:	a804      	add	r0, sp, #16
 800f16c:	f002 fd2e 	bl	8011bcc <uxr_serialize_CREATE_Payload>
 800f170:	4620      	mov	r0, r4
 800f172:	b00c      	add	sp, #48	@ 0x30
 800f174:	bd10      	pop	{r4, pc}
 800f176:	bf00      	nop

0800f178 <uxr_buffer_create_participant_bin>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f17e:	ac11      	add	r4, sp, #68	@ 0x44
 800f180:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f184:	2303      	movs	r3, #3
 800f186:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f18a:	7223      	strb	r3, [r4, #8]
 800f18c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f18e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f192:	2201      	movs	r2, #1
 800f194:	2100      	movs	r1, #0
 800f196:	4605      	mov	r5, r0
 800f198:	7122      	strb	r2, [r4, #4]
 800f19a:	f88d 1014 	strb.w	r1, [sp, #20]
 800f19e:	b1cb      	cbz	r3, 800f1d4 <uxr_buffer_create_participant_bin+0x5c>
 800f1a0:	f88d 201c 	strb.w	r2, [sp, #28]
 800f1a4:	9308      	str	r3, [sp, #32]
 800f1a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1aa:	a915      	add	r1, sp, #84	@ 0x54
 800f1ac:	a809      	add	r0, sp, #36	@ 0x24
 800f1ae:	f7fc ff77 	bl	800c0a0 <ucdr_init_buffer>
 800f1b2:	a905      	add	r1, sp, #20
 800f1b4:	a809      	add	r0, sp, #36	@ 0x24
 800f1b6:	f002 f8eb 	bl	8011390 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f1ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1bc:	9600      	str	r6, [sp, #0]
 800f1be:	9401      	str	r4, [sp, #4]
 800f1c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1c4:	60e3      	str	r3, [r4, #12]
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	f7ff ffa9 	bl	800f120 <uxr_common_create_entity>
 800f1ce:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f1d2:	bd70      	pop	{r4, r5, r6, pc}
 800f1d4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f1d8:	e7e5      	b.n	800f1a6 <uxr_buffer_create_participant_bin+0x2e>
 800f1da:	bf00      	nop

0800f1dc <uxr_buffer_create_topic_bin>:
 800f1dc:	b570      	push	{r4, r5, r6, lr}
 800f1de:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f1e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f1e6:	9105      	str	r1, [sp, #20]
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	a997      	add	r1, sp, #604	@ 0x25c
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f1f4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f1f8:	f000 f996 	bl	800f528 <uxr_object_id_to_raw>
 800f1fc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f1fe:	9306      	str	r3, [sp, #24]
 800f200:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f202:	930a      	str	r3, [sp, #40]	@ 0x28
 800f204:	2303      	movs	r3, #3
 800f206:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f20a:	2301      	movs	r3, #1
 800f20c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f210:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f214:	a917      	add	r1, sp, #92	@ 0x5c
 800f216:	2300      	movs	r3, #0
 800f218:	a80b      	add	r0, sp, #44	@ 0x2c
 800f21a:	f88d 301c 	strb.w	r3, [sp, #28]
 800f21e:	f7fc ff3f 	bl	800c0a0 <ucdr_init_buffer>
 800f222:	a906      	add	r1, sp, #24
 800f224:	a80b      	add	r0, sp, #44	@ 0x2c
 800f226:	f002 f8d5 	bl	80113d4 <uxr_serialize_OBJK_Topic_Binary>
 800f22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f22c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f22e:	ac13      	add	r4, sp, #76	@ 0x4c
 800f230:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f234:	9600      	str	r6, [sp, #0]
 800f236:	9401      	str	r4, [sp, #4]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	4628      	mov	r0, r5
 800f23c:	f7ff ff70 	bl	800f120 <uxr_common_create_entity>
 800f240:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	bf00      	nop

0800f248 <uxr_buffer_create_publisher_bin>:
 800f248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f24e:	4605      	mov	r5, r0
 800f250:	9105      	str	r1, [sp, #20]
 800f252:	4618      	mov	r0, r3
 800f254:	2603      	movs	r6, #3
 800f256:	a992      	add	r1, sp, #584	@ 0x248
 800f258:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f25c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f260:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f264:	f000 f960 	bl	800f528 <uxr_object_id_to_raw>
 800f268:	2300      	movs	r3, #0
 800f26a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f26e:	a912      	add	r1, sp, #72	@ 0x48
 800f270:	a806      	add	r0, sp, #24
 800f272:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f276:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f27a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f27e:	f7fc ff0f 	bl	800c0a0 <ucdr_init_buffer>
 800f282:	a993      	add	r1, sp, #588	@ 0x24c
 800f284:	a806      	add	r0, sp, #24
 800f286:	f002 f959 	bl	801153c <uxr_serialize_OBJK_Publisher_Binary>
 800f28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f28c:	9311      	str	r3, [sp, #68]	@ 0x44
 800f28e:	ac0e      	add	r4, sp, #56	@ 0x38
 800f290:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f294:	9700      	str	r7, [sp, #0]
 800f296:	9401      	str	r4, [sp, #4]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	4628      	mov	r0, r5
 800f29c:	f7ff ff40 	bl	800f120 <uxr_common_create_entity>
 800f2a0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a6:	bf00      	nop

0800f2a8 <uxr_buffer_create_subscriber_bin>:
 800f2a8:	b570      	push	{r4, r5, r6, lr}
 800f2aa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800f2ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f2b2:	9105      	str	r1, [sp, #20]
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	a992      	add	r1, sp, #584	@ 0x248
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	2304      	movs	r3, #4
 800f2bc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800f2c0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800f2c4:	f000 f930 	bl	800f528 <uxr_object_id_to_raw>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2ce:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f2d2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f2d6:	a912      	add	r1, sp, #72	@ 0x48
 800f2d8:	2303      	movs	r3, #3
 800f2da:	a806      	add	r0, sp, #24
 800f2dc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f2e0:	f7fc fede 	bl	800c0a0 <ucdr_init_buffer>
 800f2e4:	a993      	add	r1, sp, #588	@ 0x24c
 800f2e6:	a806      	add	r0, sp, #24
 800f2e8:	f002 f9d8 	bl	801169c <uxr_serialize_OBJK_Subscriber_Binary>
 800f2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2ee:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2f0:	ac0e      	add	r4, sp, #56	@ 0x38
 800f2f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f2f6:	9600      	str	r6, [sp, #0]
 800f2f8:	9401      	str	r4, [sp, #4]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7ff ff0f 	bl	800f120 <uxr_common_create_entity>
 800f302:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800f306:	bd70      	pop	{r4, r5, r6, pc}

0800f308 <uxr_buffer_create_datawriter_bin>:
 800f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f310:	ac1d      	add	r4, sp, #116	@ 0x74
 800f312:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f316:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f31a:	9105      	str	r1, [sp, #20]
 800f31c:	4606      	mov	r6, r0
 800f31e:	a9a1      	add	r1, sp, #644	@ 0x284
 800f320:	4618      	mov	r0, r3
 800f322:	2305      	movs	r3, #5
 800f324:	7123      	strb	r3, [r4, #4]
 800f326:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f32a:	2703      	movs	r7, #3
 800f32c:	f000 f8fc 	bl	800f528 <uxr_object_id_to_raw>
 800f330:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f332:	7227      	strb	r7, [r4, #8]
 800f334:	a90e      	add	r1, sp, #56	@ 0x38
 800f336:	f000 f8f7 	bl	800f528 <uxr_object_id_to_raw>
 800f33a:	2300      	movs	r3, #0
 800f33c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f340:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f344:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f348:	3d00      	subs	r5, #0
 800f34a:	bf18      	it	ne
 800f34c:	2501      	movne	r5, #1
 800f34e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f352:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f356:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f35a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f35e:	2301      	movs	r3, #1
 800f360:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f364:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f368:	bb8a      	cbnz	r2, 800f3ce <uxr_buffer_create_datawriter_bin+0xc6>
 800f36a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f36e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f372:	f04f 0c13 	mov.w	ip, #19
 800f376:	250b      	movs	r5, #11
 800f378:	2221      	movs	r2, #33	@ 0x21
 800f37a:	2111      	movs	r1, #17
 800f37c:	2009      	movs	r0, #9
 800f37e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f382:	b923      	cbnz	r3, 800f38e <uxr_buffer_create_datawriter_bin+0x86>
 800f384:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f388:	4672      	mov	r2, lr
 800f38a:	4661      	mov	r1, ip
 800f38c:	4628      	mov	r0, r5
 800f38e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f392:	2b01      	cmp	r3, #1
 800f394:	d025      	beq.n	800f3e2 <uxr_buffer_create_datawriter_bin+0xda>
 800f396:	2b03      	cmp	r3, #3
 800f398:	d029      	beq.n	800f3ee <uxr_buffer_create_datawriter_bin+0xe6>
 800f39a:	b32b      	cbz	r3, 800f3e8 <uxr_buffer_create_datawriter_bin+0xe0>
 800f39c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3a0:	a921      	add	r1, sp, #132	@ 0x84
 800f3a2:	a806      	add	r0, sp, #24
 800f3a4:	f7fc fe7c 	bl	800c0a0 <ucdr_init_buffer>
 800f3a8:	a90e      	add	r1, sp, #56	@ 0x38
 800f3aa:	a806      	add	r0, sp, #24
 800f3ac:	f002 fa28 	bl	8011800 <uxr_serialize_OBJK_DataWriter_Binary>
 800f3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3b2:	f8cd 8000 	str.w	r8, [sp]
 800f3b6:	9401      	str	r4, [sp, #4]
 800f3b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f3bc:	60e3      	str	r3, [r4, #12]
 800f3be:	4630      	mov	r0, r6
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	f7ff fead 	bl	800f120 <uxr_common_create_entity>
 800f3c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f3d2:	f04f 0c12 	mov.w	ip, #18
 800f3d6:	250a      	movs	r5, #10
 800f3d8:	2220      	movs	r2, #32
 800f3da:	2110      	movs	r1, #16
 800f3dc:	2008      	movs	r0, #8
 800f3de:	2702      	movs	r7, #2
 800f3e0:	e7cd      	b.n	800f37e <uxr_buffer_create_datawriter_bin+0x76>
 800f3e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f3e6:	e7d9      	b.n	800f39c <uxr_buffer_create_datawriter_bin+0x94>
 800f3e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f3ec:	e7d6      	b.n	800f39c <uxr_buffer_create_datawriter_bin+0x94>
 800f3ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f3f2:	e7d3      	b.n	800f39c <uxr_buffer_create_datawriter_bin+0x94>

0800f3f4 <uxr_buffer_create_datareader_bin>:
 800f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f3fc:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f3fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f402:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800f406:	9105      	str	r1, [sp, #20]
 800f408:	4606      	mov	r6, r0
 800f40a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800f40c:	4618      	mov	r0, r3
 800f40e:	2306      	movs	r3, #6
 800f410:	7123      	strb	r3, [r4, #4]
 800f412:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800f416:	2703      	movs	r7, #3
 800f418:	f000 f886 	bl	800f528 <uxr_object_id_to_raw>
 800f41c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800f41e:	7227      	strb	r7, [r4, #8]
 800f420:	a90e      	add	r1, sp, #56	@ 0x38
 800f422:	f000 f881 	bl	800f528 <uxr_object_id_to_raw>
 800f426:	2300      	movs	r3, #0
 800f428:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f42c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800f430:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800f434:	3d00      	subs	r5, #0
 800f436:	bf18      	it	ne
 800f438:	2501      	movne	r5, #1
 800f43a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f43e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f442:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f446:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f44a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f44e:	2301      	movs	r3, #1
 800f450:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f454:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f458:	bb8a      	cbnz	r2, 800f4be <uxr_buffer_create_datareader_bin+0xca>
 800f45a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f45e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f462:	f04f 0c13 	mov.w	ip, #19
 800f466:	250b      	movs	r5, #11
 800f468:	2221      	movs	r2, #33	@ 0x21
 800f46a:	2111      	movs	r1, #17
 800f46c:	2009      	movs	r0, #9
 800f46e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800f472:	b923      	cbnz	r3, 800f47e <uxr_buffer_create_datareader_bin+0x8a>
 800f474:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f478:	4672      	mov	r2, lr
 800f47a:	4661      	mov	r1, ip
 800f47c:	4628      	mov	r0, r5
 800f47e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800f482:	2b01      	cmp	r3, #1
 800f484:	d025      	beq.n	800f4d2 <uxr_buffer_create_datareader_bin+0xde>
 800f486:	2b03      	cmp	r3, #3
 800f488:	d029      	beq.n	800f4de <uxr_buffer_create_datareader_bin+0xea>
 800f48a:	b32b      	cbz	r3, 800f4d8 <uxr_buffer_create_datareader_bin+0xe4>
 800f48c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f490:	a923      	add	r1, sp, #140	@ 0x8c
 800f492:	a806      	add	r0, sp, #24
 800f494:	f7fc fe04 	bl	800c0a0 <ucdr_init_buffer>
 800f498:	a90e      	add	r1, sp, #56	@ 0x38
 800f49a:	a806      	add	r0, sp, #24
 800f49c:	f002 f974 	bl	8011788 <uxr_serialize_OBJK_DataReader_Binary>
 800f4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4a2:	f8cd 8000 	str.w	r8, [sp]
 800f4a6:	9401      	str	r4, [sp, #4]
 800f4a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f4ac:	60e3      	str	r3, [r4, #12]
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	f7ff fe35 	bl	800f120 <uxr_common_create_entity>
 800f4b6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f4c2:	f04f 0c12 	mov.w	ip, #18
 800f4c6:	250a      	movs	r5, #10
 800f4c8:	2220      	movs	r2, #32
 800f4ca:	2110      	movs	r1, #16
 800f4cc:	2008      	movs	r0, #8
 800f4ce:	2702      	movs	r7, #2
 800f4d0:	e7cd      	b.n	800f46e <uxr_buffer_create_datareader_bin+0x7a>
 800f4d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f4d6:	e7d9      	b.n	800f48c <uxr_buffer_create_datareader_bin+0x98>
 800f4d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f4dc:	e7d6      	b.n	800f48c <uxr_buffer_create_datareader_bin+0x98>
 800f4de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f4e2:	e7d3      	b.n	800f48c <uxr_buffer_create_datareader_bin+0x98>

0800f4e4 <uxr_object_id>:
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	f88d 1006 	strb.w	r1, [sp, #6]
 800f4ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4f0:	f360 030f 	bfi	r3, r0, #0, #16
 800f4f4:	f362 431f 	bfi	r3, r2, #16, #16
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	b002      	add	sp, #8
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <uxr_object_id_from_raw>:
 800f500:	7843      	ldrb	r3, [r0, #1]
 800f502:	7801      	ldrb	r1, [r0, #0]
 800f504:	b082      	sub	sp, #8
 800f506:	f003 020f 	and.w	r2, r3, #15
 800f50a:	f88d 2006 	strb.w	r2, [sp, #6]
 800f50e:	091b      	lsrs	r3, r3, #4
 800f510:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f514:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f518:	2000      	movs	r0, #0
 800f51a:	f363 000f 	bfi	r0, r3, #0, #16
 800f51e:	f362 401f 	bfi	r0, r2, #16, #16
 800f522:	b002      	add	sp, #8
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop

0800f528 <uxr_object_id_to_raw>:
 800f528:	4602      	mov	r2, r0
 800f52a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f52e:	b082      	sub	sp, #8
 800f530:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f534:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f538:	f881 c000 	strb.w	ip, [r1]
 800f53c:	7048      	strb	r0, [r1, #1]
 800f53e:	b002      	add	sp, #8
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop

0800f544 <uxr_buffer_request_data>:
 800f544:	b530      	push	{r4, r5, lr}
 800f546:	b095      	sub	sp, #84	@ 0x54
 800f548:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f54c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800f54e:	9303      	str	r3, [sp, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	2d00      	cmp	r5, #0
 800f554:	bf14      	ite	ne
 800f556:	2101      	movne	r1, #1
 800f558:	4611      	moveq	r1, r2
 800f55a:	4604      	mov	r4, r0
 800f55c:	f88d 301c 	strb.w	r3, [sp, #28]
 800f560:	f88d 201d 	strb.w	r2, [sp, #29]
 800f564:	f88d 201e 	strb.w	r2, [sp, #30]
 800f568:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f56c:	d021      	beq.n	800f5b2 <uxr_buffer_request_data+0x6e>
 800f56e:	682a      	ldr	r2, [r5, #0]
 800f570:	686b      	ldr	r3, [r5, #4]
 800f572:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800f576:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800f57a:	2210      	movs	r2, #16
 800f57c:	2308      	movs	r3, #8
 800f57e:	2100      	movs	r1, #0
 800f580:	e9cd 3100 	strd	r3, r1, [sp]
 800f584:	4620      	mov	r0, r4
 800f586:	9905      	ldr	r1, [sp, #20]
 800f588:	ab0c      	add	r3, sp, #48	@ 0x30
 800f58a:	f001 f837 	bl	80105fc <uxr_prepare_stream_to_write_submessage>
 800f58e:	b918      	cbnz	r0, 800f598 <uxr_buffer_request_data+0x54>
 800f590:	4604      	mov	r4, r0
 800f592:	4620      	mov	r0, r4
 800f594:	b015      	add	sp, #84	@ 0x54
 800f596:	bd30      	pop	{r4, r5, pc}
 800f598:	9904      	ldr	r1, [sp, #16]
 800f59a:	aa06      	add	r2, sp, #24
 800f59c:	4620      	mov	r0, r4
 800f59e:	f001 f963 	bl	8010868 <uxr_init_base_object_request>
 800f5a2:	a906      	add	r1, sp, #24
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	a80c      	add	r0, sp, #48	@ 0x30
 800f5a8:	f002 fc5e 	bl	8011e68 <uxr_serialize_READ_DATA_Payload>
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	b015      	add	sp, #84	@ 0x54
 800f5b0:	bd30      	pop	{r4, r5, pc}
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	e7e2      	b.n	800f57c <uxr_buffer_request_data+0x38>
 800f5b6:	bf00      	nop

0800f5b8 <uxr_buffer_cancel_data>:
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	b094      	sub	sp, #80	@ 0x50
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9202      	str	r2, [sp, #8]
 800f5c0:	9205      	str	r2, [sp, #20]
 800f5c2:	9301      	str	r3, [sp, #4]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f5ca:	f88d 301e 	strb.w	r3, [sp, #30]
 800f5ce:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800f5d2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800f5d6:	2308      	movs	r3, #8
 800f5d8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	2210      	movs	r2, #16
 800f5e0:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	9103      	str	r1, [sp, #12]
 800f5e6:	f001 f809 	bl	80105fc <uxr_prepare_stream_to_write_submessage>
 800f5ea:	b918      	cbnz	r0, 800f5f4 <uxr_buffer_cancel_data+0x3c>
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	b014      	add	sp, #80	@ 0x50
 800f5f2:	bd10      	pop	{r4, pc}
 800f5f4:	9905      	ldr	r1, [sp, #20]
 800f5f6:	aa06      	add	r2, sp, #24
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f001 f935 	bl	8010868 <uxr_init_base_object_request>
 800f5fe:	a906      	add	r1, sp, #24
 800f600:	4604      	mov	r4, r0
 800f602:	a80c      	add	r0, sp, #48	@ 0x30
 800f604:	f002 fc30 	bl	8011e68 <uxr_serialize_READ_DATA_Payload>
 800f608:	4620      	mov	r0, r4
 800f60a:	b014      	add	sp, #80	@ 0x50
 800f60c:	bd10      	pop	{r4, pc}
 800f60e:	bf00      	nop

0800f610 <read_submessage_format>:
 800f610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f614:	b095      	sub	sp, #84	@ 0x54
 800f616:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800f61a:	b113      	cbz	r3, 800f622 <read_submessage_format+0x12>
 800f61c:	b015      	add	sp, #84	@ 0x54
 800f61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f622:	460c      	mov	r4, r1
 800f624:	4615      	mov	r5, r2
 800f626:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f62a:	4607      	mov	r7, r0
 800f62c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800f62e:	9004      	str	r0, [sp, #16]
 800f630:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800f632:	9005      	str	r0, [sp, #20]
 800f634:	1a52      	subs	r2, r2, r1
 800f636:	a80c      	add	r0, sp, #48	@ 0x30
 800f638:	4699      	mov	r9, r3
 800f63a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800f63e:	f7fc fd2f 	bl	800c0a0 <ucdr_init_buffer>
 800f642:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f646:	a80c      	add	r0, sp, #48	@ 0x30
 800f648:	f7fc fcfe 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 800f64c:	69e2      	ldr	r2, [r4, #28]
 800f64e:	b19a      	cbz	r2, 800f678 <read_submessage_format+0x68>
 800f650:	f1b8 0f07 	cmp.w	r8, #7
 800f654:	f882 9014 	strb.w	r9, [r2, #20]
 800f658:	d040      	beq.n	800f6dc <read_submessage_format+0xcc>
 800f65a:	f1b8 0f08 	cmp.w	r8, #8
 800f65e:	d02e      	beq.n	800f6be <read_submessage_format+0xae>
 800f660:	f1b8 0f06 	cmp.w	r8, #6
 800f664:	d011      	beq.n	800f68a <read_submessage_format+0x7a>
 800f666:	2301      	movs	r3, #1
 800f668:	7513      	strb	r3, [r2, #20]
 800f66a:	4629      	mov	r1, r5
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7fc fd67 	bl	800c140 <ucdr_advance_buffer>
 800f672:	b015      	add	sp, #84	@ 0x54
 800f674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f678:	f1b8 0f07 	cmp.w	r8, #7
 800f67c:	d02e      	beq.n	800f6dc <read_submessage_format+0xcc>
 800f67e:	f1b8 0f08 	cmp.w	r8, #8
 800f682:	d01c      	beq.n	800f6be <read_submessage_format+0xae>
 800f684:	f1b8 0f06 	cmp.w	r8, #6
 800f688:	d1ef      	bne.n	800f66a <read_submessage_format+0x5a>
 800f68a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800f68e:	f1b8 0f00 	cmp.w	r8, #0
 800f692:	d011      	beq.n	800f6b8 <read_submessage_format+0xa8>
 800f694:	ab0c      	add	r3, sp, #48	@ 0x30
 800f696:	e9cd 3500 	strd	r3, r5, [sp]
 800f69a:	2306      	movs	r3, #6
 800f69c:	f88d 3016 	strb.w	r3, [sp, #22]
 800f6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6a4:	9302      	str	r3, [sp, #8]
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	47c0      	blx	r8
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	69e2      	ldr	r2, [r4, #28]
 800f6b4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	d1d4      	bne.n	800f666 <read_submessage_format+0x56>
 800f6bc:	e7d5      	b.n	800f66a <read_submessage_format+0x5a>
 800f6be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d0f8      	beq.n	800f6b8 <read_submessage_format+0xa8>
 800f6c6:	a906      	add	r1, sp, #24
 800f6c8:	a80c      	add	r0, sp, #48	@ 0x30
 800f6ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f6ce:	f002 fc91 	bl	8011ff4 <uxr_deserialize_SampleIdentity>
 800f6d2:	b9a0      	cbnz	r0, 800f6fe <read_submessage_format+0xee>
 800f6d4:	69e2      	ldr	r2, [r4, #28]
 800f6d6:	2a00      	cmp	r2, #0
 800f6d8:	d1c5      	bne.n	800f666 <read_submessage_format+0x56>
 800f6da:	e7c6      	b.n	800f66a <read_submessage_format+0x5a>
 800f6dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6e0:	b13b      	cbz	r3, 800f6f2 <read_submessage_format+0xe2>
 800f6e2:	a906      	add	r1, sp, #24
 800f6e4:	a80c      	add	r0, sp, #48	@ 0x30
 800f6e6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f6ea:	f002 f957 	bl	801199c <uxr_deserialize_BaseObjectRequest>
 800f6ee:	bb60      	cbnz	r0, 800f74a <read_submessage_format+0x13a>
 800f6f0:	69e2      	ldr	r2, [r4, #28]
 800f6f2:	68a3      	ldr	r3, [r4, #8]
 800f6f4:	442b      	add	r3, r5
 800f6f6:	60a3      	str	r3, [r4, #8]
 800f6f8:	2a00      	cmp	r2, #0
 800f6fa:	d1b4      	bne.n	800f666 <read_submessage_format+0x56>
 800f6fc:	e7b5      	b.n	800f66a <read_submessage_format+0x5a>
 800f6fe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f702:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f704:	1a52      	subs	r2, r2, r1
 800f706:	eba8 0803 	sub.w	r8, r8, r3
 800f70a:	a80c      	add	r0, sp, #48	@ 0x30
 800f70c:	f7fc fcc8 	bl	800c0a0 <ucdr_init_buffer>
 800f710:	44a8      	add	r8, r5
 800f712:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f716:	a80c      	add	r0, sp, #48	@ 0x30
 800f718:	f7fc fc96 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 800f71c:	fa1f f888 	uxth.w	r8, r8
 800f720:	ab0c      	add	r3, sp, #48	@ 0x30
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	f8cd 8004 	str.w	r8, [sp, #4]
 800f728:	2108      	movs	r1, #8
 800f72a:	f88d 1016 	strb.w	r1, [sp, #22]
 800f72e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800f732:	9102      	str	r1, [sp, #8]
 800f734:	ab06      	add	r3, sp, #24
 800f736:	4632      	mov	r2, r6
 800f738:	9905      	ldr	r1, [sp, #20]
 800f73a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800f73e:	4638      	mov	r0, r7
 800f740:	47b0      	blx	r6
 800f742:	2301      	movs	r3, #1
 800f744:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f748:	e7c4      	b.n	800f6d4 <read_submessage_format+0xc4>
 800f74a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f74e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f750:	1a52      	subs	r2, r2, r1
 800f752:	a80c      	add	r0, sp, #48	@ 0x30
 800f754:	eba8 0803 	sub.w	r8, r8, r3
 800f758:	f7fc fca2 	bl	800c0a0 <ucdr_init_buffer>
 800f75c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f760:	a80c      	add	r0, sp, #48	@ 0x30
 800f762:	f7fc fc71 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 800f766:	ab0c      	add	r3, sp, #48	@ 0x30
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f76e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f772:	44a8      	add	r8, r5
 800f774:	fa1f f888 	uxth.w	r8, r8
 800f778:	f8cd 8004 	str.w	r8, [sp, #4]
 800f77c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f780:	2107      	movs	r1, #7
 800f782:	f88d 1016 	strb.w	r1, [sp, #22]
 800f786:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800f78a:	9102      	str	r1, [sp, #8]
 800f78c:	4632      	mov	r2, r6
 800f78e:	b29b      	uxth	r3, r3
 800f790:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800f794:	9905      	ldr	r1, [sp, #20]
 800f796:	4638      	mov	r0, r7
 800f798:	47b0      	blx	r6
 800f79a:	2301      	movs	r3, #1
 800f79c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f7a0:	e7a6      	b.n	800f6f0 <read_submessage_format+0xe0>
 800f7a2:	bf00      	nop

0800f7a4 <on_get_fragmentation_info>:
 800f7a4:	b500      	push	{lr}
 800f7a6:	b08b      	sub	sp, #44	@ 0x2c
 800f7a8:	4601      	mov	r1, r0
 800f7aa:	2204      	movs	r2, #4
 800f7ac:	a802      	add	r0, sp, #8
 800f7ae:	f7fc fc77 	bl	800c0a0 <ucdr_init_buffer>
 800f7b2:	f10d 0305 	add.w	r3, sp, #5
 800f7b6:	f10d 0206 	add.w	r2, sp, #6
 800f7ba:	a901      	add	r1, sp, #4
 800f7bc:	a802      	add	r0, sp, #8
 800f7be:	f001 f9d5 	bl	8010b6c <uxr_read_submessage_header>
 800f7c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7c6:	2b0d      	cmp	r3, #13
 800f7c8:	d003      	beq.n	800f7d2 <on_get_fragmentation_info+0x2e>
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	b00b      	add	sp, #44	@ 0x2c
 800f7ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7d6:	f013 0f02 	tst.w	r3, #2
 800f7da:	bf14      	ite	ne
 800f7dc:	2002      	movne	r0, #2
 800f7de:	2001      	moveq	r0, #1
 800f7e0:	b00b      	add	sp, #44	@ 0x2c
 800f7e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7e6:	bf00      	nop

0800f7e8 <read_submessage_get_info>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	2500      	movs	r5, #0
 800f7ec:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f7f6:	460e      	mov	r6, r1
 800f7f8:	a810      	add	r0, sp, #64	@ 0x40
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f800:	f009 f810 	bl	8018824 <memset>
 800f804:	a903      	add	r1, sp, #12
 800f806:	4630      	mov	r0, r6
 800f808:	f002 fa70 	bl	8011cec <uxr_deserialize_GET_INFO_Payload>
 800f80c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f810:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f814:	4620      	mov	r0, r4
 800f816:	f001 f81f 	bl	8010858 <uxr_session_header_offset>
 800f81a:	462b      	mov	r3, r5
 800f81c:	9000      	str	r0, [sp, #0]
 800f81e:	220c      	movs	r2, #12
 800f820:	a905      	add	r1, sp, #20
 800f822:	a808      	add	r0, sp, #32
 800f824:	f7fc fc2a 	bl	800c07c <ucdr_init_buffer_origin_offset>
 800f828:	a910      	add	r1, sp, #64	@ 0x40
 800f82a:	a808      	add	r0, sp, #32
 800f82c:	f002 fad0 	bl	8011dd0 <uxr_serialize_INFO_Payload>
 800f830:	9b08      	ldr	r3, [sp, #32]
 800f832:	462a      	mov	r2, r5
 800f834:	4629      	mov	r1, r5
 800f836:	4620      	mov	r0, r4
 800f838:	f000 ffb8 	bl	80107ac <uxr_stamp_session_header>
 800f83c:	a808      	add	r0, sp, #32
 800f83e:	f7fc fc5b 	bl	800c0f8 <ucdr_buffer_length>
 800f842:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f844:	4602      	mov	r2, r0
 800f846:	a905      	add	r1, sp, #20
 800f848:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f84c:	47a0      	blx	r4
 800f84e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f852:	bd70      	pop	{r4, r5, r6, pc}

0800f854 <write_submessage_acknack.isra.0>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	b092      	sub	sp, #72	@ 0x48
 800f858:	4605      	mov	r5, r0
 800f85a:	460e      	mov	r6, r1
 800f85c:	4614      	mov	r4, r2
 800f85e:	f000 fffb 	bl	8010858 <uxr_session_header_offset>
 800f862:	a905      	add	r1, sp, #20
 800f864:	9000      	str	r0, [sp, #0]
 800f866:	2300      	movs	r3, #0
 800f868:	a80a      	add	r0, sp, #40	@ 0x28
 800f86a:	2211      	movs	r2, #17
 800f86c:	f7fc fc06 	bl	800c07c <ucdr_init_buffer_origin_offset>
 800f870:	2218      	movs	r2, #24
 800f872:	fb02 5404 	mla	r4, r2, r4, r5
 800f876:	2300      	movs	r3, #0
 800f878:	2205      	movs	r2, #5
 800f87a:	3450      	adds	r4, #80	@ 0x50
 800f87c:	210a      	movs	r1, #10
 800f87e:	a80a      	add	r0, sp, #40	@ 0x28
 800f880:	f001 f95a 	bl	8010b38 <uxr_buffer_submessage_header>
 800f884:	a903      	add	r1, sp, #12
 800f886:	4620      	mov	r0, r4
 800f888:	f006 ff46 	bl	8016718 <uxr_compute_acknack>
 800f88c:	ba40      	rev16	r0, r0
 800f88e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f892:	a903      	add	r1, sp, #12
 800f894:	a80a      	add	r0, sp, #40	@ 0x28
 800f896:	f88d 6010 	strb.w	r6, [sp, #16]
 800f89a:	f002 fb09 	bl	8011eb0 <uxr_serialize_ACKNACK_Payload>
 800f89e:	2200      	movs	r2, #0
 800f8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f000 ff81 	bl	80107ac <uxr_stamp_session_header>
 800f8aa:	a80a      	add	r0, sp, #40	@ 0x28
 800f8ac:	f7fc fc24 	bl	800c0f8 <ucdr_buffer_length>
 800f8b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	a905      	add	r1, sp, #20
 800f8b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f8ba:	47a0      	blx	r4
 800f8bc:	b012      	add	sp, #72	@ 0x48
 800f8be:	bd70      	pop	{r4, r5, r6, pc}

0800f8c0 <uxr_init_session>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f8f8 <uxr_init_session+0x38>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f8d2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f8d6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f8da:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f8de:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f8e2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f8e6:	2181      	movs	r1, #129	@ 0x81
 800f8e8:	f000 fecc 	bl	8010684 <uxr_init_session_info>
 800f8ec:	f104 0008 	add.w	r0, r4, #8
 800f8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8f4:	f001 b83c 	b.w	8010970 <uxr_init_stream_storage>
	...

0800f900 <uxr_set_status_callback>:
 800f900:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop

0800f908 <uxr_set_topic_callback>:
 800f908:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop

0800f910 <uxr_set_request_callback>:
 800f910:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop

0800f918 <uxr_set_reply_callback>:
 800f918:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop

0800f920 <uxr_create_output_best_effort_stream>:
 800f920:	b510      	push	{r4, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	e9cd 2100 	strd	r2, r1, [sp]
 800f928:	4604      	mov	r4, r0
 800f92a:	f000 ff95 	bl	8010858 <uxr_session_header_offset>
 800f92e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f932:	4603      	mov	r3, r0
 800f934:	f104 0008 	add.w	r0, r4, #8
 800f938:	b004      	add	sp, #16
 800f93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f93e:	f001 b861 	b.w	8010a04 <uxr_add_output_best_effort_buffer>
 800f942:	bf00      	nop

0800f944 <uxr_create_output_reliable_stream>:
 800f944:	b510      	push	{r4, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f94c:	4604      	mov	r4, r0
 800f94e:	9303      	str	r3, [sp, #12]
 800f950:	f000 ff82 	bl	8010858 <uxr_session_header_offset>
 800f954:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f958:	9000      	str	r0, [sp, #0]
 800f95a:	9905      	ldr	r1, [sp, #20]
 800f95c:	f104 0008 	add.w	r0, r4, #8
 800f960:	f001 f864 	bl	8010a2c <uxr_add_output_reliable_buffer>
 800f964:	2200      	movs	r2, #0
 800f966:	b2c3      	uxtb	r3, r0
 800f968:	f363 0207 	bfi	r2, r3, #0, #8
 800f96c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f970:	f363 220f 	bfi	r2, r3, #8, #8
 800f974:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f978:	f363 4217 	bfi	r2, r3, #16, #8
 800f97c:	0e03      	lsrs	r3, r0, #24
 800f97e:	f363 621f 	bfi	r2, r3, #24, #8
 800f982:	4610      	mov	r0, r2
 800f984:	b008      	add	sp, #32
 800f986:	bd10      	pop	{r4, pc}

0800f988 <uxr_create_input_best_effort_stream>:
 800f988:	b082      	sub	sp, #8
 800f98a:	3008      	adds	r0, #8
 800f98c:	b002      	add	sp, #8
 800f98e:	f001 b867 	b.w	8010a60 <uxr_add_input_best_effort_buffer>
 800f992:	bf00      	nop

0800f994 <uxr_create_input_reliable_stream>:
 800f994:	b510      	push	{r4, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	4c0b      	ldr	r4, [pc, #44]	@ (800f9c8 <uxr_create_input_reliable_stream+0x34>)
 800f99a:	9400      	str	r4, [sp, #0]
 800f99c:	3008      	adds	r0, #8
 800f99e:	f001 f875 	bl	8010a8c <uxr_add_input_reliable_buffer>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	b2c3      	uxtb	r3, r0
 800f9a6:	f363 0207 	bfi	r2, r3, #0, #8
 800f9aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f9ae:	f363 220f 	bfi	r2, r3, #8, #8
 800f9b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f9b6:	f363 4217 	bfi	r2, r3, #16, #8
 800f9ba:	0e03      	lsrs	r3, r0, #24
 800f9bc:	f363 621f 	bfi	r2, r3, #24, #8
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	b004      	add	sp, #16
 800f9c4:	bd10      	pop	{r4, pc}
 800f9c6:	bf00      	nop
 800f9c8:	0800f7a5 	.word	0x0800f7a5

0800f9cc <uxr_epoch_nanos>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	f001 f912 	bl	8010bf8 <uxr_nanos>
 800f9d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f9d8:	1ac0      	subs	r0, r0, r3
 800f9da:	eb61 0102 	sbc.w	r1, r1, r2
 800f9de:	bd10      	pop	{r4, pc}

0800f9e0 <uxr_flash_output_streams>:
 800f9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e4:	7e03      	ldrb	r3, [r0, #24]
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d035      	beq.n	800fa5a <uxr_flash_output_streams+0x7a>
 800f9ee:	f04f 0900 	mov.w	r9, #0
 800f9f2:	4648      	mov	r0, r9
 800f9f4:	f10d 0802 	add.w	r8, sp, #2
 800f9f8:	af03      	add	r7, sp, #12
 800f9fa:	ae02      	add	r6, sp, #8
 800f9fc:	e006      	b.n	800fa0c <uxr_flash_output_streams+0x2c>
 800f9fe:	7e23      	ldrb	r3, [r4, #24]
 800fa00:	f109 0901 	add.w	r9, r9, #1
 800fa04:	fa5f f089 	uxtb.w	r0, r9
 800fa08:	4283      	cmp	r3, r0
 800fa0a:	d926      	bls.n	800fa5a <uxr_flash_output_streams+0x7a>
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	4611      	mov	r1, r2
 800fa10:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800fa14:	f000 ff58 	bl	80108c8 <uxr_stream_id>
 800fa18:	3508      	adds	r5, #8
 800fa1a:	4684      	mov	ip, r0
 800fa1c:	4643      	mov	r3, r8
 800fa1e:	463a      	mov	r2, r7
 800fa20:	4631      	mov	r1, r6
 800fa22:	4628      	mov	r0, r5
 800fa24:	f8cd c004 	str.w	ip, [sp, #4]
 800fa28:	f006 fefc 	bl	8016824 <uxr_prepare_best_effort_buffer_to_send>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d0e6      	beq.n	800f9fe <uxr_flash_output_streams+0x1e>
 800fa30:	9b02      	ldr	r3, [sp, #8]
 800fa32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fa36:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 feb6 	bl	80107ac <uxr_stamp_session_header>
 800fa40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa42:	9a03      	ldr	r2, [sp, #12]
 800fa44:	685d      	ldr	r5, [r3, #4]
 800fa46:	6818      	ldr	r0, [r3, #0]
 800fa48:	9902      	ldr	r1, [sp, #8]
 800fa4a:	47a8      	blx	r5
 800fa4c:	f109 0901 	add.w	r9, r9, #1
 800fa50:	7e23      	ldrb	r3, [r4, #24]
 800fa52:	fa5f f089 	uxtb.w	r0, r9
 800fa56:	4283      	cmp	r3, r0
 800fa58:	d8d8      	bhi.n	800fa0c <uxr_flash_output_streams+0x2c>
 800fa5a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fa5e:	b38b      	cbz	r3, 800fac4 <uxr_flash_output_streams+0xe4>
 800fa60:	f04f 0900 	mov.w	r9, #0
 800fa64:	f10d 0802 	add.w	r8, sp, #2
 800fa68:	af03      	add	r7, sp, #12
 800fa6a:	ae02      	add	r6, sp, #8
 800fa6c:	4648      	mov	r0, r9
 800fa6e:	2201      	movs	r2, #1
 800fa70:	2102      	movs	r1, #2
 800fa72:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800fa76:	f000 ff27 	bl	80108c8 <uxr_stream_id>
 800fa7a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800fa7e:	3520      	adds	r5, #32
 800fa80:	9001      	str	r0, [sp, #4]
 800fa82:	e00d      	b.n	800faa0 <uxr_flash_output_streams+0xc0>
 800fa84:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fa88:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fa8c:	9b02      	ldr	r3, [sp, #8]
 800fa8e:	f000 fe8d 	bl	80107ac <uxr_stamp_session_header>
 800fa92:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa94:	9a03      	ldr	r2, [sp, #12]
 800fa96:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fa9a:	9902      	ldr	r1, [sp, #8]
 800fa9c:	6818      	ldr	r0, [r3, #0]
 800fa9e:	47d0      	blx	sl
 800faa0:	4643      	mov	r3, r8
 800faa2:	463a      	mov	r2, r7
 800faa4:	4631      	mov	r1, r6
 800faa6:	4628      	mov	r0, r5
 800faa8:	f007 f8da 	bl	8016c60 <uxr_prepare_next_reliable_buffer_to_send>
 800faac:	4603      	mov	r3, r0
 800faae:	4620      	mov	r0, r4
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e7      	bne.n	800fa84 <uxr_flash_output_streams+0xa4>
 800fab4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fab8:	f109 0901 	add.w	r9, r9, #1
 800fabc:	fa5f f089 	uxtb.w	r0, r9
 800fac0:	4283      	cmp	r3, r0
 800fac2:	d8d4      	bhi.n	800fa6e <uxr_flash_output_streams+0x8e>
 800fac4:	b004      	add	sp, #16
 800fac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faca:	bf00      	nop

0800facc <read_submessage_info>:
 800facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad0:	460d      	mov	r5, r1
 800fad2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fad6:	4669      	mov	r1, sp
 800fad8:	4607      	mov	r7, r0
 800fada:	4628      	mov	r0, r5
 800fadc:	f002 f814 	bl	8011b08 <uxr_deserialize_BaseObjectReply>
 800fae0:	a902      	add	r1, sp, #8
 800fae2:	4604      	mov	r4, r0
 800fae4:	4628      	mov	r0, r5
 800fae6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800faea:	f7fb f97f 	bl	800adec <ucdr_deserialize_bool>
 800faee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800faf2:	4004      	ands	r4, r0
 800faf4:	b2e4      	uxtb	r4, r4
 800faf6:	b95b      	cbnz	r3, 800fb10 <read_submessage_info+0x44>
 800faf8:	a987      	add	r1, sp, #540	@ 0x21c
 800fafa:	4628      	mov	r0, r5
 800fafc:	f7fb f976 	bl	800adec <ucdr_deserialize_bool>
 800fb00:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800fb04:	4606      	mov	r6, r0
 800fb06:	b94b      	cbnz	r3, 800fb1c <read_submessage_info+0x50>
 800fb08:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb10:	a903      	add	r1, sp, #12
 800fb12:	4628      	mov	r0, r5
 800fb14:	f001 fea0 	bl	8011858 <uxr_deserialize_ObjectVariant>
 800fb18:	4004      	ands	r4, r0
 800fb1a:	e7ed      	b.n	800faf8 <read_submessage_info+0x2c>
 800fb1c:	a988      	add	r1, sp, #544	@ 0x220
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f7fb f992 	bl	800ae48 <ucdr_deserialize_uint8_t>
 800fb24:	4234      	tst	r4, r6
 800fb26:	d0ef      	beq.n	800fb08 <read_submessage_info+0x3c>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d0ed      	beq.n	800fb08 <read_submessage_info+0x3c>
 800fb2c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800fb30:	2b0d      	cmp	r3, #13
 800fb32:	d1e9      	bne.n	800fb08 <read_submessage_info+0x3c>
 800fb34:	a98a      	add	r1, sp, #552	@ 0x228
 800fb36:	4628      	mov	r0, r5
 800fb38:	f7fb ff2c 	bl	800b994 <ucdr_deserialize_int16_t>
 800fb3c:	b140      	cbz	r0, 800fb50 <read_submessage_info+0x84>
 800fb3e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dd07      	ble.n	800fb56 <read_submessage_info+0x8a>
 800fb46:	f1b8 0f00 	cmp.w	r8, #0
 800fb4a:	bf14      	ite	ne
 800fb4c:	2001      	movne	r0, #1
 800fb4e:	2002      	moveq	r0, #2
 800fb50:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800fb54:	e7d8      	b.n	800fb08 <read_submessage_info+0x3c>
 800fb56:	2000      	movs	r0, #0
 800fb58:	e7fa      	b.n	800fb50 <read_submessage_info+0x84>
 800fb5a:	bf00      	nop

0800fb5c <read_submessage_list>:
 800fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb60:	b097      	sub	sp, #92	@ 0x5c
 800fb62:	4ec1      	ldr	r6, [pc, #772]	@ (800fe68 <read_submessage_list+0x30c>)
 800fb64:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb66:	4604      	mov	r4, r0
 800fb68:	460d      	mov	r5, r1
 800fb6a:	f04f 0801 	mov.w	r8, #1
 800fb6e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800fb72:	aa0c      	add	r2, sp, #48	@ 0x30
 800fb74:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f000 fff7 	bl	8010b6c <uxr_read_submessage_header>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	f000 813e 	beq.w	800fe00 <read_submessage_list+0x2a4>
 800fb84:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800fb88:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800fb8c:	3b02      	subs	r3, #2
 800fb8e:	2b0d      	cmp	r3, #13
 800fb90:	d8ed      	bhi.n	800fb6e <read_submessage_list+0x12>
 800fb92:	a101      	add	r1, pc, #4	@ (adr r1, 800fb98 <read_submessage_list+0x3c>)
 800fb94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb98:	0800fdf7 	.word	0x0800fdf7
 800fb9c:	0800fb6f 	.word	0x0800fb6f
 800fba0:	0800fde7 	.word	0x0800fde7
 800fba4:	0800fd85 	.word	0x0800fd85
 800fba8:	0800fd7b 	.word	0x0800fd7b
 800fbac:	0800fb6f 	.word	0x0800fb6f
 800fbb0:	0800fb6f 	.word	0x0800fb6f
 800fbb4:	0800fcdb 	.word	0x0800fcdb
 800fbb8:	0800fc6b 	.word	0x0800fc6b
 800fbbc:	0800fc2b 	.word	0x0800fc2b
 800fbc0:	0800fb6f 	.word	0x0800fb6f
 800fbc4:	0800fb6f 	.word	0x0800fb6f
 800fbc8:	0800fb6f 	.word	0x0800fb6f
 800fbcc:	0800fbd1 	.word	0x0800fbd1
 800fbd0:	a910      	add	r1, sp, #64	@ 0x40
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f002 f9bc 	bl	8011f50 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fbd8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800fbdc:	f1b9 0f00 	cmp.w	r9, #0
 800fbe0:	f000 8116 	beq.w	800fe10 <read_submessage_list+0x2b4>
 800fbe4:	f001 f808 	bl	8010bf8 <uxr_nanos>
 800fbe8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800fbea:	4602      	mov	r2, r0
 800fbec:	460b      	mov	r3, r1
 800fbee:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	468c      	mov	ip, r1
 800fbf4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fbf8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800fbfc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fbfe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800fc00:	468c      	mov	ip, r1
 800fc02:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fc06:	46e2      	mov	sl, ip
 800fc08:	46bc      	mov	ip, r7
 800fc0a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800fc0e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800fc12:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800fc16:	e9cd 7100 	strd	r7, r1, [sp]
 800fc1a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800fc1e:	9106      	str	r1, [sp, #24]
 800fc20:	4620      	mov	r0, r4
 800fc22:	47c8      	blx	r9
 800fc24:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800fc28:	e7a1      	b.n	800fb6e <read_submessage_list+0x12>
 800fc2a:	a910      	add	r1, sp, #64	@ 0x40
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	f002 f97d 	bl	8011f2c <uxr_deserialize_HEARTBEAT_Payload>
 800fc32:	2100      	movs	r1, #0
 800fc34:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fc38:	f000 fe70 	bl	801091c <uxr_stream_id_from_raw>
 800fc3c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fc40:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fc42:	4639      	mov	r1, r7
 800fc44:	f104 0008 	add.w	r0, r4, #8
 800fc48:	f000 ff56 	bl	8010af8 <uxr_get_input_reliable_stream>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d08e      	beq.n	800fb6e <read_submessage_list+0x12>
 800fc50:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fc54:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fc58:	f006 fd52 	bl	8016700 <uxr_process_heartbeat>
 800fc5c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800fc60:	463a      	mov	r2, r7
 800fc62:	4620      	mov	r0, r4
 800fc64:	f7ff fdf6 	bl	800f854 <write_submessage_acknack.isra.0>
 800fc68:	e781      	b.n	800fb6e <read_submessage_list+0x12>
 800fc6a:	a910      	add	r1, sp, #64	@ 0x40
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	f002 f935 	bl	8011edc <uxr_deserialize_ACKNACK_Payload>
 800fc72:	2100      	movs	r1, #0
 800fc74:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fc78:	f000 fe50 	bl	801091c <uxr_stream_id_from_raw>
 800fc7c:	900d      	str	r0, [sp, #52]	@ 0x34
 800fc7e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fc82:	f104 0008 	add.w	r0, r4, #8
 800fc86:	f000 ff23 	bl	8010ad0 <uxr_get_output_reliable_stream>
 800fc8a:	4607      	mov	r7, r0
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	f43f af6e 	beq.w	800fb6e <read_submessage_list+0x12>
 800fc92:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800fc96:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fc9a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fc9e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fca2:	b289      	uxth	r1, r1
 800fca4:	f007 f886 	bl	8016db4 <uxr_process_acknack>
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f007 f843 	bl	8016d34 <uxr_begin_output_nack_buffer_it>
 800fcae:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fcb2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800fcb6:	e006      	b.n	800fcc6 <read_submessage_list+0x16a>
 800fcb8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fcba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fcbc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fcc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fcc2:	6818      	ldr	r0, [r3, #0]
 800fcc4:	47c8      	blx	r9
 800fcc6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fcca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fccc:	4651      	mov	r1, sl
 800fcce:	4638      	mov	r0, r7
 800fcd0:	f007 f832 	bl	8016d38 <uxr_next_reliable_nack_buffer_to_send>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d1ef      	bne.n	800fcb8 <read_submessage_list+0x15c>
 800fcd8:	e749      	b.n	800fb6e <read_submessage_list+0x12>
 800fcda:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fcde:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fce2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fce6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800fcea:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800fcee:	4651      	mov	r1, sl
 800fcf0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fcf4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fcf8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fcfc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fd00:	4628      	mov	r0, r5
 800fd02:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800fd06:	f001 fe49 	bl	801199c <uxr_deserialize_BaseObjectRequest>
 800fd0a:	4650      	mov	r0, sl
 800fd0c:	a90f      	add	r1, sp, #60	@ 0x3c
 800fd0e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fd12:	f000 fdc7 	bl	80108a4 <uxr_parse_base_object_request>
 800fd16:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fd1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fd1c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fd20:	9110      	str	r1, [sp, #64]	@ 0x40
 800fd22:	3f04      	subs	r7, #4
 800fd24:	f009 090e 	and.w	r9, r9, #14
 800fd28:	b2bf      	uxth	r7, r7
 800fd2a:	f1bb 0f00 	cmp.w	fp, #0
 800fd2e:	d006      	beq.n	800fd3e <read_submessage_list+0x1e2>
 800fd30:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	4652      	mov	r2, sl
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	47d8      	blx	fp
 800fd3e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fd40:	b16a      	cbz	r2, 800fd5e <read_submessage_list+0x202>
 800fd42:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fd44:	2100      	movs	r1, #0
 800fd46:	3802      	subs	r0, #2
 800fd48:	e002      	b.n	800fd50 <read_submessage_list+0x1f4>
 800fd4a:	3101      	adds	r1, #1
 800fd4c:	4291      	cmp	r1, r2
 800fd4e:	d006      	beq.n	800fd5e <read_submessage_list+0x202>
 800fd50:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fd54:	4553      	cmp	r3, sl
 800fd56:	d1f8      	bne.n	800fd4a <read_submessage_list+0x1ee>
 800fd58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	545a      	strb	r2, [r3, r1]
 800fd5e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fd62:	9102      	str	r1, [sp, #8]
 800fd64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fd66:	9101      	str	r1, [sp, #4]
 800fd68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fd6a:	9100      	str	r1, [sp, #0]
 800fd6c:	464b      	mov	r3, r9
 800fd6e:	463a      	mov	r2, r7
 800fd70:	4629      	mov	r1, r5
 800fd72:	4620      	mov	r0, r4
 800fd74:	f7ff fc4c 	bl	800f610 <read_submessage_format>
 800fd78:	e6f9      	b.n	800fb6e <read_submessage_list+0x12>
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f7ff fea5 	bl	800facc <read_submessage_info>
 800fd82:	e6f4      	b.n	800fb6e <read_submessage_list+0x12>
 800fd84:	2a00      	cmp	r2, #0
 800fd86:	d03e      	beq.n	800fe06 <read_submessage_list+0x2aa>
 800fd88:	a910      	add	r1, sp, #64	@ 0x40
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	f002 f802 	bl	8011d94 <uxr_deserialize_STATUS_Payload>
 800fd90:	a90e      	add	r1, sp, #56	@ 0x38
 800fd92:	aa0d      	add	r2, sp, #52	@ 0x34
 800fd94:	a810      	add	r0, sp, #64	@ 0x40
 800fd96:	f000 fd85 	bl	80108a4 <uxr_parse_base_object_request>
 800fd9a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800fd9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fda0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800fda4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800fda8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fdaa:	f1ba 0f00 	cmp.w	sl, #0
 800fdae:	d006      	beq.n	800fdbe <read_submessage_list+0x262>
 800fdb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	463a      	mov	r2, r7
 800fdb8:	464b      	mov	r3, r9
 800fdba:	4620      	mov	r0, r4
 800fdbc:	47d0      	blx	sl
 800fdbe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fdc0:	2a00      	cmp	r2, #0
 800fdc2:	f43f aed4 	beq.w	800fb6e <read_submessage_list+0x12>
 800fdc6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fdc8:	2100      	movs	r1, #0
 800fdca:	3802      	subs	r0, #2
 800fdcc:	e003      	b.n	800fdd6 <read_submessage_list+0x27a>
 800fdce:	3101      	adds	r1, #1
 800fdd0:	4291      	cmp	r1, r2
 800fdd2:	f43f aecc 	beq.w	800fb6e <read_submessage_list+0x12>
 800fdd6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fdda:	42bb      	cmp	r3, r7
 800fddc:	d1f7      	bne.n	800fdce <read_submessage_list+0x272>
 800fdde:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fde0:	f803 9001 	strb.w	r9, [r3, r1]
 800fde4:	e6c3      	b.n	800fb6e <read_submessage_list+0x12>
 800fde6:	2a00      	cmp	r2, #0
 800fde8:	f47f aec1 	bne.w	800fb6e <read_submessage_list+0x12>
 800fdec:	4629      	mov	r1, r5
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f000 fc9e 	bl	8010730 <uxr_read_create_session_status>
 800fdf4:	e6bb      	b.n	800fb6e <read_submessage_list+0x12>
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f7ff fcf5 	bl	800f7e8 <read_submessage_get_info>
 800fdfe:	e6b6      	b.n	800fb6e <read_submessage_list+0x12>
 800fe00:	b017      	add	sp, #92	@ 0x5c
 800fe02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe06:	4629      	mov	r1, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 fc9d 	bl	8010748 <uxr_read_delete_session_status>
 800fe0e:	e6ae      	b.n	800fb6e <read_submessage_list+0x12>
 800fe10:	f000 fef2 	bl	8010bf8 <uxr_nanos>
 800fe14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fe16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fe18:	464f      	mov	r7, r9
 800fe1a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fe1e:	1812      	adds	r2, r2, r0
 800fe20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe22:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fe24:	eb47 0101 	adc.w	r1, r7, r1
 800fe28:	464f      	mov	r7, r9
 800fe2a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fe2e:	463b      	mov	r3, r7
 800fe30:	4684      	mov	ip, r0
 800fe32:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800fe36:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fe3a:	eb1c 0c00 	adds.w	ip, ip, r0
 800fe3e:	464f      	mov	r7, r9
 800fe40:	eb43 0307 	adc.w	r3, r3, r7
 800fe44:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fe48:	eb61 0303 	sbc.w	r3, r1, r3
 800fe4c:	0fda      	lsrs	r2, r3, #31
 800fe4e:	eb12 020c 	adds.w	r2, r2, ip
 800fe52:	f143 0300 	adc.w	r3, r3, #0
 800fe56:	0852      	lsrs	r2, r2, #1
 800fe58:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fe5c:	105b      	asrs	r3, r3, #1
 800fe5e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800fe62:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800fe66:	e6dd      	b.n	800fc24 <read_submessage_list+0xc8>
 800fe68:	3b9aca00 	.word	0x3b9aca00

0800fe6c <listen_message_reliably>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	1e0b      	subs	r3, r1, #0
 800fe72:	b09d      	sub	sp, #116	@ 0x74
 800fe74:	bfb8      	it	lt
 800fe76:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fe7a:	4680      	mov	r8, r0
 800fe7c:	9305      	str	r3, [sp, #20]
 800fe7e:	f000 fea1 	bl	8010bc4 <uxr_millis>
 800fe82:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fe86:	4681      	mov	r9, r0
 800fe88:	2a00      	cmp	r2, #0
 800fe8a:	f000 80a1 	beq.w	800ffd0 <listen_message_reliably+0x164>
 800fe8e:	2600      	movs	r6, #0
 800fe90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fe94:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fe98:	9303      	str	r3, [sp, #12]
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	460f      	mov	r7, r1
 800fe9e:	e00f      	b.n	800fec0 <listen_message_reliably+0x54>
 800fea0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fea4:	9903      	ldr	r1, [sp, #12]
 800fea6:	455a      	cmp	r2, fp
 800fea8:	f106 0601 	add.w	r6, r6, #1
 800feac:	eb73 0101 	sbcs.w	r1, r3, r1
 800feb0:	b2f0      	uxtb	r0, r6
 800feb2:	da01      	bge.n	800feb8 <listen_message_reliably+0x4c>
 800feb4:	4693      	mov	fp, r2
 800feb6:	9303      	str	r3, [sp, #12]
 800feb8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800febc:	4283      	cmp	r3, r0
 800febe:	d960      	bls.n	800ff82 <listen_message_reliably+0x116>
 800fec0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fec4:	2102      	movs	r1, #2
 800fec6:	2201      	movs	r2, #1
 800fec8:	f000 fcfe 	bl	80108c8 <uxr_stream_id>
 800fecc:	00e4      	lsls	r4, r4, #3
 800fece:	f104 0520 	add.w	r5, r4, #32
 800fed2:	4445      	add	r5, r8
 800fed4:	4601      	mov	r1, r0
 800fed6:	463b      	mov	r3, r7
 800fed8:	464a      	mov	r2, r9
 800feda:	4628      	mov	r0, r5
 800fedc:	9109      	str	r1, [sp, #36]	@ 0x24
 800fede:	f006 feff 	bl	8016ce0 <uxr_update_output_stream_heartbeat_timestamp>
 800fee2:	eb08 0304 	add.w	r3, r8, r4
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d0da      	beq.n	800fea0 <listen_message_reliably+0x34>
 800feea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800feee:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fef2:	9304      	str	r3, [sp, #16]
 800fef4:	4640      	mov	r0, r8
 800fef6:	f000 fcaf 	bl	8010858 <uxr_session_header_offset>
 800fefa:	3501      	adds	r5, #1
 800fefc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800ff00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ff04:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800ff08:	2300      	movs	r3, #0
 800ff0a:	2211      	movs	r2, #17
 800ff0c:	9000      	str	r0, [sp, #0]
 800ff0e:	a90c      	add	r1, sp, #48	@ 0x30
 800ff10:	4650      	mov	r0, sl
 800ff12:	f7fc f8b3 	bl	800c07c <ucdr_init_buffer_origin_offset>
 800ff16:	2300      	movs	r3, #0
 800ff18:	2205      	movs	r2, #5
 800ff1a:	210b      	movs	r1, #11
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	f000 fe0b 	bl	8010b38 <uxr_buffer_submessage_header>
 800ff22:	8968      	ldrh	r0, [r5, #10]
 800ff24:	2101      	movs	r1, #1
 800ff26:	f006 ff9d 	bl	8016e64 <uxr_seq_num_add>
 800ff2a:	892b      	ldrh	r3, [r5, #8]
 800ff2c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ff30:	4602      	mov	r2, r0
 800ff32:	9b04      	ldr	r3, [sp, #16]
 800ff34:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ff38:	a90a      	add	r1, sp, #40	@ 0x28
 800ff3a:	4650      	mov	r0, sl
 800ff3c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800ff40:	f001 ffe0 	bl	8011f04 <uxr_serialize_HEARTBEAT_Payload>
 800ff44:	2200      	movs	r2, #0
 800ff46:	4611      	mov	r1, r2
 800ff48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ff4a:	4640      	mov	r0, r8
 800ff4c:	f000 fc2e 	bl	80107ac <uxr_stamp_session_header>
 800ff50:	4650      	mov	r0, sl
 800ff52:	f7fc f8d1 	bl	800c0f8 <ucdr_buffer_length>
 800ff56:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	a90c      	add	r1, sp, #48	@ 0x30
 800ff5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ff62:	4444      	add	r4, r8
 800ff64:	47a8      	blx	r5
 800ff66:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800ff6a:	9903      	ldr	r1, [sp, #12]
 800ff6c:	455a      	cmp	r2, fp
 800ff6e:	f106 0601 	add.w	r6, r6, #1
 800ff72:	eb73 0101 	sbcs.w	r1, r3, r1
 800ff76:	b2f0      	uxtb	r0, r6
 800ff78:	db9c      	blt.n	800feb4 <listen_message_reliably+0x48>
 800ff7a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ff7e:	4283      	cmp	r3, r0
 800ff80:	d89e      	bhi.n	800fec0 <listen_message_reliably+0x54>
 800ff82:	9a03      	ldr	r2, [sp, #12]
 800ff84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	bf08      	it	eq
 800ff8c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800ff90:	d01e      	beq.n	800ffd0 <listen_message_reliably+0x164>
 800ff92:	ebab 0309 	sub.w	r3, fp, r9
 800ff96:	9905      	ldr	r1, [sp, #20]
 800ff98:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	bf08      	it	eq
 800ffa0:	2301      	moveq	r3, #1
 800ffa2:	4299      	cmp	r1, r3
 800ffa4:	bfa8      	it	ge
 800ffa6:	4619      	movge	r1, r3
 800ffa8:	6894      	ldr	r4, [r2, #8]
 800ffaa:	6810      	ldr	r0, [r2, #0]
 800ffac:	4689      	mov	r9, r1
 800ffae:	460b      	mov	r3, r1
 800ffb0:	aa08      	add	r2, sp, #32
 800ffb2:	a907      	add	r1, sp, #28
 800ffb4:	47a0      	blx	r4
 800ffb6:	b968      	cbnz	r0, 800ffd4 <listen_message_reliably+0x168>
 800ffb8:	9b05      	ldr	r3, [sp, #20]
 800ffba:	eba3 0309 	sub.w	r3, r3, r9
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	9305      	str	r3, [sp, #20]
 800ffc2:	f73f af5c 	bgt.w	800fe7e <listen_message_reliably+0x12>
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4620      	mov	r0, r4
 800ffca:	b01d      	add	sp, #116	@ 0x74
 800ffcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd0:	9b05      	ldr	r3, [sp, #20]
 800ffd2:	e7e0      	b.n	800ff96 <listen_message_reliably+0x12a>
 800ffd4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ffd8:	4604      	mov	r4, r0
 800ffda:	a80c      	add	r0, sp, #48	@ 0x30
 800ffdc:	f7fc f860 	bl	800c0a0 <ucdr_init_buffer>
 800ffe0:	2500      	movs	r5, #0
 800ffe2:	f10d 031a 	add.w	r3, sp, #26
 800ffe6:	aa06      	add	r2, sp, #24
 800ffe8:	a90c      	add	r1, sp, #48	@ 0x30
 800ffea:	4640      	mov	r0, r8
 800ffec:	f88d 5018 	strb.w	r5, [sp, #24]
 800fff0:	f000 fbf0 	bl	80107d4 <uxr_read_session_header>
 800fff4:	b918      	cbnz	r0, 800fffe <listen_message_reliably+0x192>
 800fff6:	4620      	mov	r0, r4
 800fff8:	b01d      	add	sp, #116	@ 0x74
 800fffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffe:	4629      	mov	r1, r5
 8010000:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010004:	f000 fc8a 	bl	801091c <uxr_stream_id_from_raw>
 8010008:	f3c0 4507 	ubfx	r5, r0, #16, #8
 801000c:	2d01      	cmp	r5, #1
 801000e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010012:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010016:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801001a:	d04b      	beq.n	80100b4 <listen_message_reliably+0x248>
 801001c:	2d02      	cmp	r5, #2
 801001e:	d00f      	beq.n	8010040 <listen_message_reliably+0x1d4>
 8010020:	2d00      	cmp	r5, #0
 8010022:	d1e8      	bne.n	800fff6 <listen_message_reliably+0x18a>
 8010024:	4629      	mov	r1, r5
 8010026:	4628      	mov	r0, r5
 8010028:	f000 fc78 	bl	801091c <uxr_stream_id_from_raw>
 801002c:	a90c      	add	r1, sp, #48	@ 0x30
 801002e:	4602      	mov	r2, r0
 8010030:	4640      	mov	r0, r8
 8010032:	920a      	str	r2, [sp, #40]	@ 0x28
 8010034:	f7ff fd92 	bl	800fb5c <read_submessage_list>
 8010038:	4620      	mov	r0, r4
 801003a:	b01d      	add	sp, #116	@ 0x74
 801003c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010040:	4631      	mov	r1, r6
 8010042:	f108 0008 	add.w	r0, r8, #8
 8010046:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801004a:	f000 fd55 	bl	8010af8 <uxr_get_input_reliable_stream>
 801004e:	4607      	mov	r7, r0
 8010050:	b338      	cbz	r0, 80100a2 <listen_message_reliably+0x236>
 8010052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010054:	9203      	str	r2, [sp, #12]
 8010056:	a80c      	add	r0, sp, #48	@ 0x30
 8010058:	f7fc f852 	bl	800c100 <ucdr_buffer_remaining>
 801005c:	4603      	mov	r3, r0
 801005e:	f10d 0019 	add.w	r0, sp, #25
 8010062:	9000      	str	r0, [sp, #0]
 8010064:	9a03      	ldr	r2, [sp, #12]
 8010066:	4651      	mov	r1, sl
 8010068:	4638      	mov	r0, r7
 801006a:	f006 fa4f 	bl	801650c <uxr_receive_reliable_message>
 801006e:	b1c0      	cbz	r0, 80100a2 <listen_message_reliably+0x236>
 8010070:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010074:	b393      	cbz	r3, 80100dc <listen_message_reliably+0x270>
 8010076:	ad14      	add	r5, sp, #80	@ 0x50
 8010078:	f04f 0a02 	mov.w	sl, #2
 801007c:	e00a      	b.n	8010094 <listen_message_reliably+0x228>
 801007e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010082:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010086:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801008a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801008c:	4629      	mov	r1, r5
 801008e:	4640      	mov	r0, r8
 8010090:	f7ff fd64 	bl	800fb5c <read_submessage_list>
 8010094:	2204      	movs	r2, #4
 8010096:	4629      	mov	r1, r5
 8010098:	4638      	mov	r0, r7
 801009a:	f006 fab7 	bl	801660c <uxr_next_input_reliable_buffer_available>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d1ed      	bne.n	801007e <listen_message_reliably+0x212>
 80100a2:	4640      	mov	r0, r8
 80100a4:	4632      	mov	r2, r6
 80100a6:	4649      	mov	r1, r9
 80100a8:	f7ff fbd4 	bl	800f854 <write_submessage_acknack.isra.0>
 80100ac:	4620      	mov	r0, r4
 80100ae:	b01d      	add	sp, #116	@ 0x74
 80100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b4:	4631      	mov	r1, r6
 80100b6:	f108 0008 	add.w	r0, r8, #8
 80100ba:	f000 fd13 	bl	8010ae4 <uxr_get_input_best_effort_stream>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d099      	beq.n	800fff6 <listen_message_reliably+0x18a>
 80100c2:	4651      	mov	r1, sl
 80100c4:	f006 f98e 	bl	80163e4 <uxr_receive_best_effort_message>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d094      	beq.n	800fff6 <listen_message_reliably+0x18a>
 80100cc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80100d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100d2:	a90c      	add	r1, sp, #48	@ 0x30
 80100d4:	4640      	mov	r0, r8
 80100d6:	f7ff fd41 	bl	800fb5c <read_submessage_list>
 80100da:	e78c      	b.n	800fff6 <listen_message_reliably+0x18a>
 80100dc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80100e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100e2:	a90c      	add	r1, sp, #48	@ 0x30
 80100e4:	4640      	mov	r0, r8
 80100e6:	f7ff fd39 	bl	800fb5c <read_submessage_list>
 80100ea:	e7c4      	b.n	8010076 <listen_message_reliably+0x20a>

080100ec <uxr_run_session_timeout>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4604      	mov	r4, r0
 80100f0:	460d      	mov	r5, r1
 80100f2:	f000 fd67 	bl	8010bc4 <uxr_millis>
 80100f6:	4606      	mov	r6, r0
 80100f8:	4620      	mov	r0, r4
 80100fa:	f7ff fc71 	bl	800f9e0 <uxr_flash_output_streams>
 80100fe:	4629      	mov	r1, r5
 8010100:	4620      	mov	r0, r4
 8010102:	f7ff feb3 	bl	800fe6c <listen_message_reliably>
 8010106:	f000 fd5d 	bl	8010bc4 <uxr_millis>
 801010a:	1b83      	subs	r3, r0, r6
 801010c:	1ae9      	subs	r1, r5, r3
 801010e:	2900      	cmp	r1, #0
 8010110:	dcf6      	bgt.n	8010100 <uxr_run_session_timeout+0x14>
 8010112:	f104 0008 	add.w	r0, r4, #8
 8010116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801011a:	f000 bcf7 	b.w	8010b0c <uxr_output_streams_confirmed>
 801011e:	bf00      	nop

08010120 <uxr_run_session_until_data>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	4604      	mov	r4, r0
 8010124:	460d      	mov	r5, r1
 8010126:	f000 fd4d 	bl	8010bc4 <uxr_millis>
 801012a:	4606      	mov	r6, r0
 801012c:	4620      	mov	r0, r4
 801012e:	f7ff fc57 	bl	800f9e0 <uxr_flash_output_streams>
 8010132:	2300      	movs	r3, #0
 8010134:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010138:	4629      	mov	r1, r5
 801013a:	e005      	b.n	8010148 <uxr_run_session_until_data+0x28>
 801013c:	f000 fd42 	bl	8010bc4 <uxr_millis>
 8010140:	1b83      	subs	r3, r0, r6
 8010142:	1ae9      	subs	r1, r5, r3
 8010144:	2900      	cmp	r1, #0
 8010146:	dd07      	ble.n	8010158 <uxr_run_session_until_data+0x38>
 8010148:	4620      	mov	r0, r4
 801014a:	f7ff fe8f 	bl	800fe6c <listen_message_reliably>
 801014e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010152:	2800      	cmp	r0, #0
 8010154:	d0f2      	beq.n	801013c <uxr_run_session_until_data+0x1c>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801015c:	bd70      	pop	{r4, r5, r6, pc}
 801015e:	bf00      	nop

08010160 <uxr_run_session_until_confirm_delivery>:
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	4606      	mov	r6, r0
 8010166:	460d      	mov	r5, r1
 8010168:	f000 fd2c 	bl	8010bc4 <uxr_millis>
 801016c:	4607      	mov	r7, r0
 801016e:	4630      	mov	r0, r6
 8010170:	f7ff fc36 	bl	800f9e0 <uxr_flash_output_streams>
 8010174:	2d00      	cmp	r5, #0
 8010176:	f106 0808 	add.w	r8, r6, #8
 801017a:	bfa8      	it	ge
 801017c:	462c      	movge	r4, r5
 801017e:	da07      	bge.n	8010190 <uxr_run_session_until_confirm_delivery+0x30>
 8010180:	e00e      	b.n	80101a0 <uxr_run_session_until_confirm_delivery+0x40>
 8010182:	f7ff fe73 	bl	800fe6c <listen_message_reliably>
 8010186:	f000 fd1d 	bl	8010bc4 <uxr_millis>
 801018a:	1bc3      	subs	r3, r0, r7
 801018c:	1aec      	subs	r4, r5, r3
 801018e:	d407      	bmi.n	80101a0 <uxr_run_session_until_confirm_delivery+0x40>
 8010190:	4640      	mov	r0, r8
 8010192:	f000 fcbb 	bl	8010b0c <uxr_output_streams_confirmed>
 8010196:	4603      	mov	r3, r0
 8010198:	4621      	mov	r1, r4
 801019a:	4630      	mov	r0, r6
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0f0      	beq.n	8010182 <uxr_run_session_until_confirm_delivery+0x22>
 80101a0:	4640      	mov	r0, r8
 80101a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101a6:	f000 bcb1 	b.w	8010b0c <uxr_output_streams_confirmed>
 80101aa:	bf00      	nop

080101ac <uxr_run_session_until_all_status>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	9c08      	ldr	r4, [sp, #32]
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	4691      	mov	r9, r2
 80101b8:	461d      	mov	r5, r3
 80101ba:	f7ff fc11 	bl	800f9e0 <uxr_flash_output_streams>
 80101be:	b124      	cbz	r4, 80101ca <uxr_run_session_until_all_status+0x1e>
 80101c0:	4622      	mov	r2, r4
 80101c2:	21ff      	movs	r1, #255	@ 0xff
 80101c4:	4628      	mov	r0, r5
 80101c6:	f008 fb2d 	bl	8018824 <memset>
 80101ca:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80101ce:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80101d0:	f000 fcf8 	bl	8010bc4 <uxr_millis>
 80101d4:	3d01      	subs	r5, #1
 80101d6:	f1a9 0902 	sub.w	r9, r9, #2
 80101da:	4680      	mov	r8, r0
 80101dc:	4639      	mov	r1, r7
 80101de:	4630      	mov	r0, r6
 80101e0:	f7ff fe44 	bl	800fe6c <listen_message_reliably>
 80101e4:	f000 fcee 	bl	8010bc4 <uxr_millis>
 80101e8:	eba0 0008 	sub.w	r0, r0, r8
 80101ec:	1a39      	subs	r1, r7, r0
 80101ee:	b344      	cbz	r4, 8010242 <uxr_run_session_until_all_status+0x96>
 80101f0:	4628      	mov	r0, r5
 80101f2:	46ac      	mov	ip, r5
 80101f4:	2301      	movs	r3, #1
 80101f6:	e002      	b.n	80101fe <uxr_run_session_until_all_status+0x52>
 80101f8:	42a3      	cmp	r3, r4
 80101fa:	d20d      	bcs.n	8010218 <uxr_run_session_until_all_status+0x6c>
 80101fc:	3301      	adds	r3, #1
 80101fe:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010202:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010206:	d1f7      	bne.n	80101f8 <uxr_run_session_until_all_status+0x4c>
 8010208:	42a3      	cmp	r3, r4
 801020a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801020e:	d213      	bcs.n	8010238 <uxr_run_session_until_all_status+0x8c>
 8010210:	2a00      	cmp	r2, #0
 8010212:	d0f3      	beq.n	80101fc <uxr_run_session_until_all_status+0x50>
 8010214:	2900      	cmp	r1, #0
 8010216:	dce2      	bgt.n	80101de <uxr_run_session_until_all_status+0x32>
 8010218:	2300      	movs	r3, #0
 801021a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801021c:	442c      	add	r4, r5
 801021e:	e001      	b.n	8010224 <uxr_run_session_until_all_status+0x78>
 8010220:	2b01      	cmp	r3, #1
 8010222:	d812      	bhi.n	801024a <uxr_run_session_until_all_status+0x9e>
 8010224:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010228:	4284      	cmp	r4, r0
 801022a:	d1f9      	bne.n	8010220 <uxr_run_session_until_all_status+0x74>
 801022c:	2b01      	cmp	r3, #1
 801022e:	bf8c      	ite	hi
 8010230:	2000      	movhi	r0, #0
 8010232:	2001      	movls	r0, #1
 8010234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010238:	2900      	cmp	r1, #0
 801023a:	dded      	ble.n	8010218 <uxr_run_session_until_all_status+0x6c>
 801023c:	2a00      	cmp	r2, #0
 801023e:	d1ce      	bne.n	80101de <uxr_run_session_until_all_status+0x32>
 8010240:	e7ea      	b.n	8010218 <uxr_run_session_until_all_status+0x6c>
 8010242:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010244:	2001      	movs	r0, #1
 8010246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801024a:	2000      	movs	r0, #0
 801024c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010250 <wait_session_status>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	4604      	mov	r4, r0
 8010256:	b09d      	sub	sp, #116	@ 0x74
 8010258:	20ff      	movs	r0, #255	@ 0xff
 801025a:	7160      	strb	r0, [r4, #5]
 801025c:	9303      	str	r3, [sp, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 80b6 	beq.w	80103d0 <wait_session_status+0x180>
 8010264:	468a      	mov	sl, r1
 8010266:	4691      	mov	r9, r2
 8010268:	f04f 0b00 	mov.w	fp, #0
 801026c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801026e:	464a      	mov	r2, r9
 8010270:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010274:	4651      	mov	r1, sl
 8010276:	47a8      	blx	r5
 8010278:	f000 fca4 	bl	8010bc4 <uxr_millis>
 801027c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010280:	4605      	mov	r5, r0
 8010282:	e009      	b.n	8010298 <wait_session_status+0x48>
 8010284:	f000 fc9e 	bl	8010bc4 <uxr_millis>
 8010288:	1b40      	subs	r0, r0, r5
 801028a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801028e:	2b00      	cmp	r3, #0
 8010290:	dd40      	ble.n	8010314 <wait_session_status+0xc4>
 8010292:	7960      	ldrb	r0, [r4, #5]
 8010294:	28ff      	cmp	r0, #255	@ 0xff
 8010296:	d145      	bne.n	8010324 <wait_session_status+0xd4>
 8010298:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801029a:	a908      	add	r1, sp, #32
 801029c:	6896      	ldr	r6, [r2, #8]
 801029e:	6810      	ldr	r0, [r2, #0]
 80102a0:	aa09      	add	r2, sp, #36	@ 0x24
 80102a2:	47b0      	blx	r6
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d0ed      	beq.n	8010284 <wait_session_status+0x34>
 80102a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80102ac:	a80c      	add	r0, sp, #48	@ 0x30
 80102ae:	f7fb fef7 	bl	800c0a0 <ucdr_init_buffer>
 80102b2:	2600      	movs	r6, #0
 80102b4:	f10d 031e 	add.w	r3, sp, #30
 80102b8:	aa07      	add	r2, sp, #28
 80102ba:	a90c      	add	r1, sp, #48	@ 0x30
 80102bc:	4620      	mov	r0, r4
 80102be:	f88d 601c 	strb.w	r6, [sp, #28]
 80102c2:	f000 fa87 	bl	80107d4 <uxr_read_session_header>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d0dc      	beq.n	8010284 <wait_session_status+0x34>
 80102ca:	4631      	mov	r1, r6
 80102cc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80102d0:	f000 fb24 	bl	801091c <uxr_stream_id_from_raw>
 80102d4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80102d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80102dc:	9302      	str	r3, [sp, #8]
 80102de:	2f01      	cmp	r7, #1
 80102e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80102e4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80102e8:	d05c      	beq.n	80103a4 <wait_session_status+0x154>
 80102ea:	2f02      	cmp	r7, #2
 80102ec:	d020      	beq.n	8010330 <wait_session_status+0xe0>
 80102ee:	2f00      	cmp	r7, #0
 80102f0:	d1c8      	bne.n	8010284 <wait_session_status+0x34>
 80102f2:	4639      	mov	r1, r7
 80102f4:	4638      	mov	r0, r7
 80102f6:	f000 fb11 	bl	801091c <uxr_stream_id_from_raw>
 80102fa:	a90c      	add	r1, sp, #48	@ 0x30
 80102fc:	4602      	mov	r2, r0
 80102fe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010300:	4620      	mov	r0, r4
 8010302:	f7ff fc2b 	bl	800fb5c <read_submessage_list>
 8010306:	f000 fc5d 	bl	8010bc4 <uxr_millis>
 801030a:	1b40      	subs	r0, r0, r5
 801030c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010310:	2b00      	cmp	r3, #0
 8010312:	dcbe      	bgt.n	8010292 <wait_session_status+0x42>
 8010314:	9b03      	ldr	r3, [sp, #12]
 8010316:	7960      	ldrb	r0, [r4, #5]
 8010318:	f10b 0b01 	add.w	fp, fp, #1
 801031c:	455b      	cmp	r3, fp
 801031e:	d001      	beq.n	8010324 <wait_session_status+0xd4>
 8010320:	28ff      	cmp	r0, #255	@ 0xff
 8010322:	d0a3      	beq.n	801026c <wait_session_status+0x1c>
 8010324:	38ff      	subs	r0, #255	@ 0xff
 8010326:	bf18      	it	ne
 8010328:	2001      	movne	r0, #1
 801032a:	b01d      	add	sp, #116	@ 0x74
 801032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010330:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010334:	9304      	str	r3, [sp, #16]
 8010336:	4631      	mov	r1, r6
 8010338:	f104 0008 	add.w	r0, r4, #8
 801033c:	f000 fbdc 	bl	8010af8 <uxr_get_input_reliable_stream>
 8010340:	4680      	mov	r8, r0
 8010342:	b348      	cbz	r0, 8010398 <wait_session_status+0x148>
 8010344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010346:	9205      	str	r2, [sp, #20]
 8010348:	a80c      	add	r0, sp, #48	@ 0x30
 801034a:	f7fb fed9 	bl	800c100 <ucdr_buffer_remaining>
 801034e:	4603      	mov	r3, r0
 8010350:	f10d 001d 	add.w	r0, sp, #29
 8010354:	9000      	str	r0, [sp, #0]
 8010356:	9a05      	ldr	r2, [sp, #20]
 8010358:	9902      	ldr	r1, [sp, #8]
 801035a:	4640      	mov	r0, r8
 801035c:	f006 f8d6 	bl	801650c <uxr_receive_reliable_message>
 8010360:	b1d0      	cbz	r0, 8010398 <wait_session_status+0x148>
 8010362:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d03a      	beq.n	80103e0 <wait_session_status+0x190>
 801036a:	9f04      	ldr	r7, [sp, #16]
 801036c:	e00a      	b.n	8010384 <wait_session_status+0x134>
 801036e:	f04f 0302 	mov.w	r3, #2
 8010372:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010376:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801037a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801037e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010380:	f7ff fbec 	bl	800fb5c <read_submessage_list>
 8010384:	a914      	add	r1, sp, #80	@ 0x50
 8010386:	2204      	movs	r2, #4
 8010388:	4640      	mov	r0, r8
 801038a:	f006 f93f 	bl	801660c <uxr_next_input_reliable_buffer_available>
 801038e:	4603      	mov	r3, r0
 8010390:	a914      	add	r1, sp, #80	@ 0x50
 8010392:	4620      	mov	r0, r4
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1ea      	bne.n	801036e <wait_session_status+0x11e>
 8010398:	9904      	ldr	r1, [sp, #16]
 801039a:	4632      	mov	r2, r6
 801039c:	4620      	mov	r0, r4
 801039e:	f7ff fa59 	bl	800f854 <write_submessage_acknack.isra.0>
 80103a2:	e76f      	b.n	8010284 <wait_session_status+0x34>
 80103a4:	4631      	mov	r1, r6
 80103a6:	f104 0008 	add.w	r0, r4, #8
 80103aa:	f000 fb9b 	bl	8010ae4 <uxr_get_input_best_effort_stream>
 80103ae:	2800      	cmp	r0, #0
 80103b0:	f43f af68 	beq.w	8010284 <wait_session_status+0x34>
 80103b4:	9902      	ldr	r1, [sp, #8]
 80103b6:	f006 f815 	bl	80163e4 <uxr_receive_best_effort_message>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	f43f af62 	beq.w	8010284 <wait_session_status+0x34>
 80103c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80103c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103c6:	a90c      	add	r1, sp, #48	@ 0x30
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff fbc7 	bl	800fb5c <read_submessage_list>
 80103ce:	e759      	b.n	8010284 <wait_session_status+0x34>
 80103d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80103d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80103d6:	47a0      	blx	r4
 80103d8:	2001      	movs	r0, #1
 80103da:	b01d      	add	sp, #116	@ 0x74
 80103dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80103e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103e6:	a90c      	add	r1, sp, #48	@ 0x30
 80103e8:	4620      	mov	r0, r4
 80103ea:	f7ff fbb7 	bl	800fb5c <read_submessage_list>
 80103ee:	e7bc      	b.n	801036a <wait_session_status+0x11a>

080103f0 <uxr_delete_session_retries>:
 80103f0:	b530      	push	{r4, r5, lr}
 80103f2:	b08f      	sub	sp, #60	@ 0x3c
 80103f4:	4604      	mov	r4, r0
 80103f6:	460d      	mov	r5, r1
 80103f8:	f000 fa2e 	bl	8010858 <uxr_session_header_offset>
 80103fc:	2300      	movs	r3, #0
 80103fe:	2210      	movs	r2, #16
 8010400:	9000      	str	r0, [sp, #0]
 8010402:	a902      	add	r1, sp, #8
 8010404:	a806      	add	r0, sp, #24
 8010406:	f7fb fe39 	bl	800c07c <ucdr_init_buffer_origin_offset>
 801040a:	a906      	add	r1, sp, #24
 801040c:	4620      	mov	r0, r4
 801040e:	f000 f973 	bl	80106f8 <uxr_buffer_delete_session>
 8010412:	2200      	movs	r2, #0
 8010414:	4611      	mov	r1, r2
 8010416:	9b06      	ldr	r3, [sp, #24]
 8010418:	4620      	mov	r0, r4
 801041a:	f000 f9c7 	bl	80107ac <uxr_stamp_session_header>
 801041e:	a806      	add	r0, sp, #24
 8010420:	f7fb fe6a 	bl	800c0f8 <ucdr_buffer_length>
 8010424:	462b      	mov	r3, r5
 8010426:	4602      	mov	r2, r0
 8010428:	a902      	add	r1, sp, #8
 801042a:	4620      	mov	r0, r4
 801042c:	f7ff ff10 	bl	8010250 <wait_session_status>
 8010430:	b118      	cbz	r0, 801043a <uxr_delete_session_retries+0x4a>
 8010432:	7960      	ldrb	r0, [r4, #5]
 8010434:	fab0 f080 	clz	r0, r0
 8010438:	0940      	lsrs	r0, r0, #5
 801043a:	b00f      	add	sp, #60	@ 0x3c
 801043c:	bd30      	pop	{r4, r5, pc}
 801043e:	bf00      	nop

08010440 <uxr_create_session>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	f100 0b08 	add.w	fp, r0, #8
 8010448:	b0ab      	sub	sp, #172	@ 0xac
 801044a:	4604      	mov	r4, r0
 801044c:	4658      	mov	r0, fp
 801044e:	f000 fa99 	bl	8010984 <uxr_reset_stream_storage>
 8010452:	4620      	mov	r0, r4
 8010454:	f000 fa00 	bl	8010858 <uxr_session_header_offset>
 8010458:	2300      	movs	r3, #0
 801045a:	9000      	str	r0, [sp, #0]
 801045c:	221c      	movs	r2, #28
 801045e:	a90b      	add	r1, sp, #44	@ 0x2c
 8010460:	a812      	add	r0, sp, #72	@ 0x48
 8010462:	f7fb fe0b 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8010466:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010468:	8a1a      	ldrh	r2, [r3, #16]
 801046a:	3a04      	subs	r2, #4
 801046c:	b292      	uxth	r2, r2
 801046e:	a912      	add	r1, sp, #72	@ 0x48
 8010470:	4620      	mov	r0, r4
 8010472:	f000 f917 	bl	80106a4 <uxr_buffer_create_session>
 8010476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010478:	4620      	mov	r0, r4
 801047a:	f000 f983 	bl	8010784 <uxr_stamp_create_session_header>
 801047e:	a812      	add	r0, sp, #72	@ 0x48
 8010480:	f7fb fe3a 	bl	800c0f8 <ucdr_buffer_length>
 8010484:	23ff      	movs	r3, #255	@ 0xff
 8010486:	7163      	strb	r3, [r4, #5]
 8010488:	230a      	movs	r3, #10
 801048a:	46da      	mov	sl, fp
 801048c:	9303      	str	r3, [sp, #12]
 801048e:	4683      	mov	fp, r0
 8010490:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010492:	465a      	mov	r2, fp
 8010494:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010498:	a90b      	add	r1, sp, #44	@ 0x2c
 801049a:	47a8      	blx	r5
 801049c:	f000 fb92 	bl	8010bc4 <uxr_millis>
 80104a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104a4:	4605      	mov	r5, r0
 80104a6:	e009      	b.n	80104bc <uxr_create_session+0x7c>
 80104a8:	f000 fb8c 	bl	8010bc4 <uxr_millis>
 80104ac:	1b40      	subs	r0, r0, r5
 80104ae:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	7962      	ldrb	r2, [r4, #5]
 80104b6:	dd38      	ble.n	801052a <uxr_create_session+0xea>
 80104b8:	2aff      	cmp	r2, #255	@ 0xff
 80104ba:	d13c      	bne.n	8010536 <uxr_create_session+0xf6>
 80104bc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80104be:	a907      	add	r1, sp, #28
 80104c0:	6896      	ldr	r6, [r2, #8]
 80104c2:	6810      	ldr	r0, [r2, #0]
 80104c4:	aa08      	add	r2, sp, #32
 80104c6:	47b0      	blx	r6
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d0ed      	beq.n	80104a8 <uxr_create_session+0x68>
 80104cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80104d0:	a81a      	add	r0, sp, #104	@ 0x68
 80104d2:	f7fb fde5 	bl	800c0a0 <ucdr_init_buffer>
 80104d6:	2600      	movs	r6, #0
 80104d8:	f10d 031a 	add.w	r3, sp, #26
 80104dc:	aa06      	add	r2, sp, #24
 80104de:	a91a      	add	r1, sp, #104	@ 0x68
 80104e0:	4620      	mov	r0, r4
 80104e2:	f88d 6018 	strb.w	r6, [sp, #24]
 80104e6:	f000 f975 	bl	80107d4 <uxr_read_session_header>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d0dc      	beq.n	80104a8 <uxr_create_session+0x68>
 80104ee:	4631      	mov	r1, r6
 80104f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80104f4:	f000 fa12 	bl	801091c <uxr_stream_id_from_raw>
 80104f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80104fc:	2e01      	cmp	r6, #1
 80104fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010502:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010506:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801050a:	d053      	beq.n	80105b4 <uxr_create_session+0x174>
 801050c:	2e02      	cmp	r6, #2
 801050e:	d018      	beq.n	8010542 <uxr_create_session+0x102>
 8010510:	2e00      	cmp	r6, #0
 8010512:	d1c9      	bne.n	80104a8 <uxr_create_session+0x68>
 8010514:	4631      	mov	r1, r6
 8010516:	4630      	mov	r0, r6
 8010518:	f000 fa00 	bl	801091c <uxr_stream_id_from_raw>
 801051c:	a91a      	add	r1, sp, #104	@ 0x68
 801051e:	4602      	mov	r2, r0
 8010520:	900a      	str	r0, [sp, #40]	@ 0x28
 8010522:	4620      	mov	r0, r4
 8010524:	f7ff fb1a 	bl	800fb5c <read_submessage_list>
 8010528:	e7be      	b.n	80104a8 <uxr_create_session+0x68>
 801052a:	9b03      	ldr	r3, [sp, #12]
 801052c:	3b01      	subs	r3, #1
 801052e:	9303      	str	r3, [sp, #12]
 8010530:	d001      	beq.n	8010536 <uxr_create_session+0xf6>
 8010532:	2aff      	cmp	r2, #255	@ 0xff
 8010534:	d0ac      	beq.n	8010490 <uxr_create_session+0x50>
 8010536:	2a00      	cmp	r2, #0
 8010538:	d051      	beq.n	80105de <uxr_create_session+0x19e>
 801053a:	2000      	movs	r0, #0
 801053c:	b02b      	add	sp, #172	@ 0xac
 801053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010542:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	4639      	mov	r1, r7
 801054a:	4650      	mov	r0, sl
 801054c:	f000 fad4 	bl	8010af8 <uxr_get_input_reliable_stream>
 8010550:	4680      	mov	r8, r0
 8010552:	b348      	cbz	r0, 80105a8 <uxr_create_session+0x168>
 8010554:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010556:	9205      	str	r2, [sp, #20]
 8010558:	a81a      	add	r0, sp, #104	@ 0x68
 801055a:	f7fb fdd1 	bl	800c100 <ucdr_buffer_remaining>
 801055e:	4603      	mov	r3, r0
 8010560:	f10d 0019 	add.w	r0, sp, #25
 8010564:	9000      	str	r0, [sp, #0]
 8010566:	9a05      	ldr	r2, [sp, #20]
 8010568:	4649      	mov	r1, r9
 801056a:	4640      	mov	r0, r8
 801056c:	f005 ffce 	bl	801650c <uxr_receive_reliable_message>
 8010570:	b1d0      	cbz	r0, 80105a8 <uxr_create_session+0x168>
 8010572:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d038      	beq.n	80105ec <uxr_create_session+0x1ac>
 801057a:	9e04      	ldr	r6, [sp, #16]
 801057c:	e00a      	b.n	8010594 <uxr_create_session+0x154>
 801057e:	f04f 0302 	mov.w	r3, #2
 8010582:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8010586:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801058a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801058e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010590:	f7ff fae4 	bl	800fb5c <read_submessage_list>
 8010594:	a922      	add	r1, sp, #136	@ 0x88
 8010596:	2204      	movs	r2, #4
 8010598:	4640      	mov	r0, r8
 801059a:	f006 f837 	bl	801660c <uxr_next_input_reliable_buffer_available>
 801059e:	4603      	mov	r3, r0
 80105a0:	a922      	add	r1, sp, #136	@ 0x88
 80105a2:	4620      	mov	r0, r4
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1ea      	bne.n	801057e <uxr_create_session+0x13e>
 80105a8:	9904      	ldr	r1, [sp, #16]
 80105aa:	463a      	mov	r2, r7
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ff f951 	bl	800f854 <write_submessage_acknack.isra.0>
 80105b2:	e779      	b.n	80104a8 <uxr_create_session+0x68>
 80105b4:	4639      	mov	r1, r7
 80105b6:	4650      	mov	r0, sl
 80105b8:	f000 fa94 	bl	8010ae4 <uxr_get_input_best_effort_stream>
 80105bc:	2800      	cmp	r0, #0
 80105be:	f43f af73 	beq.w	80104a8 <uxr_create_session+0x68>
 80105c2:	4649      	mov	r1, r9
 80105c4:	f005 ff0e 	bl	80163e4 <uxr_receive_best_effort_message>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	f43f af6d 	beq.w	80104a8 <uxr_create_session+0x68>
 80105ce:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80105d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105d4:	a91a      	add	r1, sp, #104	@ 0x68
 80105d6:	4620      	mov	r0, r4
 80105d8:	f7ff fac0 	bl	800fb5c <read_submessage_list>
 80105dc:	e764      	b.n	80104a8 <uxr_create_session+0x68>
 80105de:	4650      	mov	r0, sl
 80105e0:	f000 f9d0 	bl	8010984 <uxr_reset_stream_storage>
 80105e4:	2001      	movs	r0, #1
 80105e6:	b02b      	add	sp, #172	@ 0xac
 80105e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ec:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80105f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105f2:	a91a      	add	r1, sp, #104	@ 0x68
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7ff fab1 	bl	800fb5c <read_submessage_list>
 80105fa:	e7be      	b.n	801057a <uxr_create_session+0x13a>

080105fc <uxr_prepare_stream_to_write_submessage>:
 80105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	b082      	sub	sp, #8
 8010602:	4682      	mov	sl, r0
 8010604:	4610      	mov	r0, r2
 8010606:	4615      	mov	r5, r2
 8010608:	461e      	mov	r6, r3
 801060a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801060e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010612:	9101      	str	r1, [sp, #4]
 8010614:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010618:	f000 face 	bl	8010bb8 <uxr_submessage_padding>
 801061c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010620:	f105 0904 	add.w	r9, r5, #4
 8010624:	2b01      	cmp	r3, #1
 8010626:	4481      	add	r9, r0
 8010628:	d01d      	beq.n	8010666 <uxr_prepare_stream_to_write_submessage+0x6a>
 801062a:	2b02      	cmp	r3, #2
 801062c:	d116      	bne.n	801065c <uxr_prepare_stream_to_write_submessage+0x60>
 801062e:	4621      	mov	r1, r4
 8010630:	f10a 0008 	add.w	r0, sl, #8
 8010634:	f000 fa4c 	bl	8010ad0 <uxr_get_output_reliable_stream>
 8010638:	4604      	mov	r4, r0
 801063a:	b158      	cbz	r0, 8010654 <uxr_prepare_stream_to_write_submessage+0x58>
 801063c:	4649      	mov	r1, r9
 801063e:	4632      	mov	r2, r6
 8010640:	f006 f9a0 	bl	8016984 <uxr_prepare_reliable_buffer_to_write>
 8010644:	4604      	mov	r4, r0
 8010646:	b12c      	cbz	r4, 8010654 <uxr_prepare_stream_to_write_submessage+0x58>
 8010648:	4643      	mov	r3, r8
 801064a:	b2aa      	uxth	r2, r5
 801064c:	4639      	mov	r1, r7
 801064e:	4630      	mov	r0, r6
 8010650:	f000 fa72 	bl	8010b38 <uxr_buffer_submessage_header>
 8010654:	4620      	mov	r0, r4
 8010656:	b002      	add	sp, #8
 8010658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801065c:	2400      	movs	r4, #0
 801065e:	4620      	mov	r0, r4
 8010660:	b002      	add	sp, #8
 8010662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010666:	4621      	mov	r1, r4
 8010668:	f10a 0008 	add.w	r0, sl, #8
 801066c:	f000 fa28 	bl	8010ac0 <uxr_get_output_best_effort_stream>
 8010670:	4604      	mov	r4, r0
 8010672:	2800      	cmp	r0, #0
 8010674:	d0ee      	beq.n	8010654 <uxr_prepare_stream_to_write_submessage+0x58>
 8010676:	4649      	mov	r1, r9
 8010678:	4632      	mov	r2, r6
 801067a:	f006 f8b3 	bl	80167e4 <uxr_prepare_best_effort_buffer_to_write>
 801067e:	4604      	mov	r4, r0
 8010680:	e7e1      	b.n	8010646 <uxr_prepare_stream_to_write_submessage+0x4a>
 8010682:	bf00      	nop

08010684 <uxr_init_session_info>:
 8010684:	0e13      	lsrs	r3, r2, #24
 8010686:	7043      	strb	r3, [r0, #1]
 8010688:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801068c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010690:	7001      	strb	r1, [r0, #0]
 8010692:	70c3      	strb	r3, [r0, #3]
 8010694:	2109      	movs	r1, #9
 8010696:	23ff      	movs	r3, #255	@ 0xff
 8010698:	f880 c002 	strb.w	ip, [r0, #2]
 801069c:	7102      	strb	r2, [r0, #4]
 801069e:	80c1      	strh	r1, [r0, #6]
 80106a0:	7143      	strb	r3, [r0, #5]
 80106a2:	4770      	bx	lr

080106a4 <uxr_buffer_create_session>:
 80106a4:	b530      	push	{r4, r5, lr}
 80106a6:	b089      	sub	sp, #36	@ 0x24
 80106a8:	2300      	movs	r3, #0
 80106aa:	4d12      	ldr	r5, [pc, #72]	@ (80106f4 <uxr_buffer_create_session+0x50>)
 80106ac:	9307      	str	r3, [sp, #28]
 80106ae:	f8ad 201c 	strh.w	r2, [sp, #28]
 80106b2:	2201      	movs	r2, #1
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	80c2      	strh	r2, [r0, #6]
 80106b8:	f88d 2004 	strb.w	r2, [sp, #4]
 80106bc:	682a      	ldr	r2, [r5, #0]
 80106be:	9200      	str	r2, [sp, #0]
 80106c0:	88aa      	ldrh	r2, [r5, #4]
 80106c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80106c6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80106ca:	9202      	str	r2, [sp, #8]
 80106cc:	460c      	mov	r4, r1
 80106ce:	7802      	ldrb	r2, [r0, #0]
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	4619      	mov	r1, r3
 80106d4:	f88d 200c 	strb.w	r2, [sp, #12]
 80106d8:	4620      	mov	r0, r4
 80106da:	2210      	movs	r2, #16
 80106dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80106e0:	9306      	str	r3, [sp, #24]
 80106e2:	f000 fa29 	bl	8010b38 <uxr_buffer_submessage_header>
 80106e6:	4669      	mov	r1, sp
 80106e8:	4620      	mov	r0, r4
 80106ea:	f001 fa6d 	bl	8011bc8 <uxr_serialize_CREATE_CLIENT_Payload>
 80106ee:	b009      	add	sp, #36	@ 0x24
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	bf00      	nop
 80106f4:	0801ad3c 	.word	0x0801ad3c

080106f8 <uxr_buffer_delete_session>:
 80106f8:	b510      	push	{r4, lr}
 80106fa:	4b0c      	ldr	r3, [pc, #48]	@ (801072c <uxr_buffer_delete_session+0x34>)
 80106fc:	b082      	sub	sp, #8
 80106fe:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8010702:	f8ad c006 	strh.w	ip, [sp, #6]
 8010706:	460c      	mov	r4, r1
 8010708:	2202      	movs	r2, #2
 801070a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801070e:	80c2      	strh	r2, [r0, #6]
 8010710:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010714:	2204      	movs	r2, #4
 8010716:	2300      	movs	r3, #0
 8010718:	2103      	movs	r1, #3
 801071a:	4620      	mov	r0, r4
 801071c:	f000 fa0c 	bl	8010b38 <uxr_buffer_submessage_header>
 8010720:	a901      	add	r1, sp, #4
 8010722:	4620      	mov	r0, r4
 8010724:	f001 faf6 	bl	8011d14 <uxr_serialize_DELETE_Payload>
 8010728:	b002      	add	sp, #8
 801072a:	bd10      	pop	{r4, pc}
 801072c:	0801ad3c 	.word	0x0801ad3c

08010730 <uxr_read_create_session_status>:
 8010730:	b510      	push	{r4, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	4604      	mov	r4, r0
 8010736:	4608      	mov	r0, r1
 8010738:	a901      	add	r1, sp, #4
 801073a:	f001 fafb 	bl	8011d34 <uxr_deserialize_STATUS_AGENT_Payload>
 801073e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010742:	7163      	strb	r3, [r4, #5]
 8010744:	b008      	add	sp, #32
 8010746:	bd10      	pop	{r4, pc}

08010748 <uxr_read_delete_session_status>:
 8010748:	b510      	push	{r4, lr}
 801074a:	4604      	mov	r4, r0
 801074c:	b084      	sub	sp, #16
 801074e:	4608      	mov	r0, r1
 8010750:	a902      	add	r1, sp, #8
 8010752:	f001 fb1f 	bl	8011d94 <uxr_deserialize_STATUS_Payload>
 8010756:	88e3      	ldrh	r3, [r4, #6]
 8010758:	2b02      	cmp	r3, #2
 801075a:	d001      	beq.n	8010760 <uxr_read_delete_session_status+0x18>
 801075c:	b004      	add	sp, #16
 801075e:	bd10      	pop	{r4, pc}
 8010760:	f10d 000a 	add.w	r0, sp, #10
 8010764:	f7fe fecc 	bl	800f500 <uxr_object_id_from_raw>
 8010768:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801076c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010770:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010774:	b29b      	uxth	r3, r3
 8010776:	2b02      	cmp	r3, #2
 8010778:	bf04      	itt	eq
 801077a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801077e:	7163      	strbeq	r3, [r4, #5]
 8010780:	b004      	add	sp, #16
 8010782:	bd10      	pop	{r4, pc}

08010784 <uxr_stamp_create_session_header>:
 8010784:	b510      	push	{r4, lr}
 8010786:	2208      	movs	r2, #8
 8010788:	b08a      	sub	sp, #40	@ 0x28
 801078a:	4604      	mov	r4, r0
 801078c:	eb0d 0002 	add.w	r0, sp, r2
 8010790:	f7fb fc86 	bl	800c0a0 <ucdr_init_buffer>
 8010794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010798:	9400      	str	r4, [sp, #0]
 801079a:	2300      	movs	r3, #0
 801079c:	461a      	mov	r2, r3
 801079e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80107a2:	a802      	add	r0, sp, #8
 80107a4:	f000 fbc2 	bl	8010f2c <uxr_serialize_message_header>
 80107a8:	b00a      	add	sp, #40	@ 0x28
 80107aa:	bd10      	pop	{r4, pc}

080107ac <uxr_stamp_session_header>:
 80107ac:	b530      	push	{r4, r5, lr}
 80107ae:	b08d      	sub	sp, #52	@ 0x34
 80107b0:	4604      	mov	r4, r0
 80107b2:	460d      	mov	r5, r1
 80107b4:	9203      	str	r2, [sp, #12]
 80107b6:	4619      	mov	r1, r3
 80107b8:	a804      	add	r0, sp, #16
 80107ba:	2208      	movs	r2, #8
 80107bc:	f7fb fc70 	bl	800c0a0 <ucdr_init_buffer>
 80107c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c4:	9b03      	ldr	r3, [sp, #12]
 80107c6:	9400      	str	r4, [sp, #0]
 80107c8:	462a      	mov	r2, r5
 80107ca:	a804      	add	r0, sp, #16
 80107cc:	f000 fbae 	bl	8010f2c <uxr_serialize_message_header>
 80107d0:	b00d      	add	sp, #52	@ 0x34
 80107d2:	bd30      	pop	{r4, r5, pc}

080107d4 <uxr_read_session_header>:
 80107d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d8:	4607      	mov	r7, r0
 80107da:	b084      	sub	sp, #16
 80107dc:	4608      	mov	r0, r1
 80107de:	460c      	mov	r4, r1
 80107e0:	4615      	mov	r5, r2
 80107e2:	461e      	mov	r6, r3
 80107e4:	f7fb fc8c 	bl	800c100 <ucdr_buffer_remaining>
 80107e8:	2808      	cmp	r0, #8
 80107ea:	d803      	bhi.n	80107f4 <uxr_read_session_header+0x20>
 80107ec:	2000      	movs	r0, #0
 80107ee:	b004      	add	sp, #16
 80107f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f4:	f10d 080c 	add.w	r8, sp, #12
 80107f8:	4633      	mov	r3, r6
 80107fa:	462a      	mov	r2, r5
 80107fc:	f8cd 8000 	str.w	r8, [sp]
 8010800:	4620      	mov	r0, r4
 8010802:	f10d 010b 	add.w	r1, sp, #11
 8010806:	f000 fbaf 	bl	8010f68 <uxr_deserialize_message_header>
 801080a:	783a      	ldrb	r2, [r7, #0]
 801080c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010810:	4293      	cmp	r3, r2
 8010812:	d1eb      	bne.n	80107ec <uxr_read_session_header+0x18>
 8010814:	061b      	lsls	r3, r3, #24
 8010816:	d41c      	bmi.n	8010852 <uxr_read_session_header+0x7e>
 8010818:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801081c:	787b      	ldrb	r3, [r7, #1]
 801081e:	429a      	cmp	r2, r3
 8010820:	d003      	beq.n	801082a <uxr_read_session_header+0x56>
 8010822:	2001      	movs	r0, #1
 8010824:	f080 0001 	eor.w	r0, r0, #1
 8010828:	e7e1      	b.n	80107ee <uxr_read_session_header+0x1a>
 801082a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801082e:	78bb      	ldrb	r3, [r7, #2]
 8010830:	429a      	cmp	r2, r3
 8010832:	f107 0102 	add.w	r1, r7, #2
 8010836:	d1f4      	bne.n	8010822 <uxr_read_session_header+0x4e>
 8010838:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801083c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010840:	429a      	cmp	r2, r3
 8010842:	d1ee      	bne.n	8010822 <uxr_read_session_header+0x4e>
 8010844:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010848:	784b      	ldrb	r3, [r1, #1]
 801084a:	429a      	cmp	r2, r3
 801084c:	d1e9      	bne.n	8010822 <uxr_read_session_header+0x4e>
 801084e:	2000      	movs	r0, #0
 8010850:	e7e8      	b.n	8010824 <uxr_read_session_header+0x50>
 8010852:	2001      	movs	r0, #1
 8010854:	e7cb      	b.n	80107ee <uxr_read_session_header+0x1a>
 8010856:	bf00      	nop

08010858 <uxr_session_header_offset>:
 8010858:	f990 3000 	ldrsb.w	r3, [r0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	bfac      	ite	ge
 8010860:	2008      	movge	r0, #8
 8010862:	2004      	movlt	r0, #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop

08010868 <uxr_init_base_object_request>:
 8010868:	b510      	push	{r4, lr}
 801086a:	88c3      	ldrh	r3, [r0, #6]
 801086c:	b082      	sub	sp, #8
 801086e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010872:	9101      	str	r1, [sp, #4]
 8010874:	f1a3 010a 	sub.w	r1, r3, #10
 8010878:	b289      	uxth	r1, r1
 801087a:	42a1      	cmp	r1, r4
 801087c:	d80e      	bhi.n	801089c <uxr_init_base_object_request+0x34>
 801087e:	3301      	adds	r3, #1
 8010880:	b29c      	uxth	r4, r3
 8010882:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010886:	b2db      	uxtb	r3, r3
 8010888:	80c4      	strh	r4, [r0, #6]
 801088a:	9801      	ldr	r0, [sp, #4]
 801088c:	7011      	strb	r1, [r2, #0]
 801088e:	7053      	strb	r3, [r2, #1]
 8010890:	1c91      	adds	r1, r2, #2
 8010892:	f7fe fe49 	bl	800f528 <uxr_object_id_to_raw>
 8010896:	4620      	mov	r0, r4
 8010898:	b002      	add	sp, #8
 801089a:	bd10      	pop	{r4, pc}
 801089c:	230a      	movs	r3, #10
 801089e:	2100      	movs	r1, #0
 80108a0:	461c      	mov	r4, r3
 80108a2:	e7f1      	b.n	8010888 <uxr_init_base_object_request+0x20>

080108a4 <uxr_parse_base_object_request>:
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	4604      	mov	r4, r0
 80108a8:	3002      	adds	r0, #2
 80108aa:	460d      	mov	r5, r1
 80108ac:	4616      	mov	r6, r2
 80108ae:	f7fe fe27 	bl	800f500 <uxr_object_id_from_raw>
 80108b2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80108b6:	8028      	strh	r0, [r5, #0]
 80108b8:	806b      	strh	r3, [r5, #2]
 80108ba:	7822      	ldrb	r2, [r4, #0]
 80108bc:	7863      	ldrb	r3, [r4, #1]
 80108be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80108c2:	8033      	strh	r3, [r6, #0]
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
 80108c6:	bf00      	nop

080108c8 <uxr_stream_id>:
 80108c8:	2901      	cmp	r1, #1
 80108ca:	b082      	sub	sp, #8
 80108cc:	d01d      	beq.n	801090a <uxr_stream_id+0x42>
 80108ce:	2902      	cmp	r1, #2
 80108d0:	f04f 0c00 	mov.w	ip, #0
 80108d4:	d01e      	beq.n	8010914 <uxr_stream_id+0x4c>
 80108d6:	2300      	movs	r3, #0
 80108d8:	f36c 0307 	bfi	r3, ip, #0, #8
 80108dc:	f360 230f 	bfi	r3, r0, #8, #8
 80108e0:	f361 4317 	bfi	r3, r1, #16, #8
 80108e4:	f362 631f 	bfi	r3, r2, #24, #8
 80108e8:	b2da      	uxtb	r2, r3
 80108ea:	2000      	movs	r0, #0
 80108ec:	f362 0007 	bfi	r0, r2, #0, #8
 80108f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80108f4:	f362 200f 	bfi	r0, r2, #8, #8
 80108f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80108fc:	f362 4017 	bfi	r0, r2, #16, #8
 8010900:	0e1b      	lsrs	r3, r3, #24
 8010902:	f363 601f 	bfi	r0, r3, #24, #8
 8010906:	b002      	add	sp, #8
 8010908:	4770      	bx	lr
 801090a:	f100 0c01 	add.w	ip, r0, #1
 801090e:	fa5f fc8c 	uxtb.w	ip, ip
 8010912:	e7e0      	b.n	80108d6 <uxr_stream_id+0xe>
 8010914:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010918:	e7dd      	b.n	80108d6 <uxr_stream_id+0xe>
 801091a:	bf00      	nop

0801091c <uxr_stream_id_from_raw>:
 801091c:	b082      	sub	sp, #8
 801091e:	b130      	cbz	r0, 801092e <uxr_stream_id_from_raw+0x12>
 8010920:	0603      	lsls	r3, r0, #24
 8010922:	d420      	bmi.n	8010966 <uxr_stream_id_from_raw+0x4a>
 8010924:	1e42      	subs	r2, r0, #1
 8010926:	b2d2      	uxtb	r2, r2
 8010928:	f04f 0c01 	mov.w	ip, #1
 801092c:	e001      	b.n	8010932 <uxr_stream_id_from_raw+0x16>
 801092e:	4684      	mov	ip, r0
 8010930:	4602      	mov	r2, r0
 8010932:	2300      	movs	r3, #0
 8010934:	f360 0307 	bfi	r3, r0, #0, #8
 8010938:	f362 230f 	bfi	r3, r2, #8, #8
 801093c:	f36c 4317 	bfi	r3, ip, #16, #8
 8010940:	f361 631f 	bfi	r3, r1, #24, #8
 8010944:	b2da      	uxtb	r2, r3
 8010946:	2000      	movs	r0, #0
 8010948:	f362 0007 	bfi	r0, r2, #0, #8
 801094c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010950:	f362 200f 	bfi	r0, r2, #8, #8
 8010954:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010958:	f362 4017 	bfi	r0, r2, #16, #8
 801095c:	0e1b      	lsrs	r3, r3, #24
 801095e:	f363 601f 	bfi	r0, r3, #24, #8
 8010962:	b002      	add	sp, #8
 8010964:	4770      	bx	lr
 8010966:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801096a:	f04f 0c02 	mov.w	ip, #2
 801096e:	e7e0      	b.n	8010932 <uxr_stream_id_from_raw+0x16>

08010970 <uxr_init_stream_storage>:
 8010970:	2300      	movs	r3, #0
 8010972:	7403      	strb	r3, [r0, #16]
 8010974:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010978:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801097c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop

08010984 <uxr_reset_stream_storage>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	7c03      	ldrb	r3, [r0, #16]
 8010988:	4604      	mov	r4, r0
 801098a:	b153      	cbz	r3, 80109a2 <uxr_reset_stream_storage+0x1e>
 801098c:	4606      	mov	r6, r0
 801098e:	2500      	movs	r5, #0
 8010990:	4630      	mov	r0, r6
 8010992:	f005 ff21 	bl	80167d8 <uxr_reset_output_best_effort_stream>
 8010996:	7c23      	ldrb	r3, [r4, #16]
 8010998:	3501      	adds	r5, #1
 801099a:	42ab      	cmp	r3, r5
 801099c:	f106 0610 	add.w	r6, r6, #16
 80109a0:	d8f6      	bhi.n	8010990 <uxr_reset_stream_storage+0xc>
 80109a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80109a6:	b163      	cbz	r3, 80109c2 <uxr_reset_stream_storage+0x3e>
 80109a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109ac:	2500      	movs	r5, #0
 80109ae:	4630      	mov	r0, r6
 80109b0:	f005 fd14 	bl	80163dc <uxr_reset_input_best_effort_stream>
 80109b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80109b8:	3501      	adds	r5, #1
 80109ba:	42ab      	cmp	r3, r5
 80109bc:	f106 0602 	add.w	r6, r6, #2
 80109c0:	d8f5      	bhi.n	80109ae <uxr_reset_stream_storage+0x2a>
 80109c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80109c6:	b163      	cbz	r3, 80109e2 <uxr_reset_stream_storage+0x5e>
 80109c8:	f104 0618 	add.w	r6, r4, #24
 80109cc:	2500      	movs	r5, #0
 80109ce:	4630      	mov	r0, r6
 80109d0:	f005 ffae 	bl	8016930 <uxr_reset_output_reliable_stream>
 80109d4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80109d8:	3501      	adds	r5, #1
 80109da:	42ab      	cmp	r3, r5
 80109dc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80109e0:	d8f5      	bhi.n	80109ce <uxr_reset_stream_storage+0x4a>
 80109e2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80109e6:	b163      	cbz	r3, 8010a02 <uxr_reset_stream_storage+0x7e>
 80109e8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80109ec:	2500      	movs	r5, #0
 80109ee:	4630      	mov	r0, r6
 80109f0:	f005 fd68 	bl	80164c4 <uxr_reset_input_reliable_stream>
 80109f4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80109f8:	3501      	adds	r5, #1
 80109fa:	42ab      	cmp	r3, r5
 80109fc:	f106 0618 	add.w	r6, r6, #24
 8010a00:	d8f5      	bhi.n	80109ee <uxr_reset_stream_storage+0x6a>
 8010a02:	bd70      	pop	{r4, r5, r6, pc}

08010a04 <uxr_add_output_best_effort_buffer>:
 8010a04:	b510      	push	{r4, lr}
 8010a06:	7c04      	ldrb	r4, [r0, #16]
 8010a08:	f104 0c01 	add.w	ip, r4, #1
 8010a0c:	b082      	sub	sp, #8
 8010a0e:	f880 c010 	strb.w	ip, [r0, #16]
 8010a12:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010a16:	f005 fed5 	bl	80167c4 <uxr_init_output_best_effort_stream>
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4620      	mov	r0, r4
 8010a20:	b002      	add	sp, #8
 8010a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a26:	f7ff bf4f 	b.w	80108c8 <uxr_stream_id>
 8010a2a:	bf00      	nop

08010a2c <uxr_add_output_reliable_buffer>:
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	4684      	mov	ip, r0
 8010a32:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a36:	9000      	str	r0, [sp, #0]
 8010a38:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010a3c:	2028      	movs	r0, #40	@ 0x28
 8010a3e:	fb00 c004 	mla	r0, r0, r4, ip
 8010a42:	f104 0e01 	add.w	lr, r4, #1
 8010a46:	3018      	adds	r0, #24
 8010a48:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010a4c:	f005 ff38 	bl	80168c0 <uxr_init_output_reliable_stream>
 8010a50:	2201      	movs	r2, #1
 8010a52:	2102      	movs	r1, #2
 8010a54:	4620      	mov	r0, r4
 8010a56:	b004      	add	sp, #16
 8010a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a5c:	f7ff bf34 	b.w	80108c8 <uxr_stream_id>

08010a60 <uxr_add_input_best_effort_buffer>:
 8010a60:	b510      	push	{r4, lr}
 8010a62:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010a66:	4603      	mov	r3, r0
 8010a68:	1c62      	adds	r2, r4, #1
 8010a6a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010a6e:	b082      	sub	sp, #8
 8010a70:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a78:	f005 fcac 	bl	80163d4 <uxr_init_input_best_effort_stream>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2101      	movs	r1, #1
 8010a80:	4620      	mov	r0, r4
 8010a82:	b002      	add	sp, #8
 8010a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a88:	f7ff bf1e 	b.w	80108c8 <uxr_stream_id>

08010a8c <uxr_add_input_reliable_buffer>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	4684      	mov	ip, r0
 8010a92:	9806      	ldr	r0, [sp, #24]
 8010a94:	9000      	str	r0, [sp, #0]
 8010a96:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010a9a:	2018      	movs	r0, #24
 8010a9c:	fb00 c004 	mla	r0, r0, r4, ip
 8010aa0:	f104 0e01 	add.w	lr, r4, #1
 8010aa4:	3048      	adds	r0, #72	@ 0x48
 8010aa6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010aaa:	f005 fcdf 	bl	801646c <uxr_init_input_reliable_stream>
 8010aae:	2200      	movs	r2, #0
 8010ab0:	2102      	movs	r1, #2
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	b004      	add	sp, #16
 8010ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aba:	f7ff bf05 	b.w	80108c8 <uxr_stream_id>
 8010abe:	bf00      	nop

08010ac0 <uxr_get_output_best_effort_stream>:
 8010ac0:	7c03      	ldrb	r3, [r0, #16]
 8010ac2:	428b      	cmp	r3, r1
 8010ac4:	bf8c      	ite	hi
 8010ac6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010aca:	2000      	movls	r0, #0
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop

08010ad0 <uxr_get_output_reliable_stream>:
 8010ad0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010ad4:	428b      	cmp	r3, r1
 8010ad6:	bf83      	ittte	hi
 8010ad8:	2328      	movhi	r3, #40	@ 0x28
 8010ada:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010ade:	3018      	addhi	r0, #24
 8010ae0:	2000      	movls	r0, #0
 8010ae2:	4770      	bx	lr

08010ae4 <uxr_get_input_best_effort_stream>:
 8010ae4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010ae8:	428b      	cmp	r3, r1
 8010aea:	bf86      	itte	hi
 8010aec:	3121      	addhi	r1, #33	@ 0x21
 8010aee:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010af2:	2000      	movls	r0, #0
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop

08010af8 <uxr_get_input_reliable_stream>:
 8010af8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010afc:	428b      	cmp	r3, r1
 8010afe:	bf83      	ittte	hi
 8010b00:	2318      	movhi	r3, #24
 8010b02:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010b06:	3048      	addhi	r0, #72	@ 0x48
 8010b08:	2000      	movls	r0, #0
 8010b0a:	4770      	bx	lr

08010b0c <uxr_output_streams_confirmed>:
 8010b0c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010b10:	b183      	cbz	r3, 8010b34 <uxr_output_streams_confirmed+0x28>
 8010b12:	b570      	push	{r4, r5, r6, lr}
 8010b14:	4606      	mov	r6, r0
 8010b16:	f100 0518 	add.w	r5, r0, #24
 8010b1a:	2400      	movs	r4, #0
 8010b1c:	e001      	b.n	8010b22 <uxr_output_streams_confirmed+0x16>
 8010b1e:	3528      	adds	r5, #40	@ 0x28
 8010b20:	b138      	cbz	r0, 8010b32 <uxr_output_streams_confirmed+0x26>
 8010b22:	4628      	mov	r0, r5
 8010b24:	f006 f974 	bl	8016e10 <uxr_is_output_up_to_date>
 8010b28:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010b2c:	3401      	adds	r4, #1
 8010b2e:	42a3      	cmp	r3, r4
 8010b30:	d8f5      	bhi.n	8010b1e <uxr_output_streams_confirmed+0x12>
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
 8010b34:	2001      	movs	r0, #1
 8010b36:	4770      	bx	lr

08010b38 <uxr_buffer_submessage_header>:
 8010b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	460e      	mov	r6, r1
 8010b3e:	2104      	movs	r1, #4
 8010b40:	4615      	mov	r5, r2
 8010b42:	461f      	mov	r7, r3
 8010b44:	f7fb fac6 	bl	800c0d4 <ucdr_align_to>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	ea47 0203 	orr.w	r2, r7, r3
 8010b4e:	4631      	mov	r1, r6
 8010b50:	7523      	strb	r3, [r4, #20]
 8010b52:	4620      	mov	r0, r4
 8010b54:	462b      	mov	r3, r5
 8010b56:	f000 fa27 	bl	8010fa8 <uxr_serialize_submessage_header>
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f7fb fad0 	bl	800c100 <ucdr_buffer_remaining>
 8010b60:	42a8      	cmp	r0, r5
 8010b62:	bf34      	ite	cc
 8010b64:	2000      	movcc	r0, #0
 8010b66:	2001      	movcs	r0, #1
 8010b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b6a:	bf00      	nop

08010b6c <uxr_read_submessage_header>:
 8010b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b70:	4604      	mov	r4, r0
 8010b72:	460d      	mov	r5, r1
 8010b74:	2104      	movs	r1, #4
 8010b76:	4616      	mov	r6, r2
 8010b78:	4698      	mov	r8, r3
 8010b7a:	f7fb faab 	bl	800c0d4 <ucdr_align_to>
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f7fb fabe 	bl	800c100 <ucdr_buffer_remaining>
 8010b84:	2803      	cmp	r0, #3
 8010b86:	bf8c      	ite	hi
 8010b88:	2701      	movhi	r7, #1
 8010b8a:	2700      	movls	r7, #0
 8010b8c:	d802      	bhi.n	8010b94 <uxr_read_submessage_header+0x28>
 8010b8e:	4638      	mov	r0, r7
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	4633      	mov	r3, r6
 8010b96:	4642      	mov	r2, r8
 8010b98:	4620      	mov	r0, r4
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f000 fa18 	bl	8010fd0 <uxr_deserialize_submessage_header>
 8010ba0:	f898 3000 	ldrb.w	r3, [r8]
 8010ba4:	f003 0201 	and.w	r2, r3, #1
 8010ba8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010bac:	f888 3000 	strb.w	r3, [r8]
 8010bb0:	7522      	strb	r2, [r4, #20]
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010bb8 <uxr_submessage_padding>:
 8010bb8:	f010 0003 	ands.w	r0, r0, #3
 8010bbc:	bf18      	it	ne
 8010bbe:	f1c0 0004 	rsbne	r0, r0, #4
 8010bc2:	4770      	bx	lr

08010bc4 <uxr_millis>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	4669      	mov	r1, sp
 8010bca:	2001      	movs	r0, #1
 8010bcc:	f7f2 f904 	bl	8002dd8 <clock_gettime>
 8010bd0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010bd4:	4906      	ldr	r1, [pc, #24]	@ (8010bf0 <uxr_millis+0x2c>)
 8010bd6:	fba0 0301 	umull	r0, r3, r0, r1
 8010bda:	1900      	adds	r0, r0, r4
 8010bdc:	fb01 3102 	mla	r1, r1, r2, r3
 8010be0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010be4:	4a03      	ldr	r2, [pc, #12]	@ (8010bf4 <uxr_millis+0x30>)
 8010be6:	2300      	movs	r3, #0
 8010be8:	f7f0 f87e 	bl	8000ce8 <__aeabi_ldivmod>
 8010bec:	b004      	add	sp, #16
 8010bee:	bd10      	pop	{r4, pc}
 8010bf0:	3b9aca00 	.word	0x3b9aca00
 8010bf4:	000f4240 	.word	0x000f4240

08010bf8 <uxr_nanos>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	4669      	mov	r1, sp
 8010bfe:	2001      	movs	r0, #1
 8010c00:	f7f2 f8ea 	bl	8002dd8 <clock_gettime>
 8010c04:	4a06      	ldr	r2, [pc, #24]	@ (8010c20 <uxr_nanos+0x28>)
 8010c06:	9800      	ldr	r0, [sp, #0]
 8010c08:	9902      	ldr	r1, [sp, #8]
 8010c0a:	9c01      	ldr	r4, [sp, #4]
 8010c0c:	fba0 0302 	umull	r0, r3, r0, r2
 8010c10:	1840      	adds	r0, r0, r1
 8010c12:	fb02 3304 	mla	r3, r2, r4, r3
 8010c16:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010c1a:	b004      	add	sp, #16
 8010c1c:	bd10      	pop	{r4, pc}
 8010c1e:	bf00      	nop
 8010c20:	3b9aca00 	.word	0x3b9aca00

08010c24 <on_full_output_buffer_fragmented>:
 8010c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c28:	460c      	mov	r4, r1
 8010c2a:	b08a      	sub	sp, #40	@ 0x28
 8010c2c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010c30:	4606      	mov	r6, r0
 8010c32:	f104 0008 	add.w	r0, r4, #8
 8010c36:	f7ff ff4b 	bl	8010ad0 <uxr_get_output_reliable_stream>
 8010c3a:	4605      	mov	r5, r0
 8010c3c:	f006 f8f2 	bl	8016e24 <get_available_free_slots>
 8010c40:	b968      	cbnz	r0, 8010c5e <on_full_output_buffer_fragmented+0x3a>
 8010c42:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010c46:	4620      	mov	r0, r4
 8010c48:	4798      	blx	r3
 8010c4a:	b918      	cbnz	r0, 8010c54 <on_full_output_buffer_fragmented+0x30>
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	b00a      	add	sp, #40	@ 0x28
 8010c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c54:	4628      	mov	r0, r5
 8010c56:	f006 f8e5 	bl	8016e24 <get_available_free_slots>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d0f6      	beq.n	8010c4c <on_full_output_buffer_fragmented+0x28>
 8010c5e:	8929      	ldrh	r1, [r5, #8]
 8010c60:	89eb      	ldrh	r3, [r5, #14]
 8010c62:	7b28      	ldrb	r0, [r5, #12]
 8010c64:	686a      	ldr	r2, [r5, #4]
 8010c66:	fbb2 f8f1 	udiv	r8, r2, r1
 8010c6a:	fbb3 f2f1 	udiv	r2, r3, r1
 8010c6e:	fb01 3112 	mls	r1, r1, r2, r3
 8010c72:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010c76:	b289      	uxth	r1, r1
 8010c78:	fb08 f101 	mul.w	r1, r8, r1
 8010c7c:	30fc      	adds	r0, #252	@ 0xfc
 8010c7e:	f1a8 0804 	sub.w	r8, r8, #4
 8010c82:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010c86:	4440      	add	r0, r8
 8010c88:	b287      	uxth	r7, r0
 8010c8a:	1bdb      	subs	r3, r3, r7
 8010c8c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010c90:	682b      	ldr	r3, [r5, #0]
 8010c92:	3104      	adds	r1, #4
 8010c94:	4419      	add	r1, r3
 8010c96:	4642      	mov	r2, r8
 8010c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	a802      	add	r0, sp, #8
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f7fb f9eb 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8010ca6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010caa:	f102 0308 	add.w	r3, r2, #8
 8010cae:	4543      	cmp	r3, r8
 8010cb0:	d928      	bls.n	8010d04 <on_full_output_buffer_fragmented+0xe0>
 8010cb2:	463a      	mov	r2, r7
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	210d      	movs	r1, #13
 8010cb8:	a802      	add	r0, sp, #8
 8010cba:	f7ff ff3d 	bl	8010b38 <uxr_buffer_submessage_header>
 8010cbe:	8929      	ldrh	r1, [r5, #8]
 8010cc0:	89eb      	ldrh	r3, [r5, #14]
 8010cc2:	fbb3 f2f1 	udiv	r2, r3, r1
 8010cc6:	fb01 3312 	mls	r3, r1, r2, r3
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	686a      	ldr	r2, [r5, #4]
 8010cce:	fbb2 f2f1 	udiv	r2, r2, r1
 8010cd2:	fb02 f303 	mul.w	r3, r2, r3
 8010cd6:	682a      	ldr	r2, [r5, #0]
 8010cd8:	f842 8003 	str.w	r8, [r2, r3]
 8010cdc:	89e8      	ldrh	r0, [r5, #14]
 8010cde:	2101      	movs	r1, #1
 8010ce0:	f006 f8c0 	bl	8016e64 <uxr_seq_num_add>
 8010ce4:	9904      	ldr	r1, [sp, #16]
 8010ce6:	9a03      	ldr	r2, [sp, #12]
 8010ce8:	81e8      	strh	r0, [r5, #14]
 8010cea:	1a52      	subs	r2, r2, r1
 8010cec:	4630      	mov	r0, r6
 8010cee:	f7fb f9d7 	bl	800c0a0 <ucdr_init_buffer>
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	490f      	ldr	r1, [pc, #60]	@ (8010d34 <on_full_output_buffer_fragmented+0x110>)
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	f7fb f9a6 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	b00a      	add	sp, #40	@ 0x28
 8010d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d04:	b292      	uxth	r2, r2
 8010d06:	2302      	movs	r3, #2
 8010d08:	210d      	movs	r1, #13
 8010d0a:	a802      	add	r0, sp, #8
 8010d0c:	f7ff ff14 	bl	8010b38 <uxr_buffer_submessage_header>
 8010d10:	8928      	ldrh	r0, [r5, #8]
 8010d12:	89eb      	ldrh	r3, [r5, #14]
 8010d14:	fbb3 f1f0 	udiv	r1, r3, r0
 8010d18:	fb00 3311 	mls	r3, r0, r1, r3
 8010d1c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010d20:	6869      	ldr	r1, [r5, #4]
 8010d22:	fbb1 f1f0 	udiv	r1, r1, r0
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	fb01 f303 	mul.w	r3, r1, r3
 8010d2c:	6829      	ldr	r1, [r5, #0]
 8010d2e:	3208      	adds	r2, #8
 8010d30:	50ca      	str	r2, [r1, r3]
 8010d32:	e7d3      	b.n	8010cdc <on_full_output_buffer_fragmented+0xb8>
 8010d34:	08010c25 	.word	0x08010c25

08010d38 <uxr_prepare_output_stream>:
 8010d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	2707      	movs	r7, #7
 8010d3e:	9202      	str	r2, [sp, #8]
 8010d40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d42:	9103      	str	r1, [sp, #12]
 8010d44:	2500      	movs	r5, #0
 8010d46:	3204      	adds	r2, #4
 8010d48:	e9cd 7500 	strd	r7, r5, [sp]
 8010d4c:	461c      	mov	r4, r3
 8010d4e:	4606      	mov	r6, r0
 8010d50:	f7ff fc54 	bl	80105fc <uxr_prepare_stream_to_write_submessage>
 8010d54:	f080 0201 	eor.w	r2, r0, #1
 8010d58:	b2d2      	uxtb	r2, r2
 8010d5a:	75a2      	strb	r2, [r4, #22]
 8010d5c:	b112      	cbz	r2, 8010d64 <uxr_prepare_output_stream+0x2c>
 8010d5e:	4628      	mov	r0, r5
 8010d60:	b007      	add	sp, #28
 8010d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d64:	aa05      	add	r2, sp, #20
 8010d66:	9902      	ldr	r1, [sp, #8]
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ff fd7d 	bl	8010868 <uxr_init_base_object_request>
 8010d6e:	a905      	add	r1, sp, #20
 8010d70:	4605      	mov	r5, r0
 8010d72:	4620      	mov	r0, r4
 8010d74:	f001 f88c 	bl	8011e90 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010d78:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010d7c:	69a6      	ldr	r6, [r4, #24]
 8010d7e:	69e7      	ldr	r7, [r4, #28]
 8010d80:	1a52      	subs	r2, r2, r1
 8010d82:	4620      	mov	r0, r4
 8010d84:	f7fb f98c 	bl	800c0a0 <ucdr_init_buffer>
 8010d88:	4620      	mov	r0, r4
 8010d8a:	463a      	mov	r2, r7
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	f7fb f95b 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 8010d92:	4628      	mov	r0, r5
 8010d94:	b007      	add	sp, #28
 8010d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d98 <uxr_prepare_output_stream_fragmented>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	b091      	sub	sp, #68	@ 0x44
 8010d9e:	4605      	mov	r5, r0
 8010da0:	9105      	str	r1, [sp, #20]
 8010da2:	3008      	adds	r0, #8
 8010da4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010da8:	461e      	mov	r6, r3
 8010daa:	9204      	str	r2, [sp, #16]
 8010dac:	f7ff fe90 	bl	8010ad0 <uxr_get_output_reliable_stream>
 8010db0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	f000 8091 	beq.w	8010edc <uxr_prepare_output_stream_fragmented+0x144>
 8010dba:	4604      	mov	r4, r0
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f000 808d 	beq.w	8010edc <uxr_prepare_output_stream_fragmented+0x144>
 8010dc2:	f006 f82f 	bl	8016e24 <get_available_free_slots>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f000 8083 	beq.w	8010ed2 <uxr_prepare_output_stream_fragmented+0x13a>
 8010dcc:	8922      	ldrh	r2, [r4, #8]
 8010dce:	89e7      	ldrh	r7, [r4, #14]
 8010dd0:	fbb7 f9f2 	udiv	r9, r7, r2
 8010dd4:	fb02 7919 	mls	r9, r2, r9, r7
 8010dd8:	fa1f f989 	uxth.w	r9, r9
 8010ddc:	6863      	ldr	r3, [r4, #4]
 8010dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	9203      	str	r2, [sp, #12]
 8010de6:	fb02 f909 	mul.w	r9, r2, r9
 8010dea:	f109 0904 	add.w	r9, r9, #4
 8010dee:	4499      	add	r9, r3
 8010df0:	7b23      	ldrb	r3, [r4, #12]
 8010df2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010df6:	4543      	cmp	r3, r8
 8010df8:	f1a2 0b04 	sub.w	fp, r2, #4
 8010dfc:	d37a      	bcc.n	8010ef4 <uxr_prepare_output_stream_fragmented+0x15c>
 8010dfe:	f1ab 0a04 	sub.w	sl, fp, #4
 8010e02:	ebaa 0a03 	sub.w	sl, sl, r3
 8010e06:	465a      	mov	r2, fp
 8010e08:	2300      	movs	r3, #0
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	a808      	add	r0, sp, #32
 8010e0e:	f8cd 8000 	str.w	r8, [sp]
 8010e12:	f7fb f933 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8010e16:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e18:	fa1f fa8a 	uxth.w	sl, sl
 8010e1c:	4652      	mov	r2, sl
 8010e1e:	f103 0a08 	add.w	sl, r3, #8
 8010e22:	45da      	cmp	sl, fp
 8010e24:	bf34      	ite	cc
 8010e26:	2302      	movcc	r3, #2
 8010e28:	2300      	movcs	r3, #0
 8010e2a:	210d      	movs	r1, #13
 8010e2c:	a808      	add	r0, sp, #32
 8010e2e:	f7ff fe83 	bl	8010b38 <uxr_buffer_submessage_header>
 8010e32:	8921      	ldrh	r1, [r4, #8]
 8010e34:	fbb7 f2f1 	udiv	r2, r7, r1
 8010e38:	fb01 7212 	mls	r2, r1, r2, r7
 8010e3c:	b292      	uxth	r2, r2
 8010e3e:	6863      	ldr	r3, [r4, #4]
 8010e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e44:	fb02 f303 	mul.w	r3, r2, r3
 8010e48:	6822      	ldr	r2, [r4, #0]
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	f842 b003 	str.w	fp, [r2, r3]
 8010e50:	2101      	movs	r1, #1
 8010e52:	f006 f807 	bl	8016e64 <uxr_seq_num_add>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	f108 0104 	add.w	r1, r8, #4
 8010e5c:	f1a3 0208 	sub.w	r2, r3, #8
 8010e60:	eba2 0208 	sub.w	r2, r2, r8
 8010e64:	4449      	add	r1, r9
 8010e66:	4607      	mov	r7, r0
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f7fb f919 	bl	800c0a0 <ucdr_init_buffer>
 8010e6e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e70:	81e7      	strh	r7, [r4, #14]
 8010e72:	1d1a      	adds	r2, r3, #4
 8010e74:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010e78:	bf28      	it	cs
 8010e7a:	2200      	movcs	r2, #0
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	b292      	uxth	r2, r2
 8010e80:	2107      	movs	r1, #7
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7ff fe58 	bl	8010b38 <uxr_buffer_submessage_header>
 8010e88:	9904      	ldr	r1, [sp, #16]
 8010e8a:	aa07      	add	r2, sp, #28
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f7ff fceb 	bl	8010868 <uxr_init_base_object_request>
 8010e92:	4604      	mov	r4, r0
 8010e94:	b318      	cbz	r0, 8010ede <uxr_prepare_output_stream_fragmented+0x146>
 8010e96:	a907      	add	r1, sp, #28
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f000 fff9 	bl	8011e90 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010e9e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	1a52      	subs	r2, r2, r1
 8010ea6:	f7fb f8fb 	bl	800c0a0 <ucdr_init_buffer>
 8010eaa:	9b05      	ldr	r3, [sp, #20]
 8010eac:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010eb0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010eb2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010eb6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010eb8:	491b      	ldr	r1, [pc, #108]	@ (8010f28 <uxr_prepare_output_stream_fragmented+0x190>)
 8010eba:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010ec4:	462a      	mov	r2, r5
 8010ec6:	f7fb f8bf 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 8010eca:	4620      	mov	r0, r4
 8010ecc:	b011      	add	sp, #68	@ 0x44
 8010ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010ed4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	4798      	blx	r3
 8010eda:	b920      	cbnz	r0, 8010ee6 <uxr_prepare_output_stream_fragmented+0x14e>
 8010edc:	2400      	movs	r4, #0
 8010ede:	4620      	mov	r0, r4
 8010ee0:	b011      	add	sp, #68	@ 0x44
 8010ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f005 ff9c 	bl	8016e24 <get_available_free_slots>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	f47f af6d 	bne.w	8010dcc <uxr_prepare_output_stream_fragmented+0x34>
 8010ef2:	e7f3      	b.n	8010edc <uxr_prepare_output_stream_fragmented+0x144>
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	2101      	movs	r1, #1
 8010ef8:	f005 ffb4 	bl	8016e64 <uxr_seq_num_add>
 8010efc:	8921      	ldrh	r1, [r4, #8]
 8010efe:	fbb0 f2f1 	udiv	r2, r0, r1
 8010f02:	fb01 0912 	mls	r9, r1, r2, r0
 8010f06:	fa1f f289 	uxth.w	r2, r9
 8010f0a:	6863      	ldr	r3, [r4, #4]
 8010f0c:	fbb3 f9f1 	udiv	r9, r3, r1
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	fb02 f909 	mul.w	r9, r2, r9
 8010f16:	f109 0904 	add.w	r9, r9, #4
 8010f1a:	4499      	add	r9, r3
 8010f1c:	4607      	mov	r7, r0
 8010f1e:	7b23      	ldrb	r3, [r4, #12]
 8010f20:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010f24:	e76b      	b.n	8010dfe <uxr_prepare_output_stream_fragmented+0x66>
 8010f26:	bf00      	nop
 8010f28:	08010c25 	.word	0x08010c25

08010f2c <uxr_serialize_message_header>:
 8010f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	4616      	mov	r6, r2
 8010f32:	4604      	mov	r4, r0
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	460d      	mov	r5, r1
 8010f38:	9f08      	ldr	r7, [sp, #32]
 8010f3a:	f7f9 ff6f 	bl	800ae1c <ucdr_serialize_uint8_t>
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4620      	mov	r0, r4
 8010f42:	f7f9 ff6b 	bl	800ae1c <ucdr_serialize_uint8_t>
 8010f46:	9a01      	ldr	r2, [sp, #4]
 8010f48:	2101      	movs	r1, #1
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7fa f812 	bl	800af74 <ucdr_serialize_endian_uint16_t>
 8010f50:	062b      	lsls	r3, r5, #24
 8010f52:	d501      	bpl.n	8010f58 <uxr_serialize_message_header+0x2c>
 8010f54:	b003      	add	sp, #12
 8010f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f58:	2204      	movs	r2, #4
 8010f5a:	4639      	mov	r1, r7
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	b003      	add	sp, #12
 8010f60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f64:	f005 b83c 	b.w	8015fe0 <ucdr_serialize_array_uint8_t>

08010f68 <uxr_deserialize_message_header>:
 8010f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	4616      	mov	r6, r2
 8010f6e:	4604      	mov	r4, r0
 8010f70:	9301      	str	r3, [sp, #4]
 8010f72:	460d      	mov	r5, r1
 8010f74:	9f08      	ldr	r7, [sp, #32]
 8010f76:	f7f9 ff67 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f7f9 ff63 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8010f82:	9a01      	ldr	r2, [sp, #4]
 8010f84:	2101      	movs	r1, #1
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7fa f8e8 	bl	800b15c <ucdr_deserialize_endian_uint16_t>
 8010f8c:	f995 3000 	ldrsb.w	r3, [r5]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	da01      	bge.n	8010f98 <uxr_deserialize_message_header+0x30>
 8010f94:	b003      	add	sp, #12
 8010f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f98:	2204      	movs	r2, #4
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	b003      	add	sp, #12
 8010fa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fa4:	f005 b880 	b.w	80160a8 <ucdr_deserialize_array_uint8_t>

08010fa8 <uxr_serialize_submessage_header>:
 8010fa8:	b530      	push	{r4, r5, lr}
 8010faa:	b083      	sub	sp, #12
 8010fac:	4615      	mov	r5, r2
 8010fae:	4604      	mov	r4, r0
 8010fb0:	9301      	str	r3, [sp, #4]
 8010fb2:	f7f9 ff33 	bl	800ae1c <ucdr_serialize_uint8_t>
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f7f9 ff2f 	bl	800ae1c <ucdr_serialize_uint8_t>
 8010fbe:	9a01      	ldr	r2, [sp, #4]
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	b003      	add	sp, #12
 8010fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fca:	f7f9 bfd3 	b.w	800af74 <ucdr_serialize_endian_uint16_t>
 8010fce:	bf00      	nop

08010fd0 <uxr_deserialize_submessage_header>:
 8010fd0:	b530      	push	{r4, r5, lr}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	4615      	mov	r5, r2
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	9301      	str	r3, [sp, #4]
 8010fda:	f7f9 ff35 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8010fde:	4629      	mov	r1, r5
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f7f9 ff31 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8010fe6:	9a01      	ldr	r2, [sp, #4]
 8010fe8:	2101      	movs	r1, #1
 8010fea:	4620      	mov	r0, r4
 8010fec:	b003      	add	sp, #12
 8010fee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ff2:	f7fa b8b3 	b.w	800b15c <ucdr_deserialize_endian_uint16_t>
 8010ff6:	bf00      	nop

08010ff8 <uxr_serialize_CLIENT_Representation>:
 8010ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ffc:	2204      	movs	r2, #4
 8010ffe:	460e      	mov	r6, r1
 8011000:	4605      	mov	r5, r0
 8011002:	f004 ffed 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011006:	2202      	movs	r2, #2
 8011008:	4607      	mov	r7, r0
 801100a:	1d31      	adds	r1, r6, #4
 801100c:	4628      	mov	r0, r5
 801100e:	f004 ffe7 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011012:	4038      	ands	r0, r7
 8011014:	2202      	movs	r2, #2
 8011016:	1db1      	adds	r1, r6, #6
 8011018:	b2c7      	uxtb	r7, r0
 801101a:	4628      	mov	r0, r5
 801101c:	f004 ffe0 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011020:	2204      	movs	r2, #4
 8011022:	4007      	ands	r7, r0
 8011024:	f106 0108 	add.w	r1, r6, #8
 8011028:	4628      	mov	r0, r5
 801102a:	f004 ffd9 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 801102e:	7b31      	ldrb	r1, [r6, #12]
 8011030:	4007      	ands	r7, r0
 8011032:	4628      	mov	r0, r5
 8011034:	f7f9 fef2 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011038:	7b71      	ldrb	r1, [r6, #13]
 801103a:	4007      	ands	r7, r0
 801103c:	4628      	mov	r0, r5
 801103e:	f7f9 febf 	bl	800adc0 <ucdr_serialize_bool>
 8011042:	7b73      	ldrb	r3, [r6, #13]
 8011044:	ea07 0800 	and.w	r8, r7, r0
 8011048:	b93b      	cbnz	r3, 801105a <uxr_serialize_CLIENT_Representation+0x62>
 801104a:	8bb1      	ldrh	r1, [r6, #28]
 801104c:	4628      	mov	r0, r5
 801104e:	f7f9 ff11 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011052:	ea08 0000 	and.w	r0, r8, r0
 8011056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105a:	6931      	ldr	r1, [r6, #16]
 801105c:	4628      	mov	r0, r5
 801105e:	f7fa f8f3 	bl	800b248 <ucdr_serialize_uint32_t>
 8011062:	6933      	ldr	r3, [r6, #16]
 8011064:	b1e3      	cbz	r3, 80110a0 <uxr_serialize_CLIENT_Representation+0xa8>
 8011066:	b1c0      	cbz	r0, 801109a <uxr_serialize_CLIENT_Representation+0xa2>
 8011068:	4637      	mov	r7, r6
 801106a:	f04f 0900 	mov.w	r9, #0
 801106e:	e001      	b.n	8011074 <uxr_serialize_CLIENT_Representation+0x7c>
 8011070:	3708      	adds	r7, #8
 8011072:	b194      	cbz	r4, 801109a <uxr_serialize_CLIENT_Representation+0xa2>
 8011074:	6979      	ldr	r1, [r7, #20]
 8011076:	4628      	mov	r0, r5
 8011078:	f005 f8d2 	bl	8016220 <ucdr_serialize_string>
 801107c:	69b9      	ldr	r1, [r7, #24]
 801107e:	4604      	mov	r4, r0
 8011080:	4628      	mov	r0, r5
 8011082:	f005 f8cd 	bl	8016220 <ucdr_serialize_string>
 8011086:	6933      	ldr	r3, [r6, #16]
 8011088:	f109 0901 	add.w	r9, r9, #1
 801108c:	4004      	ands	r4, r0
 801108e:	4599      	cmp	r9, r3
 8011090:	b2e4      	uxtb	r4, r4
 8011092:	d3ed      	bcc.n	8011070 <uxr_serialize_CLIENT_Representation+0x78>
 8011094:	ea08 0804 	and.w	r8, r8, r4
 8011098:	e7d7      	b.n	801104a <uxr_serialize_CLIENT_Representation+0x52>
 801109a:	f04f 0800 	mov.w	r8, #0
 801109e:	e7d4      	b.n	801104a <uxr_serialize_CLIENT_Representation+0x52>
 80110a0:	ea08 0800 	and.w	r8, r8, r0
 80110a4:	e7d1      	b.n	801104a <uxr_serialize_CLIENT_Representation+0x52>
 80110a6:	bf00      	nop

080110a8 <uxr_deserialize_CLIENT_Representation>:
 80110a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110ac:	2204      	movs	r2, #4
 80110ae:	460c      	mov	r4, r1
 80110b0:	4605      	mov	r5, r0
 80110b2:	f004 fff9 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80110b6:	2202      	movs	r2, #2
 80110b8:	4607      	mov	r7, r0
 80110ba:	1d21      	adds	r1, r4, #4
 80110bc:	4628      	mov	r0, r5
 80110be:	f004 fff3 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80110c2:	4038      	ands	r0, r7
 80110c4:	2202      	movs	r2, #2
 80110c6:	1da1      	adds	r1, r4, #6
 80110c8:	b2c6      	uxtb	r6, r0
 80110ca:	4628      	mov	r0, r5
 80110cc:	f004 ffec 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80110d0:	2204      	movs	r2, #4
 80110d2:	4006      	ands	r6, r0
 80110d4:	f104 0108 	add.w	r1, r4, #8
 80110d8:	4628      	mov	r0, r5
 80110da:	f004 ffe5 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80110de:	f104 010c 	add.w	r1, r4, #12
 80110e2:	4006      	ands	r6, r0
 80110e4:	4628      	mov	r0, r5
 80110e6:	f7f9 feaf 	bl	800ae48 <ucdr_deserialize_uint8_t>
 80110ea:	f104 010d 	add.w	r1, r4, #13
 80110ee:	ea06 0700 	and.w	r7, r6, r0
 80110f2:	4628      	mov	r0, r5
 80110f4:	f7f9 fe7a 	bl	800adec <ucdr_deserialize_bool>
 80110f8:	7b63      	ldrb	r3, [r4, #13]
 80110fa:	4007      	ands	r7, r0
 80110fc:	b93b      	cbnz	r3, 801110e <uxr_deserialize_CLIENT_Representation+0x66>
 80110fe:	f104 011c 	add.w	r1, r4, #28
 8011102:	4628      	mov	r0, r5
 8011104:	f7f9 ffb6 	bl	800b074 <ucdr_deserialize_uint16_t>
 8011108:	4038      	ands	r0, r7
 801110a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801110e:	f104 0110 	add.w	r1, r4, #16
 8011112:	4628      	mov	r0, r5
 8011114:	f7fa f9c8 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 8011118:	6923      	ldr	r3, [r4, #16]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d903      	bls.n	8011126 <uxr_deserialize_CLIENT_Representation+0x7e>
 801111e:	2301      	movs	r3, #1
 8011120:	75ab      	strb	r3, [r5, #22]
 8011122:	2700      	movs	r7, #0
 8011124:	e7eb      	b.n	80110fe <uxr_deserialize_CLIENT_Representation+0x56>
 8011126:	b30b      	cbz	r3, 801116c <uxr_deserialize_CLIENT_Representation+0xc4>
 8011128:	2800      	cmp	r0, #0
 801112a:	d0fa      	beq.n	8011122 <uxr_deserialize_CLIENT_Representation+0x7a>
 801112c:	46a0      	mov	r8, r4
 801112e:	f04f 0900 	mov.w	r9, #0
 8011132:	e001      	b.n	8011138 <uxr_deserialize_CLIENT_Representation+0x90>
 8011134:	2e00      	cmp	r6, #0
 8011136:	d0f4      	beq.n	8011122 <uxr_deserialize_CLIENT_Representation+0x7a>
 8011138:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801113c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011140:	4628      	mov	r0, r5
 8011142:	f005 f87d 	bl	8016240 <ucdr_deserialize_string>
 8011146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801114a:	4606      	mov	r6, r0
 801114c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011150:	4628      	mov	r0, r5
 8011152:	f005 f875 	bl	8016240 <ucdr_deserialize_string>
 8011156:	6923      	ldr	r3, [r4, #16]
 8011158:	f109 0901 	add.w	r9, r9, #1
 801115c:	4006      	ands	r6, r0
 801115e:	4599      	cmp	r9, r3
 8011160:	f108 0808 	add.w	r8, r8, #8
 8011164:	b2f6      	uxtb	r6, r6
 8011166:	d3e5      	bcc.n	8011134 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011168:	4037      	ands	r7, r6
 801116a:	e7c8      	b.n	80110fe <uxr_deserialize_CLIENT_Representation+0x56>
 801116c:	4007      	ands	r7, r0
 801116e:	e7c6      	b.n	80110fe <uxr_deserialize_CLIENT_Representation+0x56>

08011170 <uxr_serialize_AGENT_Representation>:
 8011170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011174:	2204      	movs	r2, #4
 8011176:	460f      	mov	r7, r1
 8011178:	4605      	mov	r5, r0
 801117a:	f004 ff31 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 801117e:	2202      	movs	r2, #2
 8011180:	4604      	mov	r4, r0
 8011182:	1d39      	adds	r1, r7, #4
 8011184:	4628      	mov	r0, r5
 8011186:	f004 ff2b 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 801118a:	4020      	ands	r0, r4
 801118c:	2202      	movs	r2, #2
 801118e:	1db9      	adds	r1, r7, #6
 8011190:	b2c4      	uxtb	r4, r0
 8011192:	4628      	mov	r0, r5
 8011194:	f004 ff24 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011198:	7a39      	ldrb	r1, [r7, #8]
 801119a:	4004      	ands	r4, r0
 801119c:	4628      	mov	r0, r5
 801119e:	f7f9 fe0f 	bl	800adc0 <ucdr_serialize_bool>
 80111a2:	7a3b      	ldrb	r3, [r7, #8]
 80111a4:	ea00 0804 	and.w	r8, r0, r4
 80111a8:	b913      	cbnz	r3, 80111b0 <uxr_serialize_AGENT_Representation+0x40>
 80111aa:	4640      	mov	r0, r8
 80111ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b0:	68f9      	ldr	r1, [r7, #12]
 80111b2:	4628      	mov	r0, r5
 80111b4:	f7fa f848 	bl	800b248 <ucdr_serialize_uint32_t>
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	b303      	cbz	r3, 80111fe <uxr_serialize_AGENT_Representation+0x8e>
 80111bc:	b1d0      	cbz	r0, 80111f4 <uxr_serialize_AGENT_Representation+0x84>
 80111be:	463e      	mov	r6, r7
 80111c0:	f04f 0900 	mov.w	r9, #0
 80111c4:	e001      	b.n	80111ca <uxr_serialize_AGENT_Representation+0x5a>
 80111c6:	3608      	adds	r6, #8
 80111c8:	b1a4      	cbz	r4, 80111f4 <uxr_serialize_AGENT_Representation+0x84>
 80111ca:	6931      	ldr	r1, [r6, #16]
 80111cc:	4628      	mov	r0, r5
 80111ce:	f005 f827 	bl	8016220 <ucdr_serialize_string>
 80111d2:	6971      	ldr	r1, [r6, #20]
 80111d4:	4604      	mov	r4, r0
 80111d6:	4628      	mov	r0, r5
 80111d8:	f005 f822 	bl	8016220 <ucdr_serialize_string>
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f109 0901 	add.w	r9, r9, #1
 80111e2:	4004      	ands	r4, r0
 80111e4:	4599      	cmp	r9, r3
 80111e6:	b2e4      	uxtb	r4, r4
 80111e8:	d3ed      	bcc.n	80111c6 <uxr_serialize_AGENT_Representation+0x56>
 80111ea:	ea08 0804 	and.w	r8, r8, r4
 80111ee:	4640      	mov	r0, r8
 80111f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111f4:	f04f 0800 	mov.w	r8, #0
 80111f8:	4640      	mov	r0, r8
 80111fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111fe:	ea08 0800 	and.w	r8, r8, r0
 8011202:	e7d2      	b.n	80111aa <uxr_serialize_AGENT_Representation+0x3a>

08011204 <uxr_serialize_DATAWRITER_Representation>:
 8011204:	b570      	push	{r4, r5, r6, lr}
 8011206:	460d      	mov	r5, r1
 8011208:	7809      	ldrb	r1, [r1, #0]
 801120a:	4606      	mov	r6, r0
 801120c:	f7f9 fe06 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011210:	4604      	mov	r4, r0
 8011212:	b130      	cbz	r0, 8011222 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011214:	782b      	ldrb	r3, [r5, #0]
 8011216:	2b02      	cmp	r3, #2
 8011218:	d00c      	beq.n	8011234 <uxr_serialize_DATAWRITER_Representation+0x30>
 801121a:	2b03      	cmp	r3, #3
 801121c:	d010      	beq.n	8011240 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801121e:	2b01      	cmp	r3, #1
 8011220:	d008      	beq.n	8011234 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011222:	2202      	movs	r2, #2
 8011224:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011228:	4630      	mov	r0, r6
 801122a:	f004 fed9 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 801122e:	4020      	ands	r0, r4
 8011230:	b2c0      	uxtb	r0, r0
 8011232:	bd70      	pop	{r4, r5, r6, pc}
 8011234:	6869      	ldr	r1, [r5, #4]
 8011236:	4630      	mov	r0, r6
 8011238:	f004 fff2 	bl	8016220 <ucdr_serialize_string>
 801123c:	4604      	mov	r4, r0
 801123e:	e7f0      	b.n	8011222 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011240:	4629      	mov	r1, r5
 8011242:	4630      	mov	r0, r6
 8011244:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011248:	3104      	adds	r1, #4
 801124a:	f004 ffbd 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 801124e:	4604      	mov	r4, r0
 8011250:	e7e7      	b.n	8011222 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011252:	bf00      	nop

08011254 <uxr_serialize_ObjectVariant.part.0>:
 8011254:	b570      	push	{r4, r5, r6, lr}
 8011256:	780b      	ldrb	r3, [r1, #0]
 8011258:	3b01      	subs	r3, #1
 801125a:	460c      	mov	r4, r1
 801125c:	4605      	mov	r5, r0
 801125e:	2b0d      	cmp	r3, #13
 8011260:	d854      	bhi.n	801130c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011262:	e8df f003 	tbb	[pc, r3]
 8011266:	0730      	.short	0x0730
 8011268:	07071b1b 	.word	0x07071b1b
 801126c:	0c530707 	.word	0x0c530707
 8011270:	494e0c0c 	.word	0x494e0c0c
 8011274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011278:	3104      	adds	r1, #4
 801127a:	f7ff bfc3 	b.w	8011204 <uxr_serialize_DATAWRITER_Representation>
 801127e:	7909      	ldrb	r1, [r1, #4]
 8011280:	f7f9 fdcc 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011284:	b1e8      	cbz	r0, 80112c2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011286:	7923      	ldrb	r3, [r4, #4]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d001      	beq.n	8011290 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801128c:	2b02      	cmp	r3, #2
 801128e:	d13d      	bne.n	801130c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011290:	68a1      	ldr	r1, [r4, #8]
 8011292:	4628      	mov	r0, r5
 8011294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011298:	f004 bfc2 	b.w	8016220 <ucdr_serialize_string>
 801129c:	7909      	ldrb	r1, [r1, #4]
 801129e:	f7f9 fdbd 	bl	800ae1c <ucdr_serialize_uint8_t>
 80112a2:	4606      	mov	r6, r0
 80112a4:	b120      	cbz	r0, 80112b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80112a6:	7923      	ldrb	r3, [r4, #4]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d039      	beq.n	8011320 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80112ac:	2b03      	cmp	r3, #3
 80112ae:	d02f      	beq.n	8011310 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80112b0:	2202      	movs	r2, #2
 80112b2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80112b6:	4628      	mov	r0, r5
 80112b8:	f004 fe92 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 80112bc:	4030      	ands	r0, r6
 80112be:	b2c0      	uxtb	r0, r0
 80112c0:	bd70      	pop	{r4, r5, r6, pc}
 80112c2:	2000      	movs	r0, #0
 80112c4:	bd70      	pop	{r4, r5, r6, pc}
 80112c6:	7909      	ldrb	r1, [r1, #4]
 80112c8:	f7f9 fda8 	bl	800ae1c <ucdr_serialize_uint8_t>
 80112cc:	4606      	mov	r6, r0
 80112ce:	b158      	cbz	r0, 80112e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80112d0:	7923      	ldrb	r3, [r4, #4]
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d003      	beq.n	80112de <uxr_serialize_ObjectVariant.part.0+0x8a>
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d028      	beq.n	801132c <uxr_serialize_ObjectVariant.part.0+0xd8>
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d104      	bne.n	80112e8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80112de:	68a1      	ldr	r1, [r4, #8]
 80112e0:	4628      	mov	r0, r5
 80112e2:	f004 ff9d 	bl	8016220 <ucdr_serialize_string>
 80112e6:	4606      	mov	r6, r0
 80112e8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80112ec:	4628      	mov	r0, r5
 80112ee:	f7fa fad1 	bl	800b894 <ucdr_serialize_int16_t>
 80112f2:	4030      	ands	r0, r6
 80112f4:	b2c0      	uxtb	r0, r0
 80112f6:	bd70      	pop	{r4, r5, r6, pc}
 80112f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112fc:	3104      	adds	r1, #4
 80112fe:	f7ff be7b 	b.w	8010ff8 <uxr_serialize_CLIENT_Representation>
 8011302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011306:	3104      	adds	r1, #4
 8011308:	f7ff bf32 	b.w	8011170 <uxr_serialize_AGENT_Representation>
 801130c:	2001      	movs	r0, #1
 801130e:	bd70      	pop	{r4, r5, r6, pc}
 8011310:	68a2      	ldr	r2, [r4, #8]
 8011312:	f104 010c 	add.w	r1, r4, #12
 8011316:	4628      	mov	r0, r5
 8011318:	f004 ff56 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 801131c:	4606      	mov	r6, r0
 801131e:	e7c7      	b.n	80112b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011320:	68a1      	ldr	r1, [r4, #8]
 8011322:	4628      	mov	r0, r5
 8011324:	f004 ff7c 	bl	8016220 <ucdr_serialize_string>
 8011328:	4606      	mov	r6, r0
 801132a:	e7c1      	b.n	80112b0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801132c:	68a2      	ldr	r2, [r4, #8]
 801132e:	f104 010c 	add.w	r1, r4, #12
 8011332:	4628      	mov	r0, r5
 8011334:	f004 ff48 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 8011338:	4606      	mov	r6, r0
 801133a:	e7d5      	b.n	80112e8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801133c <uxr_deserialize_DATAWRITER_Representation>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	4606      	mov	r6, r0
 8011340:	460d      	mov	r5, r1
 8011342:	f7f9 fd81 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011346:	4604      	mov	r4, r0
 8011348:	b130      	cbz	r0, 8011358 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801134a:	782b      	ldrb	r3, [r5, #0]
 801134c:	2b02      	cmp	r3, #2
 801134e:	d00c      	beq.n	801136a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011350:	2b03      	cmp	r3, #3
 8011352:	d012      	beq.n	801137a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011354:	2b01      	cmp	r3, #1
 8011356:	d008      	beq.n	801136a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011358:	2202      	movs	r2, #2
 801135a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801135e:	4630      	mov	r0, r6
 8011360:	f004 fea2 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011364:	4020      	ands	r0, r4
 8011366:	b2c0      	uxtb	r0, r0
 8011368:	bd70      	pop	{r4, r5, r6, pc}
 801136a:	6869      	ldr	r1, [r5, #4]
 801136c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011370:	4630      	mov	r0, r6
 8011372:	f004 ff65 	bl	8016240 <ucdr_deserialize_string>
 8011376:	4604      	mov	r4, r0
 8011378:	e7ee      	b.n	8011358 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801137a:	1d2b      	adds	r3, r5, #4
 801137c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011380:	f105 0108 	add.w	r1, r5, #8
 8011384:	4630      	mov	r0, r6
 8011386:	f004 ff31 	bl	80161ec <ucdr_deserialize_sequence_uint8_t>
 801138a:	4604      	mov	r4, r0
 801138c:	e7e4      	b.n	8011358 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801138e:	bf00      	nop

08011390 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011390:	b570      	push	{r4, r5, r6, lr}
 8011392:	460d      	mov	r5, r1
 8011394:	7809      	ldrb	r1, [r1, #0]
 8011396:	4606      	mov	r6, r0
 8011398:	f7f9 fd12 	bl	800adc0 <ucdr_serialize_bool>
 801139c:	782b      	ldrb	r3, [r5, #0]
 801139e:	4604      	mov	r4, r0
 80113a0:	b94b      	cbnz	r3, 80113b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80113a2:	7a29      	ldrb	r1, [r5, #8]
 80113a4:	4630      	mov	r0, r6
 80113a6:	f7f9 fd0b 	bl	800adc0 <ucdr_serialize_bool>
 80113aa:	7a2b      	ldrb	r3, [r5, #8]
 80113ac:	4004      	ands	r4, r0
 80113ae:	b2e4      	uxtb	r4, r4
 80113b0:	b943      	cbnz	r3, 80113c4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80113b2:	4620      	mov	r0, r4
 80113b4:	bd70      	pop	{r4, r5, r6, pc}
 80113b6:	6869      	ldr	r1, [r5, #4]
 80113b8:	4630      	mov	r0, r6
 80113ba:	f004 ff31 	bl	8016220 <ucdr_serialize_string>
 80113be:	4004      	ands	r4, r0
 80113c0:	b2e4      	uxtb	r4, r4
 80113c2:	e7ee      	b.n	80113a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80113c4:	68e9      	ldr	r1, [r5, #12]
 80113c6:	4630      	mov	r0, r6
 80113c8:	f004 ff2a 	bl	8016220 <ucdr_serialize_string>
 80113cc:	4004      	ands	r4, r0
 80113ce:	4620      	mov	r0, r4
 80113d0:	bd70      	pop	{r4, r5, r6, pc}
 80113d2:	bf00      	nop

080113d4 <uxr_serialize_OBJK_Topic_Binary>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	460d      	mov	r5, r1
 80113d8:	6809      	ldr	r1, [r1, #0]
 80113da:	4606      	mov	r6, r0
 80113dc:	f004 ff20 	bl	8016220 <ucdr_serialize_string>
 80113e0:	7929      	ldrb	r1, [r5, #4]
 80113e2:	4604      	mov	r4, r0
 80113e4:	4630      	mov	r0, r6
 80113e6:	f7f9 fceb 	bl	800adc0 <ucdr_serialize_bool>
 80113ea:	792b      	ldrb	r3, [r5, #4]
 80113ec:	4004      	ands	r4, r0
 80113ee:	b2e4      	uxtb	r4, r4
 80113f0:	b943      	cbnz	r3, 8011404 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80113f2:	7b29      	ldrb	r1, [r5, #12]
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7f9 fce3 	bl	800adc0 <ucdr_serialize_bool>
 80113fa:	7b2b      	ldrb	r3, [r5, #12]
 80113fc:	4004      	ands	r4, r0
 80113fe:	b93b      	cbnz	r3, 8011410 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011400:	4620      	mov	r0, r4
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	68a9      	ldr	r1, [r5, #8]
 8011406:	4630      	mov	r0, r6
 8011408:	f004 ff0a 	bl	8016220 <ucdr_serialize_string>
 801140c:	4004      	ands	r4, r0
 801140e:	e7f0      	b.n	80113f2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011410:	6929      	ldr	r1, [r5, #16]
 8011412:	4630      	mov	r0, r6
 8011414:	f004 ff04 	bl	8016220 <ucdr_serialize_string>
 8011418:	4004      	ands	r4, r0
 801141a:	b2e4      	uxtb	r4, r4
 801141c:	4620      	mov	r0, r4
 801141e:	bd70      	pop	{r4, r5, r6, pc}

08011420 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	460c      	mov	r4, r1
 8011426:	7809      	ldrb	r1, [r1, #0]
 8011428:	4606      	mov	r6, r0
 801142a:	f7f9 fcc9 	bl	800adc0 <ucdr_serialize_bool>
 801142e:	7823      	ldrb	r3, [r4, #0]
 8011430:	4605      	mov	r5, r0
 8011432:	b96b      	cbnz	r3, 8011450 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011434:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011438:	4630      	mov	r0, r6
 801143a:	f7f9 fcc1 	bl	800adc0 <ucdr_serialize_bool>
 801143e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011442:	4005      	ands	r5, r0
 8011444:	b2ed      	uxtb	r5, r5
 8011446:	2b00      	cmp	r3, #0
 8011448:	d169      	bne.n	801151e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801144a:	4628      	mov	r0, r5
 801144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011450:	6861      	ldr	r1, [r4, #4]
 8011452:	4630      	mov	r0, r6
 8011454:	f7f9 fef8 	bl	800b248 <ucdr_serialize_uint32_t>
 8011458:	6863      	ldr	r3, [r4, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d06b      	beq.n	8011536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801145e:	2800      	cmp	r0, #0
 8011460:	d067      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011462:	68a1      	ldr	r1, [r4, #8]
 8011464:	4630      	mov	r0, r6
 8011466:	f004 fedb 	bl	8016220 <ucdr_serialize_string>
 801146a:	6863      	ldr	r3, [r4, #4]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d953      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011470:	2800      	cmp	r0, #0
 8011472:	d05e      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011474:	68e1      	ldr	r1, [r4, #12]
 8011476:	4630      	mov	r0, r6
 8011478:	f004 fed2 	bl	8016220 <ucdr_serialize_string>
 801147c:	6863      	ldr	r3, [r4, #4]
 801147e:	2b02      	cmp	r3, #2
 8011480:	d94a      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011482:	2800      	cmp	r0, #0
 8011484:	d055      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011486:	6921      	ldr	r1, [r4, #16]
 8011488:	4630      	mov	r0, r6
 801148a:	f004 fec9 	bl	8016220 <ucdr_serialize_string>
 801148e:	6863      	ldr	r3, [r4, #4]
 8011490:	2b03      	cmp	r3, #3
 8011492:	d941      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011494:	2800      	cmp	r0, #0
 8011496:	d04c      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011498:	6961      	ldr	r1, [r4, #20]
 801149a:	4630      	mov	r0, r6
 801149c:	f004 fec0 	bl	8016220 <ucdr_serialize_string>
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	2b04      	cmp	r3, #4
 80114a4:	d938      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114a6:	2800      	cmp	r0, #0
 80114a8:	d043      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114aa:	69a1      	ldr	r1, [r4, #24]
 80114ac:	4630      	mov	r0, r6
 80114ae:	f004 feb7 	bl	8016220 <ucdr_serialize_string>
 80114b2:	6863      	ldr	r3, [r4, #4]
 80114b4:	2b05      	cmp	r3, #5
 80114b6:	d92f      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d03a      	beq.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114bc:	69e1      	ldr	r1, [r4, #28]
 80114be:	4630      	mov	r0, r6
 80114c0:	f004 feae 	bl	8016220 <ucdr_serialize_string>
 80114c4:	6863      	ldr	r3, [r4, #4]
 80114c6:	2b06      	cmp	r3, #6
 80114c8:	d926      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ca:	b390      	cbz	r0, 8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114cc:	6a21      	ldr	r1, [r4, #32]
 80114ce:	4630      	mov	r0, r6
 80114d0:	f004 fea6 	bl	8016220 <ucdr_serialize_string>
 80114d4:	6863      	ldr	r3, [r4, #4]
 80114d6:	2b07      	cmp	r3, #7
 80114d8:	d91e      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114da:	b350      	cbz	r0, 8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80114de:	4630      	mov	r0, r6
 80114e0:	f004 fe9e 	bl	8016220 <ucdr_serialize_string>
 80114e4:	6863      	ldr	r3, [r4, #4]
 80114e6:	2b08      	cmp	r3, #8
 80114e8:	d916      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ea:	b310      	cbz	r0, 8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80114ee:	4630      	mov	r0, r6
 80114f0:	f004 fe96 	bl	8016220 <ucdr_serialize_string>
 80114f4:	6863      	ldr	r3, [r4, #4]
 80114f6:	2b09      	cmp	r3, #9
 80114f8:	d90e      	bls.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114fa:	b1d0      	cbz	r0, 8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011500:	2709      	movs	r7, #9
 8011502:	e000      	b.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011504:	b1a8      	cbz	r0, 8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011506:	f858 1b04 	ldr.w	r1, [r8], #4
 801150a:	4630      	mov	r0, r6
 801150c:	f004 fe88 	bl	8016220 <ucdr_serialize_string>
 8011510:	6862      	ldr	r2, [r4, #4]
 8011512:	3701      	adds	r7, #1
 8011514:	4297      	cmp	r7, r2
 8011516:	d3f5      	bcc.n	8011504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011518:	4005      	ands	r5, r0
 801151a:	b2ed      	uxtb	r5, r5
 801151c:	e78a      	b.n	8011434 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801151e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011520:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011524:	4630      	mov	r0, r6
 8011526:	f004 fe4f 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 801152a:	4005      	ands	r5, r0
 801152c:	4628      	mov	r0, r5
 801152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011532:	2500      	movs	r5, #0
 8011534:	e77e      	b.n	8011434 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011536:	4028      	ands	r0, r5
 8011538:	b2c5      	uxtb	r5, r0
 801153a:	e77b      	b.n	8011434 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801153c <uxr_serialize_OBJK_Publisher_Binary>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	460d      	mov	r5, r1
 8011540:	7809      	ldrb	r1, [r1, #0]
 8011542:	4606      	mov	r6, r0
 8011544:	f7f9 fc3c 	bl	800adc0 <ucdr_serialize_bool>
 8011548:	782b      	ldrb	r3, [r5, #0]
 801154a:	4604      	mov	r4, r0
 801154c:	b94b      	cbnz	r3, 8011562 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801154e:	7a29      	ldrb	r1, [r5, #8]
 8011550:	4630      	mov	r0, r6
 8011552:	f7f9 fc35 	bl	800adc0 <ucdr_serialize_bool>
 8011556:	7a2b      	ldrb	r3, [r5, #8]
 8011558:	4004      	ands	r4, r0
 801155a:	b2e4      	uxtb	r4, r4
 801155c:	b943      	cbnz	r3, 8011570 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801155e:	4620      	mov	r0, r4
 8011560:	bd70      	pop	{r4, r5, r6, pc}
 8011562:	6869      	ldr	r1, [r5, #4]
 8011564:	4630      	mov	r0, r6
 8011566:	f004 fe5b 	bl	8016220 <ucdr_serialize_string>
 801156a:	4004      	ands	r4, r0
 801156c:	b2e4      	uxtb	r4, r4
 801156e:	e7ee      	b.n	801154e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011570:	f105 010c 	add.w	r1, r5, #12
 8011574:	4630      	mov	r0, r6
 8011576:	f7ff ff53 	bl	8011420 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801157a:	4004      	ands	r4, r0
 801157c:	4620      	mov	r0, r4
 801157e:	bd70      	pop	{r4, r5, r6, pc}

08011580 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011584:	460c      	mov	r4, r1
 8011586:	7809      	ldrb	r1, [r1, #0]
 8011588:	4606      	mov	r6, r0
 801158a:	f7f9 fc19 	bl	800adc0 <ucdr_serialize_bool>
 801158e:	7823      	ldrb	r3, [r4, #0]
 8011590:	4605      	mov	r5, r0
 8011592:	b96b      	cbnz	r3, 80115b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011594:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011598:	4630      	mov	r0, r6
 801159a:	f7f9 fc11 	bl	800adc0 <ucdr_serialize_bool>
 801159e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80115a2:	4005      	ands	r5, r0
 80115a4:	b2ed      	uxtb	r5, r5
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d169      	bne.n	801167e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80115aa:	4628      	mov	r0, r5
 80115ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b0:	6861      	ldr	r1, [r4, #4]
 80115b2:	4630      	mov	r0, r6
 80115b4:	f7f9 fe48 	bl	800b248 <ucdr_serialize_uint32_t>
 80115b8:	6863      	ldr	r3, [r4, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d06b      	beq.n	8011696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80115be:	2800      	cmp	r0, #0
 80115c0:	d067      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115c2:	68a1      	ldr	r1, [r4, #8]
 80115c4:	4630      	mov	r0, r6
 80115c6:	f004 fe2b 	bl	8016220 <ucdr_serialize_string>
 80115ca:	6863      	ldr	r3, [r4, #4]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d953      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d05e      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115d4:	68e1      	ldr	r1, [r4, #12]
 80115d6:	4630      	mov	r0, r6
 80115d8:	f004 fe22 	bl	8016220 <ucdr_serialize_string>
 80115dc:	6863      	ldr	r3, [r4, #4]
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d94a      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d055      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115e6:	6921      	ldr	r1, [r4, #16]
 80115e8:	4630      	mov	r0, r6
 80115ea:	f004 fe19 	bl	8016220 <ucdr_serialize_string>
 80115ee:	6863      	ldr	r3, [r4, #4]
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d941      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d04c      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115f8:	6961      	ldr	r1, [r4, #20]
 80115fa:	4630      	mov	r0, r6
 80115fc:	f004 fe10 	bl	8016220 <ucdr_serialize_string>
 8011600:	6863      	ldr	r3, [r4, #4]
 8011602:	2b04      	cmp	r3, #4
 8011604:	d938      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011606:	2800      	cmp	r0, #0
 8011608:	d043      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801160a:	69a1      	ldr	r1, [r4, #24]
 801160c:	4630      	mov	r0, r6
 801160e:	f004 fe07 	bl	8016220 <ucdr_serialize_string>
 8011612:	6863      	ldr	r3, [r4, #4]
 8011614:	2b05      	cmp	r3, #5
 8011616:	d92f      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011618:	2800      	cmp	r0, #0
 801161a:	d03a      	beq.n	8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801161c:	69e1      	ldr	r1, [r4, #28]
 801161e:	4630      	mov	r0, r6
 8011620:	f004 fdfe 	bl	8016220 <ucdr_serialize_string>
 8011624:	6863      	ldr	r3, [r4, #4]
 8011626:	2b06      	cmp	r3, #6
 8011628:	d926      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801162a:	b390      	cbz	r0, 8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801162c:	6a21      	ldr	r1, [r4, #32]
 801162e:	4630      	mov	r0, r6
 8011630:	f004 fdf6 	bl	8016220 <ucdr_serialize_string>
 8011634:	6863      	ldr	r3, [r4, #4]
 8011636:	2b07      	cmp	r3, #7
 8011638:	d91e      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801163a:	b350      	cbz	r0, 8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801163c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801163e:	4630      	mov	r0, r6
 8011640:	f004 fdee 	bl	8016220 <ucdr_serialize_string>
 8011644:	6863      	ldr	r3, [r4, #4]
 8011646:	2b08      	cmp	r3, #8
 8011648:	d916      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801164a:	b310      	cbz	r0, 8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801164c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801164e:	4630      	mov	r0, r6
 8011650:	f004 fde6 	bl	8016220 <ucdr_serialize_string>
 8011654:	6863      	ldr	r3, [r4, #4]
 8011656:	2b09      	cmp	r3, #9
 8011658:	d90e      	bls.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801165a:	b1d0      	cbz	r0, 8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801165c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011660:	2709      	movs	r7, #9
 8011662:	e000      	b.n	8011666 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011664:	b1a8      	cbz	r0, 8011692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011666:	f858 1b04 	ldr.w	r1, [r8], #4
 801166a:	4630      	mov	r0, r6
 801166c:	f004 fdd8 	bl	8016220 <ucdr_serialize_string>
 8011670:	6862      	ldr	r2, [r4, #4]
 8011672:	3701      	adds	r7, #1
 8011674:	4297      	cmp	r7, r2
 8011676:	d3f5      	bcc.n	8011664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011678:	4005      	ands	r5, r0
 801167a:	b2ed      	uxtb	r5, r5
 801167c:	e78a      	b.n	8011594 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801167e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011680:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011684:	4630      	mov	r0, r6
 8011686:	f004 fd9f 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 801168a:	4005      	ands	r5, r0
 801168c:	4628      	mov	r0, r5
 801168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011692:	2500      	movs	r5, #0
 8011694:	e77e      	b.n	8011594 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011696:	4028      	ands	r0, r5
 8011698:	b2c5      	uxtb	r5, r0
 801169a:	e77b      	b.n	8011594 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801169c <uxr_serialize_OBJK_Subscriber_Binary>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	460d      	mov	r5, r1
 80116a0:	7809      	ldrb	r1, [r1, #0]
 80116a2:	4606      	mov	r6, r0
 80116a4:	f7f9 fb8c 	bl	800adc0 <ucdr_serialize_bool>
 80116a8:	782b      	ldrb	r3, [r5, #0]
 80116aa:	4604      	mov	r4, r0
 80116ac:	b94b      	cbnz	r3, 80116c2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80116ae:	7a29      	ldrb	r1, [r5, #8]
 80116b0:	4630      	mov	r0, r6
 80116b2:	f7f9 fb85 	bl	800adc0 <ucdr_serialize_bool>
 80116b6:	7a2b      	ldrb	r3, [r5, #8]
 80116b8:	4004      	ands	r4, r0
 80116ba:	b2e4      	uxtb	r4, r4
 80116bc:	b943      	cbnz	r3, 80116d0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80116be:	4620      	mov	r0, r4
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	6869      	ldr	r1, [r5, #4]
 80116c4:	4630      	mov	r0, r6
 80116c6:	f004 fdab 	bl	8016220 <ucdr_serialize_string>
 80116ca:	4004      	ands	r4, r0
 80116cc:	b2e4      	uxtb	r4, r4
 80116ce:	e7ee      	b.n	80116ae <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80116d0:	f105 010c 	add.w	r1, r5, #12
 80116d4:	4630      	mov	r0, r6
 80116d6:	f7ff ff53 	bl	8011580 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80116da:	4004      	ands	r4, r0
 80116dc:	4620      	mov	r0, r4
 80116de:	bd70      	pop	{r4, r5, r6, pc}

080116e0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80116e0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80116e4:	4688      	mov	r8, r1
 80116e6:	8809      	ldrh	r1, [r1, #0]
 80116e8:	4681      	mov	r9, r0
 80116ea:	f7f9 fbc3 	bl	800ae74 <ucdr_serialize_uint16_t>
 80116ee:	f898 1002 	ldrb.w	r1, [r8, #2]
 80116f2:	4606      	mov	r6, r0
 80116f4:	4648      	mov	r0, r9
 80116f6:	f7f9 fb63 	bl	800adc0 <ucdr_serialize_bool>
 80116fa:	f898 3002 	ldrb.w	r3, [r8, #2]
 80116fe:	4006      	ands	r6, r0
 8011700:	b2f5      	uxtb	r5, r6
 8011702:	b9eb      	cbnz	r3, 8011740 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011704:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011708:	4648      	mov	r0, r9
 801170a:	f7f9 fb59 	bl	800adc0 <ucdr_serialize_bool>
 801170e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011712:	4005      	ands	r5, r0
 8011714:	bb7b      	cbnz	r3, 8011776 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011716:	f898 100c 	ldrb.w	r1, [r8, #12]
 801171a:	4648      	mov	r0, r9
 801171c:	f7f9 fb50 	bl	800adc0 <ucdr_serialize_bool>
 8011720:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011724:	4005      	ands	r5, r0
 8011726:	b9f3      	cbnz	r3, 8011766 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011728:	f898 1014 	ldrb.w	r1, [r8, #20]
 801172c:	4648      	mov	r0, r9
 801172e:	f7f9 fb47 	bl	800adc0 <ucdr_serialize_bool>
 8011732:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011736:	4005      	ands	r5, r0
 8011738:	b94b      	cbnz	r3, 801174e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801173a:	4628      	mov	r0, r5
 801173c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011740:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011744:	4648      	mov	r0, r9
 8011746:	f7f9 fb95 	bl	800ae74 <ucdr_serialize_uint16_t>
 801174a:	4005      	ands	r5, r0
 801174c:	e7da      	b.n	8011704 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801174e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011752:	f108 011c 	add.w	r1, r8, #28
 8011756:	4648      	mov	r0, r9
 8011758:	f004 fd36 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 801175c:	4028      	ands	r0, r5
 801175e:	b2c5      	uxtb	r5, r0
 8011760:	4628      	mov	r0, r5
 8011762:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011766:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801176a:	4648      	mov	r0, r9
 801176c:	f7f9 fd6c 	bl	800b248 <ucdr_serialize_uint32_t>
 8011770:	4028      	ands	r0, r5
 8011772:	b2c5      	uxtb	r5, r0
 8011774:	e7d8      	b.n	8011728 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011776:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801177a:	4648      	mov	r0, r9
 801177c:	f7f9 fd64 	bl	800b248 <ucdr_serialize_uint32_t>
 8011780:	4028      	ands	r0, r5
 8011782:	b2c5      	uxtb	r5, r0
 8011784:	e7c7      	b.n	8011716 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011786:	bf00      	nop

08011788 <uxr_serialize_OBJK_DataReader_Binary>:
 8011788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178a:	2202      	movs	r2, #2
 801178c:	460c      	mov	r4, r1
 801178e:	4606      	mov	r6, r0
 8011790:	f004 fc26 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011794:	78a1      	ldrb	r1, [r4, #2]
 8011796:	4605      	mov	r5, r0
 8011798:	4630      	mov	r0, r6
 801179a:	f7f9 fb11 	bl	800adc0 <ucdr_serialize_bool>
 801179e:	78a3      	ldrb	r3, [r4, #2]
 80117a0:	4005      	ands	r5, r0
 80117a2:	b2ed      	uxtb	r5, r5
 80117a4:	b90b      	cbnz	r3, 80117aa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80117a6:	4628      	mov	r0, r5
 80117a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117aa:	f104 0108 	add.w	r1, r4, #8
 80117ae:	4630      	mov	r0, r6
 80117b0:	f7ff ff96 	bl	80116e0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80117b4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80117b8:	4607      	mov	r7, r0
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7f9 fb00 	bl	800adc0 <ucdr_serialize_bool>
 80117c0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80117c4:	4038      	ands	r0, r7
 80117c6:	b2c7      	uxtb	r7, r0
 80117c8:	b95b      	cbnz	r3, 80117e2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80117ca:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80117ce:	4630      	mov	r0, r6
 80117d0:	f7f9 faf6 	bl	800adc0 <ucdr_serialize_bool>
 80117d4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80117d8:	4007      	ands	r7, r0
 80117da:	b94b      	cbnz	r3, 80117f0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80117dc:	403d      	ands	r5, r7
 80117de:	4628      	mov	r0, r5
 80117e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117e2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7f9 ff84 	bl	800b6f4 <ucdr_serialize_uint64_t>
 80117ec:	4007      	ands	r7, r0
 80117ee:	e7ec      	b.n	80117ca <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80117f0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80117f2:	4630      	mov	r0, r6
 80117f4:	f004 fd14 	bl	8016220 <ucdr_serialize_string>
 80117f8:	4007      	ands	r7, r0
 80117fa:	b2ff      	uxtb	r7, r7
 80117fc:	e7ee      	b.n	80117dc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80117fe:	bf00      	nop

08011800 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011802:	2202      	movs	r2, #2
 8011804:	460d      	mov	r5, r1
 8011806:	4606      	mov	r6, r0
 8011808:	f004 fbea 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 801180c:	78a9      	ldrb	r1, [r5, #2]
 801180e:	4604      	mov	r4, r0
 8011810:	4630      	mov	r0, r6
 8011812:	f7f9 fad5 	bl	800adc0 <ucdr_serialize_bool>
 8011816:	78ab      	ldrb	r3, [r5, #2]
 8011818:	4004      	ands	r4, r0
 801181a:	b2e4      	uxtb	r4, r4
 801181c:	b90b      	cbnz	r3, 8011822 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801181e:	4620      	mov	r0, r4
 8011820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011822:	f105 0108 	add.w	r1, r5, #8
 8011826:	4630      	mov	r0, r6
 8011828:	f7ff ff5a 	bl	80116e0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801182c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011830:	4607      	mov	r7, r0
 8011832:	4630      	mov	r0, r6
 8011834:	f7f9 fac4 	bl	800adc0 <ucdr_serialize_bool>
 8011838:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801183c:	4038      	ands	r0, r7
 801183e:	b2c7      	uxtb	r7, r0
 8011840:	b913      	cbnz	r3, 8011848 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011842:	403c      	ands	r4, r7
 8011844:	4620      	mov	r0, r4
 8011846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011848:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801184c:	4630      	mov	r0, r6
 801184e:	f7f9 ff51 	bl	800b6f4 <ucdr_serialize_uint64_t>
 8011852:	4007      	ands	r7, r0
 8011854:	e7f5      	b.n	8011842 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011856:	bf00      	nop

08011858 <uxr_deserialize_ObjectVariant>:
 8011858:	b570      	push	{r4, r5, r6, lr}
 801185a:	4605      	mov	r5, r0
 801185c:	460e      	mov	r6, r1
 801185e:	f7f9 faf3 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011862:	b168      	cbz	r0, 8011880 <uxr_deserialize_ObjectVariant+0x28>
 8011864:	7833      	ldrb	r3, [r6, #0]
 8011866:	3b01      	subs	r3, #1
 8011868:	4604      	mov	r4, r0
 801186a:	2b0d      	cmp	r3, #13
 801186c:	d809      	bhi.n	8011882 <uxr_deserialize_ObjectVariant+0x2a>
 801186e:	e8df f003 	tbb	[pc, r3]
 8011872:	0a41      	.short	0x0a41
 8011874:	0a0a2323 	.word	0x0a0a2323
 8011878:	10080a0a 	.word	0x10080a0a
 801187c:	565c1010 	.word	0x565c1010
 8011880:	2400      	movs	r4, #0
 8011882:	4620      	mov	r0, r4
 8011884:	bd70      	pop	{r4, r5, r6, pc}
 8011886:	1d31      	adds	r1, r6, #4
 8011888:	4628      	mov	r0, r5
 801188a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801188e:	f7ff bd55 	b.w	801133c <uxr_deserialize_DATAWRITER_Representation>
 8011892:	1d31      	adds	r1, r6, #4
 8011894:	4628      	mov	r0, r5
 8011896:	f7f9 fad7 	bl	800ae48 <ucdr_deserialize_uint8_t>
 801189a:	2800      	cmp	r0, #0
 801189c:	d0f0      	beq.n	8011880 <uxr_deserialize_ObjectVariant+0x28>
 801189e:	7933      	ldrb	r3, [r6, #4]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d001      	beq.n	80118a8 <uxr_deserialize_ObjectVariant+0x50>
 80118a4:	2b02      	cmp	r3, #2
 80118a6:	d1ec      	bne.n	8011882 <uxr_deserialize_ObjectVariant+0x2a>
 80118a8:	68b1      	ldr	r1, [r6, #8]
 80118aa:	4628      	mov	r0, r5
 80118ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118b4:	f004 bcc4 	b.w	8016240 <ucdr_deserialize_string>
 80118b8:	1d31      	adds	r1, r6, #4
 80118ba:	4628      	mov	r0, r5
 80118bc:	f7f9 fac4 	bl	800ae48 <ucdr_deserialize_uint8_t>
 80118c0:	4604      	mov	r4, r0
 80118c2:	b170      	cbz	r0, 80118e2 <uxr_deserialize_ObjectVariant+0x8a>
 80118c4:	7933      	ldrb	r3, [r6, #4]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d04c      	beq.n	8011964 <uxr_deserialize_ObjectVariant+0x10c>
 80118ca:	2b03      	cmp	r3, #3
 80118cc:	d109      	bne.n	80118e2 <uxr_deserialize_ObjectVariant+0x8a>
 80118ce:	f106 0308 	add.w	r3, r6, #8
 80118d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118d6:	f106 010c 	add.w	r1, r6, #12
 80118da:	4628      	mov	r0, r5
 80118dc:	f004 fc86 	bl	80161ec <ucdr_deserialize_sequence_uint8_t>
 80118e0:	4604      	mov	r4, r0
 80118e2:	2202      	movs	r2, #2
 80118e4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80118e8:	4628      	mov	r0, r5
 80118ea:	f004 fbdd 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80118ee:	4020      	ands	r0, r4
 80118f0:	b2c4      	uxtb	r4, r0
 80118f2:	e7c6      	b.n	8011882 <uxr_deserialize_ObjectVariant+0x2a>
 80118f4:	1d31      	adds	r1, r6, #4
 80118f6:	4628      	mov	r0, r5
 80118f8:	f7f9 faa6 	bl	800ae48 <ucdr_deserialize_uint8_t>
 80118fc:	4604      	mov	r4, r0
 80118fe:	b130      	cbz	r0, 801190e <uxr_deserialize_ObjectVariant+0xb6>
 8011900:	7933      	ldrb	r3, [r6, #4]
 8011902:	2b02      	cmp	r3, #2
 8011904:	d036      	beq.n	8011974 <uxr_deserialize_ObjectVariant+0x11c>
 8011906:	2b03      	cmp	r3, #3
 8011908:	d03c      	beq.n	8011984 <uxr_deserialize_ObjectVariant+0x12c>
 801190a:	2b01      	cmp	r3, #1
 801190c:	d032      	beq.n	8011974 <uxr_deserialize_ObjectVariant+0x11c>
 801190e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011912:	4628      	mov	r0, r5
 8011914:	f7fa f83e 	bl	800b994 <ucdr_deserialize_int16_t>
 8011918:	4020      	ands	r0, r4
 801191a:	b2c4      	uxtb	r4, r0
 801191c:	e7b1      	b.n	8011882 <uxr_deserialize_ObjectVariant+0x2a>
 801191e:	1d31      	adds	r1, r6, #4
 8011920:	4628      	mov	r0, r5
 8011922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011926:	f7ff bbbf 	b.w	80110a8 <uxr_deserialize_CLIENT_Representation>
 801192a:	2204      	movs	r2, #4
 801192c:	18b1      	adds	r1, r6, r2
 801192e:	4628      	mov	r0, r5
 8011930:	f004 fbba 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011934:	2202      	movs	r2, #2
 8011936:	f106 0108 	add.w	r1, r6, #8
 801193a:	4604      	mov	r4, r0
 801193c:	4628      	mov	r0, r5
 801193e:	f004 fbb3 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011942:	2202      	movs	r2, #2
 8011944:	4004      	ands	r4, r0
 8011946:	f106 010a 	add.w	r1, r6, #10
 801194a:	4628      	mov	r0, r5
 801194c:	f004 fbac 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011950:	b2e4      	uxtb	r4, r4
 8011952:	4603      	mov	r3, r0
 8011954:	f106 010c 	add.w	r1, r6, #12
 8011958:	4628      	mov	r0, r5
 801195a:	401c      	ands	r4, r3
 801195c:	f7f9 fa46 	bl	800adec <ucdr_deserialize_bool>
 8011960:	4004      	ands	r4, r0
 8011962:	e78e      	b.n	8011882 <uxr_deserialize_ObjectVariant+0x2a>
 8011964:	68b1      	ldr	r1, [r6, #8]
 8011966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801196a:	4628      	mov	r0, r5
 801196c:	f004 fc68 	bl	8016240 <ucdr_deserialize_string>
 8011970:	4604      	mov	r4, r0
 8011972:	e7b6      	b.n	80118e2 <uxr_deserialize_ObjectVariant+0x8a>
 8011974:	68b1      	ldr	r1, [r6, #8]
 8011976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801197a:	4628      	mov	r0, r5
 801197c:	f004 fc60 	bl	8016240 <ucdr_deserialize_string>
 8011980:	4604      	mov	r4, r0
 8011982:	e7c4      	b.n	801190e <uxr_deserialize_ObjectVariant+0xb6>
 8011984:	f106 0308 	add.w	r3, r6, #8
 8011988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801198c:	f106 010c 	add.w	r1, r6, #12
 8011990:	4628      	mov	r0, r5
 8011992:	f004 fc2b 	bl	80161ec <ucdr_deserialize_sequence_uint8_t>
 8011996:	4604      	mov	r4, r0
 8011998:	e7b9      	b.n	801190e <uxr_deserialize_ObjectVariant+0xb6>
 801199a:	bf00      	nop

0801199c <uxr_deserialize_BaseObjectRequest>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	2202      	movs	r2, #2
 80119a0:	4605      	mov	r5, r0
 80119a2:	460e      	mov	r6, r1
 80119a4:	f004 fb80 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80119a8:	2202      	movs	r2, #2
 80119aa:	4604      	mov	r4, r0
 80119ac:	18b1      	adds	r1, r6, r2
 80119ae:	4628      	mov	r0, r5
 80119b0:	f004 fb7a 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 80119b4:	4020      	ands	r0, r4
 80119b6:	b2c0      	uxtb	r0, r0
 80119b8:	bd70      	pop	{r4, r5, r6, pc}
 80119ba:	bf00      	nop

080119bc <uxr_serialize_ActivityInfoVariant>:
 80119bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119c0:	460d      	mov	r5, r1
 80119c2:	7809      	ldrb	r1, [r1, #0]
 80119c4:	4607      	mov	r7, r0
 80119c6:	f7f9 fa29 	bl	800ae1c <ucdr_serialize_uint8_t>
 80119ca:	4681      	mov	r9, r0
 80119cc:	b138      	cbz	r0, 80119de <uxr_serialize_ActivityInfoVariant+0x22>
 80119ce:	782b      	ldrb	r3, [r5, #0]
 80119d0:	2b06      	cmp	r3, #6
 80119d2:	f000 8082 	beq.w	8011ada <uxr_serialize_ActivityInfoVariant+0x11e>
 80119d6:	2b0d      	cmp	r3, #13
 80119d8:	d016      	beq.n	8011a08 <uxr_serialize_ActivityInfoVariant+0x4c>
 80119da:	2b05      	cmp	r3, #5
 80119dc:	d002      	beq.n	80119e4 <uxr_serialize_ActivityInfoVariant+0x28>
 80119de:	4648      	mov	r0, r9
 80119e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80119e8:	4638      	mov	r0, r7
 80119ea:	f7f9 ff53 	bl	800b894 <ucdr_serialize_int16_t>
 80119ee:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80119f2:	4681      	mov	r9, r0
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7f9 fe7d 	bl	800b6f4 <ucdr_serialize_uint64_t>
 80119fa:	ea09 0000 	and.w	r0, r9, r0
 80119fe:	fa5f f980 	uxtb.w	r9, r0
 8011a02:	4648      	mov	r0, r9
 8011a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a08:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7f9 ff41 	bl	800b894 <ucdr_serialize_int16_t>
 8011a12:	68e9      	ldr	r1, [r5, #12]
 8011a14:	4681      	mov	r9, r0
 8011a16:	4638      	mov	r0, r7
 8011a18:	f7f9 fc16 	bl	800b248 <ucdr_serialize_uint32_t>
 8011a1c:	68eb      	ldr	r3, [r5, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0eb      	beq.n	80119fa <uxr_serialize_ActivityInfoVariant+0x3e>
 8011a22:	b320      	cbz	r0, 8011a6e <uxr_serialize_ActivityInfoVariant+0xb2>
 8011a24:	f105 080c 	add.w	r8, r5, #12
 8011a28:	2600      	movs	r6, #0
 8011a2a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011a2e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011a32:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011a36:	4638      	mov	r0, r7
 8011a38:	f7f9 f9f0 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d053      	beq.n	8011ae8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011a40:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011a44:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011a48:	0074      	lsls	r4, r6, #1
 8011a4a:	00c9      	lsls	r1, r1, #3
 8011a4c:	2b03      	cmp	r3, #3
 8011a4e:	d854      	bhi.n	8011afa <uxr_serialize_ActivityInfoVariant+0x13e>
 8011a50:	e8df f003 	tbb	[pc, r3]
 8011a54:	02102132 	.word	0x02102132
 8011a58:	4441      	add	r1, r8
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	6889      	ldr	r1, [r1, #8]
 8011a5e:	f004 fbdf 	bl	8016220 <ucdr_serialize_string>
 8011a62:	68ea      	ldr	r2, [r5, #12]
 8011a64:	3601      	adds	r6, #1
 8011a66:	4296      	cmp	r6, r2
 8011a68:	d242      	bcs.n	8011af0 <uxr_serialize_ActivityInfoVariant+0x134>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d1dd      	bne.n	8011a2a <uxr_serialize_ActivityInfoVariant+0x6e>
 8011a6e:	f04f 0900 	mov.w	r9, #0
 8011a72:	e7b4      	b.n	80119de <uxr_serialize_ActivityInfoVariant+0x22>
 8011a74:	3108      	adds	r1, #8
 8011a76:	4441      	add	r1, r8
 8011a78:	2210      	movs	r2, #16
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	f004 fab0 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011a80:	4434      	add	r4, r6
 8011a82:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011a86:	4604      	mov	r4, r0
 8011a88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	f7f9 fbdc 	bl	800b248 <ucdr_serialize_uint32_t>
 8011a90:	4020      	ands	r0, r4
 8011a92:	b2c0      	uxtb	r0, r0
 8011a94:	e7e5      	b.n	8011a62 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011a96:	3108      	adds	r1, #8
 8011a98:	4441      	add	r1, r8
 8011a9a:	2204      	movs	r2, #4
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f004 fa9f 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011aa2:	4434      	add	r4, r6
 8011aa4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	8b19      	ldrh	r1, [r3, #24]
 8011aac:	4638      	mov	r0, r7
 8011aae:	f7f9 f9e1 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011ab2:	4020      	ands	r0, r4
 8011ab4:	b2c0      	uxtb	r0, r0
 8011ab6:	e7d4      	b.n	8011a62 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011ab8:	3108      	adds	r1, #8
 8011aba:	4441      	add	r1, r8
 8011abc:	2202      	movs	r2, #2
 8011abe:	4638      	mov	r0, r7
 8011ac0:	f004 fa8e 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011ac4:	4434      	add	r4, r6
 8011ac6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011aca:	4604      	mov	r4, r0
 8011acc:	7d99      	ldrb	r1, [r3, #22]
 8011ace:	4638      	mov	r0, r7
 8011ad0:	f7f9 f9a4 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011ad4:	4020      	ands	r0, r4
 8011ad6:	b2c0      	uxtb	r0, r0
 8011ad8:	e7c3      	b.n	8011a62 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011ada:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011ade:	4638      	mov	r0, r7
 8011ae0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae4:	f7f9 bed6 	b.w	800b894 <ucdr_serialize_int16_t>
 8011ae8:	68ea      	ldr	r2, [r5, #12]
 8011aea:	3601      	adds	r6, #1
 8011aec:	42b2      	cmp	r2, r6
 8011aee:	d8be      	bhi.n	8011a6e <uxr_serialize_ActivityInfoVariant+0xb2>
 8011af0:	ea09 0900 	and.w	r9, r9, r0
 8011af4:	fa5f f989 	uxtb.w	r9, r9
 8011af8:	e771      	b.n	80119de <uxr_serialize_ActivityInfoVariant+0x22>
 8011afa:	68eb      	ldr	r3, [r5, #12]
 8011afc:	3601      	adds	r6, #1
 8011afe:	429e      	cmp	r6, r3
 8011b00:	f10a 0a18 	add.w	sl, sl, #24
 8011b04:	d395      	bcc.n	8011a32 <uxr_serialize_ActivityInfoVariant+0x76>
 8011b06:	e76a      	b.n	80119de <uxr_serialize_ActivityInfoVariant+0x22>

08011b08 <uxr_deserialize_BaseObjectReply>:
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0c:	2202      	movs	r2, #2
 8011b0e:	4606      	mov	r6, r0
 8011b10:	460f      	mov	r7, r1
 8011b12:	f004 fac9 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011b16:	2202      	movs	r2, #2
 8011b18:	18b9      	adds	r1, r7, r2
 8011b1a:	4605      	mov	r5, r0
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	f004 fac3 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011b22:	1d39      	adds	r1, r7, #4
 8011b24:	4680      	mov	r8, r0
 8011b26:	4630      	mov	r0, r6
 8011b28:	f7f9 f98e 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011b2c:	1d79      	adds	r1, r7, #5
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4630      	mov	r0, r6
 8011b32:	f7f9 f989 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011b36:	ea05 0508 	and.w	r5, r5, r8
 8011b3a:	402c      	ands	r4, r5
 8011b3c:	4020      	ands	r0, r4
 8011b3e:	b2c0      	uxtb	r0, r0
 8011b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b44 <uxr_serialize_ReadSpecification>:
 8011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b48:	460e      	mov	r6, r1
 8011b4a:	7809      	ldrb	r1, [r1, #0]
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	f7f9 f965 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011b52:	7871      	ldrb	r1, [r6, #1]
 8011b54:	4604      	mov	r4, r0
 8011b56:	4638      	mov	r0, r7
 8011b58:	f7f9 f960 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011b5c:	78b1      	ldrb	r1, [r6, #2]
 8011b5e:	4004      	ands	r4, r0
 8011b60:	4638      	mov	r0, r7
 8011b62:	f7f9 f92d 	bl	800adc0 <ucdr_serialize_bool>
 8011b66:	78b3      	ldrb	r3, [r6, #2]
 8011b68:	b2e4      	uxtb	r4, r4
 8011b6a:	4004      	ands	r4, r0
 8011b6c:	b94b      	cbnz	r3, 8011b82 <uxr_serialize_ReadSpecification+0x3e>
 8011b6e:	7a31      	ldrb	r1, [r6, #8]
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7f9 f925 	bl	800adc0 <ucdr_serialize_bool>
 8011b76:	7a33      	ldrb	r3, [r6, #8]
 8011b78:	4004      	ands	r4, r0
 8011b7a:	b943      	cbnz	r3, 8011b8e <uxr_serialize_ReadSpecification+0x4a>
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b82:	6871      	ldr	r1, [r6, #4]
 8011b84:	4638      	mov	r0, r7
 8011b86:	f004 fb4b 	bl	8016220 <ucdr_serialize_string>
 8011b8a:	4004      	ands	r4, r0
 8011b8c:	e7ef      	b.n	8011b6e <uxr_serialize_ReadSpecification+0x2a>
 8011b8e:	8971      	ldrh	r1, [r6, #10]
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7f9 f96f 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011b96:	89b1      	ldrh	r1, [r6, #12]
 8011b98:	4605      	mov	r5, r0
 8011b9a:	4638      	mov	r0, r7
 8011b9c:	f7f9 f96a 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011ba0:	89f1      	ldrh	r1, [r6, #14]
 8011ba2:	4005      	ands	r5, r0
 8011ba4:	4638      	mov	r0, r7
 8011ba6:	f7f9 f965 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011baa:	8a31      	ldrh	r1, [r6, #16]
 8011bac:	4680      	mov	r8, r0
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f7f9 f960 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011bb4:	b2ed      	uxtb	r5, r5
 8011bb6:	4025      	ands	r5, r4
 8011bb8:	ea08 0505 	and.w	r5, r8, r5
 8011bbc:	ea00 0405 	and.w	r4, r0, r5
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc6:	bf00      	nop

08011bc8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011bc8:	f7ff ba16 	b.w	8010ff8 <uxr_serialize_CLIENT_Representation>

08011bcc <uxr_serialize_CREATE_Payload>:
 8011bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bce:	2202      	movs	r2, #2
 8011bd0:	4607      	mov	r7, r0
 8011bd2:	460e      	mov	r6, r1
 8011bd4:	f004 fa04 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011bd8:	2202      	movs	r2, #2
 8011bda:	18b1      	adds	r1, r6, r2
 8011bdc:	4605      	mov	r5, r0
 8011bde:	4638      	mov	r0, r7
 8011be0:	f004 f9fe 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011be4:	7931      	ldrb	r1, [r6, #4]
 8011be6:	4604      	mov	r4, r0
 8011be8:	4638      	mov	r0, r7
 8011bea:	f7f9 f917 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011bee:	b170      	cbz	r0, 8011c0e <uxr_serialize_CREATE_Payload+0x42>
 8011bf0:	7933      	ldrb	r3, [r6, #4]
 8011bf2:	402c      	ands	r4, r5
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	b2e4      	uxtb	r4, r4
 8011bf8:	2b0d      	cmp	r3, #13
 8011bfa:	d809      	bhi.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011bfc:	e8df f003 	tbb	[pc, r3]
 8011c00:	23230a4c 	.word	0x23230a4c
 8011c04:	0a0a0a0a 	.word	0x0a0a0a0a
 8011c08:	12121208 	.word	0x12121208
 8011c0c:	3e45      	.short	0x3e45
 8011c0e:	2400      	movs	r4, #0
 8011c10:	4620      	mov	r0, r4
 8011c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c14:	f106 0108 	add.w	r1, r6, #8
 8011c18:	4638      	mov	r0, r7
 8011c1a:	f7ff faf3 	bl	8011204 <uxr_serialize_DATAWRITER_Representation>
 8011c1e:	4004      	ands	r4, r0
 8011c20:	4620      	mov	r0, r4
 8011c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c24:	7a31      	ldrb	r1, [r6, #8]
 8011c26:	4638      	mov	r0, r7
 8011c28:	f7f9 f8f8 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d0ee      	beq.n	8011c0e <uxr_serialize_CREATE_Payload+0x42>
 8011c30:	7a33      	ldrb	r3, [r6, #8]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d001      	beq.n	8011c3a <uxr_serialize_CREATE_Payload+0x6e>
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d1ea      	bne.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011c3a:	68f1      	ldr	r1, [r6, #12]
 8011c3c:	4638      	mov	r0, r7
 8011c3e:	f004 faef 	bl	8016220 <ucdr_serialize_string>
 8011c42:	4004      	ands	r4, r0
 8011c44:	e7e4      	b.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011c46:	7a31      	ldrb	r1, [r6, #8]
 8011c48:	4638      	mov	r0, r7
 8011c4a:	f7f9 f8e7 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011c4e:	4605      	mov	r5, r0
 8011c50:	b158      	cbz	r0, 8011c6a <uxr_serialize_CREATE_Payload+0x9e>
 8011c52:	7a33      	ldrb	r3, [r6, #8]
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d034      	beq.n	8011cc2 <uxr_serialize_CREATE_Payload+0xf6>
 8011c58:	2b03      	cmp	r3, #3
 8011c5a:	d106      	bne.n	8011c6a <uxr_serialize_CREATE_Payload+0x9e>
 8011c5c:	68f2      	ldr	r2, [r6, #12]
 8011c5e:	f106 0110 	add.w	r1, r6, #16
 8011c62:	4638      	mov	r0, r7
 8011c64:	f004 fab0 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 8011c68:	4605      	mov	r5, r0
 8011c6a:	2202      	movs	r2, #2
 8011c6c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011c70:	4638      	mov	r0, r7
 8011c72:	f004 f9b5 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011c76:	4028      	ands	r0, r5
 8011c78:	4004      	ands	r4, r0
 8011c7a:	e7c9      	b.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011c7c:	f106 0108 	add.w	r1, r6, #8
 8011c80:	4638      	mov	r0, r7
 8011c82:	f7ff f9b9 	bl	8010ff8 <uxr_serialize_CLIENT_Representation>
 8011c86:	4004      	ands	r4, r0
 8011c88:	e7c2      	b.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011c8a:	f106 0108 	add.w	r1, r6, #8
 8011c8e:	4638      	mov	r0, r7
 8011c90:	f7ff fa6e 	bl	8011170 <uxr_serialize_AGENT_Representation>
 8011c94:	4004      	ands	r4, r0
 8011c96:	e7bb      	b.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011c98:	7a31      	ldrb	r1, [r6, #8]
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	f7f9 f8be 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	b130      	cbz	r0, 8011cb2 <uxr_serialize_CREATE_Payload+0xe6>
 8011ca4:	7a33      	ldrb	r3, [r6, #8]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d011      	beq.n	8011cce <uxr_serialize_CREATE_Payload+0x102>
 8011caa:	2b03      	cmp	r3, #3
 8011cac:	d015      	beq.n	8011cda <uxr_serialize_CREATE_Payload+0x10e>
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d00d      	beq.n	8011cce <uxr_serialize_CREATE_Payload+0x102>
 8011cb2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	f7f9 fdec 	bl	800b894 <ucdr_serialize_int16_t>
 8011cbc:	4028      	ands	r0, r5
 8011cbe:	4004      	ands	r4, r0
 8011cc0:	e7a6      	b.n	8011c10 <uxr_serialize_CREATE_Payload+0x44>
 8011cc2:	68f1      	ldr	r1, [r6, #12]
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	f004 faab 	bl	8016220 <ucdr_serialize_string>
 8011cca:	4605      	mov	r5, r0
 8011ccc:	e7cd      	b.n	8011c6a <uxr_serialize_CREATE_Payload+0x9e>
 8011cce:	68f1      	ldr	r1, [r6, #12]
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	f004 faa5 	bl	8016220 <ucdr_serialize_string>
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	e7eb      	b.n	8011cb2 <uxr_serialize_CREATE_Payload+0xe6>
 8011cda:	68f2      	ldr	r2, [r6, #12]
 8011cdc:	f106 0110 	add.w	r1, r6, #16
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	f004 fa71 	bl	80161c8 <ucdr_serialize_sequence_uint8_t>
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	e7e3      	b.n	8011cb2 <uxr_serialize_CREATE_Payload+0xe6>
 8011cea:	bf00      	nop

08011cec <uxr_deserialize_GET_INFO_Payload>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	2202      	movs	r2, #2
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	460e      	mov	r6, r1
 8011cf4:	f004 f9d8 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011cf8:	2202      	movs	r2, #2
 8011cfa:	18b1      	adds	r1, r6, r2
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f004 f9d2 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011d04:	1d31      	adds	r1, r6, #4
 8011d06:	4004      	ands	r4, r0
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f7f9 fbcd 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 8011d0e:	b2e4      	uxtb	r4, r4
 8011d10:	4020      	ands	r0, r4
 8011d12:	bd70      	pop	{r4, r5, r6, pc}

08011d14 <uxr_serialize_DELETE_Payload>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	2202      	movs	r2, #2
 8011d18:	4605      	mov	r5, r0
 8011d1a:	460e      	mov	r6, r1
 8011d1c:	f004 f960 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011d20:	2202      	movs	r2, #2
 8011d22:	4604      	mov	r4, r0
 8011d24:	18b1      	adds	r1, r6, r2
 8011d26:	4628      	mov	r0, r5
 8011d28:	f004 f95a 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011d2c:	4020      	ands	r0, r4
 8011d2e:	b2c0      	uxtb	r0, r0
 8011d30:	bd70      	pop	{r4, r5, r6, pc}
 8011d32:	bf00      	nop

08011d34 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d38:	4605      	mov	r5, r0
 8011d3a:	460e      	mov	r6, r1
 8011d3c:	f7f9 f884 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011d40:	1c71      	adds	r1, r6, #1
 8011d42:	4604      	mov	r4, r0
 8011d44:	4628      	mov	r0, r5
 8011d46:	f7f9 f87f 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011d4a:	2204      	movs	r2, #4
 8011d4c:	18b1      	adds	r1, r6, r2
 8011d4e:	4680      	mov	r8, r0
 8011d50:	4628      	mov	r0, r5
 8011d52:	f004 f9a9 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011d56:	f106 0108 	add.w	r1, r6, #8
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	2202      	movs	r2, #2
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f004 f9a2 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011d64:	ea04 0308 	and.w	r3, r4, r8
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	ea03 0407 	and.w	r4, r3, r7
 8011d6e:	2202      	movs	r2, #2
 8011d70:	4607      	mov	r7, r0
 8011d72:	f106 010a 	add.w	r1, r6, #10
 8011d76:	4628      	mov	r0, r5
 8011d78:	f004 f996 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011d7c:	f106 010c 	add.w	r1, r6, #12
 8011d80:	4603      	mov	r3, r0
 8011d82:	4628      	mov	r0, r5
 8011d84:	461d      	mov	r5, r3
 8011d86:	f7f9 f831 	bl	800adec <ucdr_deserialize_bool>
 8011d8a:	403c      	ands	r4, r7
 8011d8c:	4025      	ands	r5, r4
 8011d8e:	4028      	ands	r0, r5
 8011d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d94 <uxr_deserialize_STATUS_Payload>:
 8011d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d98:	2202      	movs	r2, #2
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	460f      	mov	r7, r1
 8011d9e:	f004 f983 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011da2:	2202      	movs	r2, #2
 8011da4:	18b9      	adds	r1, r7, r2
 8011da6:	4605      	mov	r5, r0
 8011da8:	4630      	mov	r0, r6
 8011daa:	f004 f97d 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011dae:	1d39      	adds	r1, r7, #4
 8011db0:	4680      	mov	r8, r0
 8011db2:	4630      	mov	r0, r6
 8011db4:	f7f9 f848 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011db8:	1d79      	adds	r1, r7, #5
 8011dba:	4604      	mov	r4, r0
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7f9 f843 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011dc2:	ea05 0508 	and.w	r5, r5, r8
 8011dc6:	402c      	ands	r4, r5
 8011dc8:	4020      	ands	r0, r4
 8011dca:	b2c0      	uxtb	r0, r0
 8011dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011dd0 <uxr_serialize_INFO_Payload>:
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	460c      	mov	r4, r1
 8011dd8:	4605      	mov	r5, r0
 8011dda:	f004 f901 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011dde:	2202      	movs	r2, #2
 8011de0:	18a1      	adds	r1, r4, r2
 8011de2:	4680      	mov	r8, r0
 8011de4:	4628      	mov	r0, r5
 8011de6:	f004 f8fb 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011dea:	7921      	ldrb	r1, [r4, #4]
 8011dec:	4607      	mov	r7, r0
 8011dee:	4628      	mov	r0, r5
 8011df0:	f7f9 f814 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011df4:	7961      	ldrb	r1, [r4, #5]
 8011df6:	4606      	mov	r6, r0
 8011df8:	4628      	mov	r0, r5
 8011dfa:	f7f9 f80f 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011dfe:	ea08 0807 	and.w	r8, r8, r7
 8011e02:	ea06 0608 	and.w	r6, r6, r8
 8011e06:	4006      	ands	r6, r0
 8011e08:	7a21      	ldrb	r1, [r4, #8]
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	f7f8 ffd8 	bl	800adc0 <ucdr_serialize_bool>
 8011e10:	7a23      	ldrb	r3, [r4, #8]
 8011e12:	b2f7      	uxtb	r7, r6
 8011e14:	4606      	mov	r6, r0
 8011e16:	b96b      	cbnz	r3, 8011e34 <uxr_serialize_INFO_Payload+0x64>
 8011e18:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7f8 ffcf 	bl	800adc0 <ucdr_serialize_bool>
 8011e22:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011e26:	4030      	ands	r0, r6
 8011e28:	b2c6      	uxtb	r6, r0
 8011e2a:	b983      	cbnz	r3, 8011e4e <uxr_serialize_INFO_Payload+0x7e>
 8011e2c:	ea06 0007 	and.w	r0, r6, r7
 8011e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e34:	7b21      	ldrb	r1, [r4, #12]
 8011e36:	4628      	mov	r0, r5
 8011e38:	f7f8 fff0 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011e3c:	b188      	cbz	r0, 8011e62 <uxr_serialize_INFO_Payload+0x92>
 8011e3e:	f104 010c 	add.w	r1, r4, #12
 8011e42:	4628      	mov	r0, r5
 8011e44:	f7ff fa06 	bl	8011254 <uxr_serialize_ObjectVariant.part.0>
 8011e48:	4030      	ands	r0, r6
 8011e4a:	b2c6      	uxtb	r6, r0
 8011e4c:	e7e4      	b.n	8011e18 <uxr_serialize_INFO_Payload+0x48>
 8011e4e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011e52:	4628      	mov	r0, r5
 8011e54:	f7ff fdb2 	bl	80119bc <uxr_serialize_ActivityInfoVariant>
 8011e58:	4006      	ands	r6, r0
 8011e5a:	ea06 0007 	and.w	r0, r6, r7
 8011e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e62:	4606      	mov	r6, r0
 8011e64:	e7d8      	b.n	8011e18 <uxr_serialize_INFO_Payload+0x48>
 8011e66:	bf00      	nop

08011e68 <uxr_serialize_READ_DATA_Payload>:
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	460e      	mov	r6, r1
 8011e70:	f004 f8b6 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011e74:	2202      	movs	r2, #2
 8011e76:	18b1      	adds	r1, r6, r2
 8011e78:	4604      	mov	r4, r0
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f004 f8b0 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011e80:	1d31      	adds	r1, r6, #4
 8011e82:	4004      	ands	r4, r0
 8011e84:	4628      	mov	r0, r5
 8011e86:	f7ff fe5d 	bl	8011b44 <uxr_serialize_ReadSpecification>
 8011e8a:	b2e4      	uxtb	r4, r4
 8011e8c:	4020      	ands	r0, r4
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}

08011e90 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	2202      	movs	r2, #2
 8011e94:	4605      	mov	r5, r0
 8011e96:	460e      	mov	r6, r1
 8011e98:	f004 f8a2 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011e9c:	2202      	movs	r2, #2
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	18b1      	adds	r1, r6, r2
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f004 f89c 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011ea8:	4020      	ands	r0, r4
 8011eaa:	b2c0      	uxtb	r0, r0
 8011eac:	bd70      	pop	{r4, r5, r6, pc}
 8011eae:	bf00      	nop

08011eb0 <uxr_serialize_ACKNACK_Payload>:
 8011eb0:	b570      	push	{r4, r5, r6, lr}
 8011eb2:	460c      	mov	r4, r1
 8011eb4:	460e      	mov	r6, r1
 8011eb6:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011eba:	4605      	mov	r5, r0
 8011ebc:	f7f8 ffda 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011ec0:	2202      	movs	r2, #2
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	4628      	mov	r0, r5
 8011ec8:	f004 f88a 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011ecc:	7931      	ldrb	r1, [r6, #4]
 8011ece:	4004      	ands	r4, r0
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7f8 ffa3 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011ed6:	b2e4      	uxtb	r4, r4
 8011ed8:	4020      	ands	r0, r4
 8011eda:	bd70      	pop	{r4, r5, r6, pc}

08011edc <uxr_deserialize_ACKNACK_Payload>:
 8011edc:	b570      	push	{r4, r5, r6, lr}
 8011ede:	4605      	mov	r5, r0
 8011ee0:	460e      	mov	r6, r1
 8011ee2:	f7f9 f8c7 	bl	800b074 <ucdr_deserialize_uint16_t>
 8011ee6:	2202      	movs	r2, #2
 8011ee8:	18b1      	adds	r1, r6, r2
 8011eea:	4604      	mov	r4, r0
 8011eec:	4628      	mov	r0, r5
 8011eee:	f004 f8db 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8011ef2:	1d31      	adds	r1, r6, #4
 8011ef4:	4004      	ands	r4, r0
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f7f8 ffa6 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011efc:	b2e4      	uxtb	r4, r4
 8011efe:	4020      	ands	r0, r4
 8011f00:	bd70      	pop	{r4, r5, r6, pc}
 8011f02:	bf00      	nop

08011f04 <uxr_serialize_HEARTBEAT_Payload>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	460d      	mov	r5, r1
 8011f08:	8809      	ldrh	r1, [r1, #0]
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	f7f8 ffb2 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011f10:	8869      	ldrh	r1, [r5, #2]
 8011f12:	4604      	mov	r4, r0
 8011f14:	4630      	mov	r0, r6
 8011f16:	f7f8 ffad 	bl	800ae74 <ucdr_serialize_uint16_t>
 8011f1a:	7929      	ldrb	r1, [r5, #4]
 8011f1c:	4004      	ands	r4, r0
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f7f8 ff7c 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011f24:	b2e4      	uxtb	r4, r4
 8011f26:	4020      	ands	r0, r4
 8011f28:	bd70      	pop	{r4, r5, r6, pc}
 8011f2a:	bf00      	nop

08011f2c <uxr_deserialize_HEARTBEAT_Payload>:
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	4605      	mov	r5, r0
 8011f30:	460e      	mov	r6, r1
 8011f32:	f7f9 f89f 	bl	800b074 <ucdr_deserialize_uint16_t>
 8011f36:	1cb1      	adds	r1, r6, #2
 8011f38:	4604      	mov	r4, r0
 8011f3a:	4628      	mov	r0, r5
 8011f3c:	f7f9 f89a 	bl	800b074 <ucdr_deserialize_uint16_t>
 8011f40:	1d31      	adds	r1, r6, #4
 8011f42:	4004      	ands	r4, r0
 8011f44:	4628      	mov	r0, r5
 8011f46:	f7f8 ff7f 	bl	800ae48 <ucdr_deserialize_uint8_t>
 8011f4a:	b2e4      	uxtb	r4, r4
 8011f4c:	4020      	ands	r0, r4
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}

08011f50 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f54:	4605      	mov	r5, r0
 8011f56:	460e      	mov	r6, r1
 8011f58:	f7f9 fe28 	bl	800bbac <ucdr_deserialize_int32_t>
 8011f5c:	1d31      	adds	r1, r6, #4
 8011f5e:	4607      	mov	r7, r0
 8011f60:	4628      	mov	r0, r5
 8011f62:	f7f9 faa1 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 8011f66:	f106 0108 	add.w	r1, r6, #8
 8011f6a:	4680      	mov	r8, r0
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7f9 fe1d 	bl	800bbac <ucdr_deserialize_int32_t>
 8011f72:	f106 010c 	add.w	r1, r6, #12
 8011f76:	4604      	mov	r4, r0
 8011f78:	4628      	mov	r0, r5
 8011f7a:	f7f9 fa95 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 8011f7e:	ea07 0708 	and.w	r7, r7, r8
 8011f82:	403c      	ands	r4, r7
 8011f84:	f106 0110 	add.w	r1, r6, #16
 8011f88:	4004      	ands	r4, r0
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	f7f9 fe0e 	bl	800bbac <ucdr_deserialize_int32_t>
 8011f90:	f106 0114 	add.w	r1, r6, #20
 8011f94:	4607      	mov	r7, r0
 8011f96:	4628      	mov	r0, r5
 8011f98:	f7f9 fa86 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 8011f9c:	b2e4      	uxtb	r4, r4
 8011f9e:	403c      	ands	r4, r7
 8011fa0:	4020      	ands	r0, r4
 8011fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa6:	bf00      	nop

08011fa8 <uxr_serialize_SampleIdentity>:
 8011fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fac:	220c      	movs	r2, #12
 8011fae:	4604      	mov	r4, r0
 8011fb0:	460d      	mov	r5, r1
 8011fb2:	f004 f815 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011fb6:	2203      	movs	r2, #3
 8011fb8:	f105 010c 	add.w	r1, r5, #12
 8011fbc:	4607      	mov	r7, r0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f004 f80e 	bl	8015fe0 <ucdr_serialize_array_uint8_t>
 8011fc4:	7be9      	ldrb	r1, [r5, #15]
 8011fc6:	4680      	mov	r8, r0
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f7f8 ff27 	bl	800ae1c <ucdr_serialize_uint8_t>
 8011fce:	6929      	ldr	r1, [r5, #16]
 8011fd0:	4606      	mov	r6, r0
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7f9 fd52 	bl	800ba7c <ucdr_serialize_int32_t>
 8011fd8:	6969      	ldr	r1, [r5, #20]
 8011fda:	4603      	mov	r3, r0
 8011fdc:	4620      	mov	r0, r4
 8011fde:	ea07 0708 	and.w	r7, r7, r8
 8011fe2:	461c      	mov	r4, r3
 8011fe4:	f7f9 f930 	bl	800b248 <ucdr_serialize_uint32_t>
 8011fe8:	403e      	ands	r6, r7
 8011fea:	4034      	ands	r4, r6
 8011fec:	4020      	ands	r0, r4
 8011fee:	b2c0      	uxtb	r0, r0
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ff4 <uxr_deserialize_SampleIdentity>:
 8011ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff8:	220c      	movs	r2, #12
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	460d      	mov	r5, r1
 8011ffe:	f004 f853 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8012002:	2203      	movs	r2, #3
 8012004:	f105 010c 	add.w	r1, r5, #12
 8012008:	4607      	mov	r7, r0
 801200a:	4620      	mov	r0, r4
 801200c:	f004 f84c 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8012010:	f105 010f 	add.w	r1, r5, #15
 8012014:	4680      	mov	r8, r0
 8012016:	4620      	mov	r0, r4
 8012018:	f7f8 ff16 	bl	800ae48 <ucdr_deserialize_uint8_t>
 801201c:	f105 0110 	add.w	r1, r5, #16
 8012020:	4606      	mov	r6, r0
 8012022:	4620      	mov	r0, r4
 8012024:	f7f9 fdc2 	bl	800bbac <ucdr_deserialize_int32_t>
 8012028:	f105 0114 	add.w	r1, r5, #20
 801202c:	4603      	mov	r3, r0
 801202e:	4620      	mov	r0, r4
 8012030:	ea07 0708 	and.w	r7, r7, r8
 8012034:	461c      	mov	r4, r3
 8012036:	f7f9 fa37 	bl	800b4a8 <ucdr_deserialize_uint32_t>
 801203a:	403e      	ands	r6, r7
 801203c:	4034      	ands	r4, r6
 801203e:	4020      	ands	r0, r4
 8012040:	b2c0      	uxtb	r0, r0
 8012042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012046:	bf00      	nop

08012048 <rcl_client_get_rmw_handle>:
 8012048:	b118      	cbz	r0, 8012052 <rcl_client_get_rmw_handle+0xa>
 801204a:	6800      	ldr	r0, [r0, #0]
 801204c:	b108      	cbz	r0, 8012052 <rcl_client_get_rmw_handle+0xa>
 801204e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012052:	4770      	bx	lr

08012054 <rcl_send_request>:
 8012054:	b570      	push	{r4, r5, r6, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	b1e8      	cbz	r0, 8012096 <rcl_send_request+0x42>
 801205a:	4604      	mov	r4, r0
 801205c:	6800      	ldr	r0, [r0, #0]
 801205e:	b1d0      	cbz	r0, 8012096 <rcl_send_request+0x42>
 8012060:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012064:	b1bb      	cbz	r3, 8012096 <rcl_send_request+0x42>
 8012066:	460e      	mov	r6, r1
 8012068:	b1d1      	cbz	r1, 80120a0 <rcl_send_request+0x4c>
 801206a:	4615      	mov	r5, r2
 801206c:	b1c2      	cbz	r2, 80120a0 <rcl_send_request+0x4c>
 801206e:	2105      	movs	r1, #5
 8012070:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012074:	f002 fda4 	bl	8014bc0 <__atomic_load_8>
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	e9c5 0100 	strd	r0, r1, [r5]
 801207e:	462a      	mov	r2, r5
 8012080:	4631      	mov	r1, r6
 8012082:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012086:	f003 fc29 	bl	80158dc <rmw_send_request>
 801208a:	4606      	mov	r6, r0
 801208c:	b160      	cbz	r0, 80120a8 <rcl_send_request+0x54>
 801208e:	2601      	movs	r6, #1
 8012090:	4630      	mov	r0, r6
 8012092:	b002      	add	sp, #8
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801209a:	4630      	mov	r0, r6
 801209c:	b002      	add	sp, #8
 801209e:	bd70      	pop	{r4, r5, r6, pc}
 80120a0:	260b      	movs	r6, #11
 80120a2:	4630      	mov	r0, r6
 80120a4:	b002      	add	sp, #8
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	2105      	movs	r1, #5
 80120ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120b0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80120b4:	9100      	str	r1, [sp, #0]
 80120b6:	f002 fdef 	bl	8014c98 <__atomic_exchange_8>
 80120ba:	4630      	mov	r0, r6
 80120bc:	b002      	add	sp, #8
 80120be:	bd70      	pop	{r4, r5, r6, pc}

080120c0 <rcl_take_response>:
 80120c0:	b570      	push	{r4, r5, r6, lr}
 80120c2:	468e      	mov	lr, r1
 80120c4:	460c      	mov	r4, r1
 80120c6:	4616      	mov	r6, r2
 80120c8:	4605      	mov	r5, r0
 80120ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120ce:	b08c      	sub	sp, #48	@ 0x30
 80120d0:	f10d 0c18 	add.w	ip, sp, #24
 80120d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80120dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80120e0:	b35d      	cbz	r5, 801213a <rcl_take_response+0x7a>
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	b34b      	cbz	r3, 801213a <rcl_take_response+0x7a>
 80120e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80120ea:	b330      	cbz	r0, 801213a <rcl_take_response+0x7a>
 80120ec:	b346      	cbz	r6, 8012140 <rcl_take_response+0x80>
 80120ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012148 <rcl_take_response+0x88>
 80120f2:	2300      	movs	r3, #0
 80120f4:	f88d 3007 	strb.w	r3, [sp, #7]
 80120f8:	4632      	mov	r2, r6
 80120fa:	f10d 0307 	add.w	r3, sp, #7
 80120fe:	a902      	add	r1, sp, #8
 8012100:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012104:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012108:	f003 fcf0 	bl	8015aec <rmw_take_response>
 801210c:	4605      	mov	r5, r0
 801210e:	b9c8      	cbnz	r0, 8012144 <rcl_take_response+0x84>
 8012110:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012114:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012118:	2a00      	cmp	r2, #0
 801211a:	bf08      	it	eq
 801211c:	461d      	moveq	r5, r3
 801211e:	f10d 0e18 	add.w	lr, sp, #24
 8012122:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012126:	46a4      	mov	ip, r4
 8012128:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801212c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012130:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012134:	4628      	mov	r0, r5
 8012136:	b00c      	add	sp, #48	@ 0x30
 8012138:	bd70      	pop	{r4, r5, r6, pc}
 801213a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801213e:	e7ee      	b.n	801211e <rcl_take_response+0x5e>
 8012140:	250b      	movs	r5, #11
 8012142:	e7ec      	b.n	801211e <rcl_take_response+0x5e>
 8012144:	2501      	movs	r5, #1
 8012146:	e7ea      	b.n	801211e <rcl_take_response+0x5e>
	...

08012150 <rcl_client_is_valid>:
 8012150:	b130      	cbz	r0, 8012160 <rcl_client_is_valid+0x10>
 8012152:	6800      	ldr	r0, [r0, #0]
 8012154:	b120      	cbz	r0, 8012160 <rcl_client_is_valid+0x10>
 8012156:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801215a:	3800      	subs	r0, #0
 801215c:	bf18      	it	ne
 801215e:	2001      	movne	r0, #1
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop

08012164 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012164:	280b      	cmp	r0, #11
 8012166:	dc0d      	bgt.n	8012184 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012168:	2800      	cmp	r0, #0
 801216a:	db09      	blt.n	8012180 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801216c:	280b      	cmp	r0, #11
 801216e:	d807      	bhi.n	8012180 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012170:	e8df f000 	tbb	[pc, r0]
 8012174:	07060607 	.word	0x07060607
 8012178:	06060606 	.word	0x06060606
 801217c:	07070606 	.word	0x07070606
 8012180:	2001      	movs	r0, #1
 8012182:	4770      	bx	lr
 8012184:	28cb      	cmp	r0, #203	@ 0xcb
 8012186:	bf18      	it	ne
 8012188:	2001      	movne	r0, #1
 801218a:	4770      	bx	lr

0801218c <rcl_get_zero_initialized_context>:
 801218c:	4a03      	ldr	r2, [pc, #12]	@ (801219c <rcl_get_zero_initialized_context+0x10>)
 801218e:	4603      	mov	r3, r0
 8012190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012194:	e883 0003 	stmia.w	r3, {r0, r1}
 8012198:	4618      	mov	r0, r3
 801219a:	4770      	bx	lr
 801219c:	0801b5f8 	.word	0x0801b5f8

080121a0 <rcl_context_is_valid>:
 80121a0:	b118      	cbz	r0, 80121aa <rcl_context_is_valid+0xa>
 80121a2:	6840      	ldr	r0, [r0, #4]
 80121a4:	3800      	subs	r0, #0
 80121a6:	bf18      	it	ne
 80121a8:	2001      	movne	r0, #1
 80121aa:	4770      	bx	lr

080121ac <__cleanup_context>:
 80121ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b0:	4606      	mov	r6, r0
 80121b2:	6800      	ldr	r0, [r0, #0]
 80121b4:	2300      	movs	r3, #0
 80121b6:	6073      	str	r3, [r6, #4]
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d049      	beq.n	8012250 <__cleanup_context+0xa4>
 80121bc:	6947      	ldr	r7, [r0, #20]
 80121be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80121c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80121c6:	b137      	cbz	r7, 80121d6 <__cleanup_context+0x2a>
 80121c8:	3014      	adds	r0, #20
 80121ca:	f000 fac9 	bl	8012760 <rcl_init_options_fini>
 80121ce:	4607      	mov	r7, r0
 80121d0:	2800      	cmp	r0, #0
 80121d2:	d144      	bne.n	801225e <__cleanup_context+0xb2>
 80121d4:	6830      	ldr	r0, [r6, #0]
 80121d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80121d8:	b143      	cbz	r3, 80121ec <__cleanup_context+0x40>
 80121da:	3028      	adds	r0, #40	@ 0x28
 80121dc:	f003 fada 	bl	8015794 <rmw_context_fini>
 80121e0:	b118      	cbz	r0, 80121ea <__cleanup_context+0x3e>
 80121e2:	2f00      	cmp	r7, #0
 80121e4:	d03e      	beq.n	8012264 <__cleanup_context+0xb8>
 80121e6:	f7fb fc33 	bl	800da50 <rcutils_reset_error>
 80121ea:	6830      	ldr	r0, [r6, #0]
 80121ec:	6a03      	ldr	r3, [r0, #32]
 80121ee:	b1db      	cbz	r3, 8012228 <__cleanup_context+0x7c>
 80121f0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80121f4:	2a01      	cmp	r2, #1
 80121f6:	f17c 0100 	sbcs.w	r1, ip, #0
 80121fa:	db11      	blt.n	8012220 <__cleanup_context+0x74>
 80121fc:	2400      	movs	r4, #0
 80121fe:	4625      	mov	r5, r4
 8012200:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012204:	4649      	mov	r1, r9
 8012206:	b1b8      	cbz	r0, 8012238 <__cleanup_context+0x8c>
 8012208:	47c0      	blx	r8
 801220a:	6833      	ldr	r3, [r6, #0]
 801220c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012210:	3401      	adds	r4, #1
 8012212:	f145 0500 	adc.w	r5, r5, #0
 8012216:	4294      	cmp	r4, r2
 8012218:	eb75 010c 	sbcs.w	r1, r5, ip
 801221c:	6a1b      	ldr	r3, [r3, #32]
 801221e:	dbef      	blt.n	8012200 <__cleanup_context+0x54>
 8012220:	4618      	mov	r0, r3
 8012222:	4649      	mov	r1, r9
 8012224:	47c0      	blx	r8
 8012226:	6830      	ldr	r0, [r6, #0]
 8012228:	4649      	mov	r1, r9
 801222a:	47c0      	blx	r8
 801222c:	2300      	movs	r3, #0
 801222e:	e9c6 3300 	strd	r3, r3, [r6]
 8012232:	4638      	mov	r0, r7
 8012234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012238:	3401      	adds	r4, #1
 801223a:	f145 0500 	adc.w	r5, r5, #0
 801223e:	4294      	cmp	r4, r2
 8012240:	eb75 010c 	sbcs.w	r1, r5, ip
 8012244:	dbdc      	blt.n	8012200 <__cleanup_context+0x54>
 8012246:	4618      	mov	r0, r3
 8012248:	4649      	mov	r1, r9
 801224a:	47c0      	blx	r8
 801224c:	6830      	ldr	r0, [r6, #0]
 801224e:	e7eb      	b.n	8012228 <__cleanup_context+0x7c>
 8012250:	4607      	mov	r7, r0
 8012252:	2300      	movs	r3, #0
 8012254:	e9c6 3300 	strd	r3, r3, [r6]
 8012258:	4638      	mov	r0, r7
 801225a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225e:	f7fb fbf7 	bl	800da50 <rcutils_reset_error>
 8012262:	e7b7      	b.n	80121d4 <__cleanup_context+0x28>
 8012264:	f7ff ff7e 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 8012268:	4607      	mov	r7, r0
 801226a:	e7bc      	b.n	80121e6 <__cleanup_context+0x3a>

0801226c <rcl_get_zero_initialized_guard_condition>:
 801226c:	4a03      	ldr	r2, [pc, #12]	@ (801227c <rcl_get_zero_initialized_guard_condition+0x10>)
 801226e:	4603      	mov	r3, r0
 8012270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012274:	e883 0003 	stmia.w	r3, {r0, r1}
 8012278:	4618      	mov	r0, r3
 801227a:	4770      	bx	lr
 801227c:	0801b600 	.word	0x0801b600

08012280 <rcl_guard_condition_init>:
 8012280:	b082      	sub	sp, #8
 8012282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012284:	b087      	sub	sp, #28
 8012286:	ac0c      	add	r4, sp, #48	@ 0x30
 8012288:	e884 000c 	stmia.w	r4, {r2, r3}
 801228c:	46a6      	mov	lr, r4
 801228e:	460d      	mov	r5, r1
 8012290:	4604      	mov	r4, r0
 8012292:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012296:	f10d 0c04 	add.w	ip, sp, #4
 801229a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801229e:	f8de 3000 	ldr.w	r3, [lr]
 80122a2:	f8cc 3000 	str.w	r3, [ip]
 80122a6:	a801      	add	r0, sp, #4
 80122a8:	f7fb fb96 	bl	800d9d8 <rcutils_allocator_is_valid>
 80122ac:	b338      	cbz	r0, 80122fe <rcl_guard_condition_init+0x7e>
 80122ae:	b334      	cbz	r4, 80122fe <rcl_guard_condition_init+0x7e>
 80122b0:	6866      	ldr	r6, [r4, #4]
 80122b2:	b9ee      	cbnz	r6, 80122f0 <rcl_guard_condition_init+0x70>
 80122b4:	b31d      	cbz	r5, 80122fe <rcl_guard_condition_init+0x7e>
 80122b6:	4628      	mov	r0, r5
 80122b8:	f7ff ff72 	bl	80121a0 <rcl_context_is_valid>
 80122bc:	b308      	cbz	r0, 8012302 <rcl_guard_condition_init+0x82>
 80122be:	9b01      	ldr	r3, [sp, #4]
 80122c0:	9905      	ldr	r1, [sp, #20]
 80122c2:	201c      	movs	r0, #28
 80122c4:	4798      	blx	r3
 80122c6:	4607      	mov	r7, r0
 80122c8:	6060      	str	r0, [r4, #4]
 80122ca:	b310      	cbz	r0, 8012312 <rcl_guard_condition_init+0x92>
 80122cc:	6828      	ldr	r0, [r5, #0]
 80122ce:	3028      	adds	r0, #40	@ 0x28
 80122d0:	f003 f80a 	bl	80152e8 <rmw_create_guard_condition>
 80122d4:	6038      	str	r0, [r7, #0]
 80122d6:	6860      	ldr	r0, [r4, #4]
 80122d8:	6805      	ldr	r5, [r0, #0]
 80122da:	b1a5      	cbz	r5, 8012306 <rcl_guard_condition_init+0x86>
 80122dc:	2301      	movs	r3, #1
 80122de:	ac01      	add	r4, sp, #4
 80122e0:	7103      	strb	r3, [r0, #4]
 80122e2:	f100 0708 	add.w	r7, r0, #8
 80122e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80122e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80122ea:	6823      	ldr	r3, [r4, #0]
 80122ec:	603b      	str	r3, [r7, #0]
 80122ee:	e000      	b.n	80122f2 <rcl_guard_condition_init+0x72>
 80122f0:	2664      	movs	r6, #100	@ 0x64
 80122f2:	4630      	mov	r0, r6
 80122f4:	b007      	add	sp, #28
 80122f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80122fa:	b002      	add	sp, #8
 80122fc:	4770      	bx	lr
 80122fe:	260b      	movs	r6, #11
 8012300:	e7f7      	b.n	80122f2 <rcl_guard_condition_init+0x72>
 8012302:	2665      	movs	r6, #101	@ 0x65
 8012304:	e7f5      	b.n	80122f2 <rcl_guard_condition_init+0x72>
 8012306:	9b02      	ldr	r3, [sp, #8]
 8012308:	9905      	ldr	r1, [sp, #20]
 801230a:	4798      	blx	r3
 801230c:	2601      	movs	r6, #1
 801230e:	6065      	str	r5, [r4, #4]
 8012310:	e7ef      	b.n	80122f2 <rcl_guard_condition_init+0x72>
 8012312:	260a      	movs	r6, #10
 8012314:	e7ed      	b.n	80122f2 <rcl_guard_condition_init+0x72>
 8012316:	bf00      	nop

08012318 <rcl_guard_condition_init_from_rmw>:
 8012318:	b082      	sub	sp, #8
 801231a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801231e:	b086      	sub	sp, #24
 8012320:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012324:	4604      	mov	r4, r0
 8012326:	f84c 3f04 	str.w	r3, [ip, #4]!
 801232a:	460e      	mov	r6, r1
 801232c:	4617      	mov	r7, r2
 801232e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012332:	f10d 0e04 	add.w	lr, sp, #4
 8012336:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801233a:	f8dc 3000 	ldr.w	r3, [ip]
 801233e:	f8ce 3000 	str.w	r3, [lr]
 8012342:	a801      	add	r0, sp, #4
 8012344:	f7fb fb48 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012348:	b350      	cbz	r0, 80123a0 <rcl_guard_condition_init_from_rmw+0x88>
 801234a:	b34c      	cbz	r4, 80123a0 <rcl_guard_condition_init_from_rmw+0x88>
 801234c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012350:	f1b8 0f00 	cmp.w	r8, #0
 8012354:	d11e      	bne.n	8012394 <rcl_guard_condition_init_from_rmw+0x7c>
 8012356:	b31f      	cbz	r7, 80123a0 <rcl_guard_condition_init_from_rmw+0x88>
 8012358:	4638      	mov	r0, r7
 801235a:	f7ff ff21 	bl	80121a0 <rcl_context_is_valid>
 801235e:	b328      	cbz	r0, 80123ac <rcl_guard_condition_init_from_rmw+0x94>
 8012360:	9b01      	ldr	r3, [sp, #4]
 8012362:	9905      	ldr	r1, [sp, #20]
 8012364:	201c      	movs	r0, #28
 8012366:	4798      	blx	r3
 8012368:	4605      	mov	r5, r0
 801236a:	6060      	str	r0, [r4, #4]
 801236c:	b358      	cbz	r0, 80123c6 <rcl_guard_condition_init_from_rmw+0xae>
 801236e:	b1fe      	cbz	r6, 80123b0 <rcl_guard_condition_init_from_rmw+0x98>
 8012370:	6006      	str	r6, [r0, #0]
 8012372:	f880 8004 	strb.w	r8, [r0, #4]
 8012376:	ac01      	add	r4, sp, #4
 8012378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801237a:	f105 0c08 	add.w	ip, r5, #8
 801237e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012382:	6823      	ldr	r3, [r4, #0]
 8012384:	f8cc 3000 	str.w	r3, [ip]
 8012388:	2000      	movs	r0, #0
 801238a:	b006      	add	sp, #24
 801238c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012390:	b002      	add	sp, #8
 8012392:	4770      	bx	lr
 8012394:	2064      	movs	r0, #100	@ 0x64
 8012396:	b006      	add	sp, #24
 8012398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801239c:	b002      	add	sp, #8
 801239e:	4770      	bx	lr
 80123a0:	200b      	movs	r0, #11
 80123a2:	b006      	add	sp, #24
 80123a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	b002      	add	sp, #8
 80123aa:	4770      	bx	lr
 80123ac:	2065      	movs	r0, #101	@ 0x65
 80123ae:	e7f2      	b.n	8012396 <rcl_guard_condition_init_from_rmw+0x7e>
 80123b0:	6838      	ldr	r0, [r7, #0]
 80123b2:	3028      	adds	r0, #40	@ 0x28
 80123b4:	f002 ff98 	bl	80152e8 <rmw_create_guard_condition>
 80123b8:	6028      	str	r0, [r5, #0]
 80123ba:	6865      	ldr	r5, [r4, #4]
 80123bc:	682e      	ldr	r6, [r5, #0]
 80123be:	b126      	cbz	r6, 80123ca <rcl_guard_condition_init_from_rmw+0xb2>
 80123c0:	2301      	movs	r3, #1
 80123c2:	712b      	strb	r3, [r5, #4]
 80123c4:	e7d7      	b.n	8012376 <rcl_guard_condition_init_from_rmw+0x5e>
 80123c6:	200a      	movs	r0, #10
 80123c8:	e7e5      	b.n	8012396 <rcl_guard_condition_init_from_rmw+0x7e>
 80123ca:	4628      	mov	r0, r5
 80123cc:	9b02      	ldr	r3, [sp, #8]
 80123ce:	9905      	ldr	r1, [sp, #20]
 80123d0:	4798      	blx	r3
 80123d2:	6066      	str	r6, [r4, #4]
 80123d4:	2001      	movs	r0, #1
 80123d6:	e7de      	b.n	8012396 <rcl_guard_condition_init_from_rmw+0x7e>

080123d8 <rcl_guard_condition_fini>:
 80123d8:	b570      	push	{r4, r5, r6, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	b1f0      	cbz	r0, 801241c <rcl_guard_condition_fini+0x44>
 80123de:	6843      	ldr	r3, [r0, #4]
 80123e0:	4604      	mov	r4, r0
 80123e2:	b163      	cbz	r3, 80123fe <rcl_guard_condition_fini+0x26>
 80123e4:	6818      	ldr	r0, [r3, #0]
 80123e6:	68de      	ldr	r6, [r3, #12]
 80123e8:	6999      	ldr	r1, [r3, #24]
 80123ea:	b160      	cbz	r0, 8012406 <rcl_guard_condition_fini+0x2e>
 80123ec:	791d      	ldrb	r5, [r3, #4]
 80123ee:	b965      	cbnz	r5, 801240a <rcl_guard_condition_fini+0x32>
 80123f0:	4618      	mov	r0, r3
 80123f2:	47b0      	blx	r6
 80123f4:	2300      	movs	r3, #0
 80123f6:	4628      	mov	r0, r5
 80123f8:	6063      	str	r3, [r4, #4]
 80123fa:	b002      	add	sp, #8
 80123fc:	bd70      	pop	{r4, r5, r6, pc}
 80123fe:	461d      	mov	r5, r3
 8012400:	4628      	mov	r0, r5
 8012402:	b002      	add	sp, #8
 8012404:	bd70      	pop	{r4, r5, r6, pc}
 8012406:	4605      	mov	r5, r0
 8012408:	e7f2      	b.n	80123f0 <rcl_guard_condition_fini+0x18>
 801240a:	9101      	str	r1, [sp, #4]
 801240c:	f002 ff80 	bl	8015310 <rmw_destroy_guard_condition>
 8012410:	1e05      	subs	r5, r0, #0
 8012412:	6863      	ldr	r3, [r4, #4]
 8012414:	9901      	ldr	r1, [sp, #4]
 8012416:	bf18      	it	ne
 8012418:	2501      	movne	r5, #1
 801241a:	e7e9      	b.n	80123f0 <rcl_guard_condition_fini+0x18>
 801241c:	250b      	movs	r5, #11
 801241e:	4628      	mov	r0, r5
 8012420:	b002      	add	sp, #8
 8012422:	bd70      	pop	{r4, r5, r6, pc}

08012424 <rcl_guard_condition_get_default_options>:
 8012424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012426:	b087      	sub	sp, #28
 8012428:	4606      	mov	r6, r0
 801242a:	4668      	mov	r0, sp
 801242c:	f7fb fac6 	bl	800d9bc <rcutils_get_default_allocator>
 8012430:	4b09      	ldr	r3, [pc, #36]	@ (8012458 <rcl_guard_condition_get_default_options+0x34>)
 8012432:	46ee      	mov	lr, sp
 8012434:	469c      	mov	ip, r3
 8012436:	461d      	mov	r5, r3
 8012438:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801243c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012442:	4634      	mov	r4, r6
 8012444:	f8de 7000 	ldr.w	r7, [lr]
 8012448:	f8cc 7000 	str.w	r7, [ip]
 801244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801244e:	4630      	mov	r0, r6
 8012450:	6027      	str	r7, [r4, #0]
 8012452:	b007      	add	sp, #28
 8012454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012456:	bf00      	nop
 8012458:	20010df4 	.word	0x20010df4

0801245c <rcl_trigger_guard_condition>:
 801245c:	b148      	cbz	r0, 8012472 <rcl_trigger_guard_condition+0x16>
 801245e:	b508      	push	{r3, lr}
 8012460:	6843      	ldr	r3, [r0, #4]
 8012462:	b143      	cbz	r3, 8012476 <rcl_trigger_guard_condition+0x1a>
 8012464:	6818      	ldr	r0, [r3, #0]
 8012466:	f003 fb8b 	bl	8015b80 <rmw_trigger_guard_condition>
 801246a:	3800      	subs	r0, #0
 801246c:	bf18      	it	ne
 801246e:	2001      	movne	r0, #1
 8012470:	bd08      	pop	{r3, pc}
 8012472:	200b      	movs	r0, #11
 8012474:	4770      	bx	lr
 8012476:	200b      	movs	r0, #11
 8012478:	bd08      	pop	{r3, pc}
 801247a:	bf00      	nop

0801247c <rcl_guard_condition_get_rmw_handle>:
 801247c:	b110      	cbz	r0, 8012484 <rcl_guard_condition_get_rmw_handle+0x8>
 801247e:	6840      	ldr	r0, [r0, #4]
 8012480:	b100      	cbz	r0, 8012484 <rcl_guard_condition_get_rmw_handle+0x8>
 8012482:	6800      	ldr	r0, [r0, #0]
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <rcl_init>:
 8012488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801248c:	1e05      	subs	r5, r0, #0
 801248e:	b09e      	sub	sp, #120	@ 0x78
 8012490:	460e      	mov	r6, r1
 8012492:	4690      	mov	r8, r2
 8012494:	461f      	mov	r7, r3
 8012496:	f340 809c 	ble.w	80125d2 <rcl_init+0x14a>
 801249a:	2900      	cmp	r1, #0
 801249c:	f000 809c 	beq.w	80125d8 <rcl_init+0x150>
 80124a0:	f1a1 0e04 	sub.w	lr, r1, #4
 80124a4:	f04f 0c00 	mov.w	ip, #0
 80124a8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80124ac:	f10c 0c01 	add.w	ip, ip, #1
 80124b0:	2c00      	cmp	r4, #0
 80124b2:	f000 8091 	beq.w	80125d8 <rcl_init+0x150>
 80124b6:	4565      	cmp	r5, ip
 80124b8:	d1f6      	bne.n	80124a8 <rcl_init+0x20>
 80124ba:	f1b8 0f00 	cmp.w	r8, #0
 80124be:	f000 808b 	beq.w	80125d8 <rcl_init+0x150>
 80124c2:	f8d8 4000 	ldr.w	r4, [r8]
 80124c6:	2c00      	cmp	r4, #0
 80124c8:	f000 8086 	beq.w	80125d8 <rcl_init+0x150>
 80124cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124ce:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80124d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	f8cc 3000 	str.w	r3, [ip]
 80124dc:	a819      	add	r0, sp, #100	@ 0x64
 80124de:	f7fb fa7b 	bl	800d9d8 <rcutils_allocator_is_valid>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d078      	beq.n	80125d8 <rcl_init+0x150>
 80124e6:	2f00      	cmp	r7, #0
 80124e8:	d076      	beq.n	80125d8 <rcl_init+0x150>
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d178      	bne.n	80125e2 <rcl_init+0x15a>
 80124f0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80124f4:	2178      	movs	r1, #120	@ 0x78
 80124f6:	2001      	movs	r0, #1
 80124f8:	4798      	blx	r3
 80124fa:	4604      	mov	r4, r0
 80124fc:	6038      	str	r0, [r7, #0]
 80124fe:	2800      	cmp	r0, #0
 8012500:	f000 80b6 	beq.w	8012670 <rcl_init+0x1e8>
 8012504:	a802      	add	r0, sp, #8
 8012506:	f002 fd63 	bl	8014fd0 <rmw_get_zero_initialized_context>
 801250a:	a902      	add	r1, sp, #8
 801250c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012510:	2250      	movs	r2, #80	@ 0x50
 8012512:	ac19      	add	r4, sp, #100	@ 0x64
 8012514:	f006 faa5 	bl	8018a62 <memcpy>
 8012518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801251a:	f8d7 e000 	ldr.w	lr, [r7]
 801251e:	46f4      	mov	ip, lr
 8012520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012524:	6823      	ldr	r3, [r4, #0]
 8012526:	f8cc 3000 	str.w	r3, [ip]
 801252a:	f10e 0114 	add.w	r1, lr, #20
 801252e:	4640      	mov	r0, r8
 8012530:	f000 f940 	bl	80127b4 <rcl_init_options_copy>
 8012534:	4604      	mov	r4, r0
 8012536:	2800      	cmp	r0, #0
 8012538:	d144      	bne.n	80125c4 <rcl_init+0x13c>
 801253a:	f8d7 9000 	ldr.w	r9, [r7]
 801253e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012542:	f8c9 0020 	str.w	r0, [r9, #32]
 8012546:	f8c9 5018 	str.w	r5, [r9, #24]
 801254a:	f8c9 801c 	str.w	r8, [r9, #28]
 801254e:	2d00      	cmp	r5, #0
 8012550:	d04e      	beq.n	80125f0 <rcl_init+0x168>
 8012552:	2e00      	cmp	r6, #0
 8012554:	d04c      	beq.n	80125f0 <rcl_init+0x168>
 8012556:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801255a:	2104      	movs	r1, #4
 801255c:	4628      	mov	r0, r5
 801255e:	4798      	blx	r3
 8012560:	f8c9 0020 	str.w	r0, [r9, #32]
 8012564:	f8d7 9000 	ldr.w	r9, [r7]
 8012568:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801256c:	46ca      	mov	sl, r9
 801256e:	b343      	cbz	r3, 80125c2 <rcl_init+0x13a>
 8012570:	2d01      	cmp	r5, #1
 8012572:	f178 0300 	sbcs.w	r3, r8, #0
 8012576:	db3b      	blt.n	80125f0 <rcl_init+0x168>
 8012578:	2400      	movs	r4, #0
 801257a:	3e04      	subs	r6, #4
 801257c:	46a1      	mov	r9, r4
 801257e:	e00b      	b.n	8012598 <rcl_init+0x110>
 8012580:	6831      	ldr	r1, [r6, #0]
 8012582:	f006 fa6e 	bl	8018a62 <memcpy>
 8012586:	3401      	adds	r4, #1
 8012588:	f149 0900 	adc.w	r9, r9, #0
 801258c:	45c8      	cmp	r8, r9
 801258e:	bf08      	it	eq
 8012590:	42a5      	cmpeq	r5, r4
 8012592:	d02b      	beq.n	80125ec <rcl_init+0x164>
 8012594:	f8d7 a000 	ldr.w	sl, [r7]
 8012598:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801259c:	f7ed fe42 	bl	8000224 <strlen>
 80125a0:	1c42      	adds	r2, r0, #1
 80125a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80125a4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80125a6:	f8da a020 	ldr.w	sl, [sl, #32]
 80125aa:	9201      	str	r2, [sp, #4]
 80125ac:	4610      	mov	r0, r2
 80125ae:	4798      	blx	r3
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80125b6:	6a1b      	ldr	r3, [r3, #32]
 80125b8:	9a01      	ldr	r2, [sp, #4]
 80125ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80125be:	2800      	cmp	r0, #0
 80125c0:	d1de      	bne.n	8012580 <rcl_init+0xf8>
 80125c2:	240a      	movs	r4, #10
 80125c4:	4638      	mov	r0, r7
 80125c6:	f7ff fdf1 	bl	80121ac <__cleanup_context>
 80125ca:	4620      	mov	r0, r4
 80125cc:	b01e      	add	sp, #120	@ 0x78
 80125ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d2:	2900      	cmp	r1, #0
 80125d4:	f43f af71 	beq.w	80124ba <rcl_init+0x32>
 80125d8:	240b      	movs	r4, #11
 80125da:	4620      	mov	r0, r4
 80125dc:	b01e      	add	sp, #120	@ 0x78
 80125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e2:	2464      	movs	r4, #100	@ 0x64
 80125e4:	4620      	mov	r0, r4
 80125e6:	b01e      	add	sp, #120	@ 0x78
 80125e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ec:	f8d7 9000 	ldr.w	r9, [r7]
 80125f0:	4926      	ldr	r1, [pc, #152]	@ (801268c <rcl_init+0x204>)
 80125f2:	680b      	ldr	r3, [r1, #0]
 80125f4:	3301      	adds	r3, #1
 80125f6:	d036      	beq.n	8012666 <rcl_init+0x1de>
 80125f8:	600b      	str	r3, [r1, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	2400      	movs	r4, #0
 80125fe:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012602:	607b      	str	r3, [r7, #4]
 8012604:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012606:	3301      	adds	r3, #1
 8012608:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801260c:	d034      	beq.n	8012678 <rcl_init+0x1f0>
 801260e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012612:	b93b      	cbnz	r3, 8012624 <rcl_init+0x19c>
 8012614:	3030      	adds	r0, #48	@ 0x30
 8012616:	f000 f939 	bl	801288c <rcl_get_localhost_only>
 801261a:	4604      	mov	r4, r0
 801261c:	2800      	cmp	r0, #0
 801261e:	d1d1      	bne.n	80125c4 <rcl_init+0x13c>
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	6958      	ldr	r0, [r3, #20]
 8012624:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012626:	aa18      	add	r2, sp, #96	@ 0x60
 8012628:	a917      	add	r1, sp, #92	@ 0x5c
 801262a:	f000 ff63 	bl	80134f4 <rcl_validate_enclave_name>
 801262e:	4604      	mov	r4, r0
 8012630:	2800      	cmp	r0, #0
 8012632:	d1c7      	bne.n	80125c4 <rcl_init+0x13c>
 8012634:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012636:	b9eb      	cbnz	r3, 8012674 <rcl_init+0x1ec>
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	694b      	ldr	r3, [r1, #20]
 801263c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801263e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012642:	f000 fa99 	bl	8012b78 <rcl_get_security_options_from_environment>
 8012646:	4604      	mov	r4, r0
 8012648:	2800      	cmp	r0, #0
 801264a:	d1bb      	bne.n	80125c4 <rcl_init+0x13c>
 801264c:	6839      	ldr	r1, [r7, #0]
 801264e:	6948      	ldr	r0, [r1, #20]
 8012650:	3128      	adds	r1, #40	@ 0x28
 8012652:	3018      	adds	r0, #24
 8012654:	f002 ff68 	bl	8015528 <rmw_init>
 8012658:	4604      	mov	r4, r0
 801265a:	2800      	cmp	r0, #0
 801265c:	d0bd      	beq.n	80125da <rcl_init+0x152>
 801265e:	f7ff fd81 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 8012662:	4604      	mov	r4, r0
 8012664:	e7ae      	b.n	80125c4 <rcl_init+0x13c>
 8012666:	2201      	movs	r2, #1
 8012668:	461c      	mov	r4, r3
 801266a:	600a      	str	r2, [r1, #0]
 801266c:	4613      	mov	r3, r2
 801266e:	e7c6      	b.n	80125fe <rcl_init+0x176>
 8012670:	240a      	movs	r4, #10
 8012672:	e7b2      	b.n	80125da <rcl_init+0x152>
 8012674:	2401      	movs	r4, #1
 8012676:	e7a5      	b.n	80125c4 <rcl_init+0x13c>
 8012678:	3024      	adds	r0, #36	@ 0x24
 801267a:	f005 f8a5 	bl	80177c8 <rcl_get_default_domain_id>
 801267e:	4604      	mov	r4, r0
 8012680:	2800      	cmp	r0, #0
 8012682:	d19f      	bne.n	80125c4 <rcl_init+0x13c>
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	6958      	ldr	r0, [r3, #20]
 8012688:	e7c1      	b.n	801260e <rcl_init+0x186>
 801268a:	bf00      	nop
 801268c:	20010e08 	.word	0x20010e08

08012690 <rcl_get_zero_initialized_init_options>:
 8012690:	2000      	movs	r0, #0
 8012692:	4770      	bx	lr

08012694 <rcl_init_options_init>:
 8012694:	b084      	sub	sp, #16
 8012696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012698:	b097      	sub	sp, #92	@ 0x5c
 801269a:	ae1d      	add	r6, sp, #116	@ 0x74
 801269c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d058      	beq.n	8012756 <rcl_init_options_init+0xc2>
 80126a4:	6803      	ldr	r3, [r0, #0]
 80126a6:	4605      	mov	r5, r0
 80126a8:	b133      	cbz	r3, 80126b8 <rcl_init_options_init+0x24>
 80126aa:	2464      	movs	r4, #100	@ 0x64
 80126ac:	4620      	mov	r0, r4
 80126ae:	b017      	add	sp, #92	@ 0x5c
 80126b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80126b4:	b004      	add	sp, #16
 80126b6:	4770      	bx	lr
 80126b8:	4630      	mov	r0, r6
 80126ba:	f7fb f98d 	bl	800d9d8 <rcutils_allocator_is_valid>
 80126be:	2800      	cmp	r0, #0
 80126c0:	d049      	beq.n	8012756 <rcl_init_options_init+0xc2>
 80126c2:	46b4      	mov	ip, r6
 80126c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126c8:	ac11      	add	r4, sp, #68	@ 0x44
 80126ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126cc:	f8dc 3000 	ldr.w	r3, [ip]
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80126d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80126d6:	2050      	movs	r0, #80	@ 0x50
 80126d8:	4798      	blx	r3
 80126da:	4604      	mov	r4, r0
 80126dc:	6028      	str	r0, [r5, #0]
 80126de:	2800      	cmp	r0, #0
 80126e0:	d03b      	beq.n	801275a <rcl_init_options_init+0xc6>
 80126e2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80126e6:	4686      	mov	lr, r0
 80126e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126f0:	f8dc 3000 	ldr.w	r3, [ip]
 80126f4:	f8ce 3000 	str.w	r3, [lr]
 80126f8:	a802      	add	r0, sp, #8
 80126fa:	f002 fc79 	bl	8014ff0 <rmw_get_zero_initialized_init_options>
 80126fe:	f10d 0e08 	add.w	lr, sp, #8
 8012702:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012706:	f104 0c18 	add.w	ip, r4, #24
 801270a:	682f      	ldr	r7, [r5, #0]
 801270c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012710:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012718:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801271c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012720:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012724:	ac20      	add	r4, sp, #128	@ 0x80
 8012726:	e88c 0003 	stmia.w	ip, {r0, r1}
 801272a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801272e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012732:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012736:	f107 0018 	add.w	r0, r7, #24
 801273a:	f002 fdfd 	bl	8015338 <rmw_init_options_init>
 801273e:	4604      	mov	r4, r0
 8012740:	2800      	cmp	r0, #0
 8012742:	d0b3      	beq.n	80126ac <rcl_init_options_init+0x18>
 8012744:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012746:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012748:	6828      	ldr	r0, [r5, #0]
 801274a:	4798      	blx	r3
 801274c:	4620      	mov	r0, r4
 801274e:	f7ff fd09 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 8012752:	4604      	mov	r4, r0
 8012754:	e7aa      	b.n	80126ac <rcl_init_options_init+0x18>
 8012756:	240b      	movs	r4, #11
 8012758:	e7a8      	b.n	80126ac <rcl_init_options_init+0x18>
 801275a:	240a      	movs	r4, #10
 801275c:	e7a6      	b.n	80126ac <rcl_init_options_init+0x18>
 801275e:	bf00      	nop

08012760 <rcl_init_options_fini>:
 8012760:	b530      	push	{r4, r5, lr}
 8012762:	b087      	sub	sp, #28
 8012764:	b1f0      	cbz	r0, 80127a4 <rcl_init_options_fini+0x44>
 8012766:	6803      	ldr	r3, [r0, #0]
 8012768:	4604      	mov	r4, r0
 801276a:	b1db      	cbz	r3, 80127a4 <rcl_init_options_fini+0x44>
 801276c:	469c      	mov	ip, r3
 801276e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012772:	f10d 0e04 	add.w	lr, sp, #4
 8012776:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801277a:	f8dc 3000 	ldr.w	r3, [ip]
 801277e:	f8ce 3000 	str.w	r3, [lr]
 8012782:	a801      	add	r0, sp, #4
 8012784:	f7fb f928 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012788:	b160      	cbz	r0, 80127a4 <rcl_init_options_fini+0x44>
 801278a:	6820      	ldr	r0, [r4, #0]
 801278c:	3018      	adds	r0, #24
 801278e:	f002 fe83 	bl	8015498 <rmw_init_options_fini>
 8012792:	4605      	mov	r5, r0
 8012794:	b950      	cbnz	r0, 80127ac <rcl_init_options_fini+0x4c>
 8012796:	6820      	ldr	r0, [r4, #0]
 8012798:	9b02      	ldr	r3, [sp, #8]
 801279a:	9905      	ldr	r1, [sp, #20]
 801279c:	4798      	blx	r3
 801279e:	4628      	mov	r0, r5
 80127a0:	b007      	add	sp, #28
 80127a2:	bd30      	pop	{r4, r5, pc}
 80127a4:	250b      	movs	r5, #11
 80127a6:	4628      	mov	r0, r5
 80127a8:	b007      	add	sp, #28
 80127aa:	bd30      	pop	{r4, r5, pc}
 80127ac:	f7ff fcda 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 80127b0:	4605      	mov	r5, r0
 80127b2:	e7f8      	b.n	80127a6 <rcl_init_options_fini+0x46>

080127b4 <rcl_init_options_copy>:
 80127b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b8:	b094      	sub	sp, #80	@ 0x50
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d058      	beq.n	8012870 <rcl_init_options_copy+0xbc>
 80127be:	4604      	mov	r4, r0
 80127c0:	6800      	ldr	r0, [r0, #0]
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d054      	beq.n	8012870 <rcl_init_options_copy+0xbc>
 80127c6:	460e      	mov	r6, r1
 80127c8:	f7fb f906 	bl	800d9d8 <rcutils_allocator_is_valid>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d04f      	beq.n	8012870 <rcl_init_options_copy+0xbc>
 80127d0:	2e00      	cmp	r6, #0
 80127d2:	d04d      	beq.n	8012870 <rcl_init_options_copy+0xbc>
 80127d4:	6833      	ldr	r3, [r6, #0]
 80127d6:	b123      	cbz	r3, 80127e2 <rcl_init_options_copy+0x2e>
 80127d8:	2464      	movs	r4, #100	@ 0x64
 80127da:	4620      	mov	r0, r4
 80127dc:	b014      	add	sp, #80	@ 0x50
 80127de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e2:	6827      	ldr	r7, [r4, #0]
 80127e4:	46bc      	mov	ip, r7
 80127e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127ea:	ad0f      	add	r5, sp, #60	@ 0x3c
 80127ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127ee:	f8dc 3000 	ldr.w	r3, [ip]
 80127f2:	f8d7 8000 	ldr.w	r8, [r7]
 80127f6:	602b      	str	r3, [r5, #0]
 80127f8:	4619      	mov	r1, r3
 80127fa:	2050      	movs	r0, #80	@ 0x50
 80127fc:	47c0      	blx	r8
 80127fe:	4605      	mov	r5, r0
 8012800:	6030      	str	r0, [r6, #0]
 8012802:	b3d0      	cbz	r0, 801287a <rcl_init_options_copy+0xc6>
 8012804:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8012808:	4686      	mov	lr, r0
 801280a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801280e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012812:	f8dc 3000 	ldr.w	r3, [ip]
 8012816:	f8ce 3000 	str.w	r3, [lr]
 801281a:	4668      	mov	r0, sp
 801281c:	f002 fbe8 	bl	8014ff0 <rmw_get_zero_initialized_init_options>
 8012820:	46ee      	mov	lr, sp
 8012822:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012826:	f105 0c18 	add.w	ip, r5, #24
 801282a:	6824      	ldr	r4, [r4, #0]
 801282c:	6835      	ldr	r5, [r6, #0]
 801282e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801283a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801283e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012842:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012846:	e88c 0003 	stmia.w	ip, {r0, r1}
 801284a:	f104 0018 	add.w	r0, r4, #24
 801284e:	f105 0118 	add.w	r1, r5, #24
 8012852:	f002 fdd9 	bl	8015408 <rmw_init_options_copy>
 8012856:	4604      	mov	r4, r0
 8012858:	2800      	cmp	r0, #0
 801285a:	d0be      	beq.n	80127da <rcl_init_options_copy+0x26>
 801285c:	f7fb f8e2 	bl	800da24 <rcutils_get_error_string>
 8012860:	f7fb f8f6 	bl	800da50 <rcutils_reset_error>
 8012864:	4630      	mov	r0, r6
 8012866:	f7ff ff7b 	bl	8012760 <rcl_init_options_fini>
 801286a:	b140      	cbz	r0, 801287e <rcl_init_options_copy+0xca>
 801286c:	4604      	mov	r4, r0
 801286e:	e7b4      	b.n	80127da <rcl_init_options_copy+0x26>
 8012870:	240b      	movs	r4, #11
 8012872:	4620      	mov	r0, r4
 8012874:	b014      	add	sp, #80	@ 0x50
 8012876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801287a:	240a      	movs	r4, #10
 801287c:	e7ad      	b.n	80127da <rcl_init_options_copy+0x26>
 801287e:	4620      	mov	r0, r4
 8012880:	b014      	add	sp, #80	@ 0x50
 8012882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012886:	f7ff bc6d 	b.w	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 801288a:	bf00      	nop

0801288c <rcl_get_localhost_only>:
 801288c:	b510      	push	{r4, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	2300      	movs	r3, #0
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	b1b8      	cbz	r0, 80128c6 <rcl_get_localhost_only+0x3a>
 8012896:	4604      	mov	r4, r0
 8012898:	a901      	add	r1, sp, #4
 801289a:	480c      	ldr	r0, [pc, #48]	@ (80128cc <rcl_get_localhost_only+0x40>)
 801289c:	f7fb f8aa 	bl	800d9f4 <rcutils_get_env>
 80128a0:	b110      	cbz	r0, 80128a8 <rcl_get_localhost_only+0x1c>
 80128a2:	2001      	movs	r0, #1
 80128a4:	b002      	add	sp, #8
 80128a6:	bd10      	pop	{r4, pc}
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	b113      	cbz	r3, 80128b2 <rcl_get_localhost_only+0x26>
 80128ac:	781a      	ldrb	r2, [r3, #0]
 80128ae:	2a31      	cmp	r2, #49	@ 0x31
 80128b0:	d004      	beq.n	80128bc <rcl_get_localhost_only+0x30>
 80128b2:	2302      	movs	r3, #2
 80128b4:	2000      	movs	r0, #0
 80128b6:	7023      	strb	r3, [r4, #0]
 80128b8:	b002      	add	sp, #8
 80128ba:	bd10      	pop	{r4, pc}
 80128bc:	785b      	ldrb	r3, [r3, #1]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1f7      	bne.n	80128b2 <rcl_get_localhost_only+0x26>
 80128c2:	2301      	movs	r3, #1
 80128c4:	e7f6      	b.n	80128b4 <rcl_get_localhost_only+0x28>
 80128c6:	200b      	movs	r0, #11
 80128c8:	b002      	add	sp, #8
 80128ca:	bd10      	pop	{r4, pc}
 80128cc:	0801b608 	.word	0x0801b608

080128d0 <rcl_node_resolve_name>:
 80128d0:	b082      	sub	sp, #8
 80128d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d6:	b091      	sub	sp, #68	@ 0x44
 80128d8:	ac1a      	add	r4, sp, #104	@ 0x68
 80128da:	e884 000c 	stmia.w	r4, {r2, r3}
 80128de:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80128e2:	2800      	cmp	r0, #0
 80128e4:	d03b      	beq.n	801295e <rcl_node_resolve_name+0x8e>
 80128e6:	460c      	mov	r4, r1
 80128e8:	4605      	mov	r5, r0
 80128ea:	f7f9 fde5 	bl	800c4b8 <rcl_node_get_options>
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d037      	beq.n	8012962 <rcl_node_resolve_name+0x92>
 80128f2:	4628      	mov	r0, r5
 80128f4:	f7f9 fdd0 	bl	800c498 <rcl_node_get_name>
 80128f8:	4606      	mov	r6, r0
 80128fa:	4628      	mov	r0, r5
 80128fc:	f7f9 fdd4 	bl	800c4a8 <rcl_node_get_namespace>
 8012900:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012904:	4681      	mov	r9, r0
 8012906:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801290a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801290c:	46ac      	mov	ip, r5
 801290e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012912:	f8de 3000 	ldr.w	r3, [lr]
 8012916:	f8cc 3000 	str.w	r3, [ip]
 801291a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801291c:	b1fb      	cbz	r3, 801295e <rcl_node_resolve_name+0x8e>
 801291e:	468a      	mov	sl, r1
 8012920:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012924:	f002 fa28 	bl	8014d78 <rcutils_get_zero_initialized_string_map>
 8012928:	ab10      	add	r3, sp, #64	@ 0x40
 801292a:	9008      	str	r0, [sp, #32]
 801292c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012930:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012934:	2100      	movs	r1, #0
 8012936:	e895 000c 	ldmia.w	r5, {r2, r3}
 801293a:	a808      	add	r0, sp, #32
 801293c:	f002 fa94 	bl	8014e68 <rcutils_string_map_init>
 8012940:	4607      	mov	r7, r0
 8012942:	b180      	cbz	r0, 8012966 <rcl_node_resolve_name+0x96>
 8012944:	f7fb f86e 	bl	800da24 <rcutils_get_error_string>
 8012948:	f7fb f882 	bl	800da50 <rcutils_reset_error>
 801294c:	2f0a      	cmp	r7, #10
 801294e:	bf18      	it	ne
 8012950:	2701      	movne	r7, #1
 8012952:	4638      	mov	r0, r7
 8012954:	b011      	add	sp, #68	@ 0x44
 8012956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295a:	b002      	add	sp, #8
 801295c:	4770      	bx	lr
 801295e:	270b      	movs	r7, #11
 8012960:	e7f7      	b.n	8012952 <rcl_node_resolve_name+0x82>
 8012962:	2701      	movs	r7, #1
 8012964:	e7f5      	b.n	8012952 <rcl_node_resolve_name+0x82>
 8012966:	9009      	str	r0, [sp, #36]	@ 0x24
 8012968:	9007      	str	r0, [sp, #28]
 801296a:	a808      	add	r0, sp, #32
 801296c:	f005 f8be 	bl	8017aec <rcl_get_default_topic_name_substitutions>
 8012970:	4607      	mov	r7, r0
 8012972:	b1a8      	cbz	r0, 80129a0 <rcl_node_resolve_name+0xd0>
 8012974:	280a      	cmp	r0, #10
 8012976:	9c07      	ldr	r4, [sp, #28]
 8012978:	d000      	beq.n	801297c <rcl_node_resolve_name+0xac>
 801297a:	2701      	movs	r7, #1
 801297c:	a808      	add	r0, sp, #32
 801297e:	f002 fab3 	bl	8014ee8 <rcutils_string_map_fini>
 8012982:	2800      	cmp	r0, #0
 8012984:	d13d      	bne.n	8012a02 <rcl_node_resolve_name+0x132>
 8012986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012988:	4659      	mov	r1, fp
 801298a:	47d0      	blx	sl
 801298c:	4659      	mov	r1, fp
 801298e:	4620      	mov	r0, r4
 8012990:	47d0      	blx	sl
 8012992:	f1b8 0f00 	cmp.w	r8, #0
 8012996:	d0dc      	beq.n	8012952 <rcl_node_resolve_name+0x82>
 8012998:	2f67      	cmp	r7, #103	@ 0x67
 801299a:	bf08      	it	eq
 801299c:	2768      	moveq	r7, #104	@ 0x68
 801299e:	e7d8      	b.n	8012952 <rcl_node_resolve_name+0x82>
 80129a0:	ab09      	add	r3, sp, #36	@ 0x24
 80129a2:	9305      	str	r3, [sp, #20]
 80129a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129a6:	46ec      	mov	ip, sp
 80129a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	f8cc 3000 	str.w	r3, [ip]
 80129b2:	464a      	mov	r2, r9
 80129b4:	4631      	mov	r1, r6
 80129b6:	4620      	mov	r0, r4
 80129b8:	ab08      	add	r3, sp, #32
 80129ba:	f004 ff39 	bl	8017830 <rcl_expand_topic_name>
 80129be:	4607      	mov	r7, r0
 80129c0:	b9b8      	cbnz	r0, 80129f2 <rcl_node_resolve_name+0x122>
 80129c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80129c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80129c6:	4602      	mov	r2, r0
 80129c8:	a90a      	add	r1, sp, #40	@ 0x28
 80129ca:	4620      	mov	r0, r4
 80129cc:	f002 fba8 	bl	8015120 <rmw_validate_full_topic_name>
 80129d0:	b988      	cbnz	r0, 80129f6 <rcl_node_resolve_name+0x126>
 80129d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80129d4:	b9d5      	cbnz	r5, 8012a0c <rcl_node_resolve_name+0x13c>
 80129d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129d8:	a808      	add	r0, sp, #32
 80129da:	601c      	str	r4, [r3, #0]
 80129dc:	f002 fa84 	bl	8014ee8 <rcutils_string_map_fini>
 80129e0:	4607      	mov	r7, r0
 80129e2:	b1a8      	cbz	r0, 8012a10 <rcl_node_resolve_name+0x140>
 80129e4:	f7fb f81e 	bl	800da24 <rcutils_get_error_string>
 80129e8:	462c      	mov	r4, r5
 80129ea:	f7fb f831 	bl	800da50 <rcutils_reset_error>
 80129ee:	2701      	movs	r7, #1
 80129f0:	e7c9      	b.n	8012986 <rcl_node_resolve_name+0xb6>
 80129f2:	9c07      	ldr	r4, [sp, #28]
 80129f4:	e7c2      	b.n	801297c <rcl_node_resolve_name+0xac>
 80129f6:	f7fb f815 	bl	800da24 <rcutils_get_error_string>
 80129fa:	2701      	movs	r7, #1
 80129fc:	f7fb f828 	bl	800da50 <rcutils_reset_error>
 8012a00:	e7bc      	b.n	801297c <rcl_node_resolve_name+0xac>
 8012a02:	f7fb f80f 	bl	800da24 <rcutils_get_error_string>
 8012a06:	f7fb f823 	bl	800da50 <rcutils_reset_error>
 8012a0a:	e7bc      	b.n	8012986 <rcl_node_resolve_name+0xb6>
 8012a0c:	2767      	movs	r7, #103	@ 0x67
 8012a0e:	e7b5      	b.n	801297c <rcl_node_resolve_name+0xac>
 8012a10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a12:	4659      	mov	r1, fp
 8012a14:	47d0      	blx	sl
 8012a16:	4659      	mov	r1, fp
 8012a18:	4638      	mov	r0, r7
 8012a1a:	47d0      	blx	sl
 8012a1c:	e799      	b.n	8012952 <rcl_node_resolve_name+0x82>
 8012a1e:	bf00      	nop

08012a20 <exact_match_lookup>:
 8012a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a22:	f102 0708 	add.w	r7, r2, #8
 8012a26:	460b      	mov	r3, r1
 8012a28:	4614      	mov	r4, r2
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012a30:	b085      	sub	sp, #20
 8012a32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a36:	4618      	mov	r0, r3
 8012a38:	4919      	ldr	r1, [pc, #100]	@ (8012aa0 <exact_match_lookup+0x80>)
 8012a3a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012a3e:	f002 f965 	bl	8014d0c <rcutils_join_path>
 8012a42:	7833      	ldrb	r3, [r6, #0]
 8012a44:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a46:	4605      	mov	r5, r0
 8012a48:	d023      	beq.n	8012a92 <exact_match_lookup+0x72>
 8012a4a:	f104 030c 	add.w	r3, r4, #12
 8012a4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a56:	1c70      	adds	r0, r6, #1
 8012a58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012a5c:	f002 f95c 	bl	8014d18 <rcutils_to_native_path>
 8012a60:	4606      	mov	r6, r0
 8012a62:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012a66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a6a:	4631      	mov	r1, r6
 8012a6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012a70:	4628      	mov	r0, r5
 8012a72:	f002 f94b 	bl	8014d0c <rcutils_join_path>
 8012a76:	6862      	ldr	r2, [r4, #4]
 8012a78:	6921      	ldr	r1, [r4, #16]
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	461e      	mov	r6, r3
 8012a80:	4790      	blx	r2
 8012a82:	4628      	mov	r0, r5
 8012a84:	6863      	ldr	r3, [r4, #4]
 8012a86:	6921      	ldr	r1, [r4, #16]
 8012a88:	4798      	blx	r3
 8012a8a:	4635      	mov	r5, r6
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	b005      	add	sp, #20
 8012a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a92:	7873      	ldrb	r3, [r6, #1]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1d8      	bne.n	8012a4a <exact_match_lookup+0x2a>
 8012a98:	4628      	mov	r0, r5
 8012a9a:	b005      	add	sp, #20
 8012a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	0801b658 	.word	0x0801b658

08012aa4 <rcl_get_secure_root>:
 8012aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012aa8:	b085      	sub	sp, #20
 8012aaa:	b168      	cbz	r0, 8012ac8 <rcl_get_secure_root+0x24>
 8012aac:	4607      	mov	r7, r0
 8012aae:	4608      	mov	r0, r1
 8012ab0:	460c      	mov	r4, r1
 8012ab2:	f7fa ff91 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012ab6:	b138      	cbz	r0, 8012ac8 <rcl_get_secure_root+0x24>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	482d      	ldr	r0, [pc, #180]	@ (8012b70 <rcl_get_secure_root+0xcc>)
 8012abc:	9303      	str	r3, [sp, #12]
 8012abe:	a903      	add	r1, sp, #12
 8012ac0:	f7fa ff98 	bl	800d9f4 <rcutils_get_env>
 8012ac4:	4605      	mov	r5, r0
 8012ac6:	b120      	cbz	r0, 8012ad2 <rcl_get_secure_root+0x2e>
 8012ac8:	2500      	movs	r5, #0
 8012aca:	4628      	mov	r0, r5
 8012acc:	b005      	add	sp, #20
 8012ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad2:	9b03      	ldr	r3, [sp, #12]
 8012ad4:	781a      	ldrb	r2, [r3, #0]
 8012ad6:	2a00      	cmp	r2, #0
 8012ad8:	d0f6      	beq.n	8012ac8 <rcl_get_secure_root+0x24>
 8012ada:	f104 090c 	add.w	r9, r4, #12
 8012ade:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012ae2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012aec:	f7fb f8e6 	bl	800dcbc <rcutils_strdup>
 8012af0:	4680      	mov	r8, r0
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d0e8      	beq.n	8012ac8 <rcl_get_secure_root+0x24>
 8012af6:	481f      	ldr	r0, [pc, #124]	@ (8012b74 <rcl_get_secure_root+0xd0>)
 8012af8:	9503      	str	r5, [sp, #12]
 8012afa:	a903      	add	r1, sp, #12
 8012afc:	f7fa ff7a 	bl	800d9f4 <rcutils_get_env>
 8012b00:	b160      	cbz	r0, 8012b1c <rcl_get_secure_root+0x78>
 8012b02:	2600      	movs	r6, #0
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	6921      	ldr	r1, [r4, #16]
 8012b08:	4630      	mov	r0, r6
 8012b0a:	4798      	blx	r3
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	6863      	ldr	r3, [r4, #4]
 8012b10:	6921      	ldr	r1, [r4, #16]
 8012b12:	4798      	blx	r3
 8012b14:	4628      	mov	r0, r5
 8012b16:	b005      	add	sp, #20
 8012b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b1c:	9b03      	ldr	r3, [sp, #12]
 8012b1e:	781e      	ldrb	r6, [r3, #0]
 8012b20:	b1f6      	cbz	r6, 8012b60 <rcl_get_secure_root+0xbc>
 8012b22:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012b26:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012b30:	f7fb f8c4 	bl	800dcbc <rcutils_strdup>
 8012b34:	4606      	mov	r6, r0
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0e3      	beq.n	8012b02 <rcl_get_secure_root+0x5e>
 8012b3a:	4622      	mov	r2, r4
 8012b3c:	4641      	mov	r1, r8
 8012b3e:	f7ff ff6f 	bl	8012a20 <exact_match_lookup>
 8012b42:	4605      	mov	r5, r0
 8012b44:	2d00      	cmp	r5, #0
 8012b46:	d0dd      	beq.n	8012b04 <rcl_get_secure_root+0x60>
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f002 f8dd 	bl	8014d08 <rcutils_is_directory>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d1d7      	bne.n	8012b04 <rcl_get_secure_root+0x60>
 8012b54:	4628      	mov	r0, r5
 8012b56:	6921      	ldr	r1, [r4, #16]
 8012b58:	461d      	mov	r5, r3
 8012b5a:	6863      	ldr	r3, [r4, #4]
 8012b5c:	4798      	blx	r3
 8012b5e:	e7d1      	b.n	8012b04 <rcl_get_secure_root+0x60>
 8012b60:	4622      	mov	r2, r4
 8012b62:	4638      	mov	r0, r7
 8012b64:	4641      	mov	r1, r8
 8012b66:	f7ff ff5b 	bl	8012a20 <exact_match_lookup>
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	e7ea      	b.n	8012b44 <rcl_get_secure_root+0xa0>
 8012b6e:	bf00      	nop
 8012b70:	0801b664 	.word	0x0801b664
 8012b74:	0801b67c 	.word	0x0801b67c

08012b78 <rcl_get_security_options_from_environment>:
 8012b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7c:	b082      	sub	sp, #8
 8012b7e:	2300      	movs	r3, #0
 8012b80:	4606      	mov	r6, r0
 8012b82:	460f      	mov	r7, r1
 8012b84:	4820      	ldr	r0, [pc, #128]	@ (8012c08 <rcl_get_security_options_from_environment+0x90>)
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	a901      	add	r1, sp, #4
 8012b8a:	4690      	mov	r8, r2
 8012b8c:	f7fa ff32 	bl	800d9f4 <rcutils_get_env>
 8012b90:	b120      	cbz	r0, 8012b9c <rcl_get_security_options_from_environment+0x24>
 8012b92:	2501      	movs	r5, #1
 8012b94:	4628      	mov	r0, r5
 8012b96:	b002      	add	sp, #8
 8012b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9c:	491b      	ldr	r1, [pc, #108]	@ (8012c0c <rcl_get_security_options_from_environment+0x94>)
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	9801      	ldr	r0, [sp, #4]
 8012ba2:	f7ed fb35 	bl	8000210 <strcmp>
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b9e8      	cbnz	r0, 8012be6 <rcl_get_security_options_from_environment+0x6e>
 8012baa:	9001      	str	r0, [sp, #4]
 8012bac:	f1b8 0f00 	cmp.w	r8, #0
 8012bb0:	d020      	beq.n	8012bf4 <rcl_get_security_options_from_environment+0x7c>
 8012bb2:	4817      	ldr	r0, [pc, #92]	@ (8012c10 <rcl_get_security_options_from_environment+0x98>)
 8012bb4:	a901      	add	r1, sp, #4
 8012bb6:	f7fa ff1d 	bl	800d9f4 <rcutils_get_env>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d1e9      	bne.n	8012b92 <rcl_get_security_options_from_environment+0x1a>
 8012bbe:	4915      	ldr	r1, [pc, #84]	@ (8012c14 <rcl_get_security_options_from_environment+0x9c>)
 8012bc0:	9801      	ldr	r0, [sp, #4]
 8012bc2:	f7ed fb25 	bl	8000210 <strcmp>
 8012bc6:	fab0 f080 	clz	r0, r0
 8012bca:	0940      	lsrs	r0, r0, #5
 8012bcc:	f888 0000 	strb.w	r0, [r8]
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	f7ff ff66 	bl	8012aa4 <rcl_get_secure_root>
 8012bd8:	b170      	cbz	r0, 8012bf8 <rcl_get_security_options_from_environment+0x80>
 8012bda:	f8c8 0004 	str.w	r0, [r8, #4]
 8012bde:	4628      	mov	r0, r5
 8012be0:	b002      	add	sp, #8
 8012be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be6:	4625      	mov	r5, r4
 8012be8:	4628      	mov	r0, r5
 8012bea:	f888 4000 	strb.w	r4, [r8]
 8012bee:	b002      	add	sp, #8
 8012bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf4:	250b      	movs	r5, #11
 8012bf6:	e7cd      	b.n	8012b94 <rcl_get_security_options_from_environment+0x1c>
 8012bf8:	f898 5000 	ldrb.w	r5, [r8]
 8012bfc:	f1a5 0501 	sub.w	r5, r5, #1
 8012c00:	fab5 f585 	clz	r5, r5
 8012c04:	096d      	lsrs	r5, r5, #5
 8012c06:	e7c5      	b.n	8012b94 <rcl_get_security_options_from_environment+0x1c>
 8012c08:	0801b61c 	.word	0x0801b61c
 8012c0c:	0801b630 	.word	0x0801b630
 8012c10:	0801b638 	.word	0x0801b638
 8012c14:	0801b650 	.word	0x0801b650

08012c18 <rcl_service_get_rmw_handle>:
 8012c18:	b118      	cbz	r0, 8012c22 <rcl_service_get_rmw_handle+0xa>
 8012c1a:	6800      	ldr	r0, [r0, #0]
 8012c1c:	b108      	cbz	r0, 8012c22 <rcl_service_get_rmw_handle+0xa>
 8012c1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012c22:	4770      	bx	lr

08012c24 <rcl_take_request>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	468e      	mov	lr, r1
 8012c28:	460c      	mov	r4, r1
 8012c2a:	4616      	mov	r6, r2
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c32:	b08c      	sub	sp, #48	@ 0x30
 8012c34:	f10d 0c18 	add.w	ip, sp, #24
 8012c38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012c40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012c44:	b30d      	cbz	r5, 8012c8a <rcl_take_request+0x66>
 8012c46:	682b      	ldr	r3, [r5, #0]
 8012c48:	b1fb      	cbz	r3, 8012c8a <rcl_take_request+0x66>
 8012c4a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012c4e:	b1e0      	cbz	r0, 8012c8a <rcl_take_request+0x66>
 8012c50:	b336      	cbz	r6, 8012ca0 <rcl_take_request+0x7c>
 8012c52:	2300      	movs	r3, #0
 8012c54:	f88d 3007 	strb.w	r3, [sp, #7]
 8012c58:	4632      	mov	r2, r6
 8012c5a:	f10d 0307 	add.w	r3, sp, #7
 8012c5e:	a902      	add	r1, sp, #8
 8012c60:	f002 fe8a 	bl	8015978 <rmw_take_request>
 8012c64:	4605      	mov	r5, r0
 8012c66:	b198      	cbz	r0, 8012c90 <rcl_take_request+0x6c>
 8012c68:	280a      	cmp	r0, #10
 8012c6a:	bf18      	it	ne
 8012c6c:	2501      	movne	r5, #1
 8012c6e:	f10d 0e18 	add.w	lr, sp, #24
 8012c72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c76:	46a4      	mov	ip, r4
 8012c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012c80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012c84:	4628      	mov	r0, r5
 8012c86:	b00c      	add	sp, #48	@ 0x30
 8012c88:	bd70      	pop	{r4, r5, r6, pc}
 8012c8a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012c8e:	e7ee      	b.n	8012c6e <rcl_take_request+0x4a>
 8012c90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012c94:	f240 2359 	movw	r3, #601	@ 0x259
 8012c98:	2a00      	cmp	r2, #0
 8012c9a:	bf08      	it	eq
 8012c9c:	461d      	moveq	r5, r3
 8012c9e:	e7e6      	b.n	8012c6e <rcl_take_request+0x4a>
 8012ca0:	250b      	movs	r5, #11
 8012ca2:	e7e4      	b.n	8012c6e <rcl_take_request+0x4a>

08012ca4 <rcl_send_response>:
 8012ca4:	b170      	cbz	r0, 8012cc4 <rcl_send_response+0x20>
 8012ca6:	6800      	ldr	r0, [r0, #0]
 8012ca8:	b160      	cbz	r0, 8012cc4 <rcl_send_response+0x20>
 8012caa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012cae:	b148      	cbz	r0, 8012cc4 <rcl_send_response+0x20>
 8012cb0:	b159      	cbz	r1, 8012cca <rcl_send_response+0x26>
 8012cb2:	b510      	push	{r4, lr}
 8012cb4:	b15a      	cbz	r2, 8012cce <rcl_send_response+0x2a>
 8012cb6:	f002 febd 	bl	8015a34 <rmw_send_response>
 8012cba:	b110      	cbz	r0, 8012cc2 <rcl_send_response+0x1e>
 8012cbc:	2802      	cmp	r0, #2
 8012cbe:	bf18      	it	ne
 8012cc0:	2001      	movne	r0, #1
 8012cc2:	bd10      	pop	{r4, pc}
 8012cc4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012cc8:	4770      	bx	lr
 8012cca:	200b      	movs	r0, #11
 8012ccc:	4770      	bx	lr
 8012cce:	200b      	movs	r0, #11
 8012cd0:	bd10      	pop	{r4, pc}
 8012cd2:	bf00      	nop

08012cd4 <rcl_service_is_valid>:
 8012cd4:	b130      	cbz	r0, 8012ce4 <rcl_service_is_valid+0x10>
 8012cd6:	6800      	ldr	r0, [r0, #0]
 8012cd8:	b120      	cbz	r0, 8012ce4 <rcl_service_is_valid+0x10>
 8012cda:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012cde:	3800      	subs	r0, #0
 8012ce0:	bf18      	it	ne
 8012ce2:	2001      	movne	r0, #1
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop

08012ce8 <rcl_get_system_time>:
 8012ce8:	4608      	mov	r0, r1
 8012cea:	f7fb b825 	b.w	800dd38 <rcutils_system_time_now>
 8012cee:	bf00      	nop

08012cf0 <rcl_get_steady_time>:
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	f7fb b849 	b.w	800dd88 <rcutils_steady_time_now>
 8012cf6:	bf00      	nop

08012cf8 <rcl_get_ros_time>:
 8012cf8:	7a03      	ldrb	r3, [r0, #8]
 8012cfa:	b510      	push	{r4, lr}
 8012cfc:	460c      	mov	r4, r1
 8012cfe:	b133      	cbz	r3, 8012d0e <rcl_get_ros_time+0x16>
 8012d00:	2105      	movs	r1, #5
 8012d02:	f001 ff5d 	bl	8014bc0 <__atomic_load_8>
 8012d06:	e9c4 0100 	strd	r0, r1, [r4]
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	bd10      	pop	{r4, pc}
 8012d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d12:	4608      	mov	r0, r1
 8012d14:	f7fb b810 	b.w	800dd38 <rcutils_system_time_now>

08012d18 <rcl_clock_init>:
 8012d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	4610      	mov	r0, r2
 8012d1e:	4614      	mov	r4, r2
 8012d20:	460e      	mov	r6, r1
 8012d22:	f7fa fe59 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012d26:	b128      	cbz	r0, 8012d34 <rcl_clock_init+0x1c>
 8012d28:	2d03      	cmp	r5, #3
 8012d2a:	d803      	bhi.n	8012d34 <rcl_clock_init+0x1c>
 8012d2c:	e8df f005 	tbb	[pc, r5]
 8012d30:	06532e1d 	.word	0x06532e1d
 8012d34:	f04f 0c0b 	mov.w	ip, #11
 8012d38:	4660      	mov	r0, ip
 8012d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3c:	2e00      	cmp	r6, #0
 8012d3e:	d0f9      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012d40:	2c00      	cmp	r4, #0
 8012d42:	d0f7      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012d44:	2300      	movs	r3, #0
 8012d46:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012d4a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012e00 <rcl_clock_init+0xe8>
 8012d4e:	6133      	str	r3, [r6, #16]
 8012d50:	f106 0514 	add.w	r5, r6, #20
 8012d54:	469c      	mov	ip, r3
 8012d56:	2703      	movs	r7, #3
 8012d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	602b      	str	r3, [r5, #0]
 8012d60:	7037      	strb	r7, [r6, #0]
 8012d62:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012d66:	4660      	mov	r0, ip
 8012d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d6a:	2e00      	cmp	r6, #0
 8012d6c:	d0e2      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012d6e:	2300      	movs	r3, #0
 8012d70:	7033      	strb	r3, [r6, #0]
 8012d72:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012d76:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012d7a:	469c      	mov	ip, r3
 8012d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d7e:	f106 0514 	add.w	r5, r6, #20
 8012d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d84:	6823      	ldr	r3, [r4, #0]
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	4660      	mov	r0, ip
 8012d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d8c:	2e00      	cmp	r6, #0
 8012d8e:	d0d1      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012d90:	2c00      	cmp	r4, #0
 8012d92:	d0cf      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012d94:	2700      	movs	r7, #0
 8012d96:	7037      	strb	r7, [r6, #0]
 8012d98:	46a4      	mov	ip, r4
 8012d9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d9e:	f106 0514 	add.w	r5, r6, #20
 8012da2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012da6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dac:	f8dc 3000 	ldr.w	r3, [ip]
 8012db0:	602b      	str	r3, [r5, #0]
 8012db2:	6921      	ldr	r1, [r4, #16]
 8012db4:	6823      	ldr	r3, [r4, #0]
 8012db6:	2010      	movs	r0, #16
 8012db8:	4798      	blx	r3
 8012dba:	6130      	str	r0, [r6, #16]
 8012dbc:	b1d0      	cbz	r0, 8012df4 <rcl_clock_init+0xdc>
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e9c0 2300 	strd	r2, r3, [r0]
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	7207      	strb	r7, [r0, #8]
 8012dca:	4a0c      	ldr	r2, [pc, #48]	@ (8012dfc <rcl_clock_init+0xe4>)
 8012dcc:	7033      	strb	r3, [r6, #0]
 8012dce:	46bc      	mov	ip, r7
 8012dd0:	60f2      	str	r2, [r6, #12]
 8012dd2:	4660      	mov	r0, ip
 8012dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd6:	2e00      	cmp	r6, #0
 8012dd8:	d0ac      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012dda:	2c00      	cmp	r4, #0
 8012ddc:	d0aa      	beq.n	8012d34 <rcl_clock_init+0x1c>
 8012dde:	2300      	movs	r3, #0
 8012de0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012de4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012e04 <rcl_clock_init+0xec>
 8012de8:	6133      	str	r3, [r6, #16]
 8012dea:	f106 0514 	add.w	r5, r6, #20
 8012dee:	469c      	mov	ip, r3
 8012df0:	2702      	movs	r7, #2
 8012df2:	e7b1      	b.n	8012d58 <rcl_clock_init+0x40>
 8012df4:	f04f 0c0a 	mov.w	ip, #10
 8012df8:	e79e      	b.n	8012d38 <rcl_clock_init+0x20>
 8012dfa:	bf00      	nop
 8012dfc:	08012cf9 	.word	0x08012cf9
 8012e00:	08012cf1 	.word	0x08012cf1
 8012e04:	08012ce9 	.word	0x08012ce9

08012e08 <rcl_clock_get_now>:
 8012e08:	b140      	cbz	r0, 8012e1c <rcl_clock_get_now+0x14>
 8012e0a:	b139      	cbz	r1, 8012e1c <rcl_clock_get_now+0x14>
 8012e0c:	7803      	ldrb	r3, [r0, #0]
 8012e0e:	b11b      	cbz	r3, 8012e18 <rcl_clock_get_now+0x10>
 8012e10:	68c3      	ldr	r3, [r0, #12]
 8012e12:	b10b      	cbz	r3, 8012e18 <rcl_clock_get_now+0x10>
 8012e14:	6900      	ldr	r0, [r0, #16]
 8012e16:	4718      	bx	r3
 8012e18:	2001      	movs	r0, #1
 8012e1a:	4770      	bx	lr
 8012e1c:	200b      	movs	r0, #11
 8012e1e:	4770      	bx	lr

08012e20 <rcl_clock_add_jump_callback>:
 8012e20:	b082      	sub	sp, #8
 8012e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e26:	a906      	add	r1, sp, #24
 8012e28:	e881 000c 	stmia.w	r1, {r2, r3}
 8012e2c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012e30:	b320      	cbz	r0, 8012e7c <rcl_clock_add_jump_callback+0x5c>
 8012e32:	4604      	mov	r4, r0
 8012e34:	3014      	adds	r0, #20
 8012e36:	f7fa fdcf 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012e3a:	b1f8      	cbz	r0, 8012e7c <rcl_clock_add_jump_callback+0x5c>
 8012e3c:	b1f6      	cbz	r6, 8012e7c <rcl_clock_add_jump_callback+0x5c>
 8012e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	db1b      	blt.n	8012e7c <rcl_clock_add_jump_callback+0x5c>
 8012e44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012e48:	2a01      	cmp	r2, #1
 8012e4a:	f173 0300 	sbcs.w	r3, r3, #0
 8012e4e:	da15      	bge.n	8012e7c <rcl_clock_add_jump_callback+0x5c>
 8012e50:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012e54:	2f00      	cmp	r7, #0
 8012e56:	d042      	beq.n	8012ede <rcl_clock_add_jump_callback+0xbe>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	e003      	b.n	8012e66 <rcl_clock_add_jump_callback+0x46>
 8012e5e:	42bb      	cmp	r3, r7
 8012e60:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012e64:	d011      	beq.n	8012e8a <rcl_clock_add_jump_callback+0x6a>
 8012e66:	6811      	ldr	r1, [r2, #0]
 8012e68:	42b1      	cmp	r1, r6
 8012e6a:	f103 0301 	add.w	r3, r3, #1
 8012e6e:	d1f6      	bne.n	8012e5e <rcl_clock_add_jump_callback+0x3e>
 8012e70:	6a11      	ldr	r1, [r2, #32]
 8012e72:	42a9      	cmp	r1, r5
 8012e74:	d1f3      	bne.n	8012e5e <rcl_clock_add_jump_callback+0x3e>
 8012e76:	f04f 0e01 	mov.w	lr, #1
 8012e7a:	e001      	b.n	8012e80 <rcl_clock_add_jump_callback+0x60>
 8012e7c:	f04f 0e0b 	mov.w	lr, #11
 8012e80:	4670      	mov	r0, lr
 8012e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e86:	b002      	add	sp, #8
 8012e88:	4770      	bx	lr
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012e90:	00d9      	lsls	r1, r3, #3
 8012e92:	69e3      	ldr	r3, [r4, #28]
 8012e94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012e96:	4798      	blx	r3
 8012e98:	b1f0      	cbz	r0, 8012ed8 <rcl_clock_add_jump_callback+0xb8>
 8012e9a:	68a3      	ldr	r3, [r4, #8]
 8012e9c:	6060      	str	r0, [r4, #4]
 8012e9e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012ea2:	f10d 0c18 	add.w	ip, sp, #24
 8012ea6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012eaa:	f103 0801 	add.w	r8, r3, #1
 8012eae:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012eb6:	f106 0708 	add.w	r7, r6, #8
 8012eba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012ebc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012ec0:	f04f 0e00 	mov.w	lr, #0
 8012ec4:	e887 0003 	stmia.w	r7, {r0, r1}
 8012ec8:	6235      	str	r5, [r6, #32]
 8012eca:	4670      	mov	r0, lr
 8012ecc:	f8c4 8008 	str.w	r8, [r4, #8]
 8012ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed4:	b002      	add	sp, #8
 8012ed6:	4770      	bx	lr
 8012ed8:	f04f 0e0a 	mov.w	lr, #10
 8012edc:	e7d0      	b.n	8012e80 <rcl_clock_add_jump_callback+0x60>
 8012ede:	2128      	movs	r1, #40	@ 0x28
 8012ee0:	e7d7      	b.n	8012e92 <rcl_clock_add_jump_callback+0x72>
 8012ee2:	bf00      	nop

08012ee4 <rcl_clock_remove_jump_callback>:
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d057      	beq.n	8012f98 <rcl_clock_remove_jump_callback+0xb4>
 8012ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eec:	4605      	mov	r5, r0
 8012eee:	3014      	adds	r0, #20
 8012ef0:	4688      	mov	r8, r1
 8012ef2:	4692      	mov	sl, r2
 8012ef4:	f7fa fd70 	bl	800d9d8 <rcutils_allocator_is_valid>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d03b      	beq.n	8012f74 <rcl_clock_remove_jump_callback+0x90>
 8012efc:	f1b8 0f00 	cmp.w	r8, #0
 8012f00:	d038      	beq.n	8012f74 <rcl_clock_remove_jump_callback+0x90>
 8012f02:	68ae      	ldr	r6, [r5, #8]
 8012f04:	b166      	cbz	r6, 8012f20 <rcl_clock_remove_jump_callback+0x3c>
 8012f06:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012f0a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012f0e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012f12:	464c      	mov	r4, r9
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	4543      	cmp	r3, r8
 8012f18:	d005      	beq.n	8012f26 <rcl_clock_remove_jump_callback+0x42>
 8012f1a:	3428      	adds	r4, #40	@ 0x28
 8012f1c:	42a7      	cmp	r7, r4
 8012f1e:	d1f9      	bne.n	8012f14 <rcl_clock_remove_jump_callback+0x30>
 8012f20:	2001      	movs	r0, #1
 8012f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f26:	6a23      	ldr	r3, [r4, #32]
 8012f28:	3428      	adds	r4, #40	@ 0x28
 8012f2a:	42bc      	cmp	r4, r7
 8012f2c:	d02d      	beq.n	8012f8a <rcl_clock_remove_jump_callback+0xa6>
 8012f2e:	4553      	cmp	r3, sl
 8012f30:	d1f0      	bne.n	8012f14 <rcl_clock_remove_jump_callback+0x30>
 8012f32:	46a6      	mov	lr, r4
 8012f34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f38:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012f3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f4c:	3428      	adds	r4, #40	@ 0x28
 8012f4e:	42a7      	cmp	r7, r4
 8012f50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f54:	d1ed      	bne.n	8012f32 <rcl_clock_remove_jump_callback+0x4e>
 8012f56:	3e01      	subs	r6, #1
 8012f58:	60ae      	str	r6, [r5, #8]
 8012f5a:	b176      	cbz	r6, 8012f7a <rcl_clock_remove_jump_callback+0x96>
 8012f5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012f60:	69eb      	ldr	r3, [r5, #28]
 8012f62:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012f64:	00f1      	lsls	r1, r6, #3
 8012f66:	4648      	mov	r0, r9
 8012f68:	4798      	blx	r3
 8012f6a:	b1b8      	cbz	r0, 8012f9c <rcl_clock_remove_jump_callback+0xb8>
 8012f6c:	6068      	str	r0, [r5, #4]
 8012f6e:	2000      	movs	r0, #0
 8012f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f74:	200b      	movs	r0, #11
 8012f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7a:	4648      	mov	r0, r9
 8012f7c:	69ab      	ldr	r3, [r5, #24]
 8012f7e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012f80:	4798      	blx	r3
 8012f82:	606e      	str	r6, [r5, #4]
 8012f84:	4630      	mov	r0, r6
 8012f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8a:	4553      	cmp	r3, sl
 8012f8c:	d1c8      	bne.n	8012f20 <rcl_clock_remove_jump_callback+0x3c>
 8012f8e:	3e01      	subs	r6, #1
 8012f90:	60ae      	str	r6, [r5, #8]
 8012f92:	2e00      	cmp	r6, #0
 8012f94:	d1e2      	bne.n	8012f5c <rcl_clock_remove_jump_callback+0x78>
 8012f96:	e7f0      	b.n	8012f7a <rcl_clock_remove_jump_callback+0x96>
 8012f98:	200b      	movs	r0, #11
 8012f9a:	4770      	bx	lr
 8012f9c:	200a      	movs	r0, #10
 8012f9e:	e7ea      	b.n	8012f76 <rcl_clock_remove_jump_callback+0x92>

08012fa0 <_rcl_timer_time_jump>:
 8012fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fa4:	4605      	mov	r5, r0
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	4614      	mov	r4, r2
 8012faa:	b131      	cbz	r1, 8012fba <_rcl_timer_time_jump+0x1a>
 8012fac:	7803      	ldrb	r3, [r0, #0]
 8012fae:	3b02      	subs	r3, #2
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d93f      	bls.n	8013034 <_rcl_timer_time_jump+0x94>
 8012fb4:	b004      	add	sp, #16
 8012fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fba:	6813      	ldr	r3, [r2, #0]
 8012fbc:	a902      	add	r1, sp, #8
 8012fbe:	6818      	ldr	r0, [r3, #0]
 8012fc0:	f7ff ff22 	bl	8012e08 <rcl_clock_get_now>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d1f5      	bne.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8012fc8:	6820      	ldr	r0, [r4, #0]
 8012fca:	2105      	movs	r1, #5
 8012fcc:	3020      	adds	r0, #32
 8012fce:	f001 fdf7 	bl	8014bc0 <__atomic_load_8>
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	4681      	mov	r9, r0
 8012fd6:	4688      	mov	r8, r1
 8012fd8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012fdc:	2105      	movs	r1, #5
 8012fde:	f001 fdef 	bl	8014bc0 <__atomic_load_8>
 8012fe2:	4607      	mov	r7, r0
 8012fe4:	6820      	ldr	r0, [r4, #0]
 8012fe6:	460e      	mov	r6, r1
 8012fe8:	3018      	adds	r0, #24
 8012fea:	2105      	movs	r1, #5
 8012fec:	f001 fde8 	bl	8014bc0 <__atomic_load_8>
 8012ff0:	782b      	ldrb	r3, [r5, #0]
 8012ff2:	9a02      	ldr	r2, [sp, #8]
 8012ff4:	3b02      	subs	r3, #2
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	460d      	mov	r5, r1
 8012ffa:	9b03      	ldr	r3, [sp, #12]
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	d937      	bls.n	8013070 <_rcl_timer_time_jump+0xd0>
 8013000:	42ba      	cmp	r2, r7
 8013002:	eb73 0106 	sbcs.w	r1, r3, r6
 8013006:	da5f      	bge.n	80130c8 <_rcl_timer_time_jump+0x128>
 8013008:	454a      	cmp	r2, r9
 801300a:	eb73 0108 	sbcs.w	r1, r3, r8
 801300e:	dad1      	bge.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013010:	6820      	ldr	r0, [r4, #0]
 8013012:	eb1a 0202 	adds.w	r2, sl, r2
 8013016:	eb43 0305 	adc.w	r3, r3, r5
 801301a:	2505      	movs	r5, #5
 801301c:	3028      	adds	r0, #40	@ 0x28
 801301e:	9500      	str	r5, [sp, #0]
 8013020:	f001 fe04 	bl	8014c2c <__atomic_store_8>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	9500      	str	r5, [sp, #0]
 8013028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801302c:	3020      	adds	r0, #32
 801302e:	f001 fdfd 	bl	8014c2c <__atomic_store_8>
 8013032:	e7bf      	b.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013034:	6813      	ldr	r3, [r2, #0]
 8013036:	a902      	add	r1, sp, #8
 8013038:	6818      	ldr	r0, [r3, #0]
 801303a:	f7ff fee5 	bl	8012e08 <rcl_clock_get_now>
 801303e:	2800      	cmp	r0, #0
 8013040:	d1b8      	bne.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013046:	4313      	orrs	r3, r2
 8013048:	d0b4      	beq.n	8012fb4 <_rcl_timer_time_jump+0x14>
 801304a:	6820      	ldr	r0, [r4, #0]
 801304c:	2105      	movs	r1, #5
 801304e:	3028      	adds	r0, #40	@ 0x28
 8013050:	f001 fdb6 	bl	8014bc0 <__atomic_load_8>
 8013054:	9d02      	ldr	r5, [sp, #8]
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	4602      	mov	r2, r0
 801305a:	6820      	ldr	r0, [r4, #0]
 801305c:	1b52      	subs	r2, r2, r5
 801305e:	f04f 0405 	mov.w	r4, #5
 8013062:	9400      	str	r4, [sp, #0]
 8013064:	eb61 0303 	sbc.w	r3, r1, r3
 8013068:	3030      	adds	r0, #48	@ 0x30
 801306a:	f001 fddf 	bl	8014c2c <__atomic_store_8>
 801306e:	e7a1      	b.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013070:	4313      	orrs	r3, r2
 8013072:	d09f      	beq.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013074:	6820      	ldr	r0, [r4, #0]
 8013076:	f04f 0805 	mov.w	r8, #5
 801307a:	2300      	movs	r3, #0
 801307c:	f8cd 8000 	str.w	r8, [sp]
 8013080:	3030      	adds	r0, #48	@ 0x30
 8013082:	2200      	movs	r2, #0
 8013084:	f001 fe08 	bl	8014c98 <__atomic_exchange_8>
 8013088:	ea51 0300 	orrs.w	r3, r1, r0
 801308c:	4606      	mov	r6, r0
 801308e:	460f      	mov	r7, r1
 8013090:	d090      	beq.n	8012fb4 <_rcl_timer_time_jump+0x14>
 8013092:	9a02      	ldr	r2, [sp, #8]
 8013094:	9b03      	ldr	r3, [sp, #12]
 8013096:	f8cd 8000 	str.w	r8, [sp]
 801309a:	1a12      	subs	r2, r2, r0
 801309c:	6820      	ldr	r0, [r4, #0]
 801309e:	eb63 0301 	sbc.w	r3, r3, r1
 80130a2:	eb12 020a 	adds.w	r2, r2, sl
 80130a6:	eb43 0305 	adc.w	r3, r3, r5
 80130aa:	3028      	adds	r0, #40	@ 0x28
 80130ac:	f001 fdbe 	bl	8014c2c <__atomic_store_8>
 80130b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130b4:	f8cd 8000 	str.w	r8, [sp]
 80130b8:	6820      	ldr	r0, [r4, #0]
 80130ba:	1b92      	subs	r2, r2, r6
 80130bc:	eb63 0307 	sbc.w	r3, r3, r7
 80130c0:	3020      	adds	r0, #32
 80130c2:	f001 fdb3 	bl	8014c2c <__atomic_store_8>
 80130c6:	e775      	b.n	8012fb4 <_rcl_timer_time_jump+0x14>
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	3008      	adds	r0, #8
 80130cc:	f7ff f9c6 	bl	801245c <rcl_trigger_guard_condition>
 80130d0:	e770      	b.n	8012fb4 <_rcl_timer_time_jump+0x14>
 80130d2:	bf00      	nop

080130d4 <rcl_get_zero_initialized_timer>:
 80130d4:	4b01      	ldr	r3, [pc, #4]	@ (80130dc <rcl_get_zero_initialized_timer+0x8>)
 80130d6:	6818      	ldr	r0, [r3, #0]
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	0801b69c 	.word	0x0801b69c

080130e0 <rcl_timer_init>:
 80130e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130e4:	b0aa      	sub	sp, #168	@ 0xa8
 80130e6:	4604      	mov	r4, r0
 80130e8:	a835      	add	r0, sp, #212	@ 0xd4
 80130ea:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80130ee:	460d      	mov	r5, r1
 80130f0:	4692      	mov	sl, r2
 80130f2:	f7fa fc71 	bl	800d9d8 <rcutils_allocator_is_valid>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d064      	beq.n	80131c4 <rcl_timer_init+0xe4>
 80130fa:	2c00      	cmp	r4, #0
 80130fc:	d062      	beq.n	80131c4 <rcl_timer_init+0xe4>
 80130fe:	2d00      	cmp	r5, #0
 8013100:	d060      	beq.n	80131c4 <rcl_timer_init+0xe4>
 8013102:	2f00      	cmp	r7, #0
 8013104:	db5e      	blt.n	80131c4 <rcl_timer_init+0xe4>
 8013106:	6823      	ldr	r3, [r4, #0]
 8013108:	b123      	cbz	r3, 8013114 <rcl_timer_init+0x34>
 801310a:	2664      	movs	r6, #100	@ 0x64
 801310c:	4630      	mov	r0, r6
 801310e:	b02a      	add	sp, #168	@ 0xa8
 8013110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013114:	a908      	add	r1, sp, #32
 8013116:	4628      	mov	r0, r5
 8013118:	f7ff fe76 	bl	8012e08 <rcl_clock_get_now>
 801311c:	4606      	mov	r6, r0
 801311e:	2800      	cmp	r0, #0
 8013120:	d1f4      	bne.n	801310c <rcl_timer_init+0x2c>
 8013122:	ae06      	add	r6, sp, #24
 8013124:	4630      	mov	r0, r6
 8013126:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801312a:	f7ff f89f 	bl	801226c <rcl_get_zero_initialized_guard_condition>
 801312e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013132:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8013136:	ae0b      	add	r6, sp, #44	@ 0x2c
 8013138:	e889 0003 	stmia.w	r9, {r0, r1}
 801313c:	4630      	mov	r0, r6
 801313e:	f7ff f971 	bl	8012424 <rcl_guard_condition_get_default_options>
 8013142:	ab0d      	add	r3, sp, #52	@ 0x34
 8013144:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013148:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801314c:	4651      	mov	r1, sl
 801314e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013152:	4648      	mov	r0, r9
 8013154:	f7ff f894 	bl	8012280 <rcl_guard_condition_init>
 8013158:	4606      	mov	r6, r0
 801315a:	2800      	cmp	r0, #0
 801315c:	d1d6      	bne.n	801310c <rcl_timer_init+0x2c>
 801315e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	2b01      	cmp	r3, #1
 8013164:	d033      	beq.n	80131ce <rcl_timer_init+0xee>
 8013166:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8013168:	911a      	str	r1, [sp, #104]	@ 0x68
 801316a:	4642      	mov	r2, r8
 801316c:	463b      	mov	r3, r7
 801316e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8013172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013176:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013228 <rcl_timer_init+0x148>
 801317a:	eb12 0008 	adds.w	r0, r2, r8
 801317e:	eb47 0103 	adc.w	r1, r7, r3
 8013182:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8013186:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801318a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801318e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8013192:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013196:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801319a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801319e:	f8de 3000 	ldr.w	r3, [lr]
 80131a2:	f8cc 3000 	str.w	r3, [ip]
 80131a6:	f04f 0a00 	mov.w	sl, #0
 80131aa:	4619      	mov	r1, r3
 80131ac:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80131b0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80131b2:	2050      	movs	r0, #80	@ 0x50
 80131b4:	4798      	blx	r3
 80131b6:	6020      	str	r0, [r4, #0]
 80131b8:	b358      	cbz	r0, 8013212 <rcl_timer_init+0x132>
 80131ba:	2250      	movs	r2, #80	@ 0x50
 80131bc:	a916      	add	r1, sp, #88	@ 0x58
 80131be:	f005 fc50 	bl	8018a62 <memcpy>
 80131c2:	e7a3      	b.n	801310c <rcl_timer_init+0x2c>
 80131c4:	260b      	movs	r6, #11
 80131c6:	4630      	mov	r0, r6
 80131c8:	b02a      	add	sp, #168	@ 0xa8
 80131ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ce:	2001      	movs	r0, #1
 80131d0:	2100      	movs	r1, #0
 80131d2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80131d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80131de:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80131e2:	4a13      	ldr	r2, [pc, #76]	@ (8013230 <rcl_timer_init+0x150>)
 80131e4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80131e8:	9405      	str	r4, [sp, #20]
 80131ea:	9204      	str	r2, [sp, #16]
 80131ec:	ab12      	add	r3, sp, #72	@ 0x48
 80131ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80131f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80131f4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80131f8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7ff fe0f 	bl	8012e20 <rcl_clock_add_jump_callback>
 8013202:	4682      	mov	sl, r0
 8013204:	2800      	cmp	r0, #0
 8013206:	d0ae      	beq.n	8013166 <rcl_timer_init+0x86>
 8013208:	4648      	mov	r0, r9
 801320a:	f7ff f8e5 	bl	80123d8 <rcl_guard_condition_fini>
 801320e:	4656      	mov	r6, sl
 8013210:	e77c      	b.n	801310c <rcl_timer_init+0x2c>
 8013212:	4648      	mov	r0, r9
 8013214:	f7ff f8e0 	bl	80123d8 <rcl_guard_condition_fini>
 8013218:	4905      	ldr	r1, [pc, #20]	@ (8013230 <rcl_timer_init+0x150>)
 801321a:	4622      	mov	r2, r4
 801321c:	4628      	mov	r0, r5
 801321e:	f7ff fe61 	bl	8012ee4 <rcl_clock_remove_jump_callback>
 8013222:	260a      	movs	r6, #10
 8013224:	e772      	b.n	801310c <rcl_timer_init+0x2c>
 8013226:	bf00      	nop
	...
 8013230:	08012fa1 	.word	0x08012fa1

08013234 <rcl_timer_call>:
 8013234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013238:	b087      	sub	sp, #28
 801323a:	2800      	cmp	r0, #0
 801323c:	d06d      	beq.n	801331a <rcl_timer_call+0xe6>
 801323e:	6803      	ldr	r3, [r0, #0]
 8013240:	4604      	mov	r4, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d063      	beq.n	801330e <rcl_timer_call+0xda>
 8013246:	f3bf 8f5b 	dmb	ish
 801324a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801324e:	f3bf 8f5b 	dmb	ish
 8013252:	2b00      	cmp	r3, #0
 8013254:	d150      	bne.n	80132f8 <rcl_timer_call+0xc4>
 8013256:	6803      	ldr	r3, [r0, #0]
 8013258:	a904      	add	r1, sp, #16
 801325a:	6818      	ldr	r0, [r3, #0]
 801325c:	f7ff fdd4 	bl	8012e08 <rcl_clock_get_now>
 8013260:	4605      	mov	r5, r0
 8013262:	2800      	cmp	r0, #0
 8013264:	d14a      	bne.n	80132fc <rcl_timer_call+0xc8>
 8013266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801326a:	2b00      	cmp	r3, #0
 801326c:	db4a      	blt.n	8013304 <rcl_timer_call+0xd0>
 801326e:	6820      	ldr	r0, [r4, #0]
 8013270:	f04f 0a05 	mov.w	sl, #5
 8013274:	f8cd a000 	str.w	sl, [sp]
 8013278:	3020      	adds	r0, #32
 801327a:	f001 fd0d 	bl	8014c98 <__atomic_exchange_8>
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	f3bf 8f5b 	dmb	ish
 8013284:	4680      	mov	r8, r0
 8013286:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801328a:	f3bf 8f5b 	dmb	ish
 801328e:	6820      	ldr	r0, [r4, #0]
 8013290:	4689      	mov	r9, r1
 8013292:	3028      	adds	r0, #40	@ 0x28
 8013294:	4651      	mov	r1, sl
 8013296:	f001 fc93 	bl	8014bc0 <__atomic_load_8>
 801329a:	4606      	mov	r6, r0
 801329c:	6820      	ldr	r0, [r4, #0]
 801329e:	460f      	mov	r7, r1
 80132a0:	3018      	adds	r0, #24
 80132a2:	4651      	mov	r1, sl
 80132a4:	f001 fc8c 	bl	8014bc0 <__atomic_load_8>
 80132a8:	1836      	adds	r6, r6, r0
 80132aa:	4602      	mov	r2, r0
 80132ac:	4682      	mov	sl, r0
 80132ae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80132b2:	eb47 0701 	adc.w	r7, r7, r1
 80132b6:	4286      	cmp	r6, r0
 80132b8:	460b      	mov	r3, r1
 80132ba:	eb77 010c 	sbcs.w	r1, r7, ip
 80132be:	da04      	bge.n	80132ca <rcl_timer_call+0x96>
 80132c0:	ea53 0102 	orrs.w	r1, r3, r2
 80132c4:	d12e      	bne.n	8013324 <rcl_timer_call+0xf0>
 80132c6:	4606      	mov	r6, r0
 80132c8:	4667      	mov	r7, ip
 80132ca:	6820      	ldr	r0, [r4, #0]
 80132cc:	2105      	movs	r1, #5
 80132ce:	4632      	mov	r2, r6
 80132d0:	463b      	mov	r3, r7
 80132d2:	3028      	adds	r0, #40	@ 0x28
 80132d4:	9100      	str	r1, [sp, #0]
 80132d6:	f001 fca9 	bl	8014c2c <__atomic_store_8>
 80132da:	f1bb 0f00 	cmp.w	fp, #0
 80132de:	d00d      	beq.n	80132fc <rcl_timer_call+0xc8>
 80132e0:	9a04      	ldr	r2, [sp, #16]
 80132e2:	9b05      	ldr	r3, [sp, #20]
 80132e4:	ebb2 0208 	subs.w	r2, r2, r8
 80132e8:	4620      	mov	r0, r4
 80132ea:	eb63 0309 	sbc.w	r3, r3, r9
 80132ee:	47d8      	blx	fp
 80132f0:	4628      	mov	r0, r5
 80132f2:	b007      	add	sp, #28
 80132f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f8:	f240 3521 	movw	r5, #801	@ 0x321
 80132fc:	4628      	mov	r0, r5
 80132fe:	b007      	add	sp, #28
 8013300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	2501      	movs	r5, #1
 8013306:	4628      	mov	r0, r5
 8013308:	b007      	add	sp, #28
 801330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013312:	4628      	mov	r0, r5
 8013314:	b007      	add	sp, #28
 8013316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331a:	250b      	movs	r5, #11
 801331c:	4628      	mov	r0, r5
 801331e:	b007      	add	sp, #28
 8013320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013324:	1b80      	subs	r0, r0, r6
 8013326:	eb6c 0107 	sbc.w	r1, ip, r7
 801332a:	3801      	subs	r0, #1
 801332c:	f161 0100 	sbc.w	r1, r1, #0
 8013330:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013334:	f7ed fcd8 	bl	8000ce8 <__aeabi_ldivmod>
 8013338:	9b02      	ldr	r3, [sp, #8]
 801333a:	3001      	adds	r0, #1
 801333c:	f141 0100 	adc.w	r1, r1, #0
 8013340:	fb00 f303 	mul.w	r3, r0, r3
 8013344:	fb01 330a 	mla	r3, r1, sl, r3
 8013348:	fba0 0a0a 	umull	r0, sl, r0, sl
 801334c:	1986      	adds	r6, r0, r6
 801334e:	4453      	add	r3, sl
 8013350:	eb43 0707 	adc.w	r7, r3, r7
 8013354:	e7b9      	b.n	80132ca <rcl_timer_call+0x96>
 8013356:	bf00      	nop

08013358 <rcl_timer_is_ready>:
 8013358:	b570      	push	{r4, r5, r6, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	b378      	cbz	r0, 80133be <rcl_timer_is_ready+0x66>
 801335e:	6803      	ldr	r3, [r0, #0]
 8013360:	4604      	mov	r4, r0
 8013362:	b383      	cbz	r3, 80133c6 <rcl_timer_is_ready+0x6e>
 8013364:	460d      	mov	r5, r1
 8013366:	b351      	cbz	r1, 80133be <rcl_timer_is_ready+0x66>
 8013368:	f3bf 8f5b 	dmb	ish
 801336c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013370:	f3bf 8f5b 	dmb	ish
 8013374:	b953      	cbnz	r3, 801338c <rcl_timer_is_ready+0x34>
 8013376:	6803      	ldr	r3, [r0, #0]
 8013378:	4669      	mov	r1, sp
 801337a:	6818      	ldr	r0, [r3, #0]
 801337c:	f7ff fd44 	bl	8012e08 <rcl_clock_get_now>
 8013380:	4606      	mov	r6, r0
 8013382:	b140      	cbz	r0, 8013396 <rcl_timer_is_ready+0x3e>
 8013384:	f240 3321 	movw	r3, #801	@ 0x321
 8013388:	4298      	cmp	r0, r3
 801338a:	d101      	bne.n	8013390 <rcl_timer_is_ready+0x38>
 801338c:	2600      	movs	r6, #0
 801338e:	702e      	strb	r6, [r5, #0]
 8013390:	4630      	mov	r0, r6
 8013392:	b002      	add	sp, #8
 8013394:	bd70      	pop	{r4, r5, r6, pc}
 8013396:	6820      	ldr	r0, [r4, #0]
 8013398:	2105      	movs	r1, #5
 801339a:	3028      	adds	r0, #40	@ 0x28
 801339c:	f001 fc10 	bl	8014bc0 <__atomic_load_8>
 80133a0:	9b00      	ldr	r3, [sp, #0]
 80133a2:	1ac0      	subs	r0, r0, r3
 80133a4:	9b01      	ldr	r3, [sp, #4]
 80133a6:	eb61 0103 	sbc.w	r1, r1, r3
 80133aa:	2801      	cmp	r0, #1
 80133ac:	f171 0300 	sbcs.w	r3, r1, #0
 80133b0:	bfb4      	ite	lt
 80133b2:	2301      	movlt	r3, #1
 80133b4:	2300      	movge	r3, #0
 80133b6:	4630      	mov	r0, r6
 80133b8:	702b      	strb	r3, [r5, #0]
 80133ba:	b002      	add	sp, #8
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	260b      	movs	r6, #11
 80133c0:	4630      	mov	r0, r6
 80133c2:	b002      	add	sp, #8
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80133ca:	e7e1      	b.n	8013390 <rcl_timer_is_ready+0x38>

080133cc <rcl_timer_get_time_until_next_call>:
 80133cc:	b570      	push	{r4, r5, r6, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	b330      	cbz	r0, 8013420 <rcl_timer_get_time_until_next_call+0x54>
 80133d2:	6803      	ldr	r3, [r0, #0]
 80133d4:	4604      	mov	r4, r0
 80133d6:	b33b      	cbz	r3, 8013428 <rcl_timer_get_time_until_next_call+0x5c>
 80133d8:	460d      	mov	r5, r1
 80133da:	b309      	cbz	r1, 8013420 <rcl_timer_get_time_until_next_call+0x54>
 80133dc:	f3bf 8f5b 	dmb	ish
 80133e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80133e4:	f3bf 8f5b 	dmb	ish
 80133e8:	b9ab      	cbnz	r3, 8013416 <rcl_timer_get_time_until_next_call+0x4a>
 80133ea:	6803      	ldr	r3, [r0, #0]
 80133ec:	4669      	mov	r1, sp
 80133ee:	6818      	ldr	r0, [r3, #0]
 80133f0:	f7ff fd0a 	bl	8012e08 <rcl_clock_get_now>
 80133f4:	4606      	mov	r6, r0
 80133f6:	b958      	cbnz	r0, 8013410 <rcl_timer_get_time_until_next_call+0x44>
 80133f8:	6820      	ldr	r0, [r4, #0]
 80133fa:	2105      	movs	r1, #5
 80133fc:	3028      	adds	r0, #40	@ 0x28
 80133fe:	f001 fbdf 	bl	8014bc0 <__atomic_load_8>
 8013402:	9b00      	ldr	r3, [sp, #0]
 8013404:	1ac0      	subs	r0, r0, r3
 8013406:	9b01      	ldr	r3, [sp, #4]
 8013408:	6028      	str	r0, [r5, #0]
 801340a:	eb61 0103 	sbc.w	r1, r1, r3
 801340e:	6069      	str	r1, [r5, #4]
 8013410:	4630      	mov	r0, r6
 8013412:	b002      	add	sp, #8
 8013414:	bd70      	pop	{r4, r5, r6, pc}
 8013416:	f240 3621 	movw	r6, #801	@ 0x321
 801341a:	4630      	mov	r0, r6
 801341c:	b002      	add	sp, #8
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	260b      	movs	r6, #11
 8013422:	4630      	mov	r0, r6
 8013424:	b002      	add	sp, #8
 8013426:	bd70      	pop	{r4, r5, r6, pc}
 8013428:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801342c:	e7f0      	b.n	8013410 <rcl_timer_get_time_until_next_call+0x44>
 801342e:	bf00      	nop

08013430 <rcl_timer_get_guard_condition>:
 8013430:	b130      	cbz	r0, 8013440 <rcl_timer_get_guard_condition+0x10>
 8013432:	6800      	ldr	r0, [r0, #0]
 8013434:	b120      	cbz	r0, 8013440 <rcl_timer_get_guard_condition+0x10>
 8013436:	68c3      	ldr	r3, [r0, #12]
 8013438:	b10b      	cbz	r3, 801343e <rcl_timer_get_guard_condition+0xe>
 801343a:	3008      	adds	r0, #8
 801343c:	4770      	bx	lr
 801343e:	4618      	mov	r0, r3
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop

08013444 <rcl_validate_enclave_name_with_size>:
 8013444:	b378      	cbz	r0, 80134a6 <rcl_validate_enclave_name_with_size+0x62>
 8013446:	b570      	push	{r4, r5, r6, lr}
 8013448:	4615      	mov	r5, r2
 801344a:	b0c2      	sub	sp, #264	@ 0x108
 801344c:	b302      	cbz	r2, 8013490 <rcl_validate_enclave_name_with_size+0x4c>
 801344e:	461e      	mov	r6, r3
 8013450:	466a      	mov	r2, sp
 8013452:	ab01      	add	r3, sp, #4
 8013454:	460c      	mov	r4, r1
 8013456:	f7fa fceb 	bl	800de30 <rmw_validate_namespace_with_size>
 801345a:	4684      	mov	ip, r0
 801345c:	b9e8      	cbnz	r0, 801349a <rcl_validate_enclave_name_with_size+0x56>
 801345e:	9b00      	ldr	r3, [sp, #0]
 8013460:	b923      	cbnz	r3, 801346c <rcl_validate_enclave_name_with_size+0x28>
 8013462:	2300      	movs	r3, #0
 8013464:	602b      	str	r3, [r5, #0]
 8013466:	4660      	mov	r0, ip
 8013468:	b042      	add	sp, #264	@ 0x108
 801346a:	bd70      	pop	{r4, r5, r6, pc}
 801346c:	2b07      	cmp	r3, #7
 801346e:	d007      	beq.n	8013480 <rcl_validate_enclave_name_with_size+0x3c>
 8013470:	1e5a      	subs	r2, r3, #1
 8013472:	2a05      	cmp	r2, #5
 8013474:	d833      	bhi.n	80134de <rcl_validate_enclave_name_with_size+0x9a>
 8013476:	e8df f002 	tbb	[pc, r2]
 801347a:	2c2f      	.short	0x2c2f
 801347c:	1a232629 	.word	0x1a232629
 8013480:	2cff      	cmp	r4, #255	@ 0xff
 8013482:	d9ee      	bls.n	8013462 <rcl_validate_enclave_name_with_size+0x1e>
 8013484:	602b      	str	r3, [r5, #0]
 8013486:	2e00      	cmp	r6, #0
 8013488:	d0ed      	beq.n	8013466 <rcl_validate_enclave_name_with_size+0x22>
 801348a:	23fe      	movs	r3, #254	@ 0xfe
 801348c:	6033      	str	r3, [r6, #0]
 801348e:	e7ea      	b.n	8013466 <rcl_validate_enclave_name_with_size+0x22>
 8013490:	f04f 0c0b 	mov.w	ip, #11
 8013494:	4660      	mov	r0, ip
 8013496:	b042      	add	sp, #264	@ 0x108
 8013498:	bd70      	pop	{r4, r5, r6, pc}
 801349a:	f7fe fe63 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 801349e:	4684      	mov	ip, r0
 80134a0:	4660      	mov	r0, ip
 80134a2:	b042      	add	sp, #264	@ 0x108
 80134a4:	bd70      	pop	{r4, r5, r6, pc}
 80134a6:	f04f 0c0b 	mov.w	ip, #11
 80134aa:	4660      	mov	r0, ip
 80134ac:	4770      	bx	lr
 80134ae:	2306      	movs	r3, #6
 80134b0:	602b      	str	r3, [r5, #0]
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	d0d7      	beq.n	8013466 <rcl_validate_enclave_name_with_size+0x22>
 80134b6:	9b01      	ldr	r3, [sp, #4]
 80134b8:	6033      	str	r3, [r6, #0]
 80134ba:	4660      	mov	r0, ip
 80134bc:	b042      	add	sp, #264	@ 0x108
 80134be:	bd70      	pop	{r4, r5, r6, pc}
 80134c0:	2305      	movs	r3, #5
 80134c2:	602b      	str	r3, [r5, #0]
 80134c4:	e7f5      	b.n	80134b2 <rcl_validate_enclave_name_with_size+0x6e>
 80134c6:	2304      	movs	r3, #4
 80134c8:	602b      	str	r3, [r5, #0]
 80134ca:	e7f2      	b.n	80134b2 <rcl_validate_enclave_name_with_size+0x6e>
 80134cc:	2303      	movs	r3, #3
 80134ce:	602b      	str	r3, [r5, #0]
 80134d0:	e7ef      	b.n	80134b2 <rcl_validate_enclave_name_with_size+0x6e>
 80134d2:	2302      	movs	r3, #2
 80134d4:	602b      	str	r3, [r5, #0]
 80134d6:	e7ec      	b.n	80134b2 <rcl_validate_enclave_name_with_size+0x6e>
 80134d8:	2301      	movs	r3, #1
 80134da:	602b      	str	r3, [r5, #0]
 80134dc:	e7e9      	b.n	80134b2 <rcl_validate_enclave_name_with_size+0x6e>
 80134de:	4a04      	ldr	r2, [pc, #16]	@ (80134f0 <rcl_validate_enclave_name_with_size+0xac>)
 80134e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80134e4:	a802      	add	r0, sp, #8
 80134e6:	f7fa fbbd 	bl	800dc64 <rcutils_snprintf>
 80134ea:	f04f 0c01 	mov.w	ip, #1
 80134ee:	e7ba      	b.n	8013466 <rcl_validate_enclave_name_with_size+0x22>
 80134f0:	0801b6a0 	.word	0x0801b6a0

080134f4 <rcl_validate_enclave_name>:
 80134f4:	b168      	cbz	r0, 8013512 <rcl_validate_enclave_name+0x1e>
 80134f6:	b570      	push	{r4, r5, r6, lr}
 80134f8:	460d      	mov	r5, r1
 80134fa:	4616      	mov	r6, r2
 80134fc:	4604      	mov	r4, r0
 80134fe:	f7ec fe91 	bl	8000224 <strlen>
 8013502:	4633      	mov	r3, r6
 8013504:	4601      	mov	r1, r0
 8013506:	462a      	mov	r2, r5
 8013508:	4620      	mov	r0, r4
 801350a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801350e:	f7ff bf99 	b.w	8013444 <rcl_validate_enclave_name_with_size>
 8013512:	200b      	movs	r0, #11
 8013514:	4770      	bx	lr
 8013516:	bf00      	nop

08013518 <rcl_get_zero_initialized_wait_set>:
 8013518:	b510      	push	{r4, lr}
 801351a:	4c08      	ldr	r4, [pc, #32]	@ (801353c <rcl_get_zero_initialized_wait_set+0x24>)
 801351c:	4686      	mov	lr, r0
 801351e:	4684      	mov	ip, r0
 8013520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801352c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801352e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	f8cc 3000 	str.w	r3, [ip]
 8013538:	4670      	mov	r0, lr
 801353a:	bd10      	pop	{r4, pc}
 801353c:	0801b700 	.word	0x0801b700

08013540 <rcl_wait_set_is_valid>:
 8013540:	b118      	cbz	r0, 801354a <rcl_wait_set_is_valid+0xa>
 8013542:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013544:	3800      	subs	r0, #0
 8013546:	bf18      	it	ne
 8013548:	2001      	movne	r0, #1
 801354a:	4770      	bx	lr

0801354c <rcl_wait_set_fini>:
 801354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013550:	b082      	sub	sp, #8
 8013552:	2800      	cmp	r0, #0
 8013554:	f000 8095 	beq.w	8013682 <rcl_wait_set_fini+0x136>
 8013558:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801355a:	4604      	mov	r4, r0
 801355c:	2e00      	cmp	r6, #0
 801355e:	f000 808c 	beq.w	801367a <rcl_wait_set_fini+0x12e>
 8013562:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013564:	f002 fcb6 	bl	8015ed4 <rmw_destroy_wait_set>
 8013568:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801356a:	1e06      	subs	r6, r0, #0
 801356c:	bf18      	it	ne
 801356e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013572:	2d00      	cmp	r5, #0
 8013574:	f000 8081 	beq.w	801367a <rcl_wait_set_fini+0x12e>
 8013578:	6820      	ldr	r0, [r4, #0]
 801357a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801357e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013580:	2700      	movs	r7, #0
 8013582:	6067      	str	r7, [r4, #4]
 8013584:	602f      	str	r7, [r5, #0]
 8013586:	b120      	cbz	r0, 8013592 <rcl_wait_set_fini+0x46>
 8013588:	9101      	str	r1, [sp, #4]
 801358a:	47c0      	blx	r8
 801358c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801358e:	9901      	ldr	r1, [sp, #4]
 8013590:	6027      	str	r7, [r4, #0]
 8013592:	68a8      	ldr	r0, [r5, #8]
 8013594:	b120      	cbz	r0, 80135a0 <rcl_wait_set_fini+0x54>
 8013596:	47c0      	blx	r8
 8013598:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801359a:	2300      	movs	r3, #0
 801359c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80135a0:	68a0      	ldr	r0, [r4, #8]
 80135a2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135a6:	f04f 0800 	mov.w	r8, #0
 80135aa:	f8c4 800c 	str.w	r8, [r4, #12]
 80135ae:	f8c5 800c 	str.w	r8, [r5, #12]
 80135b2:	b128      	cbz	r0, 80135c0 <rcl_wait_set_fini+0x74>
 80135b4:	47b8      	blx	r7
 80135b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80135bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135c0:	6968      	ldr	r0, [r5, #20]
 80135c2:	f04f 0800 	mov.w	r8, #0
 80135c6:	f8c5 8010 	str.w	r8, [r5, #16]
 80135ca:	b128      	cbz	r0, 80135d8 <rcl_wait_set_fini+0x8c>
 80135cc:	47b8      	blx	r7
 80135ce:	f8c5 8014 	str.w	r8, [r5, #20]
 80135d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135d8:	6920      	ldr	r0, [r4, #16]
 80135da:	f04f 0800 	mov.w	r8, #0
 80135de:	f8c4 8014 	str.w	r8, [r4, #20]
 80135e2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80135e6:	b128      	cbz	r0, 80135f4 <rcl_wait_set_fini+0xa8>
 80135e8:	47b8      	blx	r7
 80135ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80135f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135f4:	69a0      	ldr	r0, [r4, #24]
 80135f6:	f04f 0800 	mov.w	r8, #0
 80135fa:	f8c4 801c 	str.w	r8, [r4, #28]
 80135fe:	f8c5 8018 	str.w	r8, [r5, #24]
 8013602:	b128      	cbz	r0, 8013610 <rcl_wait_set_fini+0xc4>
 8013604:	9101      	str	r1, [sp, #4]
 8013606:	47b8      	blx	r7
 8013608:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801360a:	9901      	ldr	r1, [sp, #4]
 801360c:	f8c4 8018 	str.w	r8, [r4, #24]
 8013610:	6a28      	ldr	r0, [r5, #32]
 8013612:	b120      	cbz	r0, 801361e <rcl_wait_set_fini+0xd2>
 8013614:	47b8      	blx	r7
 8013616:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013618:	2300      	movs	r3, #0
 801361a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801361e:	6a20      	ldr	r0, [r4, #32]
 8013620:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013624:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013626:	2700      	movs	r7, #0
 8013628:	6267      	str	r7, [r4, #36]	@ 0x24
 801362a:	626f      	str	r7, [r5, #36]	@ 0x24
 801362c:	b120      	cbz	r0, 8013638 <rcl_wait_set_fini+0xec>
 801362e:	9101      	str	r1, [sp, #4]
 8013630:	47c0      	blx	r8
 8013632:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013634:	9901      	ldr	r1, [sp, #4]
 8013636:	6227      	str	r7, [r4, #32]
 8013638:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801363a:	b120      	cbz	r0, 8013646 <rcl_wait_set_fini+0xfa>
 801363c:	47c0      	blx	r8
 801363e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013640:	2300      	movs	r3, #0
 8013642:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013646:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013648:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801364c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801364e:	2700      	movs	r7, #0
 8013650:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013652:	632f      	str	r7, [r5, #48]	@ 0x30
 8013654:	b120      	cbz	r0, 8013660 <rcl_wait_set_fini+0x114>
 8013656:	9101      	str	r1, [sp, #4]
 8013658:	47c0      	blx	r8
 801365a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801365c:	9901      	ldr	r1, [sp, #4]
 801365e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013660:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013662:	b120      	cbz	r0, 801366e <rcl_wait_set_fini+0x122>
 8013664:	47c0      	blx	r8
 8013666:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013668:	2300      	movs	r3, #0
 801366a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801366e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013670:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013672:	4628      	mov	r0, r5
 8013674:	4798      	blx	r3
 8013676:	2300      	movs	r3, #0
 8013678:	6323      	str	r3, [r4, #48]	@ 0x30
 801367a:	4630      	mov	r0, r6
 801367c:	b002      	add	sp, #8
 801367e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013682:	260b      	movs	r6, #11
 8013684:	4630      	mov	r0, r6
 8013686:	b002      	add	sp, #8
 8013688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801368c <rcl_wait_set_add_subscription>:
 801368c:	b318      	cbz	r0, 80136d6 <rcl_wait_set_add_subscription+0x4a>
 801368e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	4604      	mov	r4, r0
 8013694:	b30b      	cbz	r3, 80136da <rcl_wait_set_add_subscription+0x4e>
 8013696:	b319      	cbz	r1, 80136e0 <rcl_wait_set_add_subscription+0x54>
 8013698:	681d      	ldr	r5, [r3, #0]
 801369a:	6840      	ldr	r0, [r0, #4]
 801369c:	4285      	cmp	r5, r0
 801369e:	d217      	bcs.n	80136d0 <rcl_wait_set_add_subscription+0x44>
 80136a0:	6820      	ldr	r0, [r4, #0]
 80136a2:	1c6e      	adds	r6, r5, #1
 80136a4:	601e      	str	r6, [r3, #0]
 80136a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80136aa:	b102      	cbz	r2, 80136ae <rcl_wait_set_add_subscription+0x22>
 80136ac:	6015      	str	r5, [r2, #0]
 80136ae:	4608      	mov	r0, r1
 80136b0:	f7f9 f9d4 	bl	800ca5c <rcl_subscription_get_rmw_handle>
 80136b4:	b150      	cbz	r0, 80136cc <rcl_wait_set_add_subscription+0x40>
 80136b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136b8:	6842      	ldr	r2, [r0, #4]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80136c2:	6853      	ldr	r3, [r2, #4]
 80136c4:	3301      	adds	r3, #1
 80136c6:	2000      	movs	r0, #0
 80136c8:	6053      	str	r3, [r2, #4]
 80136ca:	bd70      	pop	{r4, r5, r6, pc}
 80136cc:	2001      	movs	r0, #1
 80136ce:	bd70      	pop	{r4, r5, r6, pc}
 80136d0:	f240 3086 	movw	r0, #902	@ 0x386
 80136d4:	bd70      	pop	{r4, r5, r6, pc}
 80136d6:	200b      	movs	r0, #11
 80136d8:	4770      	bx	lr
 80136da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136de:	bd70      	pop	{r4, r5, r6, pc}
 80136e0:	200b      	movs	r0, #11
 80136e2:	bd70      	pop	{r4, r5, r6, pc}

080136e4 <rcl_wait_set_clear>:
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d073      	beq.n	80137d0 <rcl_wait_set_clear+0xec>
 80136e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136ea:	b510      	push	{r4, lr}
 80136ec:	4604      	mov	r4, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d070      	beq.n	80137d4 <rcl_wait_set_clear+0xf0>
 80136f2:	6800      	ldr	r0, [r0, #0]
 80136f4:	b138      	cbz	r0, 8013706 <rcl_wait_set_clear+0x22>
 80136f6:	6862      	ldr	r2, [r4, #4]
 80136f8:	2100      	movs	r1, #0
 80136fa:	0092      	lsls	r2, r2, #2
 80136fc:	f005 f892 	bl	8018824 <memset>
 8013700:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013702:	2200      	movs	r2, #0
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	68a0      	ldr	r0, [r4, #8]
 8013708:	b138      	cbz	r0, 801371a <rcl_wait_set_clear+0x36>
 801370a:	68e2      	ldr	r2, [r4, #12]
 801370c:	2100      	movs	r1, #0
 801370e:	0092      	lsls	r2, r2, #2
 8013710:	f005 f888 	bl	8018824 <memset>
 8013714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013716:	2200      	movs	r2, #0
 8013718:	60da      	str	r2, [r3, #12]
 801371a:	69a0      	ldr	r0, [r4, #24]
 801371c:	b138      	cbz	r0, 801372e <rcl_wait_set_clear+0x4a>
 801371e:	69e2      	ldr	r2, [r4, #28]
 8013720:	2100      	movs	r1, #0
 8013722:	0092      	lsls	r2, r2, #2
 8013724:	f005 f87e 	bl	8018824 <memset>
 8013728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801372a:	2200      	movs	r2, #0
 801372c:	619a      	str	r2, [r3, #24]
 801372e:	6a20      	ldr	r0, [r4, #32]
 8013730:	b138      	cbz	r0, 8013742 <rcl_wait_set_clear+0x5e>
 8013732:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013734:	2100      	movs	r1, #0
 8013736:	0092      	lsls	r2, r2, #2
 8013738:	f005 f874 	bl	8018824 <memset>
 801373c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801373e:	2200      	movs	r2, #0
 8013740:	625a      	str	r2, [r3, #36]	@ 0x24
 8013742:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013744:	b138      	cbz	r0, 8013756 <rcl_wait_set_clear+0x72>
 8013746:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013748:	2100      	movs	r1, #0
 801374a:	0092      	lsls	r2, r2, #2
 801374c:	f005 f86a 	bl	8018824 <memset>
 8013750:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013752:	2200      	movs	r2, #0
 8013754:	631a      	str	r2, [r3, #48]	@ 0x30
 8013756:	6920      	ldr	r0, [r4, #16]
 8013758:	b138      	cbz	r0, 801376a <rcl_wait_set_clear+0x86>
 801375a:	6962      	ldr	r2, [r4, #20]
 801375c:	2100      	movs	r1, #0
 801375e:	0092      	lsls	r2, r2, #2
 8013760:	f005 f860 	bl	8018824 <memset>
 8013764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013766:	2200      	movs	r2, #0
 8013768:	641a      	str	r2, [r3, #64]	@ 0x40
 801376a:	6898      	ldr	r0, [r3, #8]
 801376c:	b138      	cbz	r0, 801377e <rcl_wait_set_clear+0x9a>
 801376e:	685a      	ldr	r2, [r3, #4]
 8013770:	2100      	movs	r1, #0
 8013772:	0092      	lsls	r2, r2, #2
 8013774:	f005 f856 	bl	8018824 <memset>
 8013778:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801377a:	2200      	movs	r2, #0
 801377c:	605a      	str	r2, [r3, #4]
 801377e:	6958      	ldr	r0, [r3, #20]
 8013780:	b138      	cbz	r0, 8013792 <rcl_wait_set_clear+0xae>
 8013782:	691a      	ldr	r2, [r3, #16]
 8013784:	2100      	movs	r1, #0
 8013786:	0092      	lsls	r2, r2, #2
 8013788:	f005 f84c 	bl	8018824 <memset>
 801378c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801378e:	2200      	movs	r2, #0
 8013790:	611a      	str	r2, [r3, #16]
 8013792:	6a18      	ldr	r0, [r3, #32]
 8013794:	b138      	cbz	r0, 80137a6 <rcl_wait_set_clear+0xc2>
 8013796:	69da      	ldr	r2, [r3, #28]
 8013798:	2100      	movs	r1, #0
 801379a:	0092      	lsls	r2, r2, #2
 801379c:	f005 f842 	bl	8018824 <memset>
 80137a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137a2:	2200      	movs	r2, #0
 80137a4:	61da      	str	r2, [r3, #28]
 80137a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80137a8:	b138      	cbz	r0, 80137ba <rcl_wait_set_clear+0xd6>
 80137aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80137ac:	2100      	movs	r1, #0
 80137ae:	0092      	lsls	r2, r2, #2
 80137b0:	f005 f838 	bl	8018824 <memset>
 80137b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137b6:	2200      	movs	r2, #0
 80137b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80137ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80137bc:	b138      	cbz	r0, 80137ce <rcl_wait_set_clear+0xea>
 80137be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80137c0:	2100      	movs	r1, #0
 80137c2:	0092      	lsls	r2, r2, #2
 80137c4:	f005 f82e 	bl	8018824 <memset>
 80137c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ca:	2000      	movs	r0, #0
 80137cc:	6358      	str	r0, [r3, #52]	@ 0x34
 80137ce:	bd10      	pop	{r4, pc}
 80137d0:	200b      	movs	r0, #11
 80137d2:	4770      	bx	lr
 80137d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137d8:	bd10      	pop	{r4, pc}
 80137da:	bf00      	nop

080137dc <rcl_wait_set_resize>:
 80137dc:	2800      	cmp	r0, #0
 80137de:	f000 8185 	beq.w	8013aec <rcl_wait_set_resize+0x310>
 80137e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80137e8:	b083      	sub	sp, #12
 80137ea:	4605      	mov	r5, r0
 80137ec:	2c00      	cmp	r4, #0
 80137ee:	f000 817f 	beq.w	8013af0 <rcl_wait_set_resize+0x314>
 80137f2:	f04f 0900 	mov.w	r9, #0
 80137f6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80137fa:	461f      	mov	r7, r3
 80137fc:	4688      	mov	r8, r1
 80137fe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013802:	4616      	mov	r6, r2
 8013804:	f8c0 9004 	str.w	r9, [r0, #4]
 8013808:	f8c4 9000 	str.w	r9, [r4]
 801380c:	2900      	cmp	r1, #0
 801380e:	f000 80bd 	beq.w	801398c <rcl_wait_set_resize+0x1b0>
 8013812:	008c      	lsls	r4, r1, #2
 8013814:	6800      	ldr	r0, [r0, #0]
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	4652      	mov	r2, sl
 801381a:	4621      	mov	r1, r4
 801381c:	4798      	blx	r3
 801381e:	9b01      	ldr	r3, [sp, #4]
 8013820:	6028      	str	r0, [r5, #0]
 8013822:	2800      	cmp	r0, #0
 8013824:	f000 80cb 	beq.w	80139be <rcl_wait_set_resize+0x1e2>
 8013828:	4622      	mov	r2, r4
 801382a:	4649      	mov	r1, r9
 801382c:	9301      	str	r3, [sp, #4]
 801382e:	f004 fff9 	bl	8018824 <memset>
 8013832:	f8c5 8004 	str.w	r8, [r5, #4]
 8013836:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801383a:	9b01      	ldr	r3, [sp, #4]
 801383c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013840:	f8c8 9004 	str.w	r9, [r8, #4]
 8013844:	4652      	mov	r2, sl
 8013846:	4621      	mov	r1, r4
 8013848:	4798      	blx	r3
 801384a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801384c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013850:	689b      	ldr	r3, [r3, #8]
 8013852:	2b00      	cmp	r3, #0
 8013854:	f000 80ac 	beq.w	80139b0 <rcl_wait_set_resize+0x1d4>
 8013858:	4622      	mov	r2, r4
 801385a:	4649      	mov	r1, r9
 801385c:	4618      	mov	r0, r3
 801385e:	f004 ffe1 	bl	8018824 <memset>
 8013862:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013864:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013868:	f04f 0800 	mov.w	r8, #0
 801386c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013870:	f8c5 800c 	str.w	r8, [r5, #12]
 8013874:	f8c4 800c 	str.w	r8, [r4, #12]
 8013878:	2e00      	cmp	r6, #0
 801387a:	f040 80a4 	bne.w	80139c6 <rcl_wait_set_resize+0x1ea>
 801387e:	68a8      	ldr	r0, [r5, #8]
 8013880:	b128      	cbz	r0, 801388e <rcl_wait_set_resize+0xb2>
 8013882:	4649      	mov	r1, r9
 8013884:	4790      	blx	r2
 8013886:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013888:	60ae      	str	r6, [r5, #8]
 801388a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801388e:	f04f 0800 	mov.w	r8, #0
 8013892:	19f6      	adds	r6, r6, r7
 8013894:	f8c4 8010 	str.w	r8, [r4, #16]
 8013898:	f040 80ac 	bne.w	80139f4 <rcl_wait_set_resize+0x218>
 801389c:	6960      	ldr	r0, [r4, #20]
 801389e:	b130      	cbz	r0, 80138ae <rcl_wait_set_resize+0xd2>
 80138a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80138a2:	4649      	mov	r1, r9
 80138a4:	4798      	blx	r3
 80138a6:	6166      	str	r6, [r4, #20]
 80138a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138ae:	2600      	movs	r6, #0
 80138b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80138b4:	616e      	str	r6, [r5, #20]
 80138b6:	6426      	str	r6, [r4, #64]	@ 0x40
 80138b8:	2f00      	cmp	r7, #0
 80138ba:	f040 80ad 	bne.w	8013a18 <rcl_wait_set_resize+0x23c>
 80138be:	6928      	ldr	r0, [r5, #16]
 80138c0:	b138      	cbz	r0, 80138d2 <rcl_wait_set_resize+0xf6>
 80138c2:	4649      	mov	r1, r9
 80138c4:	47d0      	blx	sl
 80138c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138c8:	612f      	str	r7, [r5, #16]
 80138ca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80138ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138d4:	2600      	movs	r6, #0
 80138d6:	61ee      	str	r6, [r5, #28]
 80138d8:	61a6      	str	r6, [r4, #24]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f040 80af 	bne.w	8013a3e <rcl_wait_set_resize+0x262>
 80138e0:	69a8      	ldr	r0, [r5, #24]
 80138e2:	b120      	cbz	r0, 80138ee <rcl_wait_set_resize+0x112>
 80138e4:	4649      	mov	r1, r9
 80138e6:	47d0      	blx	sl
 80138e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138ec:	61ab      	str	r3, [r5, #24]
 80138ee:	6a20      	ldr	r0, [r4, #32]
 80138f0:	b128      	cbz	r0, 80138fe <rcl_wait_set_resize+0x122>
 80138f2:	4649      	mov	r1, r9
 80138f4:	47d0      	blx	sl
 80138f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138f8:	2300      	movs	r3, #0
 80138fa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80138fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013900:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013902:	2600      	movs	r6, #0
 8013904:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013908:	626e      	str	r6, [r5, #36]	@ 0x24
 801390a:	6266      	str	r6, [r4, #36]	@ 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	f000 80b6 	beq.w	8013a7e <rcl_wait_set_resize+0x2a2>
 8013912:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013916:	6a28      	ldr	r0, [r5, #32]
 8013918:	463a      	mov	r2, r7
 801391a:	4651      	mov	r1, sl
 801391c:	47c8      	blx	r9
 801391e:	6228      	str	r0, [r5, #32]
 8013920:	2800      	cmp	r0, #0
 8013922:	d04c      	beq.n	80139be <rcl_wait_set_resize+0x1e2>
 8013924:	4652      	mov	r2, sl
 8013926:	4631      	mov	r1, r6
 8013928:	f004 ff7c 	bl	8018824 <memset>
 801392c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801392e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013930:	626b      	str	r3, [r5, #36]	@ 0x24
 8013932:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013934:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013936:	463a      	mov	r2, r7
 8013938:	4651      	mov	r1, sl
 801393a:	47c8      	blx	r9
 801393c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801393e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013940:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013942:	2c00      	cmp	r4, #0
 8013944:	f000 80f0 	beq.w	8013b28 <rcl_wait_set_resize+0x34c>
 8013948:	4620      	mov	r0, r4
 801394a:	4652      	mov	r2, sl
 801394c:	4631      	mov	r1, r6
 801394e:	f004 ff69 	bl	8018824 <memset>
 8013952:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013956:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013958:	2600      	movs	r6, #0
 801395a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801395e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013960:	6326      	str	r6, [r4, #48]	@ 0x30
 8013962:	2b00      	cmp	r3, #0
 8013964:	f040 809d 	bne.w	8013aa2 <rcl_wait_set_resize+0x2c6>
 8013968:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801396a:	b120      	cbz	r0, 8013976 <rcl_wait_set_resize+0x19a>
 801396c:	4639      	mov	r1, r7
 801396e:	47c0      	blx	r8
 8013970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013972:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013974:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013976:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013978:	b310      	cbz	r0, 80139c0 <rcl_wait_set_resize+0x1e4>
 801397a:	4639      	mov	r1, r7
 801397c:	47c0      	blx	r8
 801397e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013980:	2000      	movs	r0, #0
 8013982:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013986:	b003      	add	sp, #12
 8013988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398c:	6800      	ldr	r0, [r0, #0]
 801398e:	b120      	cbz	r0, 801399a <rcl_wait_set_resize+0x1be>
 8013990:	4651      	mov	r1, sl
 8013992:	47d8      	blx	fp
 8013994:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013996:	f8c5 8000 	str.w	r8, [r5]
 801399a:	68a0      	ldr	r0, [r4, #8]
 801399c:	2800      	cmp	r0, #0
 801399e:	f43f af61 	beq.w	8013864 <rcl_wait_set_resize+0x88>
 80139a2:	4651      	mov	r1, sl
 80139a4:	47d8      	blx	fp
 80139a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139a8:	2300      	movs	r3, #0
 80139aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80139ae:	e759      	b.n	8013864 <rcl_wait_set_resize+0x88>
 80139b0:	6828      	ldr	r0, [r5, #0]
 80139b2:	9301      	str	r3, [sp, #4]
 80139b4:	4651      	mov	r1, sl
 80139b6:	47d8      	blx	fp
 80139b8:	9b01      	ldr	r3, [sp, #4]
 80139ba:	e9c5 3300 	strd	r3, r3, [r5]
 80139be:	200a      	movs	r0, #10
 80139c0:	b003      	add	sp, #12
 80139c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c6:	00b4      	lsls	r4, r6, #2
 80139c8:	68a8      	ldr	r0, [r5, #8]
 80139ca:	464a      	mov	r2, r9
 80139cc:	4621      	mov	r1, r4
 80139ce:	4798      	blx	r3
 80139d0:	60a8      	str	r0, [r5, #8]
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d0f3      	beq.n	80139be <rcl_wait_set_resize+0x1e2>
 80139d6:	4622      	mov	r2, r4
 80139d8:	4641      	mov	r1, r8
 80139da:	f004 ff23 	bl	8018824 <memset>
 80139de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139e0:	60ee      	str	r6, [r5, #12]
 80139e2:	f04f 0800 	mov.w	r8, #0
 80139e6:	19f6      	adds	r6, r6, r7
 80139e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80139f0:	f43f af54 	beq.w	801389c <rcl_wait_set_resize+0xc0>
 80139f4:	00b6      	lsls	r6, r6, #2
 80139f6:	464a      	mov	r2, r9
 80139f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80139fa:	6960      	ldr	r0, [r4, #20]
 80139fc:	4631      	mov	r1, r6
 80139fe:	4798      	blx	r3
 8013a00:	4681      	mov	r9, r0
 8013a02:	6160      	str	r0, [r4, #20]
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d076      	beq.n	8013af6 <rcl_wait_set_resize+0x31a>
 8013a08:	4632      	mov	r2, r6
 8013a0a:	4641      	mov	r1, r8
 8013a0c:	f004 ff0a 	bl	8018824 <memset>
 8013a10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a12:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a16:	e74a      	b.n	80138ae <rcl_wait_set_resize+0xd2>
 8013a18:	00bc      	lsls	r4, r7, #2
 8013a1a:	6928      	ldr	r0, [r5, #16]
 8013a1c:	464a      	mov	r2, r9
 8013a1e:	4621      	mov	r1, r4
 8013a20:	47c0      	blx	r8
 8013a22:	6128      	str	r0, [r5, #16]
 8013a24:	2800      	cmp	r0, #0
 8013a26:	d0ca      	beq.n	80139be <rcl_wait_set_resize+0x1e2>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	4631      	mov	r1, r6
 8013a2c:	f004 fefa 	bl	8018824 <memset>
 8013a30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a32:	616f      	str	r7, [r5, #20]
 8013a34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013a38:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a3c:	e749      	b.n	80138d2 <rcl_wait_set_resize+0xf6>
 8013a3e:	009c      	lsls	r4, r3, #2
 8013a40:	69a8      	ldr	r0, [r5, #24]
 8013a42:	464a      	mov	r2, r9
 8013a44:	4621      	mov	r1, r4
 8013a46:	47c0      	blx	r8
 8013a48:	61a8      	str	r0, [r5, #24]
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d0b7      	beq.n	80139be <rcl_wait_set_resize+0x1e2>
 8013a4e:	4622      	mov	r2, r4
 8013a50:	4631      	mov	r1, r6
 8013a52:	f004 fee7 	bl	8018824 <memset>
 8013a56:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a5a:	61eb      	str	r3, [r5, #28]
 8013a5c:	6a38      	ldr	r0, [r7, #32]
 8013a5e:	61fe      	str	r6, [r7, #28]
 8013a60:	464a      	mov	r2, r9
 8013a62:	4621      	mov	r1, r4
 8013a64:	47c0      	blx	r8
 8013a66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013a68:	6238      	str	r0, [r7, #32]
 8013a6a:	6a1f      	ldr	r7, [r3, #32]
 8013a6c:	2f00      	cmp	r7, #0
 8013a6e:	d054      	beq.n	8013b1a <rcl_wait_set_resize+0x33e>
 8013a70:	4622      	mov	r2, r4
 8013a72:	4631      	mov	r1, r6
 8013a74:	4638      	mov	r0, r7
 8013a76:	f004 fed5 	bl	8018824 <memset>
 8013a7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a7c:	e73f      	b.n	80138fe <rcl_wait_set_resize+0x122>
 8013a7e:	6a28      	ldr	r0, [r5, #32]
 8013a80:	b120      	cbz	r0, 8013a8c <rcl_wait_set_resize+0x2b0>
 8013a82:	4639      	mov	r1, r7
 8013a84:	47c0      	blx	r8
 8013a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a8a:	622b      	str	r3, [r5, #32]
 8013a8c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	f43f af60 	beq.w	8013954 <rcl_wait_set_resize+0x178>
 8013a94:	4639      	mov	r1, r7
 8013a96:	47c0      	blx	r8
 8013a98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013aa0:	e758      	b.n	8013954 <rcl_wait_set_resize+0x178>
 8013aa2:	009c      	lsls	r4, r3, #2
 8013aa4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013aa6:	463a      	mov	r2, r7
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	47c8      	blx	r9
 8013aac:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d085      	beq.n	80139be <rcl_wait_set_resize+0x1e2>
 8013ab2:	4622      	mov	r2, r4
 8013ab4:	4631      	mov	r1, r6
 8013ab6:	f004 feb5 	bl	8018824 <memset>
 8013aba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ac0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013ac2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013ac6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013aca:	463a      	mov	r2, r7
 8013acc:	4621      	mov	r1, r4
 8013ace:	47c8      	blx	r9
 8013ad0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013ad2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ad8:	b36b      	cbz	r3, 8013b36 <rcl_wait_set_resize+0x35a>
 8013ada:	4622      	mov	r2, r4
 8013adc:	4631      	mov	r1, r6
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f004 fea0 	bl	8018824 <memset>
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	b003      	add	sp, #12
 8013ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aec:	200b      	movs	r0, #11
 8013aee:	4770      	bx	lr
 8013af0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013af4:	e764      	b.n	80139c0 <rcl_wait_set_resize+0x1e4>
 8013af6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013af8:	68a8      	ldr	r0, [r5, #8]
 8013afa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013afe:	4798      	blx	r3
 8013b00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b02:	6928      	ldr	r0, [r5, #16]
 8013b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b06:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b08:	f8c5 900c 	str.w	r9, [r5, #12]
 8013b0c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013b10:	4790      	blx	r2
 8013b12:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013b16:	200a      	movs	r0, #10
 8013b18:	e752      	b.n	80139c0 <rcl_wait_set_resize+0x1e4>
 8013b1a:	69a8      	ldr	r0, [r5, #24]
 8013b1c:	4649      	mov	r1, r9
 8013b1e:	47d0      	blx	sl
 8013b20:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013b24:	200a      	movs	r0, #10
 8013b26:	e74b      	b.n	80139c0 <rcl_wait_set_resize+0x1e4>
 8013b28:	6a28      	ldr	r0, [r5, #32]
 8013b2a:	4639      	mov	r1, r7
 8013b2c:	47c0      	blx	r8
 8013b2e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013b32:	200a      	movs	r0, #10
 8013b34:	e744      	b.n	80139c0 <rcl_wait_set_resize+0x1e4>
 8013b36:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013b38:	9301      	str	r3, [sp, #4]
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	47c0      	blx	r8
 8013b3e:	9b01      	ldr	r3, [sp, #4]
 8013b40:	200a      	movs	r0, #10
 8013b42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013b46:	e73b      	b.n	80139c0 <rcl_wait_set_resize+0x1e4>

08013b48 <rcl_wait_set_init>:
 8013b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b4c:	b084      	sub	sp, #16
 8013b4e:	4604      	mov	r4, r0
 8013b50:	a810      	add	r0, sp, #64	@ 0x40
 8013b52:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013b56:	460f      	mov	r7, r1
 8013b58:	4690      	mov	r8, r2
 8013b5a:	4699      	mov	r9, r3
 8013b5c:	f7f9 ff3c 	bl	800d9d8 <rcutils_allocator_is_valid>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d06b      	beq.n	8013c3c <rcl_wait_set_init+0xf4>
 8013b64:	2c00      	cmp	r4, #0
 8013b66:	d069      	beq.n	8013c3c <rcl_wait_set_init+0xf4>
 8013b68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013b6a:	b125      	cbz	r5, 8013b76 <rcl_wait_set_init+0x2e>
 8013b6c:	2564      	movs	r5, #100	@ 0x64
 8013b6e:	4628      	mov	r0, r5
 8013b70:	b004      	add	sp, #16
 8013b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b76:	f1ba 0f00 	cmp.w	sl, #0
 8013b7a:	d05f      	beq.n	8013c3c <rcl_wait_set_init+0xf4>
 8013b7c:	4650      	mov	r0, sl
 8013b7e:	f7fe fb0f 	bl	80121a0 <rcl_context_is_valid>
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d067      	beq.n	8013c56 <rcl_wait_set_init+0x10e>
 8013b86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b88:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013b8a:	205c      	movs	r0, #92	@ 0x5c
 8013b8c:	4798      	blx	r3
 8013b8e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013b90:	2800      	cmp	r0, #0
 8013b92:	d062      	beq.n	8013c5a <rcl_wait_set_init+0x112>
 8013b94:	4629      	mov	r1, r5
 8013b96:	225c      	movs	r2, #92	@ 0x5c
 8013b98:	f004 fe44 	bl	8018824 <memset>
 8013b9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013ba0:	eb03 0e02 	add.w	lr, r3, r2
 8013ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ba6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013ba8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013bac:	449e      	add	lr, r3
 8013bae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bb2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013bb6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013bba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013bbe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013bc2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013bc6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013bca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013bce:	f8da a000 	ldr.w	sl, [sl]
 8013bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bd4:	44c6      	add	lr, r8
 8013bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bda:	602b      	str	r3, [r5, #0]
 8013bdc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013be0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013be4:	f002 f96c 	bl	8015ec0 <rmw_create_wait_set>
 8013be8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013bec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013bee:	b350      	cbz	r0, 8013c46 <rcl_wait_set_init+0xfe>
 8013bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bf2:	9302      	str	r3, [sp, #8]
 8013bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bf6:	9301      	str	r3, [sp, #4]
 8013bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	4642      	mov	r2, r8
 8013bfe:	464b      	mov	r3, r9
 8013c00:	4639      	mov	r1, r7
 8013c02:	4620      	mov	r0, r4
 8013c04:	f7ff fdea 	bl	80137dc <rcl_wait_set_resize>
 8013c08:	4605      	mov	r5, r0
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d0af      	beq.n	8013b6e <rcl_wait_set_init+0x26>
 8013c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c10:	bb2b      	cbnz	r3, 8013c5e <rcl_wait_set_init+0x116>
 8013c12:	2600      	movs	r6, #0
 8013c14:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013c18:	9600      	str	r6, [sp, #0]
 8013c1a:	4633      	mov	r3, r6
 8013c1c:	4632      	mov	r2, r6
 8013c1e:	4631      	mov	r1, r6
 8013c20:	4620      	mov	r0, r4
 8013c22:	f7ff fddb 	bl	80137dc <rcl_wait_set_resize>
 8013c26:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	d0a0      	beq.n	8013b6e <rcl_wait_set_init+0x26>
 8013c2c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013c2e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013c30:	4798      	blx	r3
 8013c32:	4628      	mov	r0, r5
 8013c34:	6326      	str	r6, [r4, #48]	@ 0x30
 8013c36:	b004      	add	sp, #16
 8013c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c3c:	250b      	movs	r5, #11
 8013c3e:	4628      	mov	r0, r5
 8013c40:	b004      	add	sp, #16
 8013c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c46:	2501      	movs	r5, #1
 8013c48:	f002 f944 	bl	8015ed4 <rmw_destroy_wait_set>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	bf18      	it	ne
 8013c50:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013c54:	e7dd      	b.n	8013c12 <rcl_wait_set_init+0xca>
 8013c56:	2565      	movs	r5, #101	@ 0x65
 8013c58:	e789      	b.n	8013b6e <rcl_wait_set_init+0x26>
 8013c5a:	250a      	movs	r5, #10
 8013c5c:	e787      	b.n	8013b6e <rcl_wait_set_init+0x26>
 8013c5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c60:	e7f2      	b.n	8013c48 <rcl_wait_set_init+0x100>
 8013c62:	bf00      	nop

08013c64 <rcl_wait_set_add_guard_condition>:
 8013c64:	b318      	cbz	r0, 8013cae <rcl_wait_set_add_guard_condition+0x4a>
 8013c66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c68:	b570      	push	{r4, r5, r6, lr}
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	b30b      	cbz	r3, 8013cb2 <rcl_wait_set_add_guard_condition+0x4e>
 8013c6e:	b319      	cbz	r1, 8013cb8 <rcl_wait_set_add_guard_condition+0x54>
 8013c70:	68dd      	ldr	r5, [r3, #12]
 8013c72:	68c0      	ldr	r0, [r0, #12]
 8013c74:	4285      	cmp	r5, r0
 8013c76:	d217      	bcs.n	8013ca8 <rcl_wait_set_add_guard_condition+0x44>
 8013c78:	68a0      	ldr	r0, [r4, #8]
 8013c7a:	1c6e      	adds	r6, r5, #1
 8013c7c:	60de      	str	r6, [r3, #12]
 8013c7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013c82:	b102      	cbz	r2, 8013c86 <rcl_wait_set_add_guard_condition+0x22>
 8013c84:	6015      	str	r5, [r2, #0]
 8013c86:	4608      	mov	r0, r1
 8013c88:	f7fe fbf8 	bl	801247c <rcl_guard_condition_get_rmw_handle>
 8013c8c:	b150      	cbz	r0, 8013ca4 <rcl_wait_set_add_guard_condition+0x40>
 8013c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c90:	6842      	ldr	r2, [r0, #4]
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013c9a:	6913      	ldr	r3, [r2, #16]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	6113      	str	r3, [r2, #16]
 8013ca2:	bd70      	pop	{r4, r5, r6, pc}
 8013ca4:	2001      	movs	r0, #1
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}
 8013ca8:	f240 3086 	movw	r0, #902	@ 0x386
 8013cac:	bd70      	pop	{r4, r5, r6, pc}
 8013cae:	200b      	movs	r0, #11
 8013cb0:	4770      	bx	lr
 8013cb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013cb6:	bd70      	pop	{r4, r5, r6, pc}
 8013cb8:	200b      	movs	r0, #11
 8013cba:	bd70      	pop	{r4, r5, r6, pc}

08013cbc <rcl_wait_set_add_timer>:
 8013cbc:	b328      	cbz	r0, 8013d0a <rcl_wait_set_add_timer+0x4e>
 8013cbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013cc0:	b570      	push	{r4, r5, r6, lr}
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	b31b      	cbz	r3, 8013d0e <rcl_wait_set_add_timer+0x52>
 8013cc6:	b329      	cbz	r1, 8013d14 <rcl_wait_set_add_timer+0x58>
 8013cc8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013cca:	6965      	ldr	r5, [r4, #20]
 8013ccc:	42a8      	cmp	r0, r5
 8013cce:	d219      	bcs.n	8013d04 <rcl_wait_set_add_timer+0x48>
 8013cd0:	6925      	ldr	r5, [r4, #16]
 8013cd2:	1c46      	adds	r6, r0, #1
 8013cd4:	641e      	str	r6, [r3, #64]	@ 0x40
 8013cd6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013cda:	b102      	cbz	r2, 8013cde <rcl_wait_set_add_timer+0x22>
 8013cdc:	6010      	str	r0, [r2, #0]
 8013cde:	4608      	mov	r0, r1
 8013ce0:	f7ff fba6 	bl	8013430 <rcl_timer_get_guard_condition>
 8013ce4:	b168      	cbz	r0, 8013d02 <rcl_wait_set_add_timer+0x46>
 8013ce6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ce8:	68e3      	ldr	r3, [r4, #12]
 8013cea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013cec:	3b01      	subs	r3, #1
 8013cee:	441d      	add	r5, r3
 8013cf0:	f7fe fbc4 	bl	801247c <rcl_guard_condition_get_rmw_handle>
 8013cf4:	b180      	cbz	r0, 8013d18 <rcl_wait_set_add_timer+0x5c>
 8013cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cf8:	6842      	ldr	r2, [r0, #4]
 8013cfa:	695b      	ldr	r3, [r3, #20]
 8013cfc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d00:	2000      	movs	r0, #0
 8013d02:	bd70      	pop	{r4, r5, r6, pc}
 8013d04:	f240 3086 	movw	r0, #902	@ 0x386
 8013d08:	bd70      	pop	{r4, r5, r6, pc}
 8013d0a:	200b      	movs	r0, #11
 8013d0c:	4770      	bx	lr
 8013d0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d12:	bd70      	pop	{r4, r5, r6, pc}
 8013d14:	200b      	movs	r0, #11
 8013d16:	bd70      	pop	{r4, r5, r6, pc}
 8013d18:	2001      	movs	r0, #1
 8013d1a:	bd70      	pop	{r4, r5, r6, pc}

08013d1c <rcl_wait_set_add_client>:
 8013d1c:	b318      	cbz	r0, 8013d66 <rcl_wait_set_add_client+0x4a>
 8013d1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d20:	b570      	push	{r4, r5, r6, lr}
 8013d22:	4604      	mov	r4, r0
 8013d24:	b30b      	cbz	r3, 8013d6a <rcl_wait_set_add_client+0x4e>
 8013d26:	b319      	cbz	r1, 8013d70 <rcl_wait_set_add_client+0x54>
 8013d28:	699d      	ldr	r5, [r3, #24]
 8013d2a:	69c0      	ldr	r0, [r0, #28]
 8013d2c:	4285      	cmp	r5, r0
 8013d2e:	d217      	bcs.n	8013d60 <rcl_wait_set_add_client+0x44>
 8013d30:	69a0      	ldr	r0, [r4, #24]
 8013d32:	1c6e      	adds	r6, r5, #1
 8013d34:	619e      	str	r6, [r3, #24]
 8013d36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013d3a:	b102      	cbz	r2, 8013d3e <rcl_wait_set_add_client+0x22>
 8013d3c:	6015      	str	r5, [r2, #0]
 8013d3e:	4608      	mov	r0, r1
 8013d40:	f7fe f982 	bl	8012048 <rcl_client_get_rmw_handle>
 8013d44:	b150      	cbz	r0, 8013d5c <rcl_wait_set_add_client+0x40>
 8013d46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d48:	6842      	ldr	r2, [r0, #4]
 8013d4a:	6a1b      	ldr	r3, [r3, #32]
 8013d4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d52:	69d3      	ldr	r3, [r2, #28]
 8013d54:	3301      	adds	r3, #1
 8013d56:	2000      	movs	r0, #0
 8013d58:	61d3      	str	r3, [r2, #28]
 8013d5a:	bd70      	pop	{r4, r5, r6, pc}
 8013d5c:	2001      	movs	r0, #1
 8013d5e:	bd70      	pop	{r4, r5, r6, pc}
 8013d60:	f240 3086 	movw	r0, #902	@ 0x386
 8013d64:	bd70      	pop	{r4, r5, r6, pc}
 8013d66:	200b      	movs	r0, #11
 8013d68:	4770      	bx	lr
 8013d6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d6e:	bd70      	pop	{r4, r5, r6, pc}
 8013d70:	200b      	movs	r0, #11
 8013d72:	bd70      	pop	{r4, r5, r6, pc}

08013d74 <rcl_wait_set_add_service>:
 8013d74:	b318      	cbz	r0, 8013dbe <rcl_wait_set_add_service+0x4a>
 8013d76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d78:	b570      	push	{r4, r5, r6, lr}
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	b30b      	cbz	r3, 8013dc2 <rcl_wait_set_add_service+0x4e>
 8013d7e:	b319      	cbz	r1, 8013dc8 <rcl_wait_set_add_service+0x54>
 8013d80:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013d82:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013d84:	4285      	cmp	r5, r0
 8013d86:	d217      	bcs.n	8013db8 <rcl_wait_set_add_service+0x44>
 8013d88:	6a20      	ldr	r0, [r4, #32]
 8013d8a:	1c6e      	adds	r6, r5, #1
 8013d8c:	625e      	str	r6, [r3, #36]	@ 0x24
 8013d8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013d92:	b102      	cbz	r2, 8013d96 <rcl_wait_set_add_service+0x22>
 8013d94:	6015      	str	r5, [r2, #0]
 8013d96:	4608      	mov	r0, r1
 8013d98:	f7fe ff3e 	bl	8012c18 <rcl_service_get_rmw_handle>
 8013d9c:	b150      	cbz	r0, 8013db4 <rcl_wait_set_add_service+0x40>
 8013d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013da0:	6842      	ldr	r2, [r0, #4]
 8013da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013da4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013da8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013daa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013dac:	3301      	adds	r3, #1
 8013dae:	2000      	movs	r0, #0
 8013db0:	6293      	str	r3, [r2, #40]	@ 0x28
 8013db2:	bd70      	pop	{r4, r5, r6, pc}
 8013db4:	2001      	movs	r0, #1
 8013db6:	bd70      	pop	{r4, r5, r6, pc}
 8013db8:	f240 3086 	movw	r0, #902	@ 0x386
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}
 8013dbe:	200b      	movs	r0, #11
 8013dc0:	4770      	bx	lr
 8013dc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}
 8013dc8:	200b      	movs	r0, #11
 8013dca:	bd70      	pop	{r4, r5, r6, pc}
 8013dcc:	0000      	movs	r0, r0
	...

08013dd0 <rcl_wait>:
 8013dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd4:	ed2d 8b02 	vpush	{d8}
 8013dd8:	b08d      	sub	sp, #52	@ 0x34
 8013dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013dde:	2800      	cmp	r0, #0
 8013de0:	f000 8143 	beq.w	801406a <rcl_wait+0x29a>
 8013de4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013de6:	4605      	mov	r5, r0
 8013de8:	2e00      	cmp	r6, #0
 8013dea:	f000 8112 	beq.w	8014012 <rcl_wait+0x242>
 8013dee:	6843      	ldr	r3, [r0, #4]
 8013df0:	b983      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013df2:	68eb      	ldr	r3, [r5, #12]
 8013df4:	b973      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013df6:	696b      	ldr	r3, [r5, #20]
 8013df8:	b963      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013dfa:	69eb      	ldr	r3, [r5, #28]
 8013dfc:	b953      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013dfe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013e00:	b943      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013e02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013e04:	b933      	cbnz	r3, 8013e14 <rcl_wait+0x44>
 8013e06:	f240 3085 	movw	r0, #901	@ 0x385
 8013e0a:	b00d      	add	sp, #52	@ 0x34
 8013e0c:	ecbd 8b02 	vpop	{d8}
 8013e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e14:	9b04      	ldr	r3, [sp, #16]
 8013e16:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	9b05      	ldr	r3, [sp, #20]
 8013e1c:	f173 0300 	sbcs.w	r3, r3, #0
 8013e20:	f2c0 80f0 	blt.w	8014004 <rcl_wait+0x234>
 8013e24:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013e28:	4643      	mov	r3, r8
 8013e2a:	2a00      	cmp	r2, #0
 8013e2c:	f000 8133 	beq.w	8014096 <rcl_wait+0x2c6>
 8013e30:	2400      	movs	r4, #0
 8013e32:	4613      	mov	r3, r2
 8013e34:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80140a8 <rcl_wait+0x2d8>
 8013e38:	46a2      	mov	sl, r4
 8013e3a:	46a3      	mov	fp, r4
 8013e3c:	f240 3921 	movw	r9, #801	@ 0x321
 8013e40:	4632      	mov	r2, r6
 8013e42:	e014      	b.n	8013e6e <rcl_wait+0x9e>
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d1e0      	bne.n	8013e0a <rcl_wait+0x3a>
 8013e48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e4c:	4542      	cmp	r2, r8
 8013e4e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013e52:	da03      	bge.n	8013e5c <rcl_wait+0x8c>
 8013e54:	4690      	mov	r8, r2
 8013e56:	461f      	mov	r7, r3
 8013e58:	f04f 0b01 	mov.w	fp, #1
 8013e5c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013e5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013e60:	3401      	adds	r4, #1
 8013e62:	f14a 0a00 	adc.w	sl, sl, #0
 8013e66:	429c      	cmp	r4, r3
 8013e68:	f17a 0100 	sbcs.w	r1, sl, #0
 8013e6c:	d228      	bcs.n	8013ec0 <rcl_wait+0xf0>
 8013e6e:	6928      	ldr	r0, [r5, #16]
 8013e70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013e74:	a908      	add	r1, sp, #32
 8013e76:	00a6      	lsls	r6, r4, #2
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d0f1      	beq.n	8013e60 <rcl_wait+0x90>
 8013e7c:	68eb      	ldr	r3, [r5, #12]
 8013e7e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013e82:	4423      	add	r3, r4
 8013e84:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013e88:	f1be 0f00 	cmp.w	lr, #0
 8013e8c:	d006      	beq.n	8013e9c <rcl_wait+0xcc>
 8013e8e:	6913      	ldr	r3, [r2, #16]
 8013e90:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013e94:	3301      	adds	r3, #1
 8013e96:	6113      	str	r3, [r2, #16]
 8013e98:	692b      	ldr	r3, [r5, #16]
 8013e9a:	5998      	ldr	r0, [r3, r6]
 8013e9c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013ea0:	f7ff fa94 	bl	80133cc <rcl_timer_get_time_until_next_call>
 8013ea4:	4548      	cmp	r0, r9
 8013ea6:	d1cd      	bne.n	8013e44 <rcl_wait+0x74>
 8013ea8:	692b      	ldr	r3, [r5, #16]
 8013eaa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013eac:	2100      	movs	r1, #0
 8013eae:	5199      	str	r1, [r3, r6]
 8013eb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013eb2:	3401      	adds	r4, #1
 8013eb4:	f14a 0a00 	adc.w	sl, sl, #0
 8013eb8:	429c      	cmp	r4, r3
 8013eba:	f17a 0100 	sbcs.w	r1, sl, #0
 8013ebe:	d3d6      	bcc.n	8013e6e <rcl_wait+0x9e>
 8013ec0:	4616      	mov	r6, r2
 8013ec2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	46d9      	mov	r9, fp
 8013eca:	f040 80a9 	bne.w	8014020 <rcl_wait+0x250>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013ed6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013eda:	ab08      	add	r3, sp, #32
 8013edc:	9302      	str	r3, [sp, #8]
 8013ede:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013ee0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013ee4:	e9cd 3200 	strd	r3, r2, [sp]
 8013ee8:	f106 0110 	add.w	r1, r6, #16
 8013eec:	f106 031c 	add.w	r3, r6, #28
 8013ef0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013ef4:	1d30      	adds	r0, r6, #4
 8013ef6:	f001 fe6b 	bl	8015bd0 <rmw_wait>
 8013efa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013efe:	4680      	mov	r8, r0
 8013f00:	b1ca      	cbz	r2, 8013f36 <rcl_wait+0x166>
 8013f02:	2400      	movs	r4, #0
 8013f04:	4627      	mov	r7, r4
 8013f06:	692a      	ldr	r2, [r5, #16]
 8013f08:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013f0c:	f10d 011f 	add.w	r1, sp, #31
 8013f10:	00a6      	lsls	r6, r4, #2
 8013f12:	b160      	cbz	r0, 8013f2e <rcl_wait+0x15e>
 8013f14:	f88d 701f 	strb.w	r7, [sp, #31]
 8013f18:	f7ff fa1e 	bl	8013358 <rcl_timer_is_ready>
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	f47f af74 	bne.w	8013e0a <rcl_wait+0x3a>
 8013f22:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013f26:	b90b      	cbnz	r3, 8013f2c <rcl_wait+0x15c>
 8013f28:	692a      	ldr	r2, [r5, #16]
 8013f2a:	5193      	str	r3, [r2, r6]
 8013f2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f30:	3401      	adds	r4, #1
 8013f32:	42a2      	cmp	r2, r4
 8013f34:	d8e7      	bhi.n	8013f06 <rcl_wait+0x136>
 8013f36:	f038 0002 	bics.w	r0, r8, #2
 8013f3a:	f040 8090 	bne.w	801405e <rcl_wait+0x28e>
 8013f3e:	686e      	ldr	r6, [r5, #4]
 8013f40:	4602      	mov	r2, r0
 8013f42:	b91e      	cbnz	r6, 8013f4c <rcl_wait+0x17c>
 8013f44:	e00d      	b.n	8013f62 <rcl_wait+0x192>
 8013f46:	3201      	adds	r2, #1
 8013f48:	42b2      	cmp	r2, r6
 8013f4a:	d00a      	beq.n	8013f62 <rcl_wait+0x192>
 8013f4c:	6899      	ldr	r1, [r3, #8]
 8013f4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013f52:	2900      	cmp	r1, #0
 8013f54:	d1f7      	bne.n	8013f46 <rcl_wait+0x176>
 8013f56:	682c      	ldr	r4, [r5, #0]
 8013f58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013f5c:	3201      	adds	r2, #1
 8013f5e:	42b2      	cmp	r2, r6
 8013f60:	d1f4      	bne.n	8013f4c <rcl_wait+0x17c>
 8013f62:	68ee      	ldr	r6, [r5, #12]
 8013f64:	2200      	movs	r2, #0
 8013f66:	b91e      	cbnz	r6, 8013f70 <rcl_wait+0x1a0>
 8013f68:	e00d      	b.n	8013f86 <rcl_wait+0x1b6>
 8013f6a:	3201      	adds	r2, #1
 8013f6c:	42b2      	cmp	r2, r6
 8013f6e:	d00a      	beq.n	8013f86 <rcl_wait+0x1b6>
 8013f70:	6959      	ldr	r1, [r3, #20]
 8013f72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d1f7      	bne.n	8013f6a <rcl_wait+0x19a>
 8013f7a:	68ac      	ldr	r4, [r5, #8]
 8013f7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013f80:	3201      	adds	r2, #1
 8013f82:	42b2      	cmp	r2, r6
 8013f84:	d1f4      	bne.n	8013f70 <rcl_wait+0x1a0>
 8013f86:	69ee      	ldr	r6, [r5, #28]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	b91e      	cbnz	r6, 8013f94 <rcl_wait+0x1c4>
 8013f8c:	e00d      	b.n	8013faa <rcl_wait+0x1da>
 8013f8e:	3201      	adds	r2, #1
 8013f90:	42b2      	cmp	r2, r6
 8013f92:	d00a      	beq.n	8013faa <rcl_wait+0x1da>
 8013f94:	6a19      	ldr	r1, [r3, #32]
 8013f96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013f9a:	2900      	cmp	r1, #0
 8013f9c:	d1f7      	bne.n	8013f8e <rcl_wait+0x1be>
 8013f9e:	69ac      	ldr	r4, [r5, #24]
 8013fa0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fa4:	3201      	adds	r2, #1
 8013fa6:	42b2      	cmp	r2, r6
 8013fa8:	d1f4      	bne.n	8013f94 <rcl_wait+0x1c4>
 8013faa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013fac:	2200      	movs	r2, #0
 8013fae:	b91e      	cbnz	r6, 8013fb8 <rcl_wait+0x1e8>
 8013fb0:	e00d      	b.n	8013fce <rcl_wait+0x1fe>
 8013fb2:	3201      	adds	r2, #1
 8013fb4:	4296      	cmp	r6, r2
 8013fb6:	d00a      	beq.n	8013fce <rcl_wait+0x1fe>
 8013fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013fba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fbe:	2900      	cmp	r1, #0
 8013fc0:	d1f7      	bne.n	8013fb2 <rcl_wait+0x1e2>
 8013fc2:	6a2c      	ldr	r4, [r5, #32]
 8013fc4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fc8:	3201      	adds	r2, #1
 8013fca:	4296      	cmp	r6, r2
 8013fcc:	d1f4      	bne.n	8013fb8 <rcl_wait+0x1e8>
 8013fce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	b91e      	cbnz	r6, 8013fdc <rcl_wait+0x20c>
 8013fd4:	e00d      	b.n	8013ff2 <rcl_wait+0x222>
 8013fd6:	3201      	adds	r2, #1
 8013fd8:	42b2      	cmp	r2, r6
 8013fda:	d00a      	beq.n	8013ff2 <rcl_wait+0x222>
 8013fdc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013fde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fe2:	2900      	cmp	r1, #0
 8013fe4:	d1f7      	bne.n	8013fd6 <rcl_wait+0x206>
 8013fe6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013fe8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fec:	3201      	adds	r2, #1
 8013fee:	42b2      	cmp	r2, r6
 8013ff0:	d1f4      	bne.n	8013fdc <rcl_wait+0x20c>
 8013ff2:	f1b8 0f02 	cmp.w	r8, #2
 8013ff6:	f47f af08 	bne.w	8013e0a <rcl_wait+0x3a>
 8013ffa:	464b      	mov	r3, r9
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	bf08      	it	eq
 8014000:	2002      	moveq	r0, #2
 8014002:	e702      	b.n	8013e0a <rcl_wait+0x3a>
 8014004:	2a00      	cmp	r2, #0
 8014006:	d03a      	beq.n	801407e <rcl_wait+0x2ae>
 8014008:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801400c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014010:	e70e      	b.n	8013e30 <rcl_wait+0x60>
 8014012:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014016:	b00d      	add	sp, #52	@ 0x34
 8014018:	ecbd 8b02 	vpop	{d8}
 801401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014020:	9b04      	ldr	r3, [sp, #16]
 8014022:	2b01      	cmp	r3, #1
 8014024:	9b05      	ldr	r3, [sp, #20]
 8014026:	f173 0300 	sbcs.w	r3, r3, #0
 801402a:	db24      	blt.n	8014076 <rcl_wait+0x2a6>
 801402c:	2f00      	cmp	r7, #0
 801402e:	bfbc      	itt	lt
 8014030:	f04f 0800 	movlt.w	r8, #0
 8014034:	4647      	movlt	r7, r8
 8014036:	a31e      	add	r3, pc, #120	@ (adr r3, 80140b0 <rcl_wait+0x2e0>)
 8014038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403c:	4640      	mov	r0, r8
 801403e:	4639      	mov	r1, r7
 8014040:	f7ec fe52 	bl	8000ce8 <__aeabi_ldivmod>
 8014044:	a31a      	add	r3, pc, #104	@ (adr r3, 80140b0 <rcl_wait+0x2e0>)
 8014046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801404e:	4640      	mov	r0, r8
 8014050:	4639      	mov	r1, r7
 8014052:	f7ec fe49 	bl	8000ce8 <__aeabi_ldivmod>
 8014056:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801405a:	ab08      	add	r3, sp, #32
 801405c:	e73e      	b.n	8013edc <rcl_wait+0x10c>
 801405e:	2001      	movs	r0, #1
 8014060:	b00d      	add	sp, #52	@ 0x34
 8014062:	ecbd 8b02 	vpop	{d8}
 8014066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406a:	200b      	movs	r0, #11
 801406c:	b00d      	add	sp, #52	@ 0x34
 801406e:	ecbd 8b02 	vpop	{d8}
 8014072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014076:	465b      	mov	r3, fp
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1d7      	bne.n	801402c <rcl_wait+0x25c>
 801407c:	e72e      	b.n	8013edc <rcl_wait+0x10c>
 801407e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014082:	430b      	orrs	r3, r1
 8014084:	bf08      	it	eq
 8014086:	4691      	moveq	r9, r2
 8014088:	f43f af21 	beq.w	8013ece <rcl_wait+0xfe>
 801408c:	9b04      	ldr	r3, [sp, #16]
 801408e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014092:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014096:	2b01      	cmp	r3, #1
 8014098:	9b05      	ldr	r3, [sp, #20]
 801409a:	f173 0300 	sbcs.w	r3, r3, #0
 801409e:	f04f 0300 	mov.w	r3, #0
 80140a2:	4699      	mov	r9, r3
 80140a4:	dac2      	bge.n	801402c <rcl_wait+0x25c>
 80140a6:	e719      	b.n	8013edc <rcl_wait+0x10c>
 80140a8:	ffffffff 	.word	0xffffffff
 80140ac:	7fffffff 	.word	0x7fffffff
 80140b0:	3b9aca00 	.word	0x3b9aca00
 80140b4:	00000000 	.word	0x00000000

080140b8 <rcl_action_take_goal_response>:
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d039      	beq.n	8014130 <rcl_action_take_goal_response+0x78>
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	4604      	mov	r4, r0
 80140c0:	6800      	ldr	r0, [r0, #0]
 80140c2:	b380      	cbz	r0, 8014126 <rcl_action_take_goal_response+0x6e>
 80140c4:	460d      	mov	r5, r1
 80140c6:	4616      	mov	r6, r2
 80140c8:	f7fe f842 	bl	8012150 <rcl_client_is_valid>
 80140cc:	b330      	cbz	r0, 801411c <rcl_action_take_goal_response+0x64>
 80140ce:	6820      	ldr	r0, [r4, #0]
 80140d0:	3004      	adds	r0, #4
 80140d2:	f7fe f83d 	bl	8012150 <rcl_client_is_valid>
 80140d6:	b308      	cbz	r0, 801411c <rcl_action_take_goal_response+0x64>
 80140d8:	6820      	ldr	r0, [r4, #0]
 80140da:	3008      	adds	r0, #8
 80140dc:	f7fe f838 	bl	8012150 <rcl_client_is_valid>
 80140e0:	b1e0      	cbz	r0, 801411c <rcl_action_take_goal_response+0x64>
 80140e2:	6820      	ldr	r0, [r4, #0]
 80140e4:	300c      	adds	r0, #12
 80140e6:	f7f8 fcbf 	bl	800ca68 <rcl_subscription_is_valid>
 80140ea:	b1b8      	cbz	r0, 801411c <rcl_action_take_goal_response+0x64>
 80140ec:	6820      	ldr	r0, [r4, #0]
 80140ee:	3010      	adds	r0, #16
 80140f0:	f7f8 fcba 	bl	800ca68 <rcl_subscription_is_valid>
 80140f4:	b190      	cbz	r0, 801411c <rcl_action_take_goal_response+0x64>
 80140f6:	b1cd      	cbz	r5, 801412c <rcl_action_take_goal_response+0x74>
 80140f8:	b1c6      	cbz	r6, 801412c <rcl_action_take_goal_response+0x74>
 80140fa:	6820      	ldr	r0, [r4, #0]
 80140fc:	4632      	mov	r2, r6
 80140fe:	4629      	mov	r1, r5
 8014100:	f7fd ffde 	bl	80120c0 <rcl_take_response>
 8014104:	b148      	cbz	r0, 801411a <rcl_action_take_goal_response+0x62>
 8014106:	280a      	cmp	r0, #10
 8014108:	d007      	beq.n	801411a <rcl_action_take_goal_response+0x62>
 801410a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801410e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014112:	4290      	cmp	r0, r2
 8014114:	bf0c      	ite	eq
 8014116:	4618      	moveq	r0, r3
 8014118:	2001      	movne	r0, #1
 801411a:	bd70      	pop	{r4, r5, r6, pc}
 801411c:	f7f9 fc98 	bl	800da50 <rcutils_reset_error>
 8014120:	f640 0036 	movw	r0, #2102	@ 0x836
 8014124:	bd70      	pop	{r4, r5, r6, pc}
 8014126:	f640 0036 	movw	r0, #2102	@ 0x836
 801412a:	bd70      	pop	{r4, r5, r6, pc}
 801412c:	200b      	movs	r0, #11
 801412e:	bd70      	pop	{r4, r5, r6, pc}
 8014130:	f640 0036 	movw	r0, #2102	@ 0x836
 8014134:	4770      	bx	lr
 8014136:	bf00      	nop

08014138 <rcl_action_send_result_request>:
 8014138:	b390      	cbz	r0, 80141a0 <rcl_action_send_result_request+0x68>
 801413a:	b570      	push	{r4, r5, r6, lr}
 801413c:	4604      	mov	r4, r0
 801413e:	6800      	ldr	r0, [r0, #0]
 8014140:	b348      	cbz	r0, 8014196 <rcl_action_send_result_request+0x5e>
 8014142:	460d      	mov	r5, r1
 8014144:	4616      	mov	r6, r2
 8014146:	f7fe f803 	bl	8012150 <rcl_client_is_valid>
 801414a:	b1f8      	cbz	r0, 801418c <rcl_action_send_result_request+0x54>
 801414c:	6820      	ldr	r0, [r4, #0]
 801414e:	3004      	adds	r0, #4
 8014150:	f7fd fffe 	bl	8012150 <rcl_client_is_valid>
 8014154:	b1d0      	cbz	r0, 801418c <rcl_action_send_result_request+0x54>
 8014156:	6820      	ldr	r0, [r4, #0]
 8014158:	3008      	adds	r0, #8
 801415a:	f7fd fff9 	bl	8012150 <rcl_client_is_valid>
 801415e:	b1a8      	cbz	r0, 801418c <rcl_action_send_result_request+0x54>
 8014160:	6820      	ldr	r0, [r4, #0]
 8014162:	300c      	adds	r0, #12
 8014164:	f7f8 fc80 	bl	800ca68 <rcl_subscription_is_valid>
 8014168:	b180      	cbz	r0, 801418c <rcl_action_send_result_request+0x54>
 801416a:	6820      	ldr	r0, [r4, #0]
 801416c:	3010      	adds	r0, #16
 801416e:	f7f8 fc7b 	bl	800ca68 <rcl_subscription_is_valid>
 8014172:	b158      	cbz	r0, 801418c <rcl_action_send_result_request+0x54>
 8014174:	b195      	cbz	r5, 801419c <rcl_action_send_result_request+0x64>
 8014176:	b18e      	cbz	r6, 801419c <rcl_action_send_result_request+0x64>
 8014178:	6820      	ldr	r0, [r4, #0]
 801417a:	4632      	mov	r2, r6
 801417c:	4629      	mov	r1, r5
 801417e:	3008      	adds	r0, #8
 8014180:	f7fd ff68 	bl	8012054 <rcl_send_request>
 8014184:	3800      	subs	r0, #0
 8014186:	bf18      	it	ne
 8014188:	2001      	movne	r0, #1
 801418a:	bd70      	pop	{r4, r5, r6, pc}
 801418c:	f7f9 fc60 	bl	800da50 <rcutils_reset_error>
 8014190:	f640 0036 	movw	r0, #2102	@ 0x836
 8014194:	bd70      	pop	{r4, r5, r6, pc}
 8014196:	f640 0036 	movw	r0, #2102	@ 0x836
 801419a:	bd70      	pop	{r4, r5, r6, pc}
 801419c:	200b      	movs	r0, #11
 801419e:	bd70      	pop	{r4, r5, r6, pc}
 80141a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop

080141a8 <rcl_action_take_result_response>:
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d03a      	beq.n	8014222 <rcl_action_take_result_response+0x7a>
 80141ac:	b570      	push	{r4, r5, r6, lr}
 80141ae:	4604      	mov	r4, r0
 80141b0:	6800      	ldr	r0, [r0, #0]
 80141b2:	b388      	cbz	r0, 8014218 <rcl_action_take_result_response+0x70>
 80141b4:	460d      	mov	r5, r1
 80141b6:	4616      	mov	r6, r2
 80141b8:	f7fd ffca 	bl	8012150 <rcl_client_is_valid>
 80141bc:	b338      	cbz	r0, 801420e <rcl_action_take_result_response+0x66>
 80141be:	6820      	ldr	r0, [r4, #0]
 80141c0:	3004      	adds	r0, #4
 80141c2:	f7fd ffc5 	bl	8012150 <rcl_client_is_valid>
 80141c6:	b310      	cbz	r0, 801420e <rcl_action_take_result_response+0x66>
 80141c8:	6820      	ldr	r0, [r4, #0]
 80141ca:	3008      	adds	r0, #8
 80141cc:	f7fd ffc0 	bl	8012150 <rcl_client_is_valid>
 80141d0:	b1e8      	cbz	r0, 801420e <rcl_action_take_result_response+0x66>
 80141d2:	6820      	ldr	r0, [r4, #0]
 80141d4:	300c      	adds	r0, #12
 80141d6:	f7f8 fc47 	bl	800ca68 <rcl_subscription_is_valid>
 80141da:	b1c0      	cbz	r0, 801420e <rcl_action_take_result_response+0x66>
 80141dc:	6820      	ldr	r0, [r4, #0]
 80141de:	3010      	adds	r0, #16
 80141e0:	f7f8 fc42 	bl	800ca68 <rcl_subscription_is_valid>
 80141e4:	b198      	cbz	r0, 801420e <rcl_action_take_result_response+0x66>
 80141e6:	b1d5      	cbz	r5, 801421e <rcl_action_take_result_response+0x76>
 80141e8:	b1ce      	cbz	r6, 801421e <rcl_action_take_result_response+0x76>
 80141ea:	6820      	ldr	r0, [r4, #0]
 80141ec:	4632      	mov	r2, r6
 80141ee:	4629      	mov	r1, r5
 80141f0:	3008      	adds	r0, #8
 80141f2:	f7fd ff65 	bl	80120c0 <rcl_take_response>
 80141f6:	b148      	cbz	r0, 801420c <rcl_action_take_result_response+0x64>
 80141f8:	280a      	cmp	r0, #10
 80141fa:	d007      	beq.n	801420c <rcl_action_take_result_response+0x64>
 80141fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014200:	f640 0337 	movw	r3, #2103	@ 0x837
 8014204:	4290      	cmp	r0, r2
 8014206:	bf0c      	ite	eq
 8014208:	4618      	moveq	r0, r3
 801420a:	2001      	movne	r0, #1
 801420c:	bd70      	pop	{r4, r5, r6, pc}
 801420e:	f7f9 fc1f 	bl	800da50 <rcutils_reset_error>
 8014212:	f640 0036 	movw	r0, #2102	@ 0x836
 8014216:	bd70      	pop	{r4, r5, r6, pc}
 8014218:	f640 0036 	movw	r0, #2102	@ 0x836
 801421c:	bd70      	pop	{r4, r5, r6, pc}
 801421e:	200b      	movs	r0, #11
 8014220:	bd70      	pop	{r4, r5, r6, pc}
 8014222:	f640 0036 	movw	r0, #2102	@ 0x836
 8014226:	4770      	bx	lr

08014228 <rcl_action_take_cancel_response>:
 8014228:	2800      	cmp	r0, #0
 801422a:	d03a      	beq.n	80142a2 <rcl_action_take_cancel_response+0x7a>
 801422c:	b570      	push	{r4, r5, r6, lr}
 801422e:	4604      	mov	r4, r0
 8014230:	6800      	ldr	r0, [r0, #0]
 8014232:	b388      	cbz	r0, 8014298 <rcl_action_take_cancel_response+0x70>
 8014234:	460d      	mov	r5, r1
 8014236:	4616      	mov	r6, r2
 8014238:	f7fd ff8a 	bl	8012150 <rcl_client_is_valid>
 801423c:	b338      	cbz	r0, 801428e <rcl_action_take_cancel_response+0x66>
 801423e:	6820      	ldr	r0, [r4, #0]
 8014240:	3004      	adds	r0, #4
 8014242:	f7fd ff85 	bl	8012150 <rcl_client_is_valid>
 8014246:	b310      	cbz	r0, 801428e <rcl_action_take_cancel_response+0x66>
 8014248:	6820      	ldr	r0, [r4, #0]
 801424a:	3008      	adds	r0, #8
 801424c:	f7fd ff80 	bl	8012150 <rcl_client_is_valid>
 8014250:	b1e8      	cbz	r0, 801428e <rcl_action_take_cancel_response+0x66>
 8014252:	6820      	ldr	r0, [r4, #0]
 8014254:	300c      	adds	r0, #12
 8014256:	f7f8 fc07 	bl	800ca68 <rcl_subscription_is_valid>
 801425a:	b1c0      	cbz	r0, 801428e <rcl_action_take_cancel_response+0x66>
 801425c:	6820      	ldr	r0, [r4, #0]
 801425e:	3010      	adds	r0, #16
 8014260:	f7f8 fc02 	bl	800ca68 <rcl_subscription_is_valid>
 8014264:	b198      	cbz	r0, 801428e <rcl_action_take_cancel_response+0x66>
 8014266:	b1d5      	cbz	r5, 801429e <rcl_action_take_cancel_response+0x76>
 8014268:	b1ce      	cbz	r6, 801429e <rcl_action_take_cancel_response+0x76>
 801426a:	6820      	ldr	r0, [r4, #0]
 801426c:	4632      	mov	r2, r6
 801426e:	4629      	mov	r1, r5
 8014270:	3004      	adds	r0, #4
 8014272:	f7fd ff25 	bl	80120c0 <rcl_take_response>
 8014276:	b148      	cbz	r0, 801428c <rcl_action_take_cancel_response+0x64>
 8014278:	280a      	cmp	r0, #10
 801427a:	d007      	beq.n	801428c <rcl_action_take_cancel_response+0x64>
 801427c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014280:	f640 0337 	movw	r3, #2103	@ 0x837
 8014284:	4290      	cmp	r0, r2
 8014286:	bf0c      	ite	eq
 8014288:	4618      	moveq	r0, r3
 801428a:	2001      	movne	r0, #1
 801428c:	bd70      	pop	{r4, r5, r6, pc}
 801428e:	f7f9 fbdf 	bl	800da50 <rcutils_reset_error>
 8014292:	f640 0036 	movw	r0, #2102	@ 0x836
 8014296:	bd70      	pop	{r4, r5, r6, pc}
 8014298:	f640 0036 	movw	r0, #2102	@ 0x836
 801429c:	bd70      	pop	{r4, r5, r6, pc}
 801429e:	200b      	movs	r0, #11
 80142a0:	bd70      	pop	{r4, r5, r6, pc}
 80142a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80142a6:	4770      	bx	lr

080142a8 <rcl_action_take_feedback>:
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d038      	beq.n	801431e <rcl_action_take_feedback+0x76>
 80142ac:	b530      	push	{r4, r5, lr}
 80142ae:	4604      	mov	r4, r0
 80142b0:	6800      	ldr	r0, [r0, #0]
 80142b2:	b091      	sub	sp, #68	@ 0x44
 80142b4:	b378      	cbz	r0, 8014316 <rcl_action_take_feedback+0x6e>
 80142b6:	460d      	mov	r5, r1
 80142b8:	f7fd ff4a 	bl	8012150 <rcl_client_is_valid>
 80142bc:	b328      	cbz	r0, 801430a <rcl_action_take_feedback+0x62>
 80142be:	6820      	ldr	r0, [r4, #0]
 80142c0:	3004      	adds	r0, #4
 80142c2:	f7fd ff45 	bl	8012150 <rcl_client_is_valid>
 80142c6:	b300      	cbz	r0, 801430a <rcl_action_take_feedback+0x62>
 80142c8:	6820      	ldr	r0, [r4, #0]
 80142ca:	3008      	adds	r0, #8
 80142cc:	f7fd ff40 	bl	8012150 <rcl_client_is_valid>
 80142d0:	b1d8      	cbz	r0, 801430a <rcl_action_take_feedback+0x62>
 80142d2:	6820      	ldr	r0, [r4, #0]
 80142d4:	300c      	adds	r0, #12
 80142d6:	f7f8 fbc7 	bl	800ca68 <rcl_subscription_is_valid>
 80142da:	b1b0      	cbz	r0, 801430a <rcl_action_take_feedback+0x62>
 80142dc:	6820      	ldr	r0, [r4, #0]
 80142de:	3010      	adds	r0, #16
 80142e0:	f7f8 fbc2 	bl	800ca68 <rcl_subscription_is_valid>
 80142e4:	b188      	cbz	r0, 801430a <rcl_action_take_feedback+0x62>
 80142e6:	b1ed      	cbz	r5, 8014324 <rcl_action_take_feedback+0x7c>
 80142e8:	6820      	ldr	r0, [r4, #0]
 80142ea:	2300      	movs	r3, #0
 80142ec:	466a      	mov	r2, sp
 80142ee:	4629      	mov	r1, r5
 80142f0:	300c      	adds	r0, #12
 80142f2:	f7f8 fb5b 	bl	800c9ac <rcl_take>
 80142f6:	b160      	cbz	r0, 8014312 <rcl_action_take_feedback+0x6a>
 80142f8:	f240 1391 	movw	r3, #401	@ 0x191
 80142fc:	4298      	cmp	r0, r3
 80142fe:	d014      	beq.n	801432a <rcl_action_take_feedback+0x82>
 8014300:	280a      	cmp	r0, #10
 8014302:	bf18      	it	ne
 8014304:	2001      	movne	r0, #1
 8014306:	b011      	add	sp, #68	@ 0x44
 8014308:	bd30      	pop	{r4, r5, pc}
 801430a:	f7f9 fba1 	bl	800da50 <rcutils_reset_error>
 801430e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014312:	b011      	add	sp, #68	@ 0x44
 8014314:	bd30      	pop	{r4, r5, pc}
 8014316:	f640 0036 	movw	r0, #2102	@ 0x836
 801431a:	b011      	add	sp, #68	@ 0x44
 801431c:	bd30      	pop	{r4, r5, pc}
 801431e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014322:	4770      	bx	lr
 8014324:	200b      	movs	r0, #11
 8014326:	b011      	add	sp, #68	@ 0x44
 8014328:	bd30      	pop	{r4, r5, pc}
 801432a:	f640 0037 	movw	r0, #2103	@ 0x837
 801432e:	e7f0      	b.n	8014312 <rcl_action_take_feedback+0x6a>

08014330 <rcl_action_wait_set_add_action_client>:
 8014330:	2800      	cmp	r0, #0
 8014332:	d048      	beq.n	80143c6 <rcl_action_wait_set_add_action_client+0x96>
 8014334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014336:	460c      	mov	r4, r1
 8014338:	2900      	cmp	r1, #0
 801433a:	d03c      	beq.n	80143b6 <rcl_action_wait_set_add_action_client+0x86>
 801433c:	4605      	mov	r5, r0
 801433e:	6808      	ldr	r0, [r1, #0]
 8014340:	2800      	cmp	r0, #0
 8014342:	d038      	beq.n	80143b6 <rcl_action_wait_set_add_action_client+0x86>
 8014344:	4617      	mov	r7, r2
 8014346:	461e      	mov	r6, r3
 8014348:	f7fd ff02 	bl	8012150 <rcl_client_is_valid>
 801434c:	b3b0      	cbz	r0, 80143bc <rcl_action_wait_set_add_action_client+0x8c>
 801434e:	6820      	ldr	r0, [r4, #0]
 8014350:	3004      	adds	r0, #4
 8014352:	f7fd fefd 	bl	8012150 <rcl_client_is_valid>
 8014356:	b388      	cbz	r0, 80143bc <rcl_action_wait_set_add_action_client+0x8c>
 8014358:	6820      	ldr	r0, [r4, #0]
 801435a:	3008      	adds	r0, #8
 801435c:	f7fd fef8 	bl	8012150 <rcl_client_is_valid>
 8014360:	b360      	cbz	r0, 80143bc <rcl_action_wait_set_add_action_client+0x8c>
 8014362:	6820      	ldr	r0, [r4, #0]
 8014364:	300c      	adds	r0, #12
 8014366:	f7f8 fb7f 	bl	800ca68 <rcl_subscription_is_valid>
 801436a:	b338      	cbz	r0, 80143bc <rcl_action_wait_set_add_action_client+0x8c>
 801436c:	6820      	ldr	r0, [r4, #0]
 801436e:	3010      	adds	r0, #16
 8014370:	f7f8 fb7a 	bl	800ca68 <rcl_subscription_is_valid>
 8014374:	b310      	cbz	r0, 80143bc <rcl_action_wait_set_add_action_client+0x8c>
 8014376:	6821      	ldr	r1, [r4, #0]
 8014378:	4628      	mov	r0, r5
 801437a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801437e:	f7ff fccd 	bl	8013d1c <rcl_wait_set_add_client>
 8014382:	b9b8      	cbnz	r0, 80143b4 <rcl_action_wait_set_add_action_client+0x84>
 8014384:	6821      	ldr	r1, [r4, #0]
 8014386:	4628      	mov	r0, r5
 8014388:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801438c:	3104      	adds	r1, #4
 801438e:	f7ff fcc5 	bl	8013d1c <rcl_wait_set_add_client>
 8014392:	b978      	cbnz	r0, 80143b4 <rcl_action_wait_set_add_action_client+0x84>
 8014394:	6821      	ldr	r1, [r4, #0]
 8014396:	4628      	mov	r0, r5
 8014398:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801439c:	3108      	adds	r1, #8
 801439e:	f7ff fcbd 	bl	8013d1c <rcl_wait_set_add_client>
 80143a2:	b938      	cbnz	r0, 80143b4 <rcl_action_wait_set_add_action_client+0x84>
 80143a4:	6821      	ldr	r1, [r4, #0]
 80143a6:	4628      	mov	r0, r5
 80143a8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80143ac:	310c      	adds	r1, #12
 80143ae:	f7ff f96d 	bl	801368c <rcl_wait_set_add_subscription>
 80143b2:	b158      	cbz	r0, 80143cc <rcl_action_wait_set_add_action_client+0x9c>
 80143b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80143ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143bc:	f7f9 fb48 	bl	800da50 <rcutils_reset_error>
 80143c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80143c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80143ca:	4770      	bx	lr
 80143cc:	6821      	ldr	r1, [r4, #0]
 80143ce:	4628      	mov	r0, r5
 80143d0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80143d4:	3110      	adds	r1, #16
 80143d6:	f7ff f959 	bl	801368c <rcl_wait_set_add_subscription>
 80143da:	2800      	cmp	r0, #0
 80143dc:	d1ea      	bne.n	80143b4 <rcl_action_wait_set_add_action_client+0x84>
 80143de:	b11f      	cbz	r7, 80143e8 <rcl_action_wait_set_add_action_client+0xb8>
 80143e0:	6823      	ldr	r3, [r4, #0]
 80143e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80143e6:	603b      	str	r3, [r7, #0]
 80143e8:	2e00      	cmp	r6, #0
 80143ea:	d0e3      	beq.n	80143b4 <rcl_action_wait_set_add_action_client+0x84>
 80143ec:	6823      	ldr	r3, [r4, #0]
 80143ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80143f2:	6033      	str	r3, [r6, #0]
 80143f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143f6:	bf00      	nop

080143f8 <rcl_action_client_wait_set_get_entities_ready>:
 80143f8:	2800      	cmp	r0, #0
 80143fa:	f000 808d 	beq.w	8014518 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80143fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014402:	460c      	mov	r4, r1
 8014404:	2900      	cmp	r1, #0
 8014406:	d077      	beq.n	80144f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014408:	4605      	mov	r5, r0
 801440a:	6808      	ldr	r0, [r1, #0]
 801440c:	2800      	cmp	r0, #0
 801440e:	d073      	beq.n	80144f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014410:	4616      	mov	r6, r2
 8014412:	461f      	mov	r7, r3
 8014414:	f7fd fe9c 	bl	8012150 <rcl_client_is_valid>
 8014418:	2800      	cmp	r0, #0
 801441a:	d071      	beq.n	8014500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801441c:	6820      	ldr	r0, [r4, #0]
 801441e:	3004      	adds	r0, #4
 8014420:	f7fd fe96 	bl	8012150 <rcl_client_is_valid>
 8014424:	2800      	cmp	r0, #0
 8014426:	d06b      	beq.n	8014500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014428:	6820      	ldr	r0, [r4, #0]
 801442a:	3008      	adds	r0, #8
 801442c:	f7fd fe90 	bl	8012150 <rcl_client_is_valid>
 8014430:	2800      	cmp	r0, #0
 8014432:	d065      	beq.n	8014500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014434:	6820      	ldr	r0, [r4, #0]
 8014436:	300c      	adds	r0, #12
 8014438:	f7f8 fb16 	bl	800ca68 <rcl_subscription_is_valid>
 801443c:	2800      	cmp	r0, #0
 801443e:	d05f      	beq.n	8014500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014440:	6820      	ldr	r0, [r4, #0]
 8014442:	3010      	adds	r0, #16
 8014444:	f7f8 fb10 	bl	800ca68 <rcl_subscription_is_valid>
 8014448:	2800      	cmp	r0, #0
 801444a:	d059      	beq.n	8014500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801444c:	2e00      	cmp	r6, #0
 801444e:	d060      	beq.n	8014512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014450:	2f00      	cmp	r7, #0
 8014452:	d05e      	beq.n	8014512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014454:	9b06      	ldr	r3, [sp, #24]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d05b      	beq.n	8014512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801445a:	9b07      	ldr	r3, [sp, #28]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d058      	beq.n	8014512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014460:	9b08      	ldr	r3, [sp, #32]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d055      	beq.n	8014512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	686a      	ldr	r2, [r5, #4]
 801446a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801446e:	428a      	cmp	r2, r1
 8014470:	d94c      	bls.n	801450c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014472:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014476:	4282      	cmp	r2, r0
 8014478:	d948      	bls.n	801450c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801447a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801447e:	69ea      	ldr	r2, [r5, #28]
 8014480:	42a2      	cmp	r2, r4
 8014482:	d943      	bls.n	801450c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014484:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014488:	4562      	cmp	r2, ip
 801448a:	d93f      	bls.n	801450c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801448c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014490:	4572      	cmp	r2, lr
 8014492:	d93b      	bls.n	801450c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014494:	69aa      	ldr	r2, [r5, #24]
 8014496:	682d      	ldr	r5, [r5, #0]
 8014498:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801449c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80144a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80144a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80144a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80144ac:	f103 0c0c 	add.w	ip, r3, #12
 80144b0:	eba5 050c 	sub.w	r5, r5, ip
 80144b4:	fab5 f585 	clz	r5, r5
 80144b8:	096d      	lsrs	r5, r5, #5
 80144ba:	7035      	strb	r5, [r6, #0]
 80144bc:	f103 0510 	add.w	r5, r3, #16
 80144c0:	1b64      	subs	r4, r4, r5
 80144c2:	fab4 f484 	clz	r4, r4
 80144c6:	0964      	lsrs	r4, r4, #5
 80144c8:	703c      	strb	r4, [r7, #0]
 80144ca:	eba3 0008 	sub.w	r0, r3, r8
 80144ce:	1d1c      	adds	r4, r3, #4
 80144d0:	3308      	adds	r3, #8
 80144d2:	1ad3      	subs	r3, r2, r3
 80144d4:	fab0 f080 	clz	r0, r0
 80144d8:	9a06      	ldr	r2, [sp, #24]
 80144da:	0940      	lsrs	r0, r0, #5
 80144dc:	1b09      	subs	r1, r1, r4
 80144de:	7010      	strb	r0, [r2, #0]
 80144e0:	fab1 f181 	clz	r1, r1
 80144e4:	9a07      	ldr	r2, [sp, #28]
 80144e6:	0949      	lsrs	r1, r1, #5
 80144e8:	7011      	strb	r1, [r2, #0]
 80144ea:	fab3 f383 	clz	r3, r3
 80144ee:	9a08      	ldr	r2, [sp, #32]
 80144f0:	095b      	lsrs	r3, r3, #5
 80144f2:	2000      	movs	r0, #0
 80144f4:	7013      	strb	r3, [r2, #0]
 80144f6:	e001      	b.n	80144fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80144f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80144fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014500:	f7f9 faa6 	bl	800da50 <rcutils_reset_error>
 8014504:	f640 0036 	movw	r0, #2102	@ 0x836
 8014508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450c:	2001      	movs	r0, #1
 801450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014512:	200b      	movs	r0, #11
 8014514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014518:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop

08014520 <rcl_action_take_goal_request>:
 8014520:	2800      	cmp	r0, #0
 8014522:	d039      	beq.n	8014598 <rcl_action_take_goal_request+0x78>
 8014524:	b570      	push	{r4, r5, r6, lr}
 8014526:	4604      	mov	r4, r0
 8014528:	6800      	ldr	r0, [r0, #0]
 801452a:	b380      	cbz	r0, 801458e <rcl_action_take_goal_request+0x6e>
 801452c:	460d      	mov	r5, r1
 801452e:	4616      	mov	r6, r2
 8014530:	f7fe fbd0 	bl	8012cd4 <rcl_service_is_valid>
 8014534:	b330      	cbz	r0, 8014584 <rcl_action_take_goal_request+0x64>
 8014536:	6820      	ldr	r0, [r4, #0]
 8014538:	3004      	adds	r0, #4
 801453a:	f7fe fbcb 	bl	8012cd4 <rcl_service_is_valid>
 801453e:	b308      	cbz	r0, 8014584 <rcl_action_take_goal_request+0x64>
 8014540:	6820      	ldr	r0, [r4, #0]
 8014542:	3008      	adds	r0, #8
 8014544:	f7fe fbc6 	bl	8012cd4 <rcl_service_is_valid>
 8014548:	b1e0      	cbz	r0, 8014584 <rcl_action_take_goal_request+0x64>
 801454a:	6820      	ldr	r0, [r4, #0]
 801454c:	300c      	adds	r0, #12
 801454e:	f7f8 f8db 	bl	800c708 <rcl_publisher_is_valid>
 8014552:	b1b8      	cbz	r0, 8014584 <rcl_action_take_goal_request+0x64>
 8014554:	6820      	ldr	r0, [r4, #0]
 8014556:	3010      	adds	r0, #16
 8014558:	f7f8 f8d6 	bl	800c708 <rcl_publisher_is_valid>
 801455c:	b190      	cbz	r0, 8014584 <rcl_action_take_goal_request+0x64>
 801455e:	b1cd      	cbz	r5, 8014594 <rcl_action_take_goal_request+0x74>
 8014560:	b1c6      	cbz	r6, 8014594 <rcl_action_take_goal_request+0x74>
 8014562:	6820      	ldr	r0, [r4, #0]
 8014564:	4632      	mov	r2, r6
 8014566:	4629      	mov	r1, r5
 8014568:	f7fe fb5c 	bl	8012c24 <rcl_take_request>
 801456c:	b148      	cbz	r0, 8014582 <rcl_action_take_goal_request+0x62>
 801456e:	280a      	cmp	r0, #10
 8014570:	d007      	beq.n	8014582 <rcl_action_take_goal_request+0x62>
 8014572:	f240 2259 	movw	r2, #601	@ 0x259
 8014576:	f640 0399 	movw	r3, #2201	@ 0x899
 801457a:	4290      	cmp	r0, r2
 801457c:	bf0c      	ite	eq
 801457e:	4618      	moveq	r0, r3
 8014580:	2001      	movne	r0, #1
 8014582:	bd70      	pop	{r4, r5, r6, pc}
 8014584:	f7f9 fa64 	bl	800da50 <rcutils_reset_error>
 8014588:	f640 0098 	movw	r0, #2200	@ 0x898
 801458c:	bd70      	pop	{r4, r5, r6, pc}
 801458e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014592:	bd70      	pop	{r4, r5, r6, pc}
 8014594:	200b      	movs	r0, #11
 8014596:	bd70      	pop	{r4, r5, r6, pc}
 8014598:	f640 0098 	movw	r0, #2200	@ 0x898
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop

080145a0 <rcl_action_send_goal_response>:
 80145a0:	b390      	cbz	r0, 8014608 <rcl_action_send_goal_response+0x68>
 80145a2:	b570      	push	{r4, r5, r6, lr}
 80145a4:	4604      	mov	r4, r0
 80145a6:	6800      	ldr	r0, [r0, #0]
 80145a8:	b348      	cbz	r0, 80145fe <rcl_action_send_goal_response+0x5e>
 80145aa:	460d      	mov	r5, r1
 80145ac:	4616      	mov	r6, r2
 80145ae:	f7fe fb91 	bl	8012cd4 <rcl_service_is_valid>
 80145b2:	b1f8      	cbz	r0, 80145f4 <rcl_action_send_goal_response+0x54>
 80145b4:	6820      	ldr	r0, [r4, #0]
 80145b6:	3004      	adds	r0, #4
 80145b8:	f7fe fb8c 	bl	8012cd4 <rcl_service_is_valid>
 80145bc:	b1d0      	cbz	r0, 80145f4 <rcl_action_send_goal_response+0x54>
 80145be:	6820      	ldr	r0, [r4, #0]
 80145c0:	3008      	adds	r0, #8
 80145c2:	f7fe fb87 	bl	8012cd4 <rcl_service_is_valid>
 80145c6:	b1a8      	cbz	r0, 80145f4 <rcl_action_send_goal_response+0x54>
 80145c8:	6820      	ldr	r0, [r4, #0]
 80145ca:	300c      	adds	r0, #12
 80145cc:	f7f8 f89c 	bl	800c708 <rcl_publisher_is_valid>
 80145d0:	b180      	cbz	r0, 80145f4 <rcl_action_send_goal_response+0x54>
 80145d2:	6820      	ldr	r0, [r4, #0]
 80145d4:	3010      	adds	r0, #16
 80145d6:	f7f8 f897 	bl	800c708 <rcl_publisher_is_valid>
 80145da:	b158      	cbz	r0, 80145f4 <rcl_action_send_goal_response+0x54>
 80145dc:	b195      	cbz	r5, 8014604 <rcl_action_send_goal_response+0x64>
 80145de:	b18e      	cbz	r6, 8014604 <rcl_action_send_goal_response+0x64>
 80145e0:	6820      	ldr	r0, [r4, #0]
 80145e2:	4632      	mov	r2, r6
 80145e4:	4629      	mov	r1, r5
 80145e6:	f7fe fb5d 	bl	8012ca4 <rcl_send_response>
 80145ea:	b110      	cbz	r0, 80145f2 <rcl_action_send_goal_response+0x52>
 80145ec:	2802      	cmp	r0, #2
 80145ee:	bf18      	it	ne
 80145f0:	2001      	movne	r0, #1
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	f7f9 fa2c 	bl	800da50 <rcutils_reset_error>
 80145f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
 80145fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8014602:	bd70      	pop	{r4, r5, r6, pc}
 8014604:	200b      	movs	r0, #11
 8014606:	bd70      	pop	{r4, r5, r6, pc}
 8014608:	f640 0098 	movw	r0, #2200	@ 0x898
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop

08014610 <rcl_action_take_result_request>:
 8014610:	2800      	cmp	r0, #0
 8014612:	d03a      	beq.n	801468a <rcl_action_take_result_request+0x7a>
 8014614:	b570      	push	{r4, r5, r6, lr}
 8014616:	4604      	mov	r4, r0
 8014618:	6800      	ldr	r0, [r0, #0]
 801461a:	b388      	cbz	r0, 8014680 <rcl_action_take_result_request+0x70>
 801461c:	460d      	mov	r5, r1
 801461e:	4616      	mov	r6, r2
 8014620:	f7fe fb58 	bl	8012cd4 <rcl_service_is_valid>
 8014624:	b338      	cbz	r0, 8014676 <rcl_action_take_result_request+0x66>
 8014626:	6820      	ldr	r0, [r4, #0]
 8014628:	3004      	adds	r0, #4
 801462a:	f7fe fb53 	bl	8012cd4 <rcl_service_is_valid>
 801462e:	b310      	cbz	r0, 8014676 <rcl_action_take_result_request+0x66>
 8014630:	6820      	ldr	r0, [r4, #0]
 8014632:	3008      	adds	r0, #8
 8014634:	f7fe fb4e 	bl	8012cd4 <rcl_service_is_valid>
 8014638:	b1e8      	cbz	r0, 8014676 <rcl_action_take_result_request+0x66>
 801463a:	6820      	ldr	r0, [r4, #0]
 801463c:	300c      	adds	r0, #12
 801463e:	f7f8 f863 	bl	800c708 <rcl_publisher_is_valid>
 8014642:	b1c0      	cbz	r0, 8014676 <rcl_action_take_result_request+0x66>
 8014644:	6820      	ldr	r0, [r4, #0]
 8014646:	3010      	adds	r0, #16
 8014648:	f7f8 f85e 	bl	800c708 <rcl_publisher_is_valid>
 801464c:	b198      	cbz	r0, 8014676 <rcl_action_take_result_request+0x66>
 801464e:	b1d5      	cbz	r5, 8014686 <rcl_action_take_result_request+0x76>
 8014650:	b1ce      	cbz	r6, 8014686 <rcl_action_take_result_request+0x76>
 8014652:	6820      	ldr	r0, [r4, #0]
 8014654:	4632      	mov	r2, r6
 8014656:	4629      	mov	r1, r5
 8014658:	3008      	adds	r0, #8
 801465a:	f7fe fae3 	bl	8012c24 <rcl_take_request>
 801465e:	b148      	cbz	r0, 8014674 <rcl_action_take_result_request+0x64>
 8014660:	280a      	cmp	r0, #10
 8014662:	d007      	beq.n	8014674 <rcl_action_take_result_request+0x64>
 8014664:	f240 2259 	movw	r2, #601	@ 0x259
 8014668:	f640 0399 	movw	r3, #2201	@ 0x899
 801466c:	4290      	cmp	r0, r2
 801466e:	bf0c      	ite	eq
 8014670:	4618      	moveq	r0, r3
 8014672:	2001      	movne	r0, #1
 8014674:	bd70      	pop	{r4, r5, r6, pc}
 8014676:	f7f9 f9eb 	bl	800da50 <rcutils_reset_error>
 801467a:	f640 0098 	movw	r0, #2200	@ 0x898
 801467e:	bd70      	pop	{r4, r5, r6, pc}
 8014680:	f640 0098 	movw	r0, #2200	@ 0x898
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	200b      	movs	r0, #11
 8014688:	bd70      	pop	{r4, r5, r6, pc}
 801468a:	f640 0098 	movw	r0, #2200	@ 0x898
 801468e:	4770      	bx	lr

08014690 <rcl_action_take_cancel_request>:
 8014690:	2800      	cmp	r0, #0
 8014692:	d03a      	beq.n	801470a <rcl_action_take_cancel_request+0x7a>
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	4604      	mov	r4, r0
 8014698:	6800      	ldr	r0, [r0, #0]
 801469a:	b388      	cbz	r0, 8014700 <rcl_action_take_cancel_request+0x70>
 801469c:	460d      	mov	r5, r1
 801469e:	4616      	mov	r6, r2
 80146a0:	f7fe fb18 	bl	8012cd4 <rcl_service_is_valid>
 80146a4:	b338      	cbz	r0, 80146f6 <rcl_action_take_cancel_request+0x66>
 80146a6:	6820      	ldr	r0, [r4, #0]
 80146a8:	3004      	adds	r0, #4
 80146aa:	f7fe fb13 	bl	8012cd4 <rcl_service_is_valid>
 80146ae:	b310      	cbz	r0, 80146f6 <rcl_action_take_cancel_request+0x66>
 80146b0:	6820      	ldr	r0, [r4, #0]
 80146b2:	3008      	adds	r0, #8
 80146b4:	f7fe fb0e 	bl	8012cd4 <rcl_service_is_valid>
 80146b8:	b1e8      	cbz	r0, 80146f6 <rcl_action_take_cancel_request+0x66>
 80146ba:	6820      	ldr	r0, [r4, #0]
 80146bc:	300c      	adds	r0, #12
 80146be:	f7f8 f823 	bl	800c708 <rcl_publisher_is_valid>
 80146c2:	b1c0      	cbz	r0, 80146f6 <rcl_action_take_cancel_request+0x66>
 80146c4:	6820      	ldr	r0, [r4, #0]
 80146c6:	3010      	adds	r0, #16
 80146c8:	f7f8 f81e 	bl	800c708 <rcl_publisher_is_valid>
 80146cc:	b198      	cbz	r0, 80146f6 <rcl_action_take_cancel_request+0x66>
 80146ce:	b1d5      	cbz	r5, 8014706 <rcl_action_take_cancel_request+0x76>
 80146d0:	b1ce      	cbz	r6, 8014706 <rcl_action_take_cancel_request+0x76>
 80146d2:	6820      	ldr	r0, [r4, #0]
 80146d4:	4632      	mov	r2, r6
 80146d6:	4629      	mov	r1, r5
 80146d8:	3004      	adds	r0, #4
 80146da:	f7fe faa3 	bl	8012c24 <rcl_take_request>
 80146de:	b148      	cbz	r0, 80146f4 <rcl_action_take_cancel_request+0x64>
 80146e0:	280a      	cmp	r0, #10
 80146e2:	d007      	beq.n	80146f4 <rcl_action_take_cancel_request+0x64>
 80146e4:	f240 2259 	movw	r2, #601	@ 0x259
 80146e8:	f640 0399 	movw	r3, #2201	@ 0x899
 80146ec:	4290      	cmp	r0, r2
 80146ee:	bf0c      	ite	eq
 80146f0:	4618      	moveq	r0, r3
 80146f2:	2001      	movne	r0, #1
 80146f4:	bd70      	pop	{r4, r5, r6, pc}
 80146f6:	f7f9 f9ab 	bl	800da50 <rcutils_reset_error>
 80146fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80146fe:	bd70      	pop	{r4, r5, r6, pc}
 8014700:	f640 0098 	movw	r0, #2200	@ 0x898
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	200b      	movs	r0, #11
 8014708:	bd70      	pop	{r4, r5, r6, pc}
 801470a:	f640 0098 	movw	r0, #2200	@ 0x898
 801470e:	4770      	bx	lr

08014710 <rcl_action_send_cancel_response>:
 8014710:	b398      	cbz	r0, 801477a <rcl_action_send_cancel_response+0x6a>
 8014712:	b570      	push	{r4, r5, r6, lr}
 8014714:	4604      	mov	r4, r0
 8014716:	6800      	ldr	r0, [r0, #0]
 8014718:	b350      	cbz	r0, 8014770 <rcl_action_send_cancel_response+0x60>
 801471a:	460d      	mov	r5, r1
 801471c:	4616      	mov	r6, r2
 801471e:	f7fe fad9 	bl	8012cd4 <rcl_service_is_valid>
 8014722:	b300      	cbz	r0, 8014766 <rcl_action_send_cancel_response+0x56>
 8014724:	6820      	ldr	r0, [r4, #0]
 8014726:	3004      	adds	r0, #4
 8014728:	f7fe fad4 	bl	8012cd4 <rcl_service_is_valid>
 801472c:	b1d8      	cbz	r0, 8014766 <rcl_action_send_cancel_response+0x56>
 801472e:	6820      	ldr	r0, [r4, #0]
 8014730:	3008      	adds	r0, #8
 8014732:	f7fe facf 	bl	8012cd4 <rcl_service_is_valid>
 8014736:	b1b0      	cbz	r0, 8014766 <rcl_action_send_cancel_response+0x56>
 8014738:	6820      	ldr	r0, [r4, #0]
 801473a:	300c      	adds	r0, #12
 801473c:	f7f7 ffe4 	bl	800c708 <rcl_publisher_is_valid>
 8014740:	b188      	cbz	r0, 8014766 <rcl_action_send_cancel_response+0x56>
 8014742:	6820      	ldr	r0, [r4, #0]
 8014744:	3010      	adds	r0, #16
 8014746:	f7f7 ffdf 	bl	800c708 <rcl_publisher_is_valid>
 801474a:	b160      	cbz	r0, 8014766 <rcl_action_send_cancel_response+0x56>
 801474c:	b19d      	cbz	r5, 8014776 <rcl_action_send_cancel_response+0x66>
 801474e:	b196      	cbz	r6, 8014776 <rcl_action_send_cancel_response+0x66>
 8014750:	6820      	ldr	r0, [r4, #0]
 8014752:	4632      	mov	r2, r6
 8014754:	4629      	mov	r1, r5
 8014756:	3004      	adds	r0, #4
 8014758:	f7fe faa4 	bl	8012ca4 <rcl_send_response>
 801475c:	b110      	cbz	r0, 8014764 <rcl_action_send_cancel_response+0x54>
 801475e:	2802      	cmp	r0, #2
 8014760:	bf18      	it	ne
 8014762:	2001      	movne	r0, #1
 8014764:	bd70      	pop	{r4, r5, r6, pc}
 8014766:	f7f9 f973 	bl	800da50 <rcutils_reset_error>
 801476a:	f640 0098 	movw	r0, #2200	@ 0x898
 801476e:	bd70      	pop	{r4, r5, r6, pc}
 8014770:	f640 0098 	movw	r0, #2200	@ 0x898
 8014774:	bd70      	pop	{r4, r5, r6, pc}
 8014776:	200b      	movs	r0, #11
 8014778:	bd70      	pop	{r4, r5, r6, pc}
 801477a:	f640 0098 	movw	r0, #2200	@ 0x898
 801477e:	4770      	bx	lr

08014780 <rcl_action_wait_set_add_action_server>:
 8014780:	2800      	cmp	r0, #0
 8014782:	d04d      	beq.n	8014820 <rcl_action_wait_set_add_action_server+0xa0>
 8014784:	b570      	push	{r4, r5, r6, lr}
 8014786:	460c      	mov	r4, r1
 8014788:	b159      	cbz	r1, 80147a2 <rcl_action_wait_set_add_action_server+0x22>
 801478a:	4605      	mov	r5, r0
 801478c:	6808      	ldr	r0, [r1, #0]
 801478e:	b140      	cbz	r0, 80147a2 <rcl_action_wait_set_add_action_server+0x22>
 8014790:	4616      	mov	r6, r2
 8014792:	f7fe fa9f 	bl	8012cd4 <rcl_service_is_valid>
 8014796:	b120      	cbz	r0, 80147a2 <rcl_action_wait_set_add_action_server+0x22>
 8014798:	6820      	ldr	r0, [r4, #0]
 801479a:	3004      	adds	r0, #4
 801479c:	f7fe fa9a 	bl	8012cd4 <rcl_service_is_valid>
 80147a0:	b910      	cbnz	r0, 80147a8 <rcl_action_wait_set_add_action_server+0x28>
 80147a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	6820      	ldr	r0, [r4, #0]
 80147aa:	3008      	adds	r0, #8
 80147ac:	f7fe fa92 	bl	8012cd4 <rcl_service_is_valid>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d0f6      	beq.n	80147a2 <rcl_action_wait_set_add_action_server+0x22>
 80147b4:	6820      	ldr	r0, [r4, #0]
 80147b6:	300c      	adds	r0, #12
 80147b8:	f7f7 ffbe 	bl	800c738 <rcl_publisher_is_valid_except_context>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d0f0      	beq.n	80147a2 <rcl_action_wait_set_add_action_server+0x22>
 80147c0:	6820      	ldr	r0, [r4, #0]
 80147c2:	3010      	adds	r0, #16
 80147c4:	f7f7 ffb8 	bl	800c738 <rcl_publisher_is_valid_except_context>
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d0ea      	beq.n	80147a2 <rcl_action_wait_set_add_action_server+0x22>
 80147cc:	6821      	ldr	r1, [r4, #0]
 80147ce:	4628      	mov	r0, r5
 80147d0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80147d4:	f7ff face 	bl	8013d74 <rcl_wait_set_add_service>
 80147d8:	2800      	cmp	r0, #0
 80147da:	d1e4      	bne.n	80147a6 <rcl_action_wait_set_add_action_server+0x26>
 80147dc:	6821      	ldr	r1, [r4, #0]
 80147de:	4628      	mov	r0, r5
 80147e0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80147e4:	3104      	adds	r1, #4
 80147e6:	f7ff fac5 	bl	8013d74 <rcl_wait_set_add_service>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d1db      	bne.n	80147a6 <rcl_action_wait_set_add_action_server+0x26>
 80147ee:	6821      	ldr	r1, [r4, #0]
 80147f0:	4628      	mov	r0, r5
 80147f2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80147f6:	3108      	adds	r1, #8
 80147f8:	f7ff fabc 	bl	8013d74 <rcl_wait_set_add_service>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d1d2      	bne.n	80147a6 <rcl_action_wait_set_add_action_server+0x26>
 8014800:	6821      	ldr	r1, [r4, #0]
 8014802:	4628      	mov	r0, r5
 8014804:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014808:	3114      	adds	r1, #20
 801480a:	f7ff fa57 	bl	8013cbc <rcl_wait_set_add_timer>
 801480e:	2800      	cmp	r0, #0
 8014810:	d1c9      	bne.n	80147a6 <rcl_action_wait_set_add_action_server+0x26>
 8014812:	2e00      	cmp	r6, #0
 8014814:	d0c7      	beq.n	80147a6 <rcl_action_wait_set_add_action_server+0x26>
 8014816:	6823      	ldr	r3, [r4, #0]
 8014818:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801481c:	6033      	str	r3, [r6, #0]
 801481e:	bd70      	pop	{r4, r5, r6, pc}
 8014820:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014824:	4770      	bx	lr
 8014826:	bf00      	nop

08014828 <rcl_action_server_wait_set_get_entities_ready>:
 8014828:	2800      	cmp	r0, #0
 801482a:	d05a      	beq.n	80148e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482e:	460c      	mov	r4, r1
 8014830:	b161      	cbz	r1, 801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014832:	4605      	mov	r5, r0
 8014834:	6808      	ldr	r0, [r1, #0]
 8014836:	b148      	cbz	r0, 801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014838:	4616      	mov	r6, r2
 801483a:	461f      	mov	r7, r3
 801483c:	f7fe fa4a 	bl	8012cd4 <rcl_service_is_valid>
 8014840:	b120      	cbz	r0, 801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014842:	6820      	ldr	r0, [r4, #0]
 8014844:	3004      	adds	r0, #4
 8014846:	f7fe fa45 	bl	8012cd4 <rcl_service_is_valid>
 801484a:	b910      	cbnz	r0, 8014852 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801484c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014852:	6820      	ldr	r0, [r4, #0]
 8014854:	3008      	adds	r0, #8
 8014856:	f7fe fa3d 	bl	8012cd4 <rcl_service_is_valid>
 801485a:	2800      	cmp	r0, #0
 801485c:	d0f6      	beq.n	801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801485e:	6820      	ldr	r0, [r4, #0]
 8014860:	300c      	adds	r0, #12
 8014862:	f7f7 ff69 	bl	800c738 <rcl_publisher_is_valid_except_context>
 8014866:	2800      	cmp	r0, #0
 8014868:	d0f0      	beq.n	801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801486a:	6820      	ldr	r0, [r4, #0]
 801486c:	3010      	adds	r0, #16
 801486e:	f7f7 ff63 	bl	800c738 <rcl_publisher_is_valid_except_context>
 8014872:	2800      	cmp	r0, #0
 8014874:	d0ea      	beq.n	801484c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014876:	b3be      	cbz	r6, 80148e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014878:	b3b7      	cbz	r7, 80148e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801487a:	9b06      	ldr	r3, [sp, #24]
 801487c:	b3a3      	cbz	r3, 80148e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801487e:	9b07      	ldr	r3, [sp, #28]
 8014880:	b393      	cbz	r3, 80148e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014882:	6821      	ldr	r1, [r4, #0]
 8014884:	692a      	ldr	r2, [r5, #16]
 8014886:	6a2c      	ldr	r4, [r5, #32]
 8014888:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801488c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014890:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014894:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014898:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801489c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80148a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80148a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80148a8:	1a64      	subs	r4, r4, r1
 80148aa:	fab4 f484 	clz	r4, r4
 80148ae:	0964      	lsrs	r4, r4, #5
 80148b0:	7034      	strb	r4, [r6, #0]
 80148b2:	1d0c      	adds	r4, r1, #4
 80148b4:	1b1b      	subs	r3, r3, r4
 80148b6:	fab3 f383 	clz	r3, r3
 80148ba:	095b      	lsrs	r3, r3, #5
 80148bc:	f101 0408 	add.w	r4, r1, #8
 80148c0:	703b      	strb	r3, [r7, #0]
 80148c2:	f101 0314 	add.w	r3, r1, #20
 80148c6:	1b01      	subs	r1, r0, r4
 80148c8:	1ad3      	subs	r3, r2, r3
 80148ca:	fab1 f181 	clz	r1, r1
 80148ce:	9a06      	ldr	r2, [sp, #24]
 80148d0:	0949      	lsrs	r1, r1, #5
 80148d2:	7011      	strb	r1, [r2, #0]
 80148d4:	fab3 f383 	clz	r3, r3
 80148d8:	9a07      	ldr	r2, [sp, #28]
 80148da:	095b      	lsrs	r3, r3, #5
 80148dc:	2000      	movs	r0, #0
 80148de:	7013      	strb	r3, [r2, #0]
 80148e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148e6:	4770      	bx	lr
 80148e8:	200b      	movs	r0, #11
 80148ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148ec <_execute_event_handler>:
 80148ec:	2002      	movs	r0, #2
 80148ee:	4770      	bx	lr

080148f0 <_cancel_goal_event_handler>:
 80148f0:	2003      	movs	r0, #3
 80148f2:	4770      	bx	lr

080148f4 <_succeed_event_handler>:
 80148f4:	2004      	movs	r0, #4
 80148f6:	4770      	bx	lr

080148f8 <_abort_event_handler>:
 80148f8:	2006      	movs	r0, #6
 80148fa:	4770      	bx	lr

080148fc <_canceled_event_handler>:
 80148fc:	2005      	movs	r0, #5
 80148fe:	4770      	bx	lr

08014900 <rcl_action_transition_goal_state>:
 8014900:	b2c2      	uxtb	r2, r0
 8014902:	2a06      	cmp	r2, #6
 8014904:	d80c      	bhi.n	8014920 <rcl_action_transition_goal_state+0x20>
 8014906:	2904      	cmp	r1, #4
 8014908:	d80a      	bhi.n	8014920 <rcl_action_transition_goal_state+0x20>
 801490a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801490e:	b410      	push	{r4}
 8014910:	1853      	adds	r3, r2, r1
 8014912:	4c06      	ldr	r4, [pc, #24]	@ (801492c <rcl_action_transition_goal_state+0x2c>)
 8014914:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014918:	b123      	cbz	r3, 8014924 <rcl_action_transition_goal_state+0x24>
 801491a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801491e:	4718      	bx	r3
 8014920:	2000      	movs	r0, #0
 8014922:	4770      	bx	lr
 8014924:	2000      	movs	r0, #0
 8014926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801492a:	4770      	bx	lr
 801492c:	0801b734 	.word	0x0801b734

08014930 <rcl_action_get_zero_initialized_cancel_response>:
 8014930:	b510      	push	{r4, lr}
 8014932:	4c07      	ldr	r4, [pc, #28]	@ (8014950 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014934:	4686      	mov	lr, r0
 8014936:	4684      	mov	ip, r0
 8014938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801493a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	f8cc 3000 	str.w	r3, [ip]
 801494a:	4670      	mov	r0, lr
 801494c:	bd10      	pop	{r4, pc}
 801494e:	bf00      	nop
 8014950:	0801b7c0 	.word	0x0801b7c0

08014954 <rclc_action_send_result_request>:
 8014954:	b1d0      	cbz	r0, 801498c <rclc_action_send_result_request+0x38>
 8014956:	b500      	push	{lr}
 8014958:	4684      	mov	ip, r0
 801495a:	b087      	sub	sp, #28
 801495c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014960:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014964:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014968:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801496c:	f10d 0e08 	add.w	lr, sp, #8
 8014970:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014974:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014978:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801497c:	a902      	add	r1, sp, #8
 801497e:	3010      	adds	r0, #16
 8014980:	f7ff fbda 	bl	8014138 <rcl_action_send_result_request>
 8014984:	b920      	cbnz	r0, 8014990 <rclc_action_send_result_request+0x3c>
 8014986:	b007      	add	sp, #28
 8014988:	f85d fb04 	ldr.w	pc, [sp], #4
 801498c:	200b      	movs	r0, #11
 801498e:	4770      	bx	lr
 8014990:	9001      	str	r0, [sp, #4]
 8014992:	f7f9 f85d 	bl	800da50 <rcutils_reset_error>
 8014996:	9801      	ldr	r0, [sp, #4]
 8014998:	b007      	add	sp, #28
 801499a:	f85d fb04 	ldr.w	pc, [sp], #4
 801499e:	bf00      	nop

080149a0 <rclc_action_take_goal_handle>:
 80149a0:	b160      	cbz	r0, 80149bc <rclc_action_take_goal_handle+0x1c>
 80149a2:	6883      	ldr	r3, [r0, #8]
 80149a4:	b143      	cbz	r3, 80149b8 <rclc_action_take_goal_handle+0x18>
 80149a6:	6819      	ldr	r1, [r3, #0]
 80149a8:	6081      	str	r1, [r0, #8]
 80149aa:	2200      	movs	r2, #0
 80149ac:	721a      	strb	r2, [r3, #8]
 80149ae:	68c1      	ldr	r1, [r0, #12]
 80149b0:	6019      	str	r1, [r3, #0]
 80149b2:	621a      	str	r2, [r3, #32]
 80149b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80149b6:	60c3      	str	r3, [r0, #12]
 80149b8:	4618      	mov	r0, r3
 80149ba:	4770      	bx	lr
 80149bc:	4603      	mov	r3, r0
 80149be:	e7fb      	b.n	80149b8 <rclc_action_take_goal_handle+0x18>

080149c0 <rclc_action_remove_used_goal_handle>:
 80149c0:	b180      	cbz	r0, 80149e4 <rclc_action_remove_used_goal_handle+0x24>
 80149c2:	b179      	cbz	r1, 80149e4 <rclc_action_remove_used_goal_handle+0x24>
 80149c4:	68c3      	ldr	r3, [r0, #12]
 80149c6:	4299      	cmp	r1, r3
 80149c8:	d00d      	beq.n	80149e6 <rclc_action_remove_used_goal_handle+0x26>
 80149ca:	b12b      	cbz	r3, 80149d8 <rclc_action_remove_used_goal_handle+0x18>
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	4291      	cmp	r1, r2
 80149d0:	d003      	beq.n	80149da <rclc_action_remove_used_goal_handle+0x1a>
 80149d2:	4613      	mov	r3, r2
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d1f9      	bne.n	80149cc <rclc_action_remove_used_goal_handle+0xc>
 80149d8:	4770      	bx	lr
 80149da:	680a      	ldr	r2, [r1, #0]
 80149dc:	601a      	str	r2, [r3, #0]
 80149de:	6883      	ldr	r3, [r0, #8]
 80149e0:	600b      	str	r3, [r1, #0]
 80149e2:	6081      	str	r1, [r0, #8]
 80149e4:	4770      	bx	lr
 80149e6:	680b      	ldr	r3, [r1, #0]
 80149e8:	60c3      	str	r3, [r0, #12]
 80149ea:	e7f8      	b.n	80149de <rclc_action_remove_used_goal_handle+0x1e>

080149ec <rclc_action_find_goal_handle_by_uuid>:
 80149ec:	b538      	push	{r3, r4, r5, lr}
 80149ee:	b180      	cbz	r0, 8014a12 <rclc_action_find_goal_handle_by_uuid+0x26>
 80149f0:	460d      	mov	r5, r1
 80149f2:	b181      	cbz	r1, 8014a16 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80149f4:	68c4      	ldr	r4, [r0, #12]
 80149f6:	b914      	cbnz	r4, 80149fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80149f8:	e009      	b.n	8014a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 80149fa:	6824      	ldr	r4, [r4, #0]
 80149fc:	b13c      	cbz	r4, 8014a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 80149fe:	f104 0009 	add.w	r0, r4, #9
 8014a02:	2210      	movs	r2, #16
 8014a04:	4629      	mov	r1, r5
 8014a06:	f003 fee3 	bl	80187d0 <memcmp>
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d1f5      	bne.n	80149fa <rclc_action_find_goal_handle_by_uuid+0xe>
 8014a0e:	4620      	mov	r0, r4
 8014a10:	bd38      	pop	{r3, r4, r5, pc}
 8014a12:	4604      	mov	r4, r0
 8014a14:	e7fb      	b.n	8014a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a16:	460c      	mov	r4, r1
 8014a18:	e7f9      	b.n	8014a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a1a:	bf00      	nop

08014a1c <rclc_action_find_first_handle_by_status>:
 8014a1c:	b140      	cbz	r0, 8014a30 <rclc_action_find_first_handle_by_status+0x14>
 8014a1e:	68c0      	ldr	r0, [r0, #12]
 8014a20:	b910      	cbnz	r0, 8014a28 <rclc_action_find_first_handle_by_status+0xc>
 8014a22:	e005      	b.n	8014a30 <rclc_action_find_first_handle_by_status+0x14>
 8014a24:	6800      	ldr	r0, [r0, #0]
 8014a26:	b118      	cbz	r0, 8014a30 <rclc_action_find_first_handle_by_status+0x14>
 8014a28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a2c:	428b      	cmp	r3, r1
 8014a2e:	d1f9      	bne.n	8014a24 <rclc_action_find_first_handle_by_status+0x8>
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop

08014a34 <rclc_action_find_first_terminated_handle>:
 8014a34:	b140      	cbz	r0, 8014a48 <rclc_action_find_first_terminated_handle+0x14>
 8014a36:	68c0      	ldr	r0, [r0, #12]
 8014a38:	b910      	cbnz	r0, 8014a40 <rclc_action_find_first_terminated_handle+0xc>
 8014a3a:	e005      	b.n	8014a48 <rclc_action_find_first_terminated_handle+0x14>
 8014a3c:	6800      	ldr	r0, [r0, #0]
 8014a3e:	b118      	cbz	r0, 8014a48 <rclc_action_find_first_terminated_handle+0x14>
 8014a40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a44:	2b03      	cmp	r3, #3
 8014a46:	ddf9      	ble.n	8014a3c <rclc_action_find_first_terminated_handle+0x8>
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop

08014a4c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014a4c:	b170      	cbz	r0, 8014a6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a4e:	68c0      	ldr	r0, [r0, #12]
 8014a50:	b160      	cbz	r0, 8014a6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a52:	b410      	push	{r4}
 8014a54:	e001      	b.n	8014a5a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014a56:	6800      	ldr	r0, [r0, #0]
 8014a58:	b128      	cbz	r0, 8014a66 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014a5a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014a5e:	4299      	cmp	r1, r3
 8014a60:	bf08      	it	eq
 8014a62:	4294      	cmpeq	r4, r2
 8014a64:	d1f7      	bne.n	8014a56 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a6a:	4770      	bx	lr
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop

08014a70 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014a70:	b170      	cbz	r0, 8014a90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014a72:	68c0      	ldr	r0, [r0, #12]
 8014a74:	b160      	cbz	r0, 8014a90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014a76:	b410      	push	{r4}
 8014a78:	e001      	b.n	8014a7e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014a7a:	6800      	ldr	r0, [r0, #0]
 8014a7c:	b128      	cbz	r0, 8014a8a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014a7e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014a82:	4299      	cmp	r1, r3
 8014a84:	bf08      	it	eq
 8014a86:	4294      	cmpeq	r4, r2
 8014a88:	d1f7      	bne.n	8014a7a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a8e:	4770      	bx	lr
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop

08014a94 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014a94:	b170      	cbz	r0, 8014ab4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014a96:	68c0      	ldr	r0, [r0, #12]
 8014a98:	b160      	cbz	r0, 8014ab4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014a9a:	b410      	push	{r4}
 8014a9c:	e001      	b.n	8014aa2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014a9e:	6800      	ldr	r0, [r0, #0]
 8014aa0:	b128      	cbz	r0, 8014aae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014aa2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014aa6:	4299      	cmp	r1, r3
 8014aa8:	bf08      	it	eq
 8014aaa:	4294      	cmpeq	r4, r2
 8014aac:	d1f7      	bne.n	8014a9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ab2:	4770      	bx	lr
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop

08014ab8 <rclc_action_find_first_handle_with_goal_response>:
 8014ab8:	b140      	cbz	r0, 8014acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014aba:	68c0      	ldr	r0, [r0, #12]
 8014abc:	b910      	cbnz	r0, 8014ac4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8014abe:	e005      	b.n	8014acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014ac0:	6800      	ldr	r0, [r0, #0]
 8014ac2:	b118      	cbz	r0, 8014acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014ac4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d0f9      	beq.n	8014ac0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop

08014ad0 <rclc_action_find_first_handle_with_result_response>:
 8014ad0:	b140      	cbz	r0, 8014ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014ad2:	68c0      	ldr	r0, [r0, #12]
 8014ad4:	b910      	cbnz	r0, 8014adc <rclc_action_find_first_handle_with_result_response+0xc>
 8014ad6:	e005      	b.n	8014ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014ad8:	6800      	ldr	r0, [r0, #0]
 8014ada:	b118      	cbz	r0, 8014ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014adc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d0f9      	beq.n	8014ad8 <rclc_action_find_first_handle_with_result_response+0x8>
 8014ae4:	4770      	bx	lr
 8014ae6:	bf00      	nop

08014ae8 <rclc_action_server_response_goal_request>:
 8014ae8:	b198      	cbz	r0, 8014b12 <rclc_action_server_response_goal_request+0x2a>
 8014aea:	b510      	push	{r4, lr}
 8014aec:	6844      	ldr	r4, [r0, #4]
 8014aee:	b086      	sub	sp, #24
 8014af0:	2200      	movs	r2, #0
 8014af2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014af6:	460b      	mov	r3, r1
 8014af8:	9205      	str	r2, [sp, #20]
 8014afa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014afe:	aa03      	add	r2, sp, #12
 8014b00:	f104 0010 	add.w	r0, r4, #16
 8014b04:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b08:	f7ff fd4a 	bl	80145a0 <rcl_action_send_goal_response>
 8014b0c:	b918      	cbnz	r0, 8014b16 <rclc_action_server_response_goal_request+0x2e>
 8014b0e:	b006      	add	sp, #24
 8014b10:	bd10      	pop	{r4, pc}
 8014b12:	200b      	movs	r0, #11
 8014b14:	4770      	bx	lr
 8014b16:	9001      	str	r0, [sp, #4]
 8014b18:	f7f8 ff9a 	bl	800da50 <rcutils_reset_error>
 8014b1c:	9801      	ldr	r0, [sp, #4]
 8014b1e:	b006      	add	sp, #24
 8014b20:	bd10      	pop	{r4, pc}
 8014b22:	bf00      	nop
 8014b24:	0000      	movs	r0, r0
	...

08014b28 <rclc_action_server_goal_cancel_accept>:
 8014b28:	b310      	cbz	r0, 8014b70 <rclc_action_server_goal_cancel_accept+0x48>
 8014b2a:	b510      	push	{r4, lr}
 8014b2c:	b090      	sub	sp, #64	@ 0x40
 8014b2e:	4604      	mov	r4, r0
 8014b30:	a806      	add	r0, sp, #24
 8014b32:	f7ff fefd 	bl	8014930 <rcl_action_get_zero_initialized_cancel_response>
 8014b36:	2300      	movs	r3, #0
 8014b38:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014b3c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014b40:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014b44:	f88d 3018 	strb.w	r3, [sp, #24]
 8014b48:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014b4c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014b50:	46ec      	mov	ip, sp
 8014b52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b56:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014b78 <rclc_action_server_goal_cancel_accept+0x50>
 8014b5a:	6860      	ldr	r0, [r4, #4]
 8014b5c:	aa06      	add	r2, sp, #24
 8014b5e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014b62:	3010      	adds	r0, #16
 8014b64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014b68:	f7ff fdd2 	bl	8014710 <rcl_action_send_cancel_response>
 8014b6c:	b010      	add	sp, #64	@ 0x40
 8014b6e:	bd10      	pop	{r4, pc}
 8014b70:	200b      	movs	r0, #11
 8014b72:	4770      	bx	lr
 8014b74:	f3af 8000 	nop.w
 8014b78:	00000001 	.word	0x00000001
 8014b7c:	00000001 	.word	0x00000001

08014b80 <rclc_action_server_goal_cancel_reject>:
 8014b80:	b082      	sub	sp, #8
 8014b82:	b530      	push	{r4, r5, lr}
 8014b84:	b08b      	sub	sp, #44	@ 0x2c
 8014b86:	ac0e      	add	r4, sp, #56	@ 0x38
 8014b88:	e884 000c 	stmia.w	r4, {r2, r3}
 8014b8c:	b188      	cbz	r0, 8014bb2 <rclc_action_server_goal_cancel_reject+0x32>
 8014b8e:	4604      	mov	r4, r0
 8014b90:	a801      	add	r0, sp, #4
 8014b92:	460d      	mov	r5, r1
 8014b94:	f7ff fecc 	bl	8014930 <rcl_action_get_zero_initialized_cancel_response>
 8014b98:	aa01      	add	r2, sp, #4
 8014b9a:	a90e      	add	r1, sp, #56	@ 0x38
 8014b9c:	f104 0010 	add.w	r0, r4, #16
 8014ba0:	f88d 5004 	strb.w	r5, [sp, #4]
 8014ba4:	f7ff fdb4 	bl	8014710 <rcl_action_send_cancel_response>
 8014ba8:	b00b      	add	sp, #44	@ 0x2c
 8014baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bae:	b002      	add	sp, #8
 8014bb0:	4770      	bx	lr
 8014bb2:	200b      	movs	r0, #11
 8014bb4:	b00b      	add	sp, #44	@ 0x2c
 8014bb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bba:	b002      	add	sp, #8
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop

08014bc0 <__atomic_load_8>:
 8014bc0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014bc4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014bc8:	4a15      	ldr	r2, [pc, #84]	@ (8014c20 <__atomic_load_8+0x60>)
 8014bca:	4b16      	ldr	r3, [pc, #88]	@ (8014c24 <__atomic_load_8+0x64>)
 8014bcc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014bd0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014bd4:	fb02 f101 	mul.w	r1, r2, r1
 8014bd8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8014be0:	091b      	lsrs	r3, r3, #4
 8014be2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014be6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014bea:	b4d0      	push	{r4, r6, r7}
 8014bec:	4c0e      	ldr	r4, [pc, #56]	@ (8014c28 <__atomic_load_8+0x68>)
 8014bee:	1ac9      	subs	r1, r1, r3
 8014bf0:	1862      	adds	r2, r4, r1
 8014bf2:	f04f 0c01 	mov.w	ip, #1
 8014bf6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014bfa:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014bfe:	2e00      	cmp	r6, #0
 8014c00:	d1f9      	bne.n	8014bf6 <__atomic_load_8+0x36>
 8014c02:	f3bf 8f5b 	dmb	ish
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d1f4      	bne.n	8014bf6 <__atomic_load_8+0x36>
 8014c0c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c10:	f3bf 8f5b 	dmb	ish
 8014c14:	5463      	strb	r3, [r4, r1]
 8014c16:	4630      	mov	r0, r6
 8014c18:	4639      	mov	r1, r7
 8014c1a:	bcd0      	pop	{r4, r6, r7}
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop
 8014c20:	27d4eb2d 	.word	0x27d4eb2d
 8014c24:	b21642c9 	.word	0xb21642c9
 8014c28:	20010e0c 	.word	0x20010e0c

08014c2c <__atomic_store_8>:
 8014c2c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014c30:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014c34:	b570      	push	{r4, r5, r6, lr}
 8014c36:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c3a:	4c14      	ldr	r4, [pc, #80]	@ (8014c8c <__atomic_store_8+0x60>)
 8014c3c:	4d14      	ldr	r5, [pc, #80]	@ (8014c90 <__atomic_store_8+0x64>)
 8014c3e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c42:	fb04 f101 	mul.w	r1, r4, r1
 8014c46:	4c13      	ldr	r4, [pc, #76]	@ (8014c94 <__atomic_store_8+0x68>)
 8014c48:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c4c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014c50:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014c54:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014c58:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014c5c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014c60:	eb05 0c0e 	add.w	ip, r5, lr
 8014c64:	f04f 0401 	mov.w	r4, #1
 8014c68:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014c6c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014c70:	2e00      	cmp	r6, #0
 8014c72:	d1f9      	bne.n	8014c68 <__atomic_store_8+0x3c>
 8014c74:	f3bf 8f5b 	dmb	ish
 8014c78:	b2c9      	uxtb	r1, r1
 8014c7a:	2900      	cmp	r1, #0
 8014c7c:	d1f4      	bne.n	8014c68 <__atomic_store_8+0x3c>
 8014c7e:	e9c0 2300 	strd	r2, r3, [r0]
 8014c82:	f3bf 8f5b 	dmb	ish
 8014c86:	f805 100e 	strb.w	r1, [r5, lr]
 8014c8a:	bd70      	pop	{r4, r5, r6, pc}
 8014c8c:	27d4eb2d 	.word	0x27d4eb2d
 8014c90:	20010e0c 	.word	0x20010e0c
 8014c94:	b21642c9 	.word	0xb21642c9

08014c98 <__atomic_exchange_8>:
 8014c98:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014c9c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014ca0:	4916      	ldr	r1, [pc, #88]	@ (8014cfc <__atomic_exchange_8+0x64>)
 8014ca2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014ca6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014caa:	fb01 fc0c 	mul.w	ip, r1, ip
 8014cae:	4914      	ldr	r1, [pc, #80]	@ (8014d00 <__atomic_exchange_8+0x68>)
 8014cb0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014cb4:	b570      	push	{r4, r5, r6, lr}
 8014cb6:	4605      	mov	r5, r0
 8014cb8:	fba1 010c 	umull	r0, r1, r1, ip
 8014cbc:	0909      	lsrs	r1, r1, #4
 8014cbe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014cc2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8014d04 <__atomic_exchange_8+0x6c>)
 8014cc8:	ebac 0c01 	sub.w	ip, ip, r1
 8014ccc:	eb06 010c 	add.w	r1, r6, ip
 8014cd0:	f04f 0e01 	mov.w	lr, #1
 8014cd4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014cd8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d1f9      	bne.n	8014cd4 <__atomic_exchange_8+0x3c>
 8014ce0:	f3bf 8f5b 	dmb	ish
 8014ce4:	b2e4      	uxtb	r4, r4
 8014ce6:	2c00      	cmp	r4, #0
 8014ce8:	d1f4      	bne.n	8014cd4 <__atomic_exchange_8+0x3c>
 8014cea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014cee:	e9c5 2300 	strd	r2, r3, [r5]
 8014cf2:	f3bf 8f5b 	dmb	ish
 8014cf6:	f806 400c 	strb.w	r4, [r6, ip]
 8014cfa:	bd70      	pop	{r4, r5, r6, pc}
 8014cfc:	27d4eb2d 	.word	0x27d4eb2d
 8014d00:	b21642c9 	.word	0xb21642c9
 8014d04:	20010e0c 	.word	0x20010e0c

08014d08 <rcutils_is_directory>:
 8014d08:	2000      	movs	r0, #0
 8014d0a:	4770      	bx	lr

08014d0c <rcutils_join_path>:
 8014d0c:	b082      	sub	sp, #8
 8014d0e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014d12:	2000      	movs	r0, #0
 8014d14:	b002      	add	sp, #8
 8014d16:	4770      	bx	lr

08014d18 <rcutils_to_native_path>:
 8014d18:	b084      	sub	sp, #16
 8014d1a:	a801      	add	r0, sp, #4
 8014d1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014d20:	b004      	add	sp, #16
 8014d22:	2000      	movs	r0, #0
 8014d24:	4770      	bx	lr
 8014d26:	bf00      	nop

08014d28 <rcutils_string_array_fini>:
 8014d28:	b320      	cbz	r0, 8014d74 <rcutils_string_array_fini+0x4c>
 8014d2a:	b570      	push	{r4, r5, r6, lr}
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	6840      	ldr	r0, [r0, #4]
 8014d30:	b1d8      	cbz	r0, 8014d6a <rcutils_string_array_fini+0x42>
 8014d32:	f104 0008 	add.w	r0, r4, #8
 8014d36:	f7f8 fe4f 	bl	800d9d8 <rcutils_allocator_is_valid>
 8014d3a:	b1b8      	cbz	r0, 8014d6c <rcutils_string_array_fini+0x44>
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	b1bb      	cbz	r3, 8014d70 <rcutils_string_array_fini+0x48>
 8014d40:	2500      	movs	r5, #0
 8014d42:	6860      	ldr	r0, [r4, #4]
 8014d44:	462e      	mov	r6, r5
 8014d46:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014d4a:	68e3      	ldr	r3, [r4, #12]
 8014d4c:	69a1      	ldr	r1, [r4, #24]
 8014d4e:	4798      	blx	r3
 8014d50:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014d54:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014d58:	3501      	adds	r5, #1
 8014d5a:	429d      	cmp	r5, r3
 8014d5c:	d3f3      	bcc.n	8014d46 <rcutils_string_array_fini+0x1e>
 8014d5e:	68e3      	ldr	r3, [r4, #12]
 8014d60:	69a1      	ldr	r1, [r4, #24]
 8014d62:	4798      	blx	r3
 8014d64:	2000      	movs	r0, #0
 8014d66:	e9c4 0000 	strd	r0, r0, [r4]
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	200b      	movs	r0, #11
 8014d6e:	bd70      	pop	{r4, r5, r6, pc}
 8014d70:	6860      	ldr	r0, [r4, #4]
 8014d72:	e7f4      	b.n	8014d5e <rcutils_string_array_fini+0x36>
 8014d74:	200b      	movs	r0, #11
 8014d76:	4770      	bx	lr

08014d78 <rcutils_get_zero_initialized_string_map>:
 8014d78:	4b01      	ldr	r3, [pc, #4]	@ (8014d80 <rcutils_get_zero_initialized_string_map+0x8>)
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	6018      	str	r0, [r3, #0]
 8014d7e:	4770      	bx	lr
 8014d80:	20010e24 	.word	0x20010e24

08014d84 <rcutils_string_map_reserve>:
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d05f      	beq.n	8014e48 <rcutils_string_map_reserve+0xc4>
 8014d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	6801      	ldr	r1, [r0, #0]
 8014d90:	b082      	sub	sp, #8
 8014d92:	4605      	mov	r5, r0
 8014d94:	b129      	cbz	r1, 8014da2 <rcutils_string_map_reserve+0x1e>
 8014d96:	68cb      	ldr	r3, [r1, #12]
 8014d98:	42a3      	cmp	r3, r4
 8014d9a:	d906      	bls.n	8014daa <rcutils_string_map_reserve+0x26>
 8014d9c:	461c      	mov	r4, r3
 8014d9e:	2900      	cmp	r1, #0
 8014da0:	d1f9      	bne.n	8014d96 <rcutils_string_map_reserve+0x12>
 8014da2:	201f      	movs	r0, #31
 8014da4:	b002      	add	sp, #8
 8014da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014daa:	688b      	ldr	r3, [r1, #8]
 8014dac:	42a3      	cmp	r3, r4
 8014dae:	d047      	beq.n	8014e40 <rcutils_string_map_reserve+0xbc>
 8014db0:	6a0e      	ldr	r6, [r1, #32]
 8014db2:	2c00      	cmp	r4, #0
 8014db4:	d034      	beq.n	8014e20 <rcutils_string_map_reserve+0x9c>
 8014db6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014dba:	d243      	bcs.n	8014e44 <rcutils_string_map_reserve+0xc0>
 8014dbc:	00a7      	lsls	r7, r4, #2
 8014dbe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014dc2:	6808      	ldr	r0, [r1, #0]
 8014dc4:	4632      	mov	r2, r6
 8014dc6:	4639      	mov	r1, r7
 8014dc8:	47c0      	blx	r8
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	d03a      	beq.n	8014e44 <rcutils_string_map_reserve+0xc0>
 8014dce:	682b      	ldr	r3, [r5, #0]
 8014dd0:	4632      	mov	r2, r6
 8014dd2:	6018      	str	r0, [r3, #0]
 8014dd4:	4639      	mov	r1, r7
 8014dd6:	6858      	ldr	r0, [r3, #4]
 8014dd8:	47c0      	blx	r8
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d032      	beq.n	8014e44 <rcutils_string_map_reserve+0xc0>
 8014dde:	682d      	ldr	r5, [r5, #0]
 8014de0:	68ab      	ldr	r3, [r5, #8]
 8014de2:	6068      	str	r0, [r5, #4]
 8014de4:	42a3      	cmp	r3, r4
 8014de6:	d226      	bcs.n	8014e36 <rcutils_string_map_reserve+0xb2>
 8014de8:	682a      	ldr	r2, [r5, #0]
 8014dea:	eb00 0c07 	add.w	ip, r0, r7
 8014dee:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014df2:	45e6      	cmp	lr, ip
 8014df4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014df8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014dfc:	d203      	bcs.n	8014e06 <rcutils_string_map_reserve+0x82>
 8014dfe:	eb02 0c07 	add.w	ip, r2, r7
 8014e02:	4566      	cmp	r6, ip
 8014e04:	d322      	bcc.n	8014e4c <rcutils_string_map_reserve+0xc8>
 8014e06:	1ae3      	subs	r3, r4, r3
 8014e08:	009a      	lsls	r2, r3, #2
 8014e0a:	4670      	mov	r0, lr
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	9201      	str	r2, [sp, #4]
 8014e10:	f003 fd08 	bl	8018824 <memset>
 8014e14:	9a01      	ldr	r2, [sp, #4]
 8014e16:	2100      	movs	r1, #0
 8014e18:	4630      	mov	r0, r6
 8014e1a:	f003 fd03 	bl	8018824 <memset>
 8014e1e:	e00a      	b.n	8014e36 <rcutils_string_map_reserve+0xb2>
 8014e20:	694f      	ldr	r7, [r1, #20]
 8014e22:	6808      	ldr	r0, [r1, #0]
 8014e24:	4631      	mov	r1, r6
 8014e26:	47b8      	blx	r7
 8014e28:	682b      	ldr	r3, [r5, #0]
 8014e2a:	4631      	mov	r1, r6
 8014e2c:	6858      	ldr	r0, [r3, #4]
 8014e2e:	601c      	str	r4, [r3, #0]
 8014e30:	47b8      	blx	r7
 8014e32:	682d      	ldr	r5, [r5, #0]
 8014e34:	606c      	str	r4, [r5, #4]
 8014e36:	2000      	movs	r0, #0
 8014e38:	60ac      	str	r4, [r5, #8]
 8014e3a:	b002      	add	sp, #8
 8014e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e40:	2000      	movs	r0, #0
 8014e42:	e7af      	b.n	8014da4 <rcutils_string_map_reserve+0x20>
 8014e44:	200a      	movs	r0, #10
 8014e46:	e7ad      	b.n	8014da4 <rcutils_string_map_reserve+0x20>
 8014e48:	200b      	movs	r0, #11
 8014e4a:	4770      	bx	lr
 8014e4c:	1f0b      	subs	r3, r1, #4
 8014e4e:	4418      	add	r0, r3
 8014e50:	4413      	add	r3, r2
 8014e52:	3a04      	subs	r2, #4
 8014e54:	4417      	add	r7, r2
 8014e56:	2200      	movs	r2, #0
 8014e58:	f843 2f04 	str.w	r2, [r3, #4]!
 8014e5c:	42bb      	cmp	r3, r7
 8014e5e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014e62:	d1f9      	bne.n	8014e58 <rcutils_string_map_reserve+0xd4>
 8014e64:	e7e7      	b.n	8014e36 <rcutils_string_map_reserve+0xb2>
 8014e66:	bf00      	nop

08014e68 <rcutils_string_map_init>:
 8014e68:	b082      	sub	sp, #8
 8014e6a:	b570      	push	{r4, r5, r6, lr}
 8014e6c:	ac04      	add	r4, sp, #16
 8014e6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e72:	b380      	cbz	r0, 8014ed6 <rcutils_string_map_init+0x6e>
 8014e74:	6806      	ldr	r6, [r0, #0]
 8014e76:	4604      	mov	r4, r0
 8014e78:	b12e      	cbz	r6, 8014e86 <rcutils_string_map_init+0x1e>
 8014e7a:	251e      	movs	r5, #30
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e82:	b002      	add	sp, #8
 8014e84:	4770      	bx	lr
 8014e86:	a804      	add	r0, sp, #16
 8014e88:	460d      	mov	r5, r1
 8014e8a:	f7f8 fda5 	bl	800d9d8 <rcutils_allocator_is_valid>
 8014e8e:	b310      	cbz	r0, 8014ed6 <rcutils_string_map_init+0x6e>
 8014e90:	9b04      	ldr	r3, [sp, #16]
 8014e92:	9908      	ldr	r1, [sp, #32]
 8014e94:	2024      	movs	r0, #36	@ 0x24
 8014e96:	4798      	blx	r3
 8014e98:	6020      	str	r0, [r4, #0]
 8014e9a:	b310      	cbz	r0, 8014ee2 <rcutils_string_map_init+0x7a>
 8014e9c:	f10d 0e10 	add.w	lr, sp, #16
 8014ea0:	e9c0 6600 	strd	r6, r6, [r0]
 8014ea4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014ea8:	f100 0c10 	add.w	ip, r0, #16
 8014eac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eb4:	f8de 3000 	ldr.w	r3, [lr]
 8014eb8:	f8cc 3000 	str.w	r3, [ip]
 8014ebc:	4629      	mov	r1, r5
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f7ff ff60 	bl	8014d84 <rcutils_string_map_reserve>
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d0d8      	beq.n	8014e7c <rcutils_string_map_init+0x14>
 8014eca:	9b05      	ldr	r3, [sp, #20]
 8014ecc:	9908      	ldr	r1, [sp, #32]
 8014ece:	6820      	ldr	r0, [r4, #0]
 8014ed0:	4798      	blx	r3
 8014ed2:	6026      	str	r6, [r4, #0]
 8014ed4:	e7d2      	b.n	8014e7c <rcutils_string_map_init+0x14>
 8014ed6:	250b      	movs	r5, #11
 8014ed8:	4628      	mov	r0, r5
 8014eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ede:	b002      	add	sp, #8
 8014ee0:	4770      	bx	lr
 8014ee2:	250a      	movs	r5, #10
 8014ee4:	e7ca      	b.n	8014e7c <rcutils_string_map_init+0x14>
 8014ee6:	bf00      	nop

08014ee8 <rcutils_string_map_fini>:
 8014ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eec:	b082      	sub	sp, #8
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	d03a      	beq.n	8014f68 <rcutils_string_map_fini+0x80>
 8014ef2:	6804      	ldr	r4, [r0, #0]
 8014ef4:	4606      	mov	r6, r0
 8014ef6:	2c00      	cmp	r4, #0
 8014ef8:	d032      	beq.n	8014f60 <rcutils_string_map_fini+0x78>
 8014efa:	68a3      	ldr	r3, [r4, #8]
 8014efc:	b32b      	cbz	r3, 8014f4a <rcutils_string_map_fini+0x62>
 8014efe:	2500      	movs	r5, #0
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	462f      	mov	r7, r5
 8014f04:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f08:	b1e0      	cbz	r0, 8014f44 <rcutils_string_map_fini+0x5c>
 8014f0a:	6a21      	ldr	r1, [r4, #32]
 8014f0c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014f10:	9101      	str	r1, [sp, #4]
 8014f12:	47c0      	blx	r8
 8014f14:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f18:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f1c:	9901      	ldr	r1, [sp, #4]
 8014f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f22:	47c0      	blx	r8
 8014f24:	68e3      	ldr	r3, [r4, #12]
 8014f26:	6862      	ldr	r2, [r4, #4]
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f2e:	60e3      	str	r3, [r4, #12]
 8014f30:	6834      	ldr	r4, [r6, #0]
 8014f32:	68a3      	ldr	r3, [r4, #8]
 8014f34:	3501      	adds	r5, #1
 8014f36:	429d      	cmp	r5, r3
 8014f38:	d207      	bcs.n	8014f4a <rcutils_string_map_fini+0x62>
 8014f3a:	6822      	ldr	r2, [r4, #0]
 8014f3c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d1e2      	bne.n	8014f0a <rcutils_string_map_fini+0x22>
 8014f44:	3501      	adds	r5, #1
 8014f46:	429d      	cmp	r5, r3
 8014f48:	d3dc      	bcc.n	8014f04 <rcutils_string_map_fini+0x1c>
 8014f4a:	2100      	movs	r1, #0
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ff ff19 	bl	8014d84 <rcutils_string_map_reserve>
 8014f52:	4604      	mov	r4, r0
 8014f54:	b920      	cbnz	r0, 8014f60 <rcutils_string_map_fini+0x78>
 8014f56:	6830      	ldr	r0, [r6, #0]
 8014f58:	6943      	ldr	r3, [r0, #20]
 8014f5a:	6a01      	ldr	r1, [r0, #32]
 8014f5c:	4798      	blx	r3
 8014f5e:	6034      	str	r4, [r6, #0]
 8014f60:	4620      	mov	r0, r4
 8014f62:	b002      	add	sp, #8
 8014f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f68:	240b      	movs	r4, #11
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	b002      	add	sp, #8
 8014f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f72:	bf00      	nop

08014f74 <rcutils_string_map_getn>:
 8014f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f78:	b300      	cbz	r0, 8014fbc <rcutils_string_map_getn+0x48>
 8014f7a:	6807      	ldr	r7, [r0, #0]
 8014f7c:	b1ff      	cbz	r7, 8014fbe <rcutils_string_map_getn+0x4a>
 8014f7e:	4688      	mov	r8, r1
 8014f80:	b1e1      	cbz	r1, 8014fbc <rcutils_string_map_getn+0x48>
 8014f82:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014f86:	683e      	ldr	r6, [r7, #0]
 8014f88:	f1ba 0f00 	cmp.w	sl, #0
 8014f8c:	d016      	beq.n	8014fbc <rcutils_string_map_getn+0x48>
 8014f8e:	4691      	mov	r9, r2
 8014f90:	3e04      	subs	r6, #4
 8014f92:	2400      	movs	r4, #0
 8014f94:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014f98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	3401      	adds	r4, #1
 8014fa0:	b155      	cbz	r5, 8014fb8 <rcutils_string_map_getn+0x44>
 8014fa2:	f7eb f93f 	bl	8000224 <strlen>
 8014fa6:	4548      	cmp	r0, r9
 8014fa8:	4602      	mov	r2, r0
 8014faa:	4629      	mov	r1, r5
 8014fac:	bf38      	it	cc
 8014fae:	464a      	movcc	r2, r9
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	f003 fc4c 	bl	801884e <strncmp>
 8014fb6:	b128      	cbz	r0, 8014fc4 <rcutils_string_map_getn+0x50>
 8014fb8:	45a2      	cmp	sl, r4
 8014fba:	d1eb      	bne.n	8014f94 <rcutils_string_map_getn+0x20>
 8014fbc:	2700      	movs	r7, #0
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f853 700b 	ldr.w	r7, [r3, fp]
 8014fca:	4638      	mov	r0, r7
 8014fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fd0 <rmw_get_zero_initialized_context>:
 8014fd0:	b510      	push	{r4, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	3010      	adds	r0, #16
 8014fd6:	f000 f80b 	bl	8014ff0 <rmw_get_zero_initialized_init_options>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	2000      	movs	r0, #0
 8014fde:	2100      	movs	r1, #0
 8014fe0:	e9c4 0100 	strd	r0, r1, [r4]
 8014fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014fe8:	60a3      	str	r3, [r4, #8]
 8014fea:	4620      	mov	r0, r4
 8014fec:	bd10      	pop	{r4, pc}
 8014fee:	bf00      	nop

08014ff0 <rmw_get_zero_initialized_init_options>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	2238      	movs	r2, #56	@ 0x38
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	f003 fc14 	bl	8018824 <memset>
 8014ffc:	f104 0010 	add.w	r0, r4, #16
 8015000:	f000 f806 	bl	8015010 <rmw_get_default_security_options>
 8015004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015008:	60e3      	str	r3, [r4, #12]
 801500a:	4620      	mov	r0, r4
 801500c:	bd10      	pop	{r4, pc}
 801500e:	bf00      	nop

08015010 <rmw_get_default_security_options>:
 8015010:	2200      	movs	r2, #0
 8015012:	7002      	strb	r2, [r0, #0]
 8015014:	6042      	str	r2, [r0, #4]
 8015016:	4770      	bx	lr

08015018 <rmw_time_equal>:
 8015018:	b4f0      	push	{r4, r5, r6, r7}
 801501a:	b084      	sub	sp, #16
 801501c:	ac04      	add	r4, sp, #16
 801501e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015022:	4603      	mov	r3, r0
 8015024:	4924      	ldr	r1, [pc, #144]	@ (80150b8 <rmw_time_equal+0xa0>)
 8015026:	9e03      	ldr	r6, [sp, #12]
 8015028:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801502c:	2202      	movs	r2, #2
 801502e:	4299      	cmp	r1, r3
 8015030:	41aa      	sbcs	r2, r5
 8015032:	d330      	bcc.n	8015096 <rmw_time_equal+0x7e>
 8015034:	4c21      	ldr	r4, [pc, #132]	@ (80150bc <rmw_time_equal+0xa4>)
 8015036:	fba3 3204 	umull	r3, r2, r3, r4
 801503a:	fb04 2205 	mla	r2, r4, r5, r2
 801503e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015042:	43dd      	mvns	r5, r3
 8015044:	1a8c      	subs	r4, r1, r2
 8015046:	4285      	cmp	r5, r0
 8015048:	41b4      	sbcs	r4, r6
 801504a:	d332      	bcc.n	80150b2 <rmw_time_equal+0x9a>
 801504c:	eb10 0c03 	adds.w	ip, r0, r3
 8015050:	eb42 0106 	adc.w	r1, r2, r6
 8015054:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015058:	4817      	ldr	r0, [pc, #92]	@ (80150b8 <rmw_time_equal+0xa0>)
 801505a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801505c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801505e:	2202      	movs	r2, #2
 8015060:	4298      	cmp	r0, r3
 8015062:	41b2      	sbcs	r2, r6
 8015064:	d31c      	bcc.n	80150a0 <rmw_time_equal+0x88>
 8015066:	4c15      	ldr	r4, [pc, #84]	@ (80150bc <rmw_time_equal+0xa4>)
 8015068:	fba3 3204 	umull	r3, r2, r3, r4
 801506c:	fb04 2206 	mla	r2, r4, r6, r2
 8015070:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015074:	43de      	mvns	r6, r3
 8015076:	1a84      	subs	r4, r0, r2
 8015078:	42ae      	cmp	r6, r5
 801507a:	41bc      	sbcs	r4, r7
 801507c:	d315      	bcc.n	80150aa <rmw_time_equal+0x92>
 801507e:	195b      	adds	r3, r3, r5
 8015080:	eb42 0207 	adc.w	r2, r2, r7
 8015084:	428a      	cmp	r2, r1
 8015086:	bf08      	it	eq
 8015088:	4563      	cmpeq	r3, ip
 801508a:	bf0c      	ite	eq
 801508c:	2001      	moveq	r0, #1
 801508e:	2000      	movne	r0, #0
 8015090:	b004      	add	sp, #16
 8015092:	bcf0      	pop	{r4, r5, r6, r7}
 8015094:	4770      	bx	lr
 8015096:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801509a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801509e:	e7d9      	b.n	8015054 <rmw_time_equal+0x3c>
 80150a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80150a8:	e7ec      	b.n	8015084 <rmw_time_equal+0x6c>
 80150aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150ae:	4602      	mov	r2, r0
 80150b0:	e7e8      	b.n	8015084 <rmw_time_equal+0x6c>
 80150b2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80150b6:	e7cd      	b.n	8015054 <rmw_time_equal+0x3c>
 80150b8:	25c17d04 	.word	0x25c17d04
 80150bc:	3b9aca00 	.word	0x3b9aca00

080150c0 <rmw_time_total_nsec>:
 80150c0:	b470      	push	{r4, r5, r6}
 80150c2:	b085      	sub	sp, #20
 80150c4:	ac04      	add	r4, sp, #16
 80150c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80150ca:	4603      	mov	r3, r0
 80150cc:	4912      	ldr	r1, [pc, #72]	@ (8015118 <rmw_time_total_nsec+0x58>)
 80150ce:	9e03      	ldr	r6, [sp, #12]
 80150d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80150d4:	2202      	movs	r2, #2
 80150d6:	4299      	cmp	r1, r3
 80150d8:	41aa      	sbcs	r2, r5
 80150da:	d311      	bcc.n	8015100 <rmw_time_total_nsec+0x40>
 80150dc:	4c0f      	ldr	r4, [pc, #60]	@ (801511c <rmw_time_total_nsec+0x5c>)
 80150de:	fba3 3204 	umull	r3, r2, r3, r4
 80150e2:	fb04 2205 	mla	r2, r4, r5, r2
 80150e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150ea:	43dd      	mvns	r5, r3
 80150ec:	1a8c      	subs	r4, r1, r2
 80150ee:	4285      	cmp	r5, r0
 80150f0:	41b4      	sbcs	r4, r6
 80150f2:	d30c      	bcc.n	801510e <rmw_time_total_nsec+0x4e>
 80150f4:	1818      	adds	r0, r3, r0
 80150f6:	eb42 0106 	adc.w	r1, r2, r6
 80150fa:	b005      	add	sp, #20
 80150fc:	bc70      	pop	{r4, r5, r6}
 80150fe:	4770      	bx	lr
 8015100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015108:	b005      	add	sp, #20
 801510a:	bc70      	pop	{r4, r5, r6}
 801510c:	4770      	bx	lr
 801510e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015112:	b005      	add	sp, #20
 8015114:	bc70      	pop	{r4, r5, r6}
 8015116:	4770      	bx	lr
 8015118:	25c17d04 	.word	0x25c17d04
 801511c:	3b9aca00 	.word	0x3b9aca00

08015120 <rmw_validate_full_topic_name>:
 8015120:	2800      	cmp	r0, #0
 8015122:	d057      	beq.n	80151d4 <rmw_validate_full_topic_name+0xb4>
 8015124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015128:	460d      	mov	r5, r1
 801512a:	2900      	cmp	r1, #0
 801512c:	d054      	beq.n	80151d8 <rmw_validate_full_topic_name+0xb8>
 801512e:	4616      	mov	r6, r2
 8015130:	4604      	mov	r4, r0
 8015132:	f7eb f877 	bl	8000224 <strlen>
 8015136:	b148      	cbz	r0, 801514c <rmw_validate_full_topic_name+0x2c>
 8015138:	7823      	ldrb	r3, [r4, #0]
 801513a:	2b2f      	cmp	r3, #47	@ 0x2f
 801513c:	d00d      	beq.n	801515a <rmw_validate_full_topic_name+0x3a>
 801513e:	2302      	movs	r3, #2
 8015140:	602b      	str	r3, [r5, #0]
 8015142:	b13e      	cbz	r6, 8015154 <rmw_validate_full_topic_name+0x34>
 8015144:	2000      	movs	r0, #0
 8015146:	6030      	str	r0, [r6, #0]
 8015148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801514c:	2301      	movs	r3, #1
 801514e:	602b      	str	r3, [r5, #0]
 8015150:	2e00      	cmp	r6, #0
 8015152:	d1f7      	bne.n	8015144 <rmw_validate_full_topic_name+0x24>
 8015154:	2000      	movs	r0, #0
 8015156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801515a:	1e43      	subs	r3, r0, #1
 801515c:	5ce2      	ldrb	r2, [r4, r3]
 801515e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015160:	d03c      	beq.n	80151dc <rmw_validate_full_topic_name+0xbc>
 8015162:	1e63      	subs	r3, r4, #1
 8015164:	eb03 0800 	add.w	r8, r3, r0
 8015168:	f1c4 0e01 	rsb	lr, r4, #1
 801516c:	eb0e 0703 	add.w	r7, lr, r3
 8015170:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015174:	f021 0220 	bic.w	r2, r1, #32
 8015178:	3a41      	subs	r2, #65	@ 0x41
 801517a:	2a19      	cmp	r2, #25
 801517c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015180:	d90b      	bls.n	801519a <rmw_validate_full_topic_name+0x7a>
 8015182:	295f      	cmp	r1, #95	@ 0x5f
 8015184:	d009      	beq.n	801519a <rmw_validate_full_topic_name+0x7a>
 8015186:	f1bc 0f0a 	cmp.w	ip, #10
 801518a:	d906      	bls.n	801519a <rmw_validate_full_topic_name+0x7a>
 801518c:	2304      	movs	r3, #4
 801518e:	602b      	str	r3, [r5, #0]
 8015190:	2e00      	cmp	r6, #0
 8015192:	d0df      	beq.n	8015154 <rmw_validate_full_topic_name+0x34>
 8015194:	6037      	str	r7, [r6, #0]
 8015196:	2000      	movs	r0, #0
 8015198:	e7d6      	b.n	8015148 <rmw_validate_full_topic_name+0x28>
 801519a:	4543      	cmp	r3, r8
 801519c:	d1e6      	bne.n	801516c <rmw_validate_full_topic_name+0x4c>
 801519e:	4f1a      	ldr	r7, [pc, #104]	@ (8015208 <rmw_validate_full_topic_name+0xe8>)
 80151a0:	2301      	movs	r3, #1
 80151a2:	e004      	b.n	80151ae <rmw_validate_full_topic_name+0x8e>
 80151a4:	4298      	cmp	r0, r3
 80151a6:	f104 0401 	add.w	r4, r4, #1
 80151aa:	d91c      	bls.n	80151e6 <rmw_validate_full_topic_name+0xc6>
 80151ac:	4613      	mov	r3, r2
 80151ae:	4298      	cmp	r0, r3
 80151b0:	f103 0201 	add.w	r2, r3, #1
 80151b4:	d0f6      	beq.n	80151a4 <rmw_validate_full_topic_name+0x84>
 80151b6:	7821      	ldrb	r1, [r4, #0]
 80151b8:	292f      	cmp	r1, #47	@ 0x2f
 80151ba:	d1f3      	bne.n	80151a4 <rmw_validate_full_topic_name+0x84>
 80151bc:	7861      	ldrb	r1, [r4, #1]
 80151be:	292f      	cmp	r1, #47	@ 0x2f
 80151c0:	d01c      	beq.n	80151fc <rmw_validate_full_topic_name+0xdc>
 80151c2:	5dc9      	ldrb	r1, [r1, r7]
 80151c4:	0749      	lsls	r1, r1, #29
 80151c6:	d5ed      	bpl.n	80151a4 <rmw_validate_full_topic_name+0x84>
 80151c8:	2206      	movs	r2, #6
 80151ca:	602a      	str	r2, [r5, #0]
 80151cc:	2e00      	cmp	r6, #0
 80151ce:	d0c1      	beq.n	8015154 <rmw_validate_full_topic_name+0x34>
 80151d0:	6033      	str	r3, [r6, #0]
 80151d2:	e7bf      	b.n	8015154 <rmw_validate_full_topic_name+0x34>
 80151d4:	200b      	movs	r0, #11
 80151d6:	4770      	bx	lr
 80151d8:	200b      	movs	r0, #11
 80151da:	e7b5      	b.n	8015148 <rmw_validate_full_topic_name+0x28>
 80151dc:	2203      	movs	r2, #3
 80151de:	602a      	str	r2, [r5, #0]
 80151e0:	2e00      	cmp	r6, #0
 80151e2:	d1f5      	bne.n	80151d0 <rmw_validate_full_topic_name+0xb0>
 80151e4:	e7b6      	b.n	8015154 <rmw_validate_full_topic_name+0x34>
 80151e6:	28f7      	cmp	r0, #247	@ 0xf7
 80151e8:	d802      	bhi.n	80151f0 <rmw_validate_full_topic_name+0xd0>
 80151ea:	2000      	movs	r0, #0
 80151ec:	6028      	str	r0, [r5, #0]
 80151ee:	e7ab      	b.n	8015148 <rmw_validate_full_topic_name+0x28>
 80151f0:	2307      	movs	r3, #7
 80151f2:	602b      	str	r3, [r5, #0]
 80151f4:	2e00      	cmp	r6, #0
 80151f6:	d0ad      	beq.n	8015154 <rmw_validate_full_topic_name+0x34>
 80151f8:	23f6      	movs	r3, #246	@ 0xf6
 80151fa:	e7e9      	b.n	80151d0 <rmw_validate_full_topic_name+0xb0>
 80151fc:	2205      	movs	r2, #5
 80151fe:	602a      	str	r2, [r5, #0]
 8015200:	2e00      	cmp	r6, #0
 8015202:	d1e5      	bne.n	80151d0 <rmw_validate_full_topic_name+0xb0>
 8015204:	e7a6      	b.n	8015154 <rmw_validate_full_topic_name+0x34>
 8015206:	bf00      	nop
 8015208:	0801baa4 	.word	0x0801baa4

0801520c <get_memory>:
 801520c:	4603      	mov	r3, r0
 801520e:	6840      	ldr	r0, [r0, #4]
 8015210:	b158      	cbz	r0, 801522a <get_memory+0x1e>
 8015212:	6842      	ldr	r2, [r0, #4]
 8015214:	605a      	str	r2, [r3, #4]
 8015216:	b10a      	cbz	r2, 801521c <get_memory+0x10>
 8015218:	2100      	movs	r1, #0
 801521a:	6011      	str	r1, [r2, #0]
 801521c:	681a      	ldr	r2, [r3, #0]
 801521e:	6042      	str	r2, [r0, #4]
 8015220:	b102      	cbz	r2, 8015224 <get_memory+0x18>
 8015222:	6010      	str	r0, [r2, #0]
 8015224:	2200      	movs	r2, #0
 8015226:	6002      	str	r2, [r0, #0]
 8015228:	6018      	str	r0, [r3, #0]
 801522a:	4770      	bx	lr

0801522c <put_memory>:
 801522c:	680b      	ldr	r3, [r1, #0]
 801522e:	b10b      	cbz	r3, 8015234 <put_memory+0x8>
 8015230:	684a      	ldr	r2, [r1, #4]
 8015232:	605a      	str	r2, [r3, #4]
 8015234:	684a      	ldr	r2, [r1, #4]
 8015236:	b102      	cbz	r2, 801523a <put_memory+0xe>
 8015238:	6013      	str	r3, [r2, #0]
 801523a:	6803      	ldr	r3, [r0, #0]
 801523c:	428b      	cmp	r3, r1
 801523e:	6843      	ldr	r3, [r0, #4]
 8015240:	bf08      	it	eq
 8015242:	6002      	streq	r2, [r0, #0]
 8015244:	604b      	str	r3, [r1, #4]
 8015246:	b103      	cbz	r3, 801524a <put_memory+0x1e>
 8015248:	6019      	str	r1, [r3, #0]
 801524a:	2300      	movs	r3, #0
 801524c:	600b      	str	r3, [r1, #0]
 801524e:	6041      	str	r1, [r0, #4]
 8015250:	4770      	bx	lr
 8015252:	bf00      	nop

08015254 <rmw_destroy_client>:
 8015254:	b570      	push	{r4, r5, r6, lr}
 8015256:	b128      	cbz	r0, 8015264 <rmw_destroy_client+0x10>
 8015258:	4604      	mov	r4, r0
 801525a:	6800      	ldr	r0, [r0, #0]
 801525c:	460d      	mov	r5, r1
 801525e:	f7f9 fec1 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 8015262:	b910      	cbnz	r0, 801526a <rmw_destroy_client+0x16>
 8015264:	2401      	movs	r4, #1
 8015266:	4620      	mov	r0, r4
 8015268:	bd70      	pop	{r4, r5, r6, pc}
 801526a:	6863      	ldr	r3, [r4, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d0f9      	beq.n	8015264 <rmw_destroy_client+0x10>
 8015270:	2d00      	cmp	r5, #0
 8015272:	d0f7      	beq.n	8015264 <rmw_destroy_client+0x10>
 8015274:	6828      	ldr	r0, [r5, #0]
 8015276:	f7f9 feb5 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 801527a:	2800      	cmp	r0, #0
 801527c:	d0f2      	beq.n	8015264 <rmw_destroy_client+0x10>
 801527e:	686e      	ldr	r6, [r5, #4]
 8015280:	2e00      	cmp	r6, #0
 8015282:	d0ef      	beq.n	8015264 <rmw_destroy_client+0x10>
 8015284:	6864      	ldr	r4, [r4, #4]
 8015286:	6932      	ldr	r2, [r6, #16]
 8015288:	6920      	ldr	r0, [r4, #16]
 801528a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801528e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015292:	6819      	ldr	r1, [r3, #0]
 8015294:	f7fa f990 	bl	800f5b8 <uxr_buffer_cancel_data>
 8015298:	4602      	mov	r2, r0
 801529a:	6920      	ldr	r0, [r4, #16]
 801529c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80152a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80152a4:	f7f9 fe1e 	bl	800eee4 <run_xrce_session>
 80152a8:	6920      	ldr	r0, [r4, #16]
 80152aa:	6932      	ldr	r2, [r6, #16]
 80152ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80152b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80152b4:	6819      	ldr	r1, [r3, #0]
 80152b6:	f7f9 ff13 	bl	800f0e0 <uxr_buffer_delete_entity>
 80152ba:	4602      	mov	r2, r0
 80152bc:	6920      	ldr	r0, [r4, #16]
 80152be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80152c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80152c6:	f7f9 fe0d 	bl	800eee4 <run_xrce_session>
 80152ca:	2800      	cmp	r0, #0
 80152cc:	4628      	mov	r0, r5
 80152ce:	bf14      	ite	ne
 80152d0:	2400      	movne	r4, #0
 80152d2:	2402      	moveq	r4, #2
 80152d4:	f7f9 fcee 	bl	800ecb4 <rmw_uxrce_fini_client_memory>
 80152d8:	e7c5      	b.n	8015266 <rmw_destroy_client+0x12>
 80152da:	bf00      	nop

080152dc <rmw_get_implementation_identifier>:
 80152dc:	4b01      	ldr	r3, [pc, #4]	@ (80152e4 <rmw_get_implementation_identifier+0x8>)
 80152de:	6818      	ldr	r0, [r3, #0]
 80152e0:	4770      	bx	lr
 80152e2:	bf00      	nop
 80152e4:	0801b7fc 	.word	0x0801b7fc

080152e8 <rmw_create_guard_condition>:
 80152e8:	b538      	push	{r3, r4, r5, lr}
 80152ea:	4605      	mov	r5, r0
 80152ec:	4807      	ldr	r0, [pc, #28]	@ (801530c <rmw_create_guard_condition+0x24>)
 80152ee:	f7ff ff8d 	bl	801520c <get_memory>
 80152f2:	b148      	cbz	r0, 8015308 <rmw_create_guard_condition+0x20>
 80152f4:	6884      	ldr	r4, [r0, #8]
 80152f6:	2300      	movs	r3, #0
 80152f8:	7423      	strb	r3, [r4, #16]
 80152fa:	61e5      	str	r5, [r4, #28]
 80152fc:	f7ff ffee 	bl	80152dc <rmw_get_implementation_identifier>
 8015300:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015304:	f104 0014 	add.w	r0, r4, #20
 8015308:	bd38      	pop	{r3, r4, r5, pc}
 801530a:	bf00      	nop
 801530c:	20010d54 	.word	0x20010d54

08015310 <rmw_destroy_guard_condition>:
 8015310:	b508      	push	{r3, lr}
 8015312:	4b08      	ldr	r3, [pc, #32]	@ (8015334 <rmw_destroy_guard_condition+0x24>)
 8015314:	6819      	ldr	r1, [r3, #0]
 8015316:	b911      	cbnz	r1, 801531e <rmw_destroy_guard_condition+0xe>
 8015318:	e00a      	b.n	8015330 <rmw_destroy_guard_condition+0x20>
 801531a:	6849      	ldr	r1, [r1, #4]
 801531c:	b141      	cbz	r1, 8015330 <rmw_destroy_guard_condition+0x20>
 801531e:	688b      	ldr	r3, [r1, #8]
 8015320:	3314      	adds	r3, #20
 8015322:	4298      	cmp	r0, r3
 8015324:	d1f9      	bne.n	801531a <rmw_destroy_guard_condition+0xa>
 8015326:	4803      	ldr	r0, [pc, #12]	@ (8015334 <rmw_destroy_guard_condition+0x24>)
 8015328:	f7ff ff80 	bl	801522c <put_memory>
 801532c:	2000      	movs	r0, #0
 801532e:	bd08      	pop	{r3, pc}
 8015330:	2001      	movs	r0, #1
 8015332:	bd08      	pop	{r3, pc}
 8015334:	20010d54 	.word	0x20010d54

08015338 <rmw_init_options_init>:
 8015338:	b084      	sub	sp, #16
 801533a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801533c:	b083      	sub	sp, #12
 801533e:	ad09      	add	r5, sp, #36	@ 0x24
 8015340:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015344:	b130      	cbz	r0, 8015354 <rmw_init_options_init+0x1c>
 8015346:	4604      	mov	r4, r0
 8015348:	4628      	mov	r0, r5
 801534a:	f7f8 fb45 	bl	800d9d8 <rcutils_allocator_is_valid>
 801534e:	b108      	cbz	r0, 8015354 <rmw_init_options_init+0x1c>
 8015350:	68a6      	ldr	r6, [r4, #8]
 8015352:	b12e      	cbz	r6, 8015360 <rmw_init_options_init+0x28>
 8015354:	200b      	movs	r0, #11
 8015356:	b003      	add	sp, #12
 8015358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801535c:	b004      	add	sp, #16
 801535e:	4770      	bx	lr
 8015360:	2200      	movs	r2, #0
 8015362:	2300      	movs	r3, #0
 8015364:	e9c4 2300 	strd	r2, r3, [r4]
 8015368:	4b22      	ldr	r3, [pc, #136]	@ (80153f4 <rmw_init_options_init+0xbc>)
 801536a:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015404 <rmw_init_options_init+0xcc>
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	60a3      	str	r3, [r4, #8]
 8015372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015374:	f104 0c20 	add.w	ip, r4, #32
 8015378:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801537c:	466f      	mov	r7, sp
 801537e:	682b      	ldr	r3, [r5, #0]
 8015380:	f8cc 3000 	str.w	r3, [ip]
 8015384:	4638      	mov	r0, r7
 8015386:	f8c4 e01c 	str.w	lr, [r4, #28]
 801538a:	60e6      	str	r6, [r4, #12]
 801538c:	f7ff fe40 	bl	8015010 <rmw_get_default_security_options>
 8015390:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015394:	f104 0310 	add.w	r3, r4, #16
 8015398:	e883 0003 	stmia.w	r3, {r0, r1}
 801539c:	2203      	movs	r2, #3
 801539e:	4816      	ldr	r0, [pc, #88]	@ (80153f8 <rmw_init_options_init+0xc0>)
 80153a0:	4916      	ldr	r1, [pc, #88]	@ (80153fc <rmw_init_options_init+0xc4>)
 80153a2:	7626      	strb	r6, [r4, #24]
 80153a4:	f7f9 fbc6 	bl	800eb34 <rmw_uxrce_init_init_options_impl_memory>
 80153a8:	4813      	ldr	r0, [pc, #76]	@ (80153f8 <rmw_init_options_init+0xc0>)
 80153aa:	f7ff ff2f 	bl	801520c <get_memory>
 80153ae:	b1f0      	cbz	r0, 80153ee <rmw_init_options_init+0xb6>
 80153b0:	4a13      	ldr	r2, [pc, #76]	@ (8015400 <rmw_init_options_init+0xc8>)
 80153b2:	6883      	ldr	r3, [r0, #8]
 80153b4:	6851      	ldr	r1, [r2, #4]
 80153b6:	7810      	ldrb	r0, [r2, #0]
 80153b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80153ba:	7418      	strb	r0, [r3, #16]
 80153bc:	6159      	str	r1, [r3, #20]
 80153be:	68d1      	ldr	r1, [r2, #12]
 80153c0:	61d9      	str	r1, [r3, #28]
 80153c2:	6911      	ldr	r1, [r2, #16]
 80153c4:	6219      	str	r1, [r3, #32]
 80153c6:	6951      	ldr	r1, [r2, #20]
 80153c8:	6892      	ldr	r2, [r2, #8]
 80153ca:	619a      	str	r2, [r3, #24]
 80153cc:	6259      	str	r1, [r3, #36]	@ 0x24
 80153ce:	f7fb fc13 	bl	8010bf8 <uxr_nanos>
 80153d2:	f002 fe6d 	bl	80180b0 <srand>
 80153d6:	f002 fe99 	bl	801810c <rand>
 80153da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80153dc:	6298      	str	r0, [r3, #40]	@ 0x28
 80153de:	2800      	cmp	r0, #0
 80153e0:	d0f9      	beq.n	80153d6 <rmw_init_options_init+0x9e>
 80153e2:	2000      	movs	r0, #0
 80153e4:	b003      	add	sp, #12
 80153e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153ea:	b004      	add	sp, #16
 80153ec:	4770      	bx	lr
 80153ee:	2001      	movs	r0, #1
 80153f0:	e7b1      	b.n	8015356 <rmw_init_options_init+0x1e>
 80153f2:	bf00      	nop
 80153f4:	0801b7fc 	.word	0x0801b7fc
 80153f8:	20010d64 	.word	0x20010d64
 80153fc:	2000c600 	.word	0x2000c600
 8015400:	2000c44c 	.word	0x2000c44c
 8015404:	0801b064 	.word	0x0801b064

08015408 <rmw_init_options_copy>:
 8015408:	b570      	push	{r4, r5, r6, lr}
 801540a:	b158      	cbz	r0, 8015424 <rmw_init_options_copy+0x1c>
 801540c:	460d      	mov	r5, r1
 801540e:	b149      	cbz	r1, 8015424 <rmw_init_options_copy+0x1c>
 8015410:	4604      	mov	r4, r0
 8015412:	6880      	ldr	r0, [r0, #8]
 8015414:	b120      	cbz	r0, 8015420 <rmw_init_options_copy+0x18>
 8015416:	4b1e      	ldr	r3, [pc, #120]	@ (8015490 <rmw_init_options_copy+0x88>)
 8015418:	6819      	ldr	r1, [r3, #0]
 801541a:	f7ea fef9 	bl	8000210 <strcmp>
 801541e:	bb90      	cbnz	r0, 8015486 <rmw_init_options_copy+0x7e>
 8015420:	68ab      	ldr	r3, [r5, #8]
 8015422:	b113      	cbz	r3, 801542a <rmw_init_options_copy+0x22>
 8015424:	250b      	movs	r5, #11
 8015426:	4628      	mov	r0, r5
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	4623      	mov	r3, r4
 801542c:	462a      	mov	r2, r5
 801542e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8015432:	f8d3 c000 	ldr.w	ip, [r3]
 8015436:	6858      	ldr	r0, [r3, #4]
 8015438:	6899      	ldr	r1, [r3, #8]
 801543a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801543e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015442:	3310      	adds	r3, #16
 8015444:	42b3      	cmp	r3, r6
 8015446:	f8c2 c000 	str.w	ip, [r2]
 801544a:	6050      	str	r0, [r2, #4]
 801544c:	6091      	str	r1, [r2, #8]
 801544e:	f102 0210 	add.w	r2, r2, #16
 8015452:	d1ee      	bne.n	8015432 <rmw_init_options_copy+0x2a>
 8015454:	6819      	ldr	r1, [r3, #0]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	480e      	ldr	r0, [pc, #56]	@ (8015494 <rmw_init_options_copy+0x8c>)
 801545a:	6053      	str	r3, [r2, #4]
 801545c:	6011      	str	r1, [r2, #0]
 801545e:	f7ff fed5 	bl	801520c <get_memory>
 8015462:	b198      	cbz	r0, 801548c <rmw_init_options_copy+0x84>
 8015464:	6883      	ldr	r3, [r0, #8]
 8015466:	636b      	str	r3, [r5, #52]	@ 0x34
 8015468:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801546a:	f102 0c10 	add.w	ip, r2, #16
 801546e:	f103 0410 	add.w	r4, r3, #16
 8015472:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015478:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801547c:	2500      	movs	r5, #0
 801547e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015482:	4628      	mov	r0, r5
 8015484:	bd70      	pop	{r4, r5, r6, pc}
 8015486:	250c      	movs	r5, #12
 8015488:	4628      	mov	r0, r5
 801548a:	bd70      	pop	{r4, r5, r6, pc}
 801548c:	2501      	movs	r5, #1
 801548e:	e7ca      	b.n	8015426 <rmw_init_options_copy+0x1e>
 8015490:	0801b7fc 	.word	0x0801b7fc
 8015494:	20010d64 	.word	0x20010d64

08015498 <rmw_init_options_fini>:
 8015498:	2800      	cmp	r0, #0
 801549a:	d03d      	beq.n	8015518 <rmw_init_options_fini+0x80>
 801549c:	b510      	push	{r4, lr}
 801549e:	4604      	mov	r4, r0
 80154a0:	b08e      	sub	sp, #56	@ 0x38
 80154a2:	3020      	adds	r0, #32
 80154a4:	f7f8 fa98 	bl	800d9d8 <rcutils_allocator_is_valid>
 80154a8:	b360      	cbz	r0, 8015504 <rmw_init_options_fini+0x6c>
 80154aa:	68a0      	ldr	r0, [r4, #8]
 80154ac:	b120      	cbz	r0, 80154b8 <rmw_init_options_fini+0x20>
 80154ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015520 <rmw_init_options_fini+0x88>)
 80154b0:	6819      	ldr	r1, [r3, #0]
 80154b2:	f7ea fead 	bl	8000210 <strcmp>
 80154b6:	bb68      	cbnz	r0, 8015514 <rmw_init_options_fini+0x7c>
 80154b8:	4b1a      	ldr	r3, [pc, #104]	@ (8015524 <rmw_init_options_fini+0x8c>)
 80154ba:	6819      	ldr	r1, [r3, #0]
 80154bc:	b331      	cbz	r1, 801550c <rmw_init_options_fini+0x74>
 80154be:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80154c0:	e001      	b.n	80154c6 <rmw_init_options_fini+0x2e>
 80154c2:	6849      	ldr	r1, [r1, #4]
 80154c4:	b311      	cbz	r1, 801550c <rmw_init_options_fini+0x74>
 80154c6:	688b      	ldr	r3, [r1, #8]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d1fa      	bne.n	80154c2 <rmw_init_options_fini+0x2a>
 80154cc:	4815      	ldr	r0, [pc, #84]	@ (8015524 <rmw_init_options_fini+0x8c>)
 80154ce:	f7ff fead 	bl	801522c <put_memory>
 80154d2:	4668      	mov	r0, sp
 80154d4:	f7ff fd8c 	bl	8014ff0 <rmw_get_zero_initialized_init_options>
 80154d8:	46ee      	mov	lr, sp
 80154da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154de:	46a4      	mov	ip, r4
 80154e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80154f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154fc:	2300      	movs	r3, #0
 80154fe:	4618      	mov	r0, r3
 8015500:	b00e      	add	sp, #56	@ 0x38
 8015502:	bd10      	pop	{r4, pc}
 8015504:	230b      	movs	r3, #11
 8015506:	4618      	mov	r0, r3
 8015508:	b00e      	add	sp, #56	@ 0x38
 801550a:	bd10      	pop	{r4, pc}
 801550c:	2301      	movs	r3, #1
 801550e:	4618      	mov	r0, r3
 8015510:	b00e      	add	sp, #56	@ 0x38
 8015512:	bd10      	pop	{r4, pc}
 8015514:	230c      	movs	r3, #12
 8015516:	e7f2      	b.n	80154fe <rmw_init_options_fini+0x66>
 8015518:	230b      	movs	r3, #11
 801551a:	4618      	mov	r0, r3
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	0801b7fc 	.word	0x0801b7fc
 8015524:	20010d64 	.word	0x20010d64

08015528 <rmw_init>:
 8015528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801552c:	b083      	sub	sp, #12
 801552e:	2800      	cmp	r0, #0
 8015530:	f000 80d3 	beq.w	80156da <rmw_init+0x1b2>
 8015534:	460e      	mov	r6, r1
 8015536:	2900      	cmp	r1, #0
 8015538:	f000 80cf 	beq.w	80156da <rmw_init+0x1b2>
 801553c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801553e:	4605      	mov	r5, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	f000 80ca 	beq.w	80156da <rmw_init+0x1b2>
 8015546:	4b78      	ldr	r3, [pc, #480]	@ (8015728 <rmw_init+0x200>)
 8015548:	6880      	ldr	r0, [r0, #8]
 801554a:	681f      	ldr	r7, [r3, #0]
 801554c:	b128      	cbz	r0, 801555a <rmw_init+0x32>
 801554e:	4639      	mov	r1, r7
 8015550:	f7ea fe5e 	bl	8000210 <strcmp>
 8015554:	2800      	cmp	r0, #0
 8015556:	f040 80ca 	bne.w	80156ee <rmw_init+0x1c6>
 801555a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801555e:	4c73      	ldr	r4, [pc, #460]	@ (801572c <rmw_init+0x204>)
 8015560:	4973      	ldr	r1, [pc, #460]	@ (8015730 <rmw_init+0x208>)
 8015562:	4874      	ldr	r0, [pc, #464]	@ (8015734 <rmw_init+0x20c>)
 8015564:	60b7      	str	r7, [r6, #8]
 8015566:	e9c6 2300 	strd	r2, r3, [r6]
 801556a:	68eb      	ldr	r3, [r5, #12]
 801556c:	64b3      	str	r3, [r6, #72]	@ 0x48
 801556e:	2201      	movs	r2, #1
 8015570:	f7f9 fa80 	bl	800ea74 <rmw_uxrce_init_session_memory>
 8015574:	4620      	mov	r0, r4
 8015576:	4970      	ldr	r1, [pc, #448]	@ (8015738 <rmw_init+0x210>)
 8015578:	2204      	movs	r2, #4
 801557a:	f7f9 fabb 	bl	800eaf4 <rmw_uxrce_init_static_input_buffer_memory>
 801557e:	f04f 0800 	mov.w	r8, #0
 8015582:	486c      	ldr	r0, [pc, #432]	@ (8015734 <rmw_init+0x20c>)
 8015584:	f884 800d 	strb.w	r8, [r4, #13]
 8015588:	f7ff fe40 	bl	801520c <get_memory>
 801558c:	2800      	cmp	r0, #0
 801558e:	f000 80a9 	beq.w	80156e4 <rmw_init+0x1bc>
 8015592:	6884      	ldr	r4, [r0, #8]
 8015594:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015596:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015598:	f890 c010 	ldrb.w	ip, [r0, #16]
 801559c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80155a0:	9101      	str	r1, [sp, #4]
 80155a2:	6a00      	ldr	r0, [r0, #32]
 80155a4:	9000      	str	r0, [sp, #0]
 80155a6:	f104 0910 	add.w	r9, r4, #16
 80155aa:	4661      	mov	r1, ip
 80155ac:	4648      	mov	r0, r9
 80155ae:	f000 fecb 	bl	8016348 <uxr_set_custom_transport_callbacks>
 80155b2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80155b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80155ba:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80155be:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80155c2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80155c6:	495d      	ldr	r1, [pc, #372]	@ (801573c <rmw_init+0x214>)
 80155c8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80155cc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80155d0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80155d4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80155d8:	4859      	ldr	r0, [pc, #356]	@ (8015740 <rmw_init+0x218>)
 80155da:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80155de:	2201      	movs	r2, #1
 80155e0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80155e2:	f7f9 fa27 	bl	800ea34 <rmw_uxrce_init_node_memory>
 80155e6:	4957      	ldr	r1, [pc, #348]	@ (8015744 <rmw_init+0x21c>)
 80155e8:	4857      	ldr	r0, [pc, #348]	@ (8015748 <rmw_init+0x220>)
 80155ea:	2205      	movs	r2, #5
 80155ec:	f7f9 fa02 	bl	800e9f4 <rmw_uxrce_init_subscription_memory>
 80155f0:	4956      	ldr	r1, [pc, #344]	@ (801574c <rmw_init+0x224>)
 80155f2:	4857      	ldr	r0, [pc, #348]	@ (8015750 <rmw_init+0x228>)
 80155f4:	220a      	movs	r2, #10
 80155f6:	f7f9 f9dd 	bl	800e9b4 <rmw_uxrce_init_publisher_memory>
 80155fa:	4956      	ldr	r1, [pc, #344]	@ (8015754 <rmw_init+0x22c>)
 80155fc:	4856      	ldr	r0, [pc, #344]	@ (8015758 <rmw_init+0x230>)
 80155fe:	2201      	movs	r2, #1
 8015600:	f7f9 f998 	bl	800e934 <rmw_uxrce_init_service_memory>
 8015604:	4955      	ldr	r1, [pc, #340]	@ (801575c <rmw_init+0x234>)
 8015606:	4856      	ldr	r0, [pc, #344]	@ (8015760 <rmw_init+0x238>)
 8015608:	2201      	movs	r2, #1
 801560a:	f7f9 f9b3 	bl	800e974 <rmw_uxrce_init_client_memory>
 801560e:	4955      	ldr	r1, [pc, #340]	@ (8015764 <rmw_init+0x23c>)
 8015610:	4855      	ldr	r0, [pc, #340]	@ (8015768 <rmw_init+0x240>)
 8015612:	220f      	movs	r2, #15
 8015614:	f7f9 fa4e 	bl	800eab4 <rmw_uxrce_init_topic_memory>
 8015618:	4954      	ldr	r1, [pc, #336]	@ (801576c <rmw_init+0x244>)
 801561a:	4855      	ldr	r0, [pc, #340]	@ (8015770 <rmw_init+0x248>)
 801561c:	2203      	movs	r2, #3
 801561e:	f7f9 fa89 	bl	800eb34 <rmw_uxrce_init_init_options_impl_memory>
 8015622:	4954      	ldr	r1, [pc, #336]	@ (8015774 <rmw_init+0x24c>)
 8015624:	4854      	ldr	r0, [pc, #336]	@ (8015778 <rmw_init+0x250>)
 8015626:	2204      	movs	r2, #4
 8015628:	f7f9 faa4 	bl	800eb74 <rmw_uxrce_init_wait_set_memory>
 801562c:	4953      	ldr	r1, [pc, #332]	@ (801577c <rmw_init+0x254>)
 801562e:	4854      	ldr	r0, [pc, #336]	@ (8015780 <rmw_init+0x258>)
 8015630:	2204      	movs	r2, #4
 8015632:	f7f9 fabf 	bl	800ebb4 <rmw_uxrce_init_guard_condition_memory>
 8015636:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8015638:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801563a:	4642      	mov	r2, r8
 801563c:	f000 fab0 	bl	8015ba0 <rmw_uxrce_transport_init>
 8015640:	4607      	mov	r7, r0
 8015642:	2800      	cmp	r0, #0
 8015644:	d158      	bne.n	80156f8 <rmw_init+0x1d0>
 8015646:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8015648:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801564c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801564e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015652:	4628      	mov	r0, r5
 8015654:	f7fa f934 	bl	800f8c0 <uxr_init_session>
 8015658:	494a      	ldr	r1, [pc, #296]	@ (8015784 <rmw_init+0x25c>)
 801565a:	4622      	mov	r2, r4
 801565c:	4628      	mov	r0, r5
 801565e:	f7fa f953 	bl	800f908 <uxr_set_topic_callback>
 8015662:	4949      	ldr	r1, [pc, #292]	@ (8015788 <rmw_init+0x260>)
 8015664:	463a      	mov	r2, r7
 8015666:	4628      	mov	r0, r5
 8015668:	f7fa f94a 	bl	800f900 <uxr_set_status_callback>
 801566c:	4947      	ldr	r1, [pc, #284]	@ (801578c <rmw_init+0x264>)
 801566e:	463a      	mov	r2, r7
 8015670:	4628      	mov	r0, r5
 8015672:	f7fa f94d 	bl	800f910 <uxr_set_request_callback>
 8015676:	4946      	ldr	r1, [pc, #280]	@ (8015790 <rmw_init+0x268>)
 8015678:	463a      	mov	r2, r7
 801567a:	4628      	mov	r0, r5
 801567c:	f7fa f94c 	bl	800f918 <uxr_set_reply_callback>
 8015680:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015684:	2304      	movs	r3, #4
 8015686:	0092      	lsls	r2, r2, #2
 8015688:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801568c:	4628      	mov	r0, r5
 801568e:	f7fa f981 	bl	800f994 <uxr_create_input_reliable_stream>
 8015692:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015696:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801569a:	0092      	lsls	r2, r2, #2
 801569c:	2304      	movs	r3, #4
 801569e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80156a2:	4628      	mov	r0, r5
 80156a4:	f7fa f94e 	bl	800f944 <uxr_create_output_reliable_stream>
 80156a8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80156ac:	4628      	mov	r0, r5
 80156ae:	f7fa f96b 	bl	800f988 <uxr_create_input_best_effort_stream>
 80156b2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80156b6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80156ba:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80156be:	3114      	adds	r1, #20
 80156c0:	4628      	mov	r0, r5
 80156c2:	f7fa f92d 	bl	800f920 <uxr_create_output_best_effort_stream>
 80156c6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80156ca:	4628      	mov	r0, r5
 80156cc:	f7fa feb8 	bl	8010440 <uxr_create_session>
 80156d0:	b1f8      	cbz	r0, 8015712 <rmw_init+0x1ea>
 80156d2:	4638      	mov	r0, r7
 80156d4:	b003      	add	sp, #12
 80156d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156da:	270b      	movs	r7, #11
 80156dc:	4638      	mov	r0, r7
 80156de:	b003      	add	sp, #12
 80156e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156e4:	2701      	movs	r7, #1
 80156e6:	4638      	mov	r0, r7
 80156e8:	b003      	add	sp, #12
 80156ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ee:	270c      	movs	r7, #12
 80156f0:	4638      	mov	r0, r7
 80156f2:	b003      	add	sp, #12
 80156f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f8:	4648      	mov	r0, r9
 80156fa:	f000 fe67 	bl	80163cc <uxr_close_custom_transport>
 80156fe:	480d      	ldr	r0, [pc, #52]	@ (8015734 <rmw_init+0x20c>)
 8015700:	4621      	mov	r1, r4
 8015702:	f7ff fd93 	bl	801522c <put_memory>
 8015706:	4638      	mov	r0, r7
 8015708:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801570c:	b003      	add	sp, #12
 801570e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015712:	4648      	mov	r0, r9
 8015714:	f000 fe5a 	bl	80163cc <uxr_close_custom_transport>
 8015718:	4806      	ldr	r0, [pc, #24]	@ (8015734 <rmw_init+0x20c>)
 801571a:	4621      	mov	r1, r4
 801571c:	f7ff fd86 	bl	801522c <put_memory>
 8015720:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8015722:	2701      	movs	r7, #1
 8015724:	e7d5      	b.n	80156d2 <rmw_init+0x1aa>
 8015726:	bf00      	nop
 8015728:	0801b7fc 	.word	0x0801b7fc
 801572c:	20010db4 	.word	0x20010db4
 8015730:	2000d060 	.word	0x2000d060
 8015734:	20010da4 	.word	0x20010da4
 8015738:	2000e608 	.word	0x2000e608
 801573c:	2000c684 	.word	0x2000c684
 8015740:	20010d74 	.word	0x20010d74
 8015744:	20010708 	.word	0x20010708
 8015748:	20010dc4 	.word	0x20010dc4
 801574c:	2000c728 	.word	0x2000c728
 8015750:	20010d84 	.word	0x20010d84
 8015754:	2000cf98 	.word	0x2000cf98
 8015758:	20010d94 	.word	0x20010d94
 801575c:	2000c4b8 	.word	0x2000c4b8
 8015760:	2000c4a4 	.word	0x2000c4a4
 8015764:	20010b40 	.word	0x20010b40
 8015768:	20010dd4 	.word	0x20010dd4
 801576c:	2000c600 	.word	0x2000c600
 8015770:	20010d64 	.word	0x20010d64
 8015774:	20010ce4 	.word	0x20010ce4
 8015778:	20010de4 	.word	0x20010de4
 801577c:	2000c580 	.word	0x2000c580
 8015780:	20010d54 	.word	0x20010d54
 8015784:	08017ca5 	.word	0x08017ca5
 8015788:	08017c9d 	.word	0x08017c9d
 801578c:	08017d3d 	.word	0x08017d3d
 8015790:	08017dd9 	.word	0x08017dd9

08015794 <rmw_context_fini>:
 8015794:	4b17      	ldr	r3, [pc, #92]	@ (80157f4 <rmw_context_fini+0x60>)
 8015796:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	681c      	ldr	r4, [r3, #0]
 801579c:	4605      	mov	r5, r0
 801579e:	b334      	cbz	r4, 80157ee <rmw_context_fini+0x5a>
 80157a0:	2600      	movs	r6, #0
 80157a2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80157a6:	6902      	ldr	r2, [r0, #16]
 80157a8:	428a      	cmp	r2, r1
 80157aa:	d018      	beq.n	80157de <rmw_context_fini+0x4a>
 80157ac:	2c00      	cmp	r4, #0
 80157ae:	d1f8      	bne.n	80157a2 <rmw_context_fini+0xe>
 80157b0:	b189      	cbz	r1, 80157d6 <rmw_context_fini+0x42>
 80157b2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80157b6:	789b      	ldrb	r3, [r3, #2]
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80157be:	bf14      	ite	ne
 80157c0:	210a      	movne	r1, #10
 80157c2:	2100      	moveq	r1, #0
 80157c4:	f7fa fe14 	bl	80103f0 <uxr_delete_session_retries>
 80157c8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80157ca:	f7f9 fa13 	bl	800ebf4 <rmw_uxrce_fini_session_memory>
 80157ce:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80157d0:	3010      	adds	r0, #16
 80157d2:	f000 fdfb 	bl	80163cc <uxr_close_custom_transport>
 80157d6:	2300      	movs	r3, #0
 80157d8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80157da:	4630      	mov	r0, r6
 80157dc:	bd70      	pop	{r4, r5, r6, pc}
 80157de:	3018      	adds	r0, #24
 80157e0:	f7f8 fc98 	bl	800e114 <rmw_destroy_node>
 80157e4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80157e6:	4606      	mov	r6, r0
 80157e8:	2c00      	cmp	r4, #0
 80157ea:	d1da      	bne.n	80157a2 <rmw_context_fini+0xe>
 80157ec:	e7e0      	b.n	80157b0 <rmw_context_fini+0x1c>
 80157ee:	4626      	mov	r6, r4
 80157f0:	e7de      	b.n	80157b0 <rmw_context_fini+0x1c>
 80157f2:	bf00      	nop
 80157f4:	20010d74 	.word	0x20010d74

080157f8 <create_topic>:
 80157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fc:	4605      	mov	r5, r0
 80157fe:	b084      	sub	sp, #16
 8015800:	4822      	ldr	r0, [pc, #136]	@ (801588c <create_topic+0x94>)
 8015802:	460f      	mov	r7, r1
 8015804:	4616      	mov	r6, r2
 8015806:	f7ff fd01 	bl	801520c <get_memory>
 801580a:	4604      	mov	r4, r0
 801580c:	2800      	cmp	r0, #0
 801580e:	d039      	beq.n	8015884 <create_topic+0x8c>
 8015810:	692b      	ldr	r3, [r5, #16]
 8015812:	6884      	ldr	r4, [r0, #8]
 8015814:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015894 <create_topic+0x9c>
 8015818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801581c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015820:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015824:	1c42      	adds	r2, r0, #1
 8015826:	2102      	movs	r1, #2
 8015828:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801582c:	f7f9 fe5a 	bl	800f4e4 <uxr_object_id>
 8015830:	223c      	movs	r2, #60	@ 0x3c
 8015832:	6120      	str	r0, [r4, #16]
 8015834:	4641      	mov	r1, r8
 8015836:	4638      	mov	r0, r7
 8015838:	f7f9 fbba 	bl	800efb0 <generate_topic_name>
 801583c:	b1f0      	cbz	r0, 801587c <create_topic+0x84>
 801583e:	4f14      	ldr	r7, [pc, #80]	@ (8015890 <create_topic+0x98>)
 8015840:	4630      	mov	r0, r6
 8015842:	2264      	movs	r2, #100	@ 0x64
 8015844:	4639      	mov	r1, r7
 8015846:	f7f9 fb83 	bl	800ef50 <generate_type_name>
 801584a:	b1b8      	cbz	r0, 801587c <create_topic+0x84>
 801584c:	6928      	ldr	r0, [r5, #16]
 801584e:	2306      	movs	r3, #6
 8015850:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015854:	f8cd 8000 	str.w	r8, [sp]
 8015858:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801585c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015860:	6811      	ldr	r1, [r2, #0]
 8015862:	696b      	ldr	r3, [r5, #20]
 8015864:	6922      	ldr	r2, [r4, #16]
 8015866:	f7f9 fcb9 	bl	800f1dc <uxr_buffer_create_topic_bin>
 801586a:	4602      	mov	r2, r0
 801586c:	6928      	ldr	r0, [r5, #16]
 801586e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015872:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015876:	f7f9 fb35 	bl	800eee4 <run_xrce_session>
 801587a:	b918      	cbnz	r0, 8015884 <create_topic+0x8c>
 801587c:	4620      	mov	r0, r4
 801587e:	f7f9 fa2f 	bl	800ece0 <rmw_uxrce_fini_topic_memory>
 8015882:	2400      	movs	r4, #0
 8015884:	4620      	mov	r0, r4
 8015886:	b004      	add	sp, #16
 8015888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801588c:	20010dd4 	.word	0x20010dd4
 8015890:	20010e64 	.word	0x20010e64
 8015894:	20010e28 	.word	0x20010e28

08015898 <destroy_topic>:
 8015898:	b538      	push	{r3, r4, r5, lr}
 801589a:	6985      	ldr	r5, [r0, #24]
 801589c:	b1d5      	cbz	r5, 80158d4 <destroy_topic+0x3c>
 801589e:	4604      	mov	r4, r0
 80158a0:	6928      	ldr	r0, [r5, #16]
 80158a2:	6922      	ldr	r2, [r4, #16]
 80158a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158ac:	6819      	ldr	r1, [r3, #0]
 80158ae:	f7f9 fc17 	bl	800f0e0 <uxr_buffer_delete_entity>
 80158b2:	4602      	mov	r2, r0
 80158b4:	6928      	ldr	r0, [r5, #16]
 80158b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80158ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80158be:	f7f9 fb11 	bl	800eee4 <run_xrce_session>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	4620      	mov	r0, r4
 80158c6:	bf14      	ite	ne
 80158c8:	2400      	movne	r4, #0
 80158ca:	2402      	moveq	r4, #2
 80158cc:	f7f9 fa08 	bl	800ece0 <rmw_uxrce_fini_topic_memory>
 80158d0:	4620      	mov	r0, r4
 80158d2:	bd38      	pop	{r3, r4, r5, pc}
 80158d4:	2401      	movs	r4, #1
 80158d6:	4620      	mov	r0, r4
 80158d8:	bd38      	pop	{r3, r4, r5, pc}
 80158da:	bf00      	nop

080158dc <rmw_send_request>:
 80158dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158e0:	4604      	mov	r4, r0
 80158e2:	6800      	ldr	r0, [r0, #0]
 80158e4:	b08b      	sub	sp, #44	@ 0x2c
 80158e6:	460e      	mov	r6, r1
 80158e8:	4615      	mov	r5, r2
 80158ea:	b128      	cbz	r0, 80158f8 <rmw_send_request+0x1c>
 80158ec:	4b21      	ldr	r3, [pc, #132]	@ (8015974 <rmw_send_request+0x98>)
 80158ee:	6819      	ldr	r1, [r3, #0]
 80158f0:	f7ea fc8e 	bl	8000210 <strcmp>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d139      	bne.n	801596c <rmw_send_request+0x90>
 80158f8:	6864      	ldr	r4, [r4, #4]
 80158fa:	6963      	ldr	r3, [r4, #20]
 80158fc:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015900:	689b      	ldr	r3, [r3, #8]
 8015902:	4798      	blx	r3
 8015904:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015908:	4630      	mov	r0, r6
 801590a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801590e:	4798      	blx	r3
 8015910:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015914:	9000      	str	r0, [sp, #0]
 8015916:	6922      	ldr	r2, [r4, #16]
 8015918:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801591a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801591e:	ab02      	add	r3, sp, #8
 8015920:	f7fb fa0a 	bl	8010d38 <uxr_prepare_output_stream>
 8015924:	2700      	movs	r7, #0
 8015926:	6028      	str	r0, [r5, #0]
 8015928:	606f      	str	r7, [r5, #4]
 801592a:	b198      	cbz	r0, 8015954 <rmw_send_request+0x78>
 801592c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015930:	a902      	add	r1, sp, #8
 8015932:	4630      	mov	r0, r6
 8015934:	4798      	blx	r3
 8015936:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801593a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801593e:	2b01      	cmp	r3, #1
 8015940:	d00c      	beq.n	801595c <rmw_send_request+0x80>
 8015942:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015948:	f7fa fc0a 	bl	8010160 <uxr_run_session_until_confirm_delivery>
 801594c:	4638      	mov	r0, r7
 801594e:	b00b      	add	sp, #44	@ 0x2c
 8015950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015954:	2001      	movs	r0, #1
 8015956:	b00b      	add	sp, #44	@ 0x2c
 8015958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801595c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015960:	f7fa f83e 	bl	800f9e0 <uxr_flash_output_streams>
 8015964:	4638      	mov	r0, r7
 8015966:	b00b      	add	sp, #44	@ 0x2c
 8015968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801596c:	200c      	movs	r0, #12
 801596e:	b00b      	add	sp, #44	@ 0x2c
 8015970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015974:	0801b7fc 	.word	0x0801b7fc

08015978 <rmw_take_request>:
 8015978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801597c:	4605      	mov	r5, r0
 801597e:	6800      	ldr	r0, [r0, #0]
 8015980:	b089      	sub	sp, #36	@ 0x24
 8015982:	460c      	mov	r4, r1
 8015984:	4690      	mov	r8, r2
 8015986:	461e      	mov	r6, r3
 8015988:	b128      	cbz	r0, 8015996 <rmw_take_request+0x1e>
 801598a:	4b28      	ldr	r3, [pc, #160]	@ (8015a2c <rmw_take_request+0xb4>)
 801598c:	6819      	ldr	r1, [r3, #0]
 801598e:	f7ea fc3f 	bl	8000210 <strcmp>
 8015992:	2800      	cmp	r0, #0
 8015994:	d146      	bne.n	8015a24 <rmw_take_request+0xac>
 8015996:	b10e      	cbz	r6, 801599c <rmw_take_request+0x24>
 8015998:	2300      	movs	r3, #0
 801599a:	7033      	strb	r3, [r6, #0]
 801599c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80159a0:	f7f9 fa22 	bl	800ede8 <rmw_uxrce_clean_expired_static_input_buffer>
 80159a4:	4648      	mov	r0, r9
 80159a6:	f7f9 f9f7 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 80159aa:	4607      	mov	r7, r0
 80159ac:	b3b0      	cbz	r0, 8015a1c <rmw_take_request+0xa4>
 80159ae:	6885      	ldr	r5, [r0, #8]
 80159b0:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80159b4:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80159b8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80159bc:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80159c0:	7423      	strb	r3, [r4, #16]
 80159c2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80159c6:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80159ca:	74e2      	strb	r2, [r4, #19]
 80159cc:	f8a4 3011 	strh.w	r3, [r4, #17]
 80159d0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80159d4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80159d8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80159dc:	61e1      	str	r1, [r4, #28]
 80159de:	6162      	str	r2, [r4, #20]
 80159e0:	61a3      	str	r3, [r4, #24]
 80159e2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80159e6:	689b      	ldr	r3, [r3, #8]
 80159e8:	4798      	blx	r3
 80159ea:	6844      	ldr	r4, [r0, #4]
 80159ec:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80159f0:	f105 0110 	add.w	r1, r5, #16
 80159f4:	4668      	mov	r0, sp
 80159f6:	f7f6 fb53 	bl	800c0a0 <ucdr_init_buffer>
 80159fa:	68e3      	ldr	r3, [r4, #12]
 80159fc:	4641      	mov	r1, r8
 80159fe:	4668      	mov	r0, sp
 8015a00:	4798      	blx	r3
 8015a02:	4639      	mov	r1, r7
 8015a04:	4604      	mov	r4, r0
 8015a06:	480a      	ldr	r0, [pc, #40]	@ (8015a30 <rmw_take_request+0xb8>)
 8015a08:	f7ff fc10 	bl	801522c <put_memory>
 8015a0c:	b106      	cbz	r6, 8015a10 <rmw_take_request+0x98>
 8015a0e:	7034      	strb	r4, [r6, #0]
 8015a10:	f084 0001 	eor.w	r0, r4, #1
 8015a14:	b2c0      	uxtb	r0, r0
 8015a16:	b009      	add	sp, #36	@ 0x24
 8015a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a1c:	2001      	movs	r0, #1
 8015a1e:	b009      	add	sp, #36	@ 0x24
 8015a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a24:	200c      	movs	r0, #12
 8015a26:	b009      	add	sp, #36	@ 0x24
 8015a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a2c:	0801b7fc 	.word	0x0801b7fc
 8015a30:	20010db4 	.word	0x20010db4

08015a34 <rmw_send_response>:
 8015a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a36:	4605      	mov	r5, r0
 8015a38:	6800      	ldr	r0, [r0, #0]
 8015a3a:	b091      	sub	sp, #68	@ 0x44
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	4616      	mov	r6, r2
 8015a40:	b128      	cbz	r0, 8015a4e <rmw_send_response+0x1a>
 8015a42:	4b29      	ldr	r3, [pc, #164]	@ (8015ae8 <rmw_send_response+0xb4>)
 8015a44:	6819      	ldr	r1, [r3, #0]
 8015a46:	f7ea fbe3 	bl	8000210 <strcmp>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d141      	bne.n	8015ad2 <rmw_send_response+0x9e>
 8015a4e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015a52:	9306      	str	r3, [sp, #24]
 8015a54:	4623      	mov	r3, r4
 8015a56:	9207      	str	r2, [sp, #28]
 8015a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a5c:	686d      	ldr	r5, [r5, #4]
 8015a5e:	789b      	ldrb	r3, [r3, #2]
 8015a60:	68a1      	ldr	r1, [r4, #8]
 8015a62:	f88d 2017 	strb.w	r2, [sp, #23]
 8015a66:	f88d 3016 	strb.w	r3, [sp, #22]
 8015a6a:	68e2      	ldr	r2, [r4, #12]
 8015a6c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015a70:	6860      	ldr	r0, [r4, #4]
 8015a72:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015a76:	ab02      	add	r3, sp, #8
 8015a78:	c307      	stmia	r3!, {r0, r1, r2}
 8015a7a:	696b      	ldr	r3, [r5, #20]
 8015a7c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	4798      	blx	r3
 8015a82:	6844      	ldr	r4, [r0, #4]
 8015a84:	4630      	mov	r0, r6
 8015a86:	6923      	ldr	r3, [r4, #16]
 8015a88:	4798      	blx	r3
 8015a8a:	f100 0318 	add.w	r3, r0, #24
 8015a8e:	6938      	ldr	r0, [r7, #16]
 8015a90:	9300      	str	r3, [sp, #0]
 8015a92:	692a      	ldr	r2, [r5, #16]
 8015a94:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015a96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a9a:	ab08      	add	r3, sp, #32
 8015a9c:	f7fb f94c 	bl	8010d38 <uxr_prepare_output_stream>
 8015aa0:	b910      	cbnz	r0, 8015aa8 <rmw_send_response+0x74>
 8015aa2:	2001      	movs	r0, #1
 8015aa4:	b011      	add	sp, #68	@ 0x44
 8015aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aa8:	a902      	add	r1, sp, #8
 8015aaa:	a808      	add	r0, sp, #32
 8015aac:	f7fc fa7c 	bl	8011fa8 <uxr_serialize_SampleIdentity>
 8015ab0:	68a3      	ldr	r3, [r4, #8]
 8015ab2:	a908      	add	r1, sp, #32
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	4798      	blx	r3
 8015ab8:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015abc:	6938      	ldr	r0, [r7, #16]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d00a      	beq.n	8015ad8 <rmw_send_response+0xa4>
 8015ac2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015ac4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ac8:	f7fa fb4a 	bl	8010160 <uxr_run_session_until_confirm_delivery>
 8015acc:	2000      	movs	r0, #0
 8015ace:	b011      	add	sp, #68	@ 0x44
 8015ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ad2:	200c      	movs	r0, #12
 8015ad4:	b011      	add	sp, #68	@ 0x44
 8015ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ad8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015adc:	f7f9 ff80 	bl	800f9e0 <uxr_flash_output_streams>
 8015ae0:	2000      	movs	r0, #0
 8015ae2:	b011      	add	sp, #68	@ 0x44
 8015ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	0801b7fc 	.word	0x0801b7fc

08015aec <rmw_take_response>:
 8015aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af0:	4604      	mov	r4, r0
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	b088      	sub	sp, #32
 8015af6:	4688      	mov	r8, r1
 8015af8:	4617      	mov	r7, r2
 8015afa:	461d      	mov	r5, r3
 8015afc:	b120      	cbz	r0, 8015b08 <rmw_take_response+0x1c>
 8015afe:	4b1e      	ldr	r3, [pc, #120]	@ (8015b78 <rmw_take_response+0x8c>)
 8015b00:	6819      	ldr	r1, [r3, #0]
 8015b02:	f7ea fb85 	bl	8000210 <strcmp>
 8015b06:	bb78      	cbnz	r0, 8015b68 <rmw_take_response+0x7c>
 8015b08:	b10d      	cbz	r5, 8015b0e <rmw_take_response+0x22>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	702b      	strb	r3, [r5, #0]
 8015b0e:	6864      	ldr	r4, [r4, #4]
 8015b10:	f7f9 f96a 	bl	800ede8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b14:	4620      	mov	r0, r4
 8015b16:	f7f9 f93f 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b1a:	4606      	mov	r6, r0
 8015b1c:	b340      	cbz	r0, 8015b70 <rmw_take_response+0x84>
 8015b1e:	6963      	ldr	r3, [r4, #20]
 8015b20:	6884      	ldr	r4, [r0, #8]
 8015b22:	68db      	ldr	r3, [r3, #12]
 8015b24:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015b28:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015b2c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015b30:	4798      	blx	r3
 8015b32:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b36:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015b3a:	f104 0110 	add.w	r1, r4, #16
 8015b3e:	4668      	mov	r0, sp
 8015b40:	f7f6 faae 	bl	800c0a0 <ucdr_init_buffer>
 8015b44:	4639      	mov	r1, r7
 8015b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b4a:	4668      	mov	r0, sp
 8015b4c:	4798      	blx	r3
 8015b4e:	4631      	mov	r1, r6
 8015b50:	4604      	mov	r4, r0
 8015b52:	480a      	ldr	r0, [pc, #40]	@ (8015b7c <rmw_take_response+0x90>)
 8015b54:	f7ff fb6a 	bl	801522c <put_memory>
 8015b58:	b105      	cbz	r5, 8015b5c <rmw_take_response+0x70>
 8015b5a:	702c      	strb	r4, [r5, #0]
 8015b5c:	f084 0001 	eor.w	r0, r4, #1
 8015b60:	b2c0      	uxtb	r0, r0
 8015b62:	b008      	add	sp, #32
 8015b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b68:	200c      	movs	r0, #12
 8015b6a:	b008      	add	sp, #32
 8015b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b70:	2001      	movs	r0, #1
 8015b72:	b008      	add	sp, #32
 8015b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b78:	0801b7fc 	.word	0x0801b7fc
 8015b7c:	20010db4 	.word	0x20010db4

08015b80 <rmw_trigger_guard_condition>:
 8015b80:	b160      	cbz	r0, 8015b9c <rmw_trigger_guard_condition+0x1c>
 8015b82:	b510      	push	{r4, lr}
 8015b84:	4604      	mov	r4, r0
 8015b86:	6800      	ldr	r0, [r0, #0]
 8015b88:	f7f9 fa2c 	bl	800efe4 <is_uxrce_rmw_identifier_valid>
 8015b8c:	b908      	cbnz	r0, 8015b92 <rmw_trigger_guard_condition+0x12>
 8015b8e:	2001      	movs	r0, #1
 8015b90:	bd10      	pop	{r4, pc}
 8015b92:	6863      	ldr	r3, [r4, #4]
 8015b94:	2201      	movs	r2, #1
 8015b96:	741a      	strb	r2, [r3, #16]
 8015b98:	2000      	movs	r0, #0
 8015b9a:	bd10      	pop	{r4, pc}
 8015b9c:	2001      	movs	r0, #1
 8015b9e:	4770      	bx	lr

08015ba0 <rmw_uxrce_transport_init>:
 8015ba0:	b508      	push	{r3, lr}
 8015ba2:	b108      	cbz	r0, 8015ba8 <rmw_uxrce_transport_init+0x8>
 8015ba4:	f100 0210 	add.w	r2, r0, #16
 8015ba8:	b139      	cbz	r1, 8015bba <rmw_uxrce_transport_init+0x1a>
 8015baa:	6949      	ldr	r1, [r1, #20]
 8015bac:	4610      	mov	r0, r2
 8015bae:	f000 fbd9 	bl	8016364 <uxr_init_custom_transport>
 8015bb2:	f080 0001 	eor.w	r0, r0, #1
 8015bb6:	b2c0      	uxtb	r0, r0
 8015bb8:	bd08      	pop	{r3, pc}
 8015bba:	4b04      	ldr	r3, [pc, #16]	@ (8015bcc <rmw_uxrce_transport_init+0x2c>)
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	6859      	ldr	r1, [r3, #4]
 8015bc0:	f000 fbd0 	bl	8016364 <uxr_init_custom_transport>
 8015bc4:	f080 0001 	eor.w	r0, r0, #1
 8015bc8:	b2c0      	uxtb	r0, r0
 8015bca:	bd08      	pop	{r3, pc}
 8015bcc:	2000c44c 	.word	0x2000c44c

08015bd0 <rmw_wait>:
 8015bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd4:	b089      	sub	sp, #36	@ 0x24
 8015bd6:	4605      	mov	r5, r0
 8015bd8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015bda:	460e      	mov	r6, r1
 8015bdc:	4698      	mov	r8, r3
 8015bde:	4691      	mov	r9, r2
 8015be0:	2a00      	cmp	r2, #0
 8015be2:	f000 810a 	beq.w	8015dfa <rmw_wait+0x22a>
 8015be6:	b16c      	cbz	r4, 8015c04 <rmw_wait+0x34>
 8015be8:	4bae      	ldr	r3, [pc, #696]	@ (8015ea4 <rmw_wait+0x2d4>)
 8015bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015bec:	af04      	add	r7, sp, #16
 8015bee:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015bf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015bf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015bfa:	f7ff fa0d 	bl	8015018 <rmw_time_equal>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	f000 8127 	beq.w	8015e52 <rmw_wait+0x282>
 8015c04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015c08:	f7f9 f8ee 	bl	800ede8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015c0c:	4ba6      	ldr	r3, [pc, #664]	@ (8015ea8 <rmw_wait+0x2d8>)
 8015c0e:	681c      	ldr	r4, [r3, #0]
 8015c10:	b14c      	cbz	r4, 8015c26 <rmw_wait+0x56>
 8015c12:	4623      	mov	r3, r4
 8015c14:	2100      	movs	r1, #0
 8015c16:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c1e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d1f7      	bne.n	8015c16 <rmw_wait+0x46>
 8015c26:	f1b9 0f00 	cmp.w	r9, #0
 8015c2a:	d011      	beq.n	8015c50 <rmw_wait+0x80>
 8015c2c:	f8d9 1000 	ldr.w	r1, [r9]
 8015c30:	b171      	cbz	r1, 8015c50 <rmw_wait+0x80>
 8015c32:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015c36:	2300      	movs	r3, #0
 8015c38:	2001      	movs	r0, #1
 8015c3a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015c3e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015c40:	6912      	ldr	r2, [r2, #16]
 8015c42:	3301      	adds	r3, #1
 8015c44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c48:	4299      	cmp	r1, r3
 8015c4a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c4e:	d1f4      	bne.n	8015c3a <rmw_wait+0x6a>
 8015c50:	f1b8 0f00 	cmp.w	r8, #0
 8015c54:	d011      	beq.n	8015c7a <rmw_wait+0xaa>
 8015c56:	f8d8 1000 	ldr.w	r1, [r8]
 8015c5a:	b171      	cbz	r1, 8015c7a <rmw_wait+0xaa>
 8015c5c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015c60:	2300      	movs	r3, #0
 8015c62:	2001      	movs	r0, #1
 8015c64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015c68:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015c6a:	6912      	ldr	r2, [r2, #16]
 8015c6c:	3301      	adds	r3, #1
 8015c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c72:	4299      	cmp	r1, r3
 8015c74:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c78:	d1f4      	bne.n	8015c64 <rmw_wait+0x94>
 8015c7a:	b185      	cbz	r5, 8015c9e <rmw_wait+0xce>
 8015c7c:	6829      	ldr	r1, [r5, #0]
 8015c7e:	b171      	cbz	r1, 8015c9e <rmw_wait+0xce>
 8015c80:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015c84:	2300      	movs	r3, #0
 8015c86:	2001      	movs	r0, #1
 8015c88:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015c8c:	6a12      	ldr	r2, [r2, #32]
 8015c8e:	6912      	ldr	r2, [r2, #16]
 8015c90:	3301      	adds	r3, #1
 8015c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015c96:	4299      	cmp	r1, r3
 8015c98:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c9c:	d1f4      	bne.n	8015c88 <rmw_wait+0xb8>
 8015c9e:	b34c      	cbz	r4, 8015cf4 <rmw_wait+0x124>
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015ca8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015cac:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015cb0:	440b      	add	r3, r1
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	d1f5      	bne.n	8015ca4 <rmw_wait+0xd4>
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	f000 8084 	beq.w	8015dc6 <rmw_wait+0x1f6>
 8015cbe:	1c7a      	adds	r2, r7, #1
 8015cc0:	d00d      	beq.n	8015cde <rmw_wait+0x10e>
 8015cc2:	ee07 7a90 	vmov	s15, r7
 8015cc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015cca:	ee07 3a90 	vmov	s15, r3
 8015cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015cd6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015cda:	ee17 7a90 	vmov	r7, s15
 8015cde:	68a0      	ldr	r0, [r4, #8]
 8015ce0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015ce4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f040 8090 	bne.w	8015e0e <rmw_wait+0x23e>
 8015cee:	6864      	ldr	r4, [r4, #4]
 8015cf0:	2c00      	cmp	r4, #0
 8015cf2:	d1f4      	bne.n	8015cde <rmw_wait+0x10e>
 8015cf4:	f1b9 0f00 	cmp.w	r9, #0
 8015cf8:	f000 80bc 	beq.w	8015e74 <rmw_wait+0x2a4>
 8015cfc:	f8d9 7000 	ldr.w	r7, [r9]
 8015d00:	2f00      	cmp	r7, #0
 8015d02:	f000 808e 	beq.w	8015e22 <rmw_wait+0x252>
 8015d06:	2400      	movs	r4, #0
 8015d08:	4627      	mov	r7, r4
 8015d0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015d0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d12:	f7f9 f841 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d05f      	beq.n	8015dda <rmw_wait+0x20a>
 8015d1a:	f8d9 3000 	ldr.w	r3, [r9]
 8015d1e:	3401      	adds	r4, #1
 8015d20:	42a3      	cmp	r3, r4
 8015d22:	f04f 0701 	mov.w	r7, #1
 8015d26:	d8f0      	bhi.n	8015d0a <rmw_wait+0x13a>
 8015d28:	f1b8 0f00 	cmp.w	r8, #0
 8015d2c:	d012      	beq.n	8015d54 <rmw_wait+0x184>
 8015d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8015d32:	b17b      	cbz	r3, 8015d54 <rmw_wait+0x184>
 8015d34:	2400      	movs	r4, #0
 8015d36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d3e:	f7f9 f82b 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d051      	beq.n	8015dea <rmw_wait+0x21a>
 8015d46:	f8d8 3000 	ldr.w	r3, [r8]
 8015d4a:	3401      	adds	r4, #1
 8015d4c:	42a3      	cmp	r3, r4
 8015d4e:	f04f 0701 	mov.w	r7, #1
 8015d52:	d8f0      	bhi.n	8015d36 <rmw_wait+0x166>
 8015d54:	b1dd      	cbz	r5, 8015d8e <rmw_wait+0x1be>
 8015d56:	682b      	ldr	r3, [r5, #0]
 8015d58:	b1cb      	cbz	r3, 8015d8e <rmw_wait+0x1be>
 8015d5a:	2400      	movs	r4, #0
 8015d5c:	686b      	ldr	r3, [r5, #4]
 8015d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d62:	f7f9 f819 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d66:	b158      	cbz	r0, 8015d80 <rmw_wait+0x1b0>
 8015d68:	682b      	ldr	r3, [r5, #0]
 8015d6a:	3401      	adds	r4, #1
 8015d6c:	42a3      	cmp	r3, r4
 8015d6e:	d969      	bls.n	8015e44 <rmw_wait+0x274>
 8015d70:	686b      	ldr	r3, [r5, #4]
 8015d72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d76:	2701      	movs	r7, #1
 8015d78:	f7f9 f80e 	bl	800ed98 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d1f3      	bne.n	8015d68 <rmw_wait+0x198>
 8015d80:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015d84:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d88:	3401      	adds	r4, #1
 8015d8a:	42a3      	cmp	r3, r4
 8015d8c:	d8e6      	bhi.n	8015d5c <rmw_wait+0x18c>
 8015d8e:	b1a6      	cbz	r6, 8015dba <rmw_wait+0x1ea>
 8015d90:	6834      	ldr	r4, [r6, #0]
 8015d92:	b194      	cbz	r4, 8015dba <rmw_wait+0x1ea>
 8015d94:	2300      	movs	r3, #0
 8015d96:	461d      	mov	r5, r3
 8015d98:	e004      	b.n	8015da4 <rmw_wait+0x1d4>
 8015d9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	42a3      	cmp	r3, r4
 8015da2:	d00a      	beq.n	8015dba <rmw_wait+0x1ea>
 8015da4:	6870      	ldr	r0, [r6, #4]
 8015da6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015daa:	7c0a      	ldrb	r2, [r1, #16]
 8015dac:	2a00      	cmp	r2, #0
 8015dae:	d0f4      	beq.n	8015d9a <rmw_wait+0x1ca>
 8015db0:	3301      	adds	r3, #1
 8015db2:	42a3      	cmp	r3, r4
 8015db4:	740d      	strb	r5, [r1, #16]
 8015db6:	4617      	mov	r7, r2
 8015db8:	d1f4      	bne.n	8015da4 <rmw_wait+0x1d4>
 8015dba:	2f00      	cmp	r7, #0
 8015dbc:	d03e      	beq.n	8015e3c <rmw_wait+0x26c>
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	b009      	add	sp, #36	@ 0x24
 8015dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dc6:	68a0      	ldr	r0, [r4, #8]
 8015dc8:	2100      	movs	r1, #0
 8015dca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015dce:	f7fa f98d 	bl	80100ec <uxr_run_session_timeout>
 8015dd2:	6864      	ldr	r4, [r4, #4]
 8015dd4:	2c00      	cmp	r4, #0
 8015dd6:	d1f6      	bne.n	8015dc6 <rmw_wait+0x1f6>
 8015dd8:	e78c      	b.n	8015cf4 <rmw_wait+0x124>
 8015dda:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015dde:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015de2:	3401      	adds	r4, #1
 8015de4:	42a3      	cmp	r3, r4
 8015de6:	d890      	bhi.n	8015d0a <rmw_wait+0x13a>
 8015de8:	e79e      	b.n	8015d28 <rmw_wait+0x158>
 8015dea:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015dee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015df2:	3401      	adds	r4, #1
 8015df4:	429c      	cmp	r4, r3
 8015df6:	d39e      	bcc.n	8015d36 <rmw_wait+0x166>
 8015df8:	e7ac      	b.n	8015d54 <rmw_wait+0x184>
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	f47f aef3 	bne.w	8015be6 <rmw_wait+0x16>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	f47f aef0 	bne.w	8015be6 <rmw_wait+0x16>
 8015e06:	2900      	cmp	r1, #0
 8015e08:	f47f aeed 	bne.w	8015be6 <rmw_wait+0x16>
 8015e0c:	e7d7      	b.n	8015dbe <rmw_wait+0x1ee>
 8015e0e:	4639      	mov	r1, r7
 8015e10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e14:	f7fa f984 	bl	8010120 <uxr_run_session_until_data>
 8015e18:	6864      	ldr	r4, [r4, #4]
 8015e1a:	2c00      	cmp	r4, #0
 8015e1c:	f47f af5f 	bne.w	8015cde <rmw_wait+0x10e>
 8015e20:	e768      	b.n	8015cf4 <rmw_wait+0x124>
 8015e22:	f1b8 0f00 	cmp.w	r8, #0
 8015e26:	d032      	beq.n	8015e8e <rmw_wait+0x2be>
 8015e28:	f8d8 3000 	ldr.w	r3, [r8]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d181      	bne.n	8015d34 <rmw_wait+0x164>
 8015e30:	461f      	mov	r7, r3
 8015e32:	2d00      	cmp	r5, #0
 8015e34:	d18f      	bne.n	8015d56 <rmw_wait+0x186>
 8015e36:	462f      	mov	r7, r5
 8015e38:	2e00      	cmp	r6, #0
 8015e3a:	d1a9      	bne.n	8015d90 <rmw_wait+0x1c0>
 8015e3c:	2002      	movs	r0, #2
 8015e3e:	b009      	add	sp, #36	@ 0x24
 8015e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e44:	2e00      	cmp	r6, #0
 8015e46:	d0ba      	beq.n	8015dbe <rmw_wait+0x1ee>
 8015e48:	6834      	ldr	r4, [r6, #0]
 8015e4a:	2701      	movs	r7, #1
 8015e4c:	2c00      	cmp	r4, #0
 8015e4e:	d1a1      	bne.n	8015d94 <rmw_wait+0x1c4>
 8015e50:	e7b5      	b.n	8015dbe <rmw_wait+0x1ee>
 8015e52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015e56:	f7ff f933 	bl	80150c0 <rmw_time_total_nsec>
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	4a13      	ldr	r2, [pc, #76]	@ (8015eac <rmw_wait+0x2dc>)
 8015e5e:	f7ea ff93 	bl	8000d88 <__aeabi_uldivmod>
 8015e62:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015e66:	f171 0300 	sbcs.w	r3, r1, #0
 8015e6a:	4607      	mov	r7, r0
 8015e6c:	bfa8      	it	ge
 8015e6e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015e72:	e6c9      	b.n	8015c08 <rmw_wait+0x38>
 8015e74:	f1b8 0f00 	cmp.w	r8, #0
 8015e78:	d009      	beq.n	8015e8e <rmw_wait+0x2be>
 8015e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8015e7e:	464f      	mov	r7, r9
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	f47f af57 	bne.w	8015d34 <rmw_wait+0x164>
 8015e86:	2d00      	cmp	r5, #0
 8015e88:	f47f af65 	bne.w	8015d56 <rmw_wait+0x186>
 8015e8c:	e7d3      	b.n	8015e36 <rmw_wait+0x266>
 8015e8e:	b17d      	cbz	r5, 8015eb0 <rmw_wait+0x2e0>
 8015e90:	682b      	ldr	r3, [r5, #0]
 8015e92:	4647      	mov	r7, r8
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f47f af60 	bne.w	8015d5a <rmw_wait+0x18a>
 8015e9a:	2e00      	cmp	r6, #0
 8015e9c:	f47f af78 	bne.w	8015d90 <rmw_wait+0x1c0>
 8015ea0:	e7cc      	b.n	8015e3c <rmw_wait+0x26c>
 8015ea2:	bf00      	nop
 8015ea4:	0801ad48 	.word	0x0801ad48
 8015ea8:	20010da4 	.word	0x20010da4
 8015eac:	000f4240 	.word	0x000f4240
 8015eb0:	2e00      	cmp	r6, #0
 8015eb2:	d0c3      	beq.n	8015e3c <rmw_wait+0x26c>
 8015eb4:	6834      	ldr	r4, [r6, #0]
 8015eb6:	462f      	mov	r7, r5
 8015eb8:	2c00      	cmp	r4, #0
 8015eba:	f47f af6b 	bne.w	8015d94 <rmw_wait+0x1c4>
 8015ebe:	e7bd      	b.n	8015e3c <rmw_wait+0x26c>

08015ec0 <rmw_create_wait_set>:
 8015ec0:	b508      	push	{r3, lr}
 8015ec2:	4803      	ldr	r0, [pc, #12]	@ (8015ed0 <rmw_create_wait_set+0x10>)
 8015ec4:	f7ff f9a2 	bl	801520c <get_memory>
 8015ec8:	b108      	cbz	r0, 8015ece <rmw_create_wait_set+0xe>
 8015eca:	6880      	ldr	r0, [r0, #8]
 8015ecc:	3010      	adds	r0, #16
 8015ece:	bd08      	pop	{r3, pc}
 8015ed0:	20010de4 	.word	0x20010de4

08015ed4 <rmw_destroy_wait_set>:
 8015ed4:	b508      	push	{r3, lr}
 8015ed6:	4b08      	ldr	r3, [pc, #32]	@ (8015ef8 <rmw_destroy_wait_set+0x24>)
 8015ed8:	6819      	ldr	r1, [r3, #0]
 8015eda:	b911      	cbnz	r1, 8015ee2 <rmw_destroy_wait_set+0xe>
 8015edc:	e00a      	b.n	8015ef4 <rmw_destroy_wait_set+0x20>
 8015ede:	6849      	ldr	r1, [r1, #4]
 8015ee0:	b141      	cbz	r1, 8015ef4 <rmw_destroy_wait_set+0x20>
 8015ee2:	688b      	ldr	r3, [r1, #8]
 8015ee4:	3310      	adds	r3, #16
 8015ee6:	4298      	cmp	r0, r3
 8015ee8:	d1f9      	bne.n	8015ede <rmw_destroy_wait_set+0xa>
 8015eea:	4803      	ldr	r0, [pc, #12]	@ (8015ef8 <rmw_destroy_wait_set+0x24>)
 8015eec:	f7ff f99e 	bl	801522c <put_memory>
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	bd08      	pop	{r3, pc}
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	bd08      	pop	{r3, pc}
 8015ef8:	20010de4 	.word	0x20010de4

08015efc <rmw_uros_epoch_nanos>:
 8015efc:	4b05      	ldr	r3, [pc, #20]	@ (8015f14 <rmw_uros_epoch_nanos+0x18>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	b123      	cbz	r3, 8015f0c <rmw_uros_epoch_nanos+0x10>
 8015f02:	6898      	ldr	r0, [r3, #8]
 8015f04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f08:	f7f9 bd60 	b.w	800f9cc <uxr_epoch_nanos>
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	2100      	movs	r1, #0
 8015f10:	4770      	bx	lr
 8015f12:	bf00      	nop
 8015f14:	20010da4 	.word	0x20010da4

08015f18 <ucdr_serialize_endian_array_char>:
 8015f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	461f      	mov	r7, r3
 8015f20:	4605      	mov	r5, r0
 8015f22:	4690      	mov	r8, r2
 8015f24:	f7f6 f868 	bl	800bff8 <ucdr_check_buffer_available_for>
 8015f28:	b9e0      	cbnz	r0, 8015f64 <ucdr_serialize_endian_array_char+0x4c>
 8015f2a:	463e      	mov	r6, r7
 8015f2c:	e009      	b.n	8015f42 <ucdr_serialize_endian_array_char+0x2a>
 8015f2e:	68a8      	ldr	r0, [r5, #8]
 8015f30:	f002 fd97 	bl	8018a62 <memcpy>
 8015f34:	68ab      	ldr	r3, [r5, #8]
 8015f36:	6928      	ldr	r0, [r5, #16]
 8015f38:	4423      	add	r3, r4
 8015f3a:	4420      	add	r0, r4
 8015f3c:	1b36      	subs	r6, r6, r4
 8015f3e:	60ab      	str	r3, [r5, #8]
 8015f40:	6128      	str	r0, [r5, #16]
 8015f42:	4631      	mov	r1, r6
 8015f44:	2201      	movs	r2, #1
 8015f46:	4628      	mov	r0, r5
 8015f48:	f7f6 f8de 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 8015f4c:	1bb9      	subs	r1, r7, r6
 8015f4e:	4441      	add	r1, r8
 8015f50:	4604      	mov	r4, r0
 8015f52:	4602      	mov	r2, r0
 8015f54:	2800      	cmp	r0, #0
 8015f56:	d1ea      	bne.n	8015f2e <ucdr_serialize_endian_array_char+0x16>
 8015f58:	2301      	movs	r3, #1
 8015f5a:	7da8      	ldrb	r0, [r5, #22]
 8015f5c:	756b      	strb	r3, [r5, #21]
 8015f5e:	4058      	eors	r0, r3
 8015f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f64:	463a      	mov	r2, r7
 8015f66:	68a8      	ldr	r0, [r5, #8]
 8015f68:	4641      	mov	r1, r8
 8015f6a:	f002 fd7a 	bl	8018a62 <memcpy>
 8015f6e:	68aa      	ldr	r2, [r5, #8]
 8015f70:	692b      	ldr	r3, [r5, #16]
 8015f72:	443a      	add	r2, r7
 8015f74:	443b      	add	r3, r7
 8015f76:	60aa      	str	r2, [r5, #8]
 8015f78:	612b      	str	r3, [r5, #16]
 8015f7a:	e7ed      	b.n	8015f58 <ucdr_serialize_endian_array_char+0x40>

08015f7c <ucdr_deserialize_endian_array_char>:
 8015f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f80:	4619      	mov	r1, r3
 8015f82:	461f      	mov	r7, r3
 8015f84:	4605      	mov	r5, r0
 8015f86:	4690      	mov	r8, r2
 8015f88:	f7f6 f836 	bl	800bff8 <ucdr_check_buffer_available_for>
 8015f8c:	b9e0      	cbnz	r0, 8015fc8 <ucdr_deserialize_endian_array_char+0x4c>
 8015f8e:	463e      	mov	r6, r7
 8015f90:	e009      	b.n	8015fa6 <ucdr_deserialize_endian_array_char+0x2a>
 8015f92:	68a9      	ldr	r1, [r5, #8]
 8015f94:	f002 fd65 	bl	8018a62 <memcpy>
 8015f98:	68ab      	ldr	r3, [r5, #8]
 8015f9a:	6928      	ldr	r0, [r5, #16]
 8015f9c:	4423      	add	r3, r4
 8015f9e:	4420      	add	r0, r4
 8015fa0:	1b36      	subs	r6, r6, r4
 8015fa2:	60ab      	str	r3, [r5, #8]
 8015fa4:	6128      	str	r0, [r5, #16]
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	4631      	mov	r1, r6
 8015faa:	4628      	mov	r0, r5
 8015fac:	f7f6 f8ac 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 8015fb0:	4604      	mov	r4, r0
 8015fb2:	1bb8      	subs	r0, r7, r6
 8015fb4:	4440      	add	r0, r8
 8015fb6:	4622      	mov	r2, r4
 8015fb8:	2c00      	cmp	r4, #0
 8015fba:	d1ea      	bne.n	8015f92 <ucdr_deserialize_endian_array_char+0x16>
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	7da8      	ldrb	r0, [r5, #22]
 8015fc0:	756b      	strb	r3, [r5, #21]
 8015fc2:	4058      	eors	r0, r3
 8015fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fc8:	463a      	mov	r2, r7
 8015fca:	68a9      	ldr	r1, [r5, #8]
 8015fcc:	4640      	mov	r0, r8
 8015fce:	f002 fd48 	bl	8018a62 <memcpy>
 8015fd2:	68aa      	ldr	r2, [r5, #8]
 8015fd4:	692b      	ldr	r3, [r5, #16]
 8015fd6:	443a      	add	r2, r7
 8015fd8:	443b      	add	r3, r7
 8015fda:	60aa      	str	r2, [r5, #8]
 8015fdc:	612b      	str	r3, [r5, #16]
 8015fde:	e7ed      	b.n	8015fbc <ucdr_deserialize_endian_array_char+0x40>

08015fe0 <ucdr_serialize_array_uint8_t>:
 8015fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe4:	4688      	mov	r8, r1
 8015fe6:	4611      	mov	r1, r2
 8015fe8:	4617      	mov	r7, r2
 8015fea:	4605      	mov	r5, r0
 8015fec:	f7f6 f804 	bl	800bff8 <ucdr_check_buffer_available_for>
 8015ff0:	b9e0      	cbnz	r0, 801602c <ucdr_serialize_array_uint8_t+0x4c>
 8015ff2:	463e      	mov	r6, r7
 8015ff4:	e009      	b.n	801600a <ucdr_serialize_array_uint8_t+0x2a>
 8015ff6:	68a8      	ldr	r0, [r5, #8]
 8015ff8:	f002 fd33 	bl	8018a62 <memcpy>
 8015ffc:	68aa      	ldr	r2, [r5, #8]
 8015ffe:	692b      	ldr	r3, [r5, #16]
 8016000:	4422      	add	r2, r4
 8016002:	4423      	add	r3, r4
 8016004:	1b36      	subs	r6, r6, r4
 8016006:	60aa      	str	r2, [r5, #8]
 8016008:	612b      	str	r3, [r5, #16]
 801600a:	4631      	mov	r1, r6
 801600c:	2201      	movs	r2, #1
 801600e:	4628      	mov	r0, r5
 8016010:	f7f6 f87a 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 8016014:	1bb9      	subs	r1, r7, r6
 8016016:	4441      	add	r1, r8
 8016018:	4604      	mov	r4, r0
 801601a:	4602      	mov	r2, r0
 801601c:	2800      	cmp	r0, #0
 801601e:	d1ea      	bne.n	8015ff6 <ucdr_serialize_array_uint8_t+0x16>
 8016020:	2301      	movs	r3, #1
 8016022:	7da8      	ldrb	r0, [r5, #22]
 8016024:	756b      	strb	r3, [r5, #21]
 8016026:	4058      	eors	r0, r3
 8016028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801602c:	463a      	mov	r2, r7
 801602e:	68a8      	ldr	r0, [r5, #8]
 8016030:	4641      	mov	r1, r8
 8016032:	f002 fd16 	bl	8018a62 <memcpy>
 8016036:	68aa      	ldr	r2, [r5, #8]
 8016038:	692b      	ldr	r3, [r5, #16]
 801603a:	443a      	add	r2, r7
 801603c:	443b      	add	r3, r7
 801603e:	60aa      	str	r2, [r5, #8]
 8016040:	612b      	str	r3, [r5, #16]
 8016042:	e7ed      	b.n	8016020 <ucdr_serialize_array_uint8_t+0x40>

08016044 <ucdr_serialize_endian_array_uint8_t>:
 8016044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016048:	4619      	mov	r1, r3
 801604a:	461f      	mov	r7, r3
 801604c:	4605      	mov	r5, r0
 801604e:	4690      	mov	r8, r2
 8016050:	f7f5 ffd2 	bl	800bff8 <ucdr_check_buffer_available_for>
 8016054:	b9e0      	cbnz	r0, 8016090 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016056:	463e      	mov	r6, r7
 8016058:	e009      	b.n	801606e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801605a:	68a8      	ldr	r0, [r5, #8]
 801605c:	f002 fd01 	bl	8018a62 <memcpy>
 8016060:	68ab      	ldr	r3, [r5, #8]
 8016062:	6928      	ldr	r0, [r5, #16]
 8016064:	4423      	add	r3, r4
 8016066:	4420      	add	r0, r4
 8016068:	1b36      	subs	r6, r6, r4
 801606a:	60ab      	str	r3, [r5, #8]
 801606c:	6128      	str	r0, [r5, #16]
 801606e:	4631      	mov	r1, r6
 8016070:	2201      	movs	r2, #1
 8016072:	4628      	mov	r0, r5
 8016074:	f7f6 f848 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 8016078:	1bb9      	subs	r1, r7, r6
 801607a:	4441      	add	r1, r8
 801607c:	4604      	mov	r4, r0
 801607e:	4602      	mov	r2, r0
 8016080:	2800      	cmp	r0, #0
 8016082:	d1ea      	bne.n	801605a <ucdr_serialize_endian_array_uint8_t+0x16>
 8016084:	2301      	movs	r3, #1
 8016086:	7da8      	ldrb	r0, [r5, #22]
 8016088:	756b      	strb	r3, [r5, #21]
 801608a:	4058      	eors	r0, r3
 801608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016090:	463a      	mov	r2, r7
 8016092:	68a8      	ldr	r0, [r5, #8]
 8016094:	4641      	mov	r1, r8
 8016096:	f002 fce4 	bl	8018a62 <memcpy>
 801609a:	68aa      	ldr	r2, [r5, #8]
 801609c:	692b      	ldr	r3, [r5, #16]
 801609e:	443a      	add	r2, r7
 80160a0:	443b      	add	r3, r7
 80160a2:	60aa      	str	r2, [r5, #8]
 80160a4:	612b      	str	r3, [r5, #16]
 80160a6:	e7ed      	b.n	8016084 <ucdr_serialize_endian_array_uint8_t+0x40>

080160a8 <ucdr_deserialize_array_uint8_t>:
 80160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ac:	4688      	mov	r8, r1
 80160ae:	4611      	mov	r1, r2
 80160b0:	4617      	mov	r7, r2
 80160b2:	4605      	mov	r5, r0
 80160b4:	f7f5 ffa0 	bl	800bff8 <ucdr_check_buffer_available_for>
 80160b8:	b9e0      	cbnz	r0, 80160f4 <ucdr_deserialize_array_uint8_t+0x4c>
 80160ba:	463e      	mov	r6, r7
 80160bc:	e009      	b.n	80160d2 <ucdr_deserialize_array_uint8_t+0x2a>
 80160be:	68a9      	ldr	r1, [r5, #8]
 80160c0:	f002 fccf 	bl	8018a62 <memcpy>
 80160c4:	68aa      	ldr	r2, [r5, #8]
 80160c6:	692b      	ldr	r3, [r5, #16]
 80160c8:	4422      	add	r2, r4
 80160ca:	4423      	add	r3, r4
 80160cc:	1b36      	subs	r6, r6, r4
 80160ce:	60aa      	str	r2, [r5, #8]
 80160d0:	612b      	str	r3, [r5, #16]
 80160d2:	2201      	movs	r2, #1
 80160d4:	4631      	mov	r1, r6
 80160d6:	4628      	mov	r0, r5
 80160d8:	f7f6 f816 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 80160dc:	4604      	mov	r4, r0
 80160de:	1bb8      	subs	r0, r7, r6
 80160e0:	4440      	add	r0, r8
 80160e2:	4622      	mov	r2, r4
 80160e4:	2c00      	cmp	r4, #0
 80160e6:	d1ea      	bne.n	80160be <ucdr_deserialize_array_uint8_t+0x16>
 80160e8:	2301      	movs	r3, #1
 80160ea:	7da8      	ldrb	r0, [r5, #22]
 80160ec:	756b      	strb	r3, [r5, #21]
 80160ee:	4058      	eors	r0, r3
 80160f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160f4:	463a      	mov	r2, r7
 80160f6:	68a9      	ldr	r1, [r5, #8]
 80160f8:	4640      	mov	r0, r8
 80160fa:	f002 fcb2 	bl	8018a62 <memcpy>
 80160fe:	68aa      	ldr	r2, [r5, #8]
 8016100:	692b      	ldr	r3, [r5, #16]
 8016102:	443a      	add	r2, r7
 8016104:	443b      	add	r3, r7
 8016106:	60aa      	str	r2, [r5, #8]
 8016108:	612b      	str	r3, [r5, #16]
 801610a:	e7ed      	b.n	80160e8 <ucdr_deserialize_array_uint8_t+0x40>

0801610c <ucdr_deserialize_endian_array_uint8_t>:
 801610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016110:	4619      	mov	r1, r3
 8016112:	461f      	mov	r7, r3
 8016114:	4605      	mov	r5, r0
 8016116:	4690      	mov	r8, r2
 8016118:	f7f5 ff6e 	bl	800bff8 <ucdr_check_buffer_available_for>
 801611c:	b9e0      	cbnz	r0, 8016158 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801611e:	463e      	mov	r6, r7
 8016120:	e009      	b.n	8016136 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016122:	68a9      	ldr	r1, [r5, #8]
 8016124:	f002 fc9d 	bl	8018a62 <memcpy>
 8016128:	68ab      	ldr	r3, [r5, #8]
 801612a:	6928      	ldr	r0, [r5, #16]
 801612c:	4423      	add	r3, r4
 801612e:	4420      	add	r0, r4
 8016130:	1b36      	subs	r6, r6, r4
 8016132:	60ab      	str	r3, [r5, #8]
 8016134:	6128      	str	r0, [r5, #16]
 8016136:	2201      	movs	r2, #1
 8016138:	4631      	mov	r1, r6
 801613a:	4628      	mov	r0, r5
 801613c:	f7f5 ffe4 	bl	800c108 <ucdr_check_final_buffer_behavior_array>
 8016140:	4604      	mov	r4, r0
 8016142:	1bb8      	subs	r0, r7, r6
 8016144:	4440      	add	r0, r8
 8016146:	4622      	mov	r2, r4
 8016148:	2c00      	cmp	r4, #0
 801614a:	d1ea      	bne.n	8016122 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801614c:	2301      	movs	r3, #1
 801614e:	7da8      	ldrb	r0, [r5, #22]
 8016150:	756b      	strb	r3, [r5, #21]
 8016152:	4058      	eors	r0, r3
 8016154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016158:	463a      	mov	r2, r7
 801615a:	68a9      	ldr	r1, [r5, #8]
 801615c:	4640      	mov	r0, r8
 801615e:	f002 fc80 	bl	8018a62 <memcpy>
 8016162:	68aa      	ldr	r2, [r5, #8]
 8016164:	692b      	ldr	r3, [r5, #16]
 8016166:	443a      	add	r2, r7
 8016168:	443b      	add	r3, r7
 801616a:	60aa      	str	r2, [r5, #8]
 801616c:	612b      	str	r3, [r5, #16]
 801616e:	e7ed      	b.n	801614c <ucdr_deserialize_endian_array_uint8_t+0x40>

08016170 <ucdr_serialize_sequence_char>:
 8016170:	b570      	push	{r4, r5, r6, lr}
 8016172:	4615      	mov	r5, r2
 8016174:	460e      	mov	r6, r1
 8016176:	7d01      	ldrb	r1, [r0, #20]
 8016178:	4604      	mov	r4, r0
 801617a:	f7f5 f8fd 	bl	800b378 <ucdr_serialize_endian_uint32_t>
 801617e:	b90d      	cbnz	r5, 8016184 <ucdr_serialize_sequence_char+0x14>
 8016180:	2001      	movs	r0, #1
 8016182:	bd70      	pop	{r4, r5, r6, pc}
 8016184:	7d21      	ldrb	r1, [r4, #20]
 8016186:	462b      	mov	r3, r5
 8016188:	4632      	mov	r2, r6
 801618a:	4620      	mov	r0, r4
 801618c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016190:	f7ff bec2 	b.w	8015f18 <ucdr_serialize_endian_array_char>

08016194 <ucdr_deserialize_sequence_char>:
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	461d      	mov	r5, r3
 801619a:	4616      	mov	r6, r2
 801619c:	460f      	mov	r7, r1
 801619e:	461a      	mov	r2, r3
 80161a0:	7d01      	ldrb	r1, [r0, #20]
 80161a2:	4604      	mov	r4, r0
 80161a4:	f7f5 fa10 	bl	800b5c8 <ucdr_deserialize_endian_uint32_t>
 80161a8:	682b      	ldr	r3, [r5, #0]
 80161aa:	429e      	cmp	r6, r3
 80161ac:	bf3c      	itt	cc
 80161ae:	2201      	movcc	r2, #1
 80161b0:	75a2      	strbcc	r2, [r4, #22]
 80161b2:	b913      	cbnz	r3, 80161ba <ucdr_deserialize_sequence_char+0x26>
 80161b4:	2001      	movs	r0, #1
 80161b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ba:	7d21      	ldrb	r1, [r4, #20]
 80161bc:	463a      	mov	r2, r7
 80161be:	4620      	mov	r0, r4
 80161c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161c4:	f7ff beda 	b.w	8015f7c <ucdr_deserialize_endian_array_char>

080161c8 <ucdr_serialize_sequence_uint8_t>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	4615      	mov	r5, r2
 80161cc:	460e      	mov	r6, r1
 80161ce:	7d01      	ldrb	r1, [r0, #20]
 80161d0:	4604      	mov	r4, r0
 80161d2:	f7f5 f8d1 	bl	800b378 <ucdr_serialize_endian_uint32_t>
 80161d6:	b90d      	cbnz	r5, 80161dc <ucdr_serialize_sequence_uint8_t+0x14>
 80161d8:	2001      	movs	r0, #1
 80161da:	bd70      	pop	{r4, r5, r6, pc}
 80161dc:	7d21      	ldrb	r1, [r4, #20]
 80161de:	462b      	mov	r3, r5
 80161e0:	4632      	mov	r2, r6
 80161e2:	4620      	mov	r0, r4
 80161e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161e8:	f7ff bf2c 	b.w	8016044 <ucdr_serialize_endian_array_uint8_t>

080161ec <ucdr_deserialize_sequence_uint8_t>:
 80161ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f0:	461d      	mov	r5, r3
 80161f2:	4616      	mov	r6, r2
 80161f4:	460f      	mov	r7, r1
 80161f6:	461a      	mov	r2, r3
 80161f8:	7d01      	ldrb	r1, [r0, #20]
 80161fa:	4604      	mov	r4, r0
 80161fc:	f7f5 f9e4 	bl	800b5c8 <ucdr_deserialize_endian_uint32_t>
 8016200:	682b      	ldr	r3, [r5, #0]
 8016202:	429e      	cmp	r6, r3
 8016204:	bf3c      	itt	cc
 8016206:	2201      	movcc	r2, #1
 8016208:	75a2      	strbcc	r2, [r4, #22]
 801620a:	b913      	cbnz	r3, 8016212 <ucdr_deserialize_sequence_uint8_t+0x26>
 801620c:	2001      	movs	r0, #1
 801620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016212:	7d21      	ldrb	r1, [r4, #20]
 8016214:	463a      	mov	r2, r7
 8016216:	4620      	mov	r0, r4
 8016218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801621c:	f7ff bf76 	b.w	801610c <ucdr_deserialize_endian_array_uint8_t>

08016220 <ucdr_serialize_string>:
 8016220:	b510      	push	{r4, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	4604      	mov	r4, r0
 8016226:	4608      	mov	r0, r1
 8016228:	9101      	str	r1, [sp, #4]
 801622a:	f7e9 fffb 	bl	8000224 <strlen>
 801622e:	9901      	ldr	r1, [sp, #4]
 8016230:	1c42      	adds	r2, r0, #1
 8016232:	4620      	mov	r0, r4
 8016234:	b002      	add	sp, #8
 8016236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801623a:	f7ff bf99 	b.w	8016170 <ucdr_serialize_sequence_char>
 801623e:	bf00      	nop

08016240 <ucdr_deserialize_string>:
 8016240:	b500      	push	{lr}
 8016242:	b083      	sub	sp, #12
 8016244:	ab01      	add	r3, sp, #4
 8016246:	f7ff ffa5 	bl	8016194 <ucdr_deserialize_sequence_char>
 801624a:	b003      	add	sp, #12
 801624c:	f85d fb04 	ldr.w	pc, [sp], #4

08016250 <get_custom_error>:
 8016250:	4b01      	ldr	r3, [pc, #4]	@ (8016258 <get_custom_error+0x8>)
 8016252:	7818      	ldrb	r0, [r3, #0]
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop
 8016258:	20010ec8 	.word	0x20010ec8

0801625c <recv_custom_msg>:
 801625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016260:	4693      	mov	fp, r2
 8016262:	b089      	sub	sp, #36	@ 0x24
 8016264:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8016268:	9305      	str	r3, [sp, #20]
 801626a:	468a      	mov	sl, r1
 801626c:	2100      	movs	r1, #0
 801626e:	4604      	mov	r4, r0
 8016270:	f88d 101e 	strb.w	r1, [sp, #30]
 8016274:	b322      	cbz	r2, 80162c0 <recv_custom_msg+0x64>
 8016276:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801627a:	f10d 081f 	add.w	r8, sp, #31
 801627e:	af05      	add	r7, sp, #20
 8016280:	f10d 061e 	add.w	r6, sp, #30
 8016284:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8016288:	e002      	b.n	8016290 <recv_custom_msg+0x34>
 801628a:	9b05      	ldr	r3, [sp, #20]
 801628c:	2b00      	cmp	r3, #0
 801628e:	dd0f      	ble.n	80162b0 <recv_custom_msg+0x54>
 8016290:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8016294:	4623      	mov	r3, r4
 8016296:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801629a:	e9cd 5600 	strd	r5, r6, [sp]
 801629e:	4622      	mov	r2, r4
 80162a0:	4648      	mov	r0, r9
 80162a2:	f000 fffd 	bl	80172a0 <uxr_read_framed_msg>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d0ef      	beq.n	801628a <recv_custom_msg+0x2e>
 80162aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80162ae:	b1b3      	cbz	r3, 80162de <recv_custom_msg+0x82>
 80162b0:	4b0f      	ldr	r3, [pc, #60]	@ (80162f0 <recv_custom_msg+0x94>)
 80162b2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80162b6:	701a      	strb	r2, [r3, #0]
 80162b8:	2000      	movs	r0, #0
 80162ba:	b009      	add	sp, #36	@ 0x24
 80162bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c0:	f10d 021f 	add.w	r2, sp, #31
 80162c4:	9200      	str	r2, [sp, #0]
 80162c6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80162ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80162ce:	4601      	mov	r1, r0
 80162d0:	47a8      	blx	r5
 80162d2:	2800      	cmp	r0, #0
 80162d4:	d0ec      	beq.n	80162b0 <recv_custom_msg+0x54>
 80162d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d1e8      	bne.n	80162b0 <recv_custom_msg+0x54>
 80162de:	f8cb 0000 	str.w	r0, [fp]
 80162e2:	2001      	movs	r0, #1
 80162e4:	f8ca 4000 	str.w	r4, [sl]
 80162e8:	b009      	add	sp, #36	@ 0x24
 80162ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ee:	bf00      	nop
 80162f0:	20010ec8 	.word	0x20010ec8

080162f4 <send_custom_msg>:
 80162f4:	b530      	push	{r4, r5, lr}
 80162f6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80162fa:	b087      	sub	sp, #28
 80162fc:	4615      	mov	r5, r2
 80162fe:	b974      	cbnz	r4, 801631e <send_custom_msg+0x2a>
 8016300:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8016304:	f10d 0317 	add.w	r3, sp, #23
 8016308:	47a0      	blx	r4
 801630a:	b108      	cbz	r0, 8016310 <send_custom_msg+0x1c>
 801630c:	42a8      	cmp	r0, r5
 801630e:	d015      	beq.n	801633c <send_custom_msg+0x48>
 8016310:	4b0c      	ldr	r3, [pc, #48]	@ (8016344 <send_custom_msg+0x50>)
 8016312:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	2000      	movs	r0, #0
 801631a:	b007      	add	sp, #28
 801631c:	bd30      	pop	{r4, r5, pc}
 801631e:	460b      	mov	r3, r1
 8016320:	2200      	movs	r2, #0
 8016322:	f10d 0117 	add.w	r1, sp, #23
 8016326:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801632a:	4602      	mov	r2, r0
 801632c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8016330:	9500      	str	r5, [sp, #0]
 8016332:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8016336:	f000 fdbb 	bl	8016eb0 <uxr_write_framed_msg>
 801633a:	e7e6      	b.n	801630a <send_custom_msg+0x16>
 801633c:	2001      	movs	r0, #1
 801633e:	b007      	add	sp, #28
 8016340:	bd30      	pop	{r4, r5, pc}
 8016342:	bf00      	nop
 8016344:	20010ec8 	.word	0x20010ec8

08016348 <uxr_set_custom_transport_callbacks>:
 8016348:	b410      	push	{r4}
 801634a:	9c01      	ldr	r4, [sp, #4]
 801634c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8016350:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8016354:	9b02      	ldr	r3, [sp, #8]
 8016356:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801635a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801635e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8016362:	4770      	bx	lr

08016364 <uxr_init_custom_transport>:
 8016364:	b538      	push	{r3, r4, r5, lr}
 8016366:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801636a:	b303      	cbz	r3, 80163ae <uxr_init_custom_transport+0x4a>
 801636c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016370:	4604      	mov	r4, r0
 8016372:	b1e2      	cbz	r2, 80163ae <uxr_init_custom_transport+0x4a>
 8016374:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016378:	b1ca      	cbz	r2, 80163ae <uxr_init_custom_transport+0x4a>
 801637a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801637e:	b1b2      	cbz	r2, 80163ae <uxr_init_custom_transport+0x4a>
 8016380:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8016384:	4798      	blx	r3
 8016386:	4605      	mov	r5, r0
 8016388:	b188      	cbz	r0, 80163ae <uxr_init_custom_transport+0x4a>
 801638a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801638e:	b98b      	cbnz	r3, 80163b4 <uxr_init_custom_transport+0x50>
 8016390:	490b      	ldr	r1, [pc, #44]	@ (80163c0 <uxr_init_custom_transport+0x5c>)
 8016392:	4b0c      	ldr	r3, [pc, #48]	@ (80163c4 <uxr_init_custom_transport+0x60>)
 8016394:	4a0c      	ldr	r2, [pc, #48]	@ (80163c8 <uxr_init_custom_transport+0x64>)
 8016396:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801639a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801639e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80163a2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80163a6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80163aa:	4628      	mov	r0, r5
 80163ac:	bd38      	pop	{r3, r4, r5, pc}
 80163ae:	2500      	movs	r5, #0
 80163b0:	4628      	mov	r0, r5
 80163b2:	bd38      	pop	{r3, r4, r5, pc}
 80163b4:	2100      	movs	r1, #0
 80163b6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80163ba:	f000 fd73 	bl	8016ea4 <uxr_init_framing_io>
 80163be:	e7e7      	b.n	8016390 <uxr_init_custom_transport+0x2c>
 80163c0:	080162f5 	.word	0x080162f5
 80163c4:	0801625d 	.word	0x0801625d
 80163c8:	08016251 	.word	0x08016251

080163cc <uxr_close_custom_transport>:
 80163cc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80163d0:	4718      	bx	r3
 80163d2:	bf00      	nop

080163d4 <uxr_init_input_best_effort_stream>:
 80163d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163d8:	8003      	strh	r3, [r0, #0]
 80163da:	4770      	bx	lr

080163dc <uxr_reset_input_best_effort_stream>:
 80163dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163e0:	8003      	strh	r3, [r0, #0]
 80163e2:	4770      	bx	lr

080163e4 <uxr_receive_best_effort_message>:
 80163e4:	b538      	push	{r3, r4, r5, lr}
 80163e6:	4604      	mov	r4, r0
 80163e8:	8800      	ldrh	r0, [r0, #0]
 80163ea:	460d      	mov	r5, r1
 80163ec:	f000 fd42 	bl	8016e74 <uxr_seq_num_cmp>
 80163f0:	4603      	mov	r3, r0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80163f8:	bfb8      	it	lt
 80163fa:	8025      	strhlt	r5, [r4, #0]
 80163fc:	bd38      	pop	{r3, r4, r5, pc}
 80163fe:	bf00      	nop

08016400 <on_full_input_buffer>:
 8016400:	b570      	push	{r4, r5, r6, lr}
 8016402:	4605      	mov	r5, r0
 8016404:	460c      	mov	r4, r1
 8016406:	682b      	ldr	r3, [r5, #0]
 8016408:	6809      	ldr	r1, [r1, #0]
 801640a:	8920      	ldrh	r0, [r4, #8]
 801640c:	6862      	ldr	r2, [r4, #4]
 801640e:	fbb2 f2f0 	udiv	r2, r2, r0
 8016412:	eba3 0c01 	sub.w	ip, r3, r1
 8016416:	fbbc fcf2 	udiv	ip, ip, r2
 801641a:	f10c 0c01 	add.w	ip, ip, #1
 801641e:	fa1f f38c 	uxth.w	r3, ip
 8016422:	fbb3 f6f0 	udiv	r6, r3, r0
 8016426:	fb00 3316 	mls	r3, r0, r6, r3
 801642a:	b29b      	uxth	r3, r3
 801642c:	fb02 f303 	mul.w	r3, r2, r3
 8016430:	1d18      	adds	r0, r3, #4
 8016432:	4408      	add	r0, r1
 8016434:	7d26      	ldrb	r6, [r4, #20]
 8016436:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801643a:	b116      	cbz	r6, 8016442 <on_full_input_buffer+0x42>
 801643c:	2600      	movs	r6, #0
 801643e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016442:	2a03      	cmp	r2, #3
 8016444:	d801      	bhi.n	801644a <on_full_input_buffer+0x4a>
 8016446:	2001      	movs	r0, #1
 8016448:	bd70      	pop	{r4, r5, r6, pc}
 801644a:	3308      	adds	r3, #8
 801644c:	4419      	add	r1, r3
 801644e:	4628      	mov	r0, r5
 8016450:	692b      	ldr	r3, [r5, #16]
 8016452:	3a04      	subs	r2, #4
 8016454:	f7f5 fe1c 	bl	800c090 <ucdr_init_buffer_origin>
 8016458:	4628      	mov	r0, r5
 801645a:	4903      	ldr	r1, [pc, #12]	@ (8016468 <on_full_input_buffer+0x68>)
 801645c:	4622      	mov	r2, r4
 801645e:	f7f5 fdf3 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 8016462:	2000      	movs	r0, #0
 8016464:	bd70      	pop	{r4, r5, r6, pc}
 8016466:	bf00      	nop
 8016468:	08016401 	.word	0x08016401

0801646c <uxr_init_input_reliable_stream>:
 801646c:	b500      	push	{lr}
 801646e:	e9c0 1200 	strd	r1, r2, [r0]
 8016472:	f04f 0e00 	mov.w	lr, #0
 8016476:	9a01      	ldr	r2, [sp, #4]
 8016478:	8103      	strh	r3, [r0, #8]
 801647a:	6102      	str	r2, [r0, #16]
 801647c:	f880 e014 	strb.w	lr, [r0, #20]
 8016480:	b1d3      	cbz	r3, 80164b8 <uxr_init_input_reliable_stream+0x4c>
 8016482:	f8c1 e000 	str.w	lr, [r1]
 8016486:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801648a:	f1bc 0f01 	cmp.w	ip, #1
 801648e:	d913      	bls.n	80164b8 <uxr_init_input_reliable_stream+0x4c>
 8016490:	2301      	movs	r3, #1
 8016492:	fbb3 f1fc 	udiv	r1, r3, ip
 8016496:	fb0c 3111 	mls	r1, ip, r1, r3
 801649a:	b289      	uxth	r1, r1
 801649c:	6842      	ldr	r2, [r0, #4]
 801649e:	fbb2 f2fc 	udiv	r2, r2, ip
 80164a2:	fb01 f202 	mul.w	r2, r1, r2
 80164a6:	6801      	ldr	r1, [r0, #0]
 80164a8:	f841 e002 	str.w	lr, [r1, r2]
 80164ac:	3301      	adds	r3, #1
 80164ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	459c      	cmp	ip, r3
 80164b6:	d8ec      	bhi.n	8016492 <uxr_init_input_reliable_stream+0x26>
 80164b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164bc:	60c3      	str	r3, [r0, #12]
 80164be:	f85d fb04 	ldr.w	pc, [sp], #4
 80164c2:	bf00      	nop

080164c4 <uxr_reset_input_reliable_stream>:
 80164c4:	8901      	ldrh	r1, [r0, #8]
 80164c6:	b1e9      	cbz	r1, 8016504 <uxr_reset_input_reliable_stream+0x40>
 80164c8:	f04f 0c00 	mov.w	ip, #0
 80164cc:	b500      	push	{lr}
 80164ce:	4663      	mov	r3, ip
 80164d0:	46e6      	mov	lr, ip
 80164d2:	fbb3 f2f1 	udiv	r2, r3, r1
 80164d6:	fb01 3312 	mls	r3, r1, r2, r3
 80164da:	b29b      	uxth	r3, r3
 80164dc:	6842      	ldr	r2, [r0, #4]
 80164de:	fbb2 f2f1 	udiv	r2, r2, r1
 80164e2:	fb02 f303 	mul.w	r3, r2, r3
 80164e6:	6802      	ldr	r2, [r0, #0]
 80164e8:	f842 e003 	str.w	lr, [r2, r3]
 80164ec:	f10c 0c01 	add.w	ip, ip, #1
 80164f0:	8901      	ldrh	r1, [r0, #8]
 80164f2:	fa1f f38c 	uxth.w	r3, ip
 80164f6:	4299      	cmp	r1, r3
 80164f8:	d8eb      	bhi.n	80164d2 <uxr_reset_input_reliable_stream+0xe>
 80164fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164fe:	60c3      	str	r3, [r0, #12]
 8016500:	f85d fb04 	ldr.w	pc, [sp], #4
 8016504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016508:	60c3      	str	r3, [r0, #12]
 801650a:	4770      	bx	lr

0801650c <uxr_receive_reliable_message>:
 801650c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016510:	4604      	mov	r4, r0
 8016512:	460d      	mov	r5, r1
 8016514:	8901      	ldrh	r1, [r0, #8]
 8016516:	8980      	ldrh	r0, [r0, #12]
 8016518:	4690      	mov	r8, r2
 801651a:	461f      	mov	r7, r3
 801651c:	f000 fca2 	bl	8016e64 <uxr_seq_num_add>
 8016520:	4629      	mov	r1, r5
 8016522:	4606      	mov	r6, r0
 8016524:	89a0      	ldrh	r0, [r4, #12]
 8016526:	f000 fca5 	bl	8016e74 <uxr_seq_num_cmp>
 801652a:	2800      	cmp	r0, #0
 801652c:	db0a      	blt.n	8016544 <uxr_receive_reliable_message+0x38>
 801652e:	2600      	movs	r6, #0
 8016530:	89e0      	ldrh	r0, [r4, #14]
 8016532:	4629      	mov	r1, r5
 8016534:	f000 fc9e 	bl	8016e74 <uxr_seq_num_cmp>
 8016538:	2800      	cmp	r0, #0
 801653a:	da00      	bge.n	801653e <uxr_receive_reliable_message+0x32>
 801653c:	81e5      	strh	r5, [r4, #14]
 801653e:	4630      	mov	r0, r6
 8016540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016544:	4630      	mov	r0, r6
 8016546:	4629      	mov	r1, r5
 8016548:	f000 fc94 	bl	8016e74 <uxr_seq_num_cmp>
 801654c:	2800      	cmp	r0, #0
 801654e:	dbee      	blt.n	801652e <uxr_receive_reliable_message+0x22>
 8016550:	6923      	ldr	r3, [r4, #16]
 8016552:	4640      	mov	r0, r8
 8016554:	4798      	blx	r3
 8016556:	2101      	movs	r1, #1
 8016558:	4681      	mov	r9, r0
 801655a:	89a0      	ldrh	r0, [r4, #12]
 801655c:	f000 fc82 	bl	8016e64 <uxr_seq_num_add>
 8016560:	f1b9 0f00 	cmp.w	r9, #0
 8016564:	d101      	bne.n	801656a <uxr_receive_reliable_message+0x5e>
 8016566:	4285      	cmp	r5, r0
 8016568:	d047      	beq.n	80165fa <uxr_receive_reliable_message+0xee>
 801656a:	8922      	ldrh	r2, [r4, #8]
 801656c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016570:	fb02 5010 	mls	r0, r2, r0, r5
 8016574:	b280      	uxth	r0, r0
 8016576:	6863      	ldr	r3, [r4, #4]
 8016578:	fbb3 f3f2 	udiv	r3, r3, r2
 801657c:	fb00 f303 	mul.w	r3, r0, r3
 8016580:	6820      	ldr	r0, [r4, #0]
 8016582:	3304      	adds	r3, #4
 8016584:	4418      	add	r0, r3
 8016586:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d1cf      	bne.n	801652e <uxr_receive_reliable_message+0x22>
 801658e:	4641      	mov	r1, r8
 8016590:	463a      	mov	r2, r7
 8016592:	f002 fa66 	bl	8018a62 <memcpy>
 8016596:	8921      	ldrh	r1, [r4, #8]
 8016598:	fbb5 f2f1 	udiv	r2, r5, r1
 801659c:	fb01 5212 	mls	r2, r1, r2, r5
 80165a0:	b292      	uxth	r2, r2
 80165a2:	6863      	ldr	r3, [r4, #4]
 80165a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80165a8:	fb02 f303 	mul.w	r3, r2, r3
 80165ac:	6822      	ldr	r2, [r4, #0]
 80165ae:	50d7      	str	r7, [r2, r3]
 80165b0:	9a08      	ldr	r2, [sp, #32]
 80165b2:	2301      	movs	r3, #1
 80165b4:	7013      	strb	r3, [r2, #0]
 80165b6:	f1b9 0f00 	cmp.w	r9, #0
 80165ba:	d0b8      	beq.n	801652e <uxr_receive_reliable_message+0x22>
 80165bc:	89a6      	ldrh	r6, [r4, #12]
 80165be:	4630      	mov	r0, r6
 80165c0:	2101      	movs	r1, #1
 80165c2:	f000 fc4f 	bl	8016e64 <uxr_seq_num_add>
 80165c6:	8922      	ldrh	r2, [r4, #8]
 80165c8:	6863      	ldr	r3, [r4, #4]
 80165ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80165ce:	4606      	mov	r6, r0
 80165d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80165d4:	fb02 6010 	mls	r0, r2, r0, r6
 80165d8:	b280      	uxth	r0, r0
 80165da:	fb00 f303 	mul.w	r3, r0, r3
 80165de:	6820      	ldr	r0, [r4, #0]
 80165e0:	3304      	adds	r3, #4
 80165e2:	4418      	add	r0, r3
 80165e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d0a0      	beq.n	801652e <uxr_receive_reliable_message+0x22>
 80165ec:	6923      	ldr	r3, [r4, #16]
 80165ee:	4798      	blx	r3
 80165f0:	2802      	cmp	r0, #2
 80165f2:	d008      	beq.n	8016606 <uxr_receive_reliable_message+0xfa>
 80165f4:	2801      	cmp	r0, #1
 80165f6:	d0e2      	beq.n	80165be <uxr_receive_reliable_message+0xb2>
 80165f8:	e799      	b.n	801652e <uxr_receive_reliable_message+0x22>
 80165fa:	9b08      	ldr	r3, [sp, #32]
 80165fc:	81a5      	strh	r5, [r4, #12]
 80165fe:	2601      	movs	r6, #1
 8016600:	f883 9000 	strb.w	r9, [r3]
 8016604:	e794      	b.n	8016530 <uxr_receive_reliable_message+0x24>
 8016606:	2601      	movs	r6, #1
 8016608:	e792      	b.n	8016530 <uxr_receive_reliable_message+0x24>
 801660a:	bf00      	nop

0801660c <uxr_next_input_reliable_buffer_available>:
 801660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016610:	4604      	mov	r4, r0
 8016612:	460f      	mov	r7, r1
 8016614:	8980      	ldrh	r0, [r0, #12]
 8016616:	2101      	movs	r1, #1
 8016618:	4690      	mov	r8, r2
 801661a:	f000 fc23 	bl	8016e64 <uxr_seq_num_add>
 801661e:	8922      	ldrh	r2, [r4, #8]
 8016620:	fbb0 f6f2 	udiv	r6, r0, r2
 8016624:	fb02 0616 	mls	r6, r2, r6, r0
 8016628:	b2b6      	uxth	r6, r6
 801662a:	6863      	ldr	r3, [r4, #4]
 801662c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016630:	fb06 f303 	mul.w	r3, r6, r3
 8016634:	6826      	ldr	r6, [r4, #0]
 8016636:	3304      	adds	r3, #4
 8016638:	441e      	add	r6, r3
 801663a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801663e:	f1b9 0f00 	cmp.w	r9, #0
 8016642:	d023      	beq.n	801668c <uxr_next_input_reliable_buffer_available+0x80>
 8016644:	6923      	ldr	r3, [r4, #16]
 8016646:	4605      	mov	r5, r0
 8016648:	4630      	mov	r0, r6
 801664a:	4798      	blx	r3
 801664c:	4682      	mov	sl, r0
 801664e:	b300      	cbz	r0, 8016692 <uxr_next_input_reliable_buffer_available+0x86>
 8016650:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016654:	2101      	movs	r1, #1
 8016656:	4650      	mov	r0, sl
 8016658:	f000 fc04 	bl	8016e64 <uxr_seq_num_add>
 801665c:	8921      	ldrh	r1, [r4, #8]
 801665e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016662:	4682      	mov	sl, r0
 8016664:	fb01 0212 	mls	r2, r1, r2, r0
 8016668:	e9d4 0300 	ldrd	r0, r3, [r4]
 801666c:	b292      	uxth	r2, r2
 801666e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016672:	fb02 f303 	mul.w	r3, r2, r3
 8016676:	3304      	adds	r3, #4
 8016678:	4418      	add	r0, r3
 801667a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801667e:	b12b      	cbz	r3, 801668c <uxr_next_input_reliable_buffer_available+0x80>
 8016680:	6923      	ldr	r3, [r4, #16]
 8016682:	4798      	blx	r3
 8016684:	2802      	cmp	r0, #2
 8016686:	d01b      	beq.n	80166c0 <uxr_next_input_reliable_buffer_available+0xb4>
 8016688:	2801      	cmp	r0, #1
 801668a:	d0e3      	beq.n	8016654 <uxr_next_input_reliable_buffer_available+0x48>
 801668c:	2000      	movs	r0, #0
 801668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016692:	464a      	mov	r2, r9
 8016694:	4631      	mov	r1, r6
 8016696:	4638      	mov	r0, r7
 8016698:	f7f5 fd02 	bl	800c0a0 <ucdr_init_buffer>
 801669c:	8921      	ldrh	r1, [r4, #8]
 801669e:	fbb5 f2f1 	udiv	r2, r5, r1
 80166a2:	fb01 5212 	mls	r2, r1, r2, r5
 80166a6:	b292      	uxth	r2, r2
 80166a8:	6863      	ldr	r3, [r4, #4]
 80166aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80166ae:	fb02 f303 	mul.w	r3, r2, r3
 80166b2:	6822      	ldr	r2, [r4, #0]
 80166b4:	f842 a003 	str.w	sl, [r2, r3]
 80166b8:	2001      	movs	r0, #1
 80166ba:	81a5      	strh	r5, [r4, #12]
 80166bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c0:	8920      	ldrh	r0, [r4, #8]
 80166c2:	fbb5 f3f0 	udiv	r3, r5, r0
 80166c6:	fb00 5513 	mls	r5, r0, r3, r5
 80166ca:	b2ad      	uxth	r5, r5
 80166cc:	6863      	ldr	r3, [r4, #4]
 80166ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80166d2:	fb03 f505 	mul.w	r5, r3, r5
 80166d6:	6823      	ldr	r3, [r4, #0]
 80166d8:	2000      	movs	r0, #0
 80166da:	5158      	str	r0, [r3, r5]
 80166dc:	eb06 0108 	add.w	r1, r6, r8
 80166e0:	eba9 0208 	sub.w	r2, r9, r8
 80166e4:	4638      	mov	r0, r7
 80166e6:	f7f5 fcdb 	bl	800c0a0 <ucdr_init_buffer>
 80166ea:	4638      	mov	r0, r7
 80166ec:	4903      	ldr	r1, [pc, #12]	@ (80166fc <uxr_next_input_reliable_buffer_available+0xf0>)
 80166ee:	4622      	mov	r2, r4
 80166f0:	f7f5 fcaa 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 80166f4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80166f8:	2001      	movs	r0, #1
 80166fa:	e7c8      	b.n	801668e <uxr_next_input_reliable_buffer_available+0x82>
 80166fc:	08016401 	.word	0x08016401

08016700 <uxr_process_heartbeat>:
 8016700:	b538      	push	{r3, r4, r5, lr}
 8016702:	4611      	mov	r1, r2
 8016704:	4604      	mov	r4, r0
 8016706:	89c0      	ldrh	r0, [r0, #14]
 8016708:	4615      	mov	r5, r2
 801670a:	f000 fbb3 	bl	8016e74 <uxr_seq_num_cmp>
 801670e:	2800      	cmp	r0, #0
 8016710:	bfb8      	it	lt
 8016712:	81e5      	strhlt	r5, [r4, #14]
 8016714:	bd38      	pop	{r3, r4, r5, pc}
 8016716:	bf00      	nop

08016718 <uxr_compute_acknack>:
 8016718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801671c:	8903      	ldrh	r3, [r0, #8]
 801671e:	8985      	ldrh	r5, [r0, #12]
 8016720:	4604      	mov	r4, r0
 8016722:	460e      	mov	r6, r1
 8016724:	b1d3      	cbz	r3, 801675c <uxr_compute_acknack+0x44>
 8016726:	4628      	mov	r0, r5
 8016728:	2701      	movs	r7, #1
 801672a:	e003      	b.n	8016734 <uxr_compute_acknack+0x1c>
 801672c:	4567      	cmp	r7, ip
 801672e:	d215      	bcs.n	801675c <uxr_compute_acknack+0x44>
 8016730:	89a0      	ldrh	r0, [r4, #12]
 8016732:	3701      	adds	r7, #1
 8016734:	b2b9      	uxth	r1, r7
 8016736:	f000 fb95 	bl	8016e64 <uxr_seq_num_add>
 801673a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801673e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016742:	fb0c 0313 	mls	r3, ip, r3, r0
 8016746:	b29a      	uxth	r2, r3
 8016748:	e9d4 1300 	ldrd	r1, r3, [r4]
 801674c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016750:	fb02 f303 	mul.w	r3, r2, r3
 8016754:	58cb      	ldr	r3, [r1, r3]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d1e8      	bne.n	801672c <uxr_compute_acknack+0x14>
 801675a:	4605      	mov	r5, r0
 801675c:	8035      	strh	r5, [r6, #0]
 801675e:	2101      	movs	r1, #1
 8016760:	4628      	mov	r0, r5
 8016762:	89e7      	ldrh	r7, [r4, #14]
 8016764:	f000 fb82 	bl	8016e6c <uxr_seq_num_sub>
 8016768:	4601      	mov	r1, r0
 801676a:	4638      	mov	r0, r7
 801676c:	f000 fb7e 	bl	8016e6c <uxr_seq_num_sub>
 8016770:	4605      	mov	r5, r0
 8016772:	b318      	cbz	r0, 80167bc <uxr_compute_acknack+0xa4>
 8016774:	f04f 0900 	mov.w	r9, #0
 8016778:	464f      	mov	r7, r9
 801677a:	f04f 0801 	mov.w	r8, #1
 801677e:	fa1f f189 	uxth.w	r1, r9
 8016782:	8830      	ldrh	r0, [r6, #0]
 8016784:	f000 fb6e 	bl	8016e64 <uxr_seq_num_add>
 8016788:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801678c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016790:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016794:	fb03 001c 	mls	r0, r3, ip, r0
 8016798:	b283      	uxth	r3, r0
 801679a:	fbb2 f2fc 	udiv	r2, r2, ip
 801679e:	fb02 f303 	mul.w	r3, r2, r3
 80167a2:	fa08 f209 	lsl.w	r2, r8, r9
 80167a6:	58cb      	ldr	r3, [r1, r3]
 80167a8:	f109 0901 	add.w	r9, r9, #1
 80167ac:	b90b      	cbnz	r3, 80167b2 <uxr_compute_acknack+0x9a>
 80167ae:	4317      	orrs	r7, r2
 80167b0:	b2bf      	uxth	r7, r7
 80167b2:	454d      	cmp	r5, r9
 80167b4:	d1e3      	bne.n	801677e <uxr_compute_acknack+0x66>
 80167b6:	4638      	mov	r0, r7
 80167b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167bc:	4607      	mov	r7, r0
 80167be:	4638      	mov	r0, r7
 80167c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080167c4 <uxr_init_output_best_effort_stream>:
 80167c4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80167c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80167cc:	6001      	str	r1, [r0, #0]
 80167ce:	7303      	strb	r3, [r0, #12]
 80167d0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80167d4:	4770      	bx	lr
 80167d6:	bf00      	nop

080167d8 <uxr_reset_output_best_effort_stream>:
 80167d8:	7b02      	ldrb	r2, [r0, #12]
 80167da:	6042      	str	r2, [r0, #4]
 80167dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80167e0:	81c3      	strh	r3, [r0, #14]
 80167e2:	4770      	bx	lr

080167e4 <uxr_prepare_best_effort_buffer_to_write>:
 80167e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167e6:	4604      	mov	r4, r0
 80167e8:	b083      	sub	sp, #12
 80167ea:	6840      	ldr	r0, [r0, #4]
 80167ec:	460d      	mov	r5, r1
 80167ee:	4616      	mov	r6, r2
 80167f0:	f7fa f9e2 	bl	8010bb8 <uxr_submessage_padding>
 80167f4:	6863      	ldr	r3, [r4, #4]
 80167f6:	4418      	add	r0, r3
 80167f8:	68a3      	ldr	r3, [r4, #8]
 80167fa:	1942      	adds	r2, r0, r5
 80167fc:	4293      	cmp	r3, r2
 80167fe:	bf2c      	ite	cs
 8016800:	2701      	movcs	r7, #1
 8016802:	2700      	movcc	r7, #0
 8016804:	d202      	bcs.n	801680c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016806:	4638      	mov	r0, r7
 8016808:	b003      	add	sp, #12
 801680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801680c:	9000      	str	r0, [sp, #0]
 801680e:	6821      	ldr	r1, [r4, #0]
 8016810:	4630      	mov	r0, r6
 8016812:	2300      	movs	r3, #0
 8016814:	f7f5 fc32 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8016818:	6861      	ldr	r1, [r4, #4]
 801681a:	4638      	mov	r0, r7
 801681c:	4429      	add	r1, r5
 801681e:	6061      	str	r1, [r4, #4]
 8016820:	b003      	add	sp, #12
 8016822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016824 <uxr_prepare_best_effort_buffer_to_send>:
 8016824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016828:	4604      	mov	r4, r0
 801682a:	461d      	mov	r5, r3
 801682c:	6840      	ldr	r0, [r0, #4]
 801682e:	7b23      	ldrb	r3, [r4, #12]
 8016830:	4298      	cmp	r0, r3
 8016832:	bf8c      	ite	hi
 8016834:	2601      	movhi	r6, #1
 8016836:	2600      	movls	r6, #0
 8016838:	d802      	bhi.n	8016840 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801683a:	4630      	mov	r0, r6
 801683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016840:	4688      	mov	r8, r1
 8016842:	89e0      	ldrh	r0, [r4, #14]
 8016844:	2101      	movs	r1, #1
 8016846:	4617      	mov	r7, r2
 8016848:	f000 fb0c 	bl	8016e64 <uxr_seq_num_add>
 801684c:	6823      	ldr	r3, [r4, #0]
 801684e:	81e0      	strh	r0, [r4, #14]
 8016850:	8028      	strh	r0, [r5, #0]
 8016852:	f8c8 3000 	str.w	r3, [r8]
 8016856:	6863      	ldr	r3, [r4, #4]
 8016858:	603b      	str	r3, [r7, #0]
 801685a:	7b23      	ldrb	r3, [r4, #12]
 801685c:	6063      	str	r3, [r4, #4]
 801685e:	4630      	mov	r0, r6
 8016860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016864 <on_full_output_buffer>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	6802      	ldr	r2, [r0, #0]
 8016868:	460c      	mov	r4, r1
 801686a:	6809      	ldr	r1, [r1, #0]
 801686c:	8923      	ldrh	r3, [r4, #8]
 801686e:	eba2 0c01 	sub.w	ip, r2, r1
 8016872:	6862      	ldr	r2, [r4, #4]
 8016874:	fbb2 f2f3 	udiv	r2, r2, r3
 8016878:	fbbc fcf2 	udiv	ip, ip, r2
 801687c:	f10c 0c01 	add.w	ip, ip, #1
 8016880:	fa1f fc8c 	uxth.w	ip, ip
 8016884:	fbbc fef3 	udiv	lr, ip, r3
 8016888:	fb03 c31e 	mls	r3, r3, lr, ip
 801688c:	b29b      	uxth	r3, r3
 801688e:	fb02 f303 	mul.w	r3, r2, r3
 8016892:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016896:	58ca      	ldr	r2, [r1, r3]
 8016898:	4463      	add	r3, ip
 801689a:	eba2 020c 	sub.w	r2, r2, ip
 801689e:	3308      	adds	r3, #8
 80168a0:	4605      	mov	r5, r0
 80168a2:	4419      	add	r1, r3
 80168a4:	3a04      	subs	r2, #4
 80168a6:	6903      	ldr	r3, [r0, #16]
 80168a8:	f7f5 fbf2 	bl	800c090 <ucdr_init_buffer_origin>
 80168ac:	4628      	mov	r0, r5
 80168ae:	4903      	ldr	r1, [pc, #12]	@ (80168bc <on_full_output_buffer+0x58>)
 80168b0:	4622      	mov	r2, r4
 80168b2:	f7f5 fbc9 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 80168b6:	2000      	movs	r0, #0
 80168b8:	bd38      	pop	{r3, r4, r5, pc}
 80168ba:	bf00      	nop
 80168bc:	08016865 	.word	0x08016865

080168c0 <uxr_init_output_reliable_stream>:
 80168c0:	b410      	push	{r4}
 80168c2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80168c6:	8103      	strh	r3, [r0, #8]
 80168c8:	e9c0 1200 	strd	r1, r2, [r0]
 80168cc:	f880 c00c 	strb.w	ip, [r0, #12]
 80168d0:	b1d3      	cbz	r3, 8016908 <uxr_init_output_reliable_stream+0x48>
 80168d2:	f8c1 c000 	str.w	ip, [r1]
 80168d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80168da:	f1bc 0f01 	cmp.w	ip, #1
 80168de:	d913      	bls.n	8016908 <uxr_init_output_reliable_stream+0x48>
 80168e0:	2301      	movs	r3, #1
 80168e2:	fbb3 f1fc 	udiv	r1, r3, ip
 80168e6:	fb0c 3111 	mls	r1, ip, r1, r3
 80168ea:	b289      	uxth	r1, r1
 80168ec:	6842      	ldr	r2, [r0, #4]
 80168ee:	6804      	ldr	r4, [r0, #0]
 80168f0:	fbb2 f2fc 	udiv	r2, r2, ip
 80168f4:	fb01 f202 	mul.w	r2, r1, r2
 80168f8:	7b01      	ldrb	r1, [r0, #12]
 80168fa:	50a1      	str	r1, [r4, r2]
 80168fc:	3301      	adds	r3, #1
 80168fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016902:	b29b      	uxth	r3, r3
 8016904:	459c      	cmp	ip, r3
 8016906:	d8ec      	bhi.n	80168e2 <uxr_init_output_reliable_stream+0x22>
 8016908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801690c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016910:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016914:	4905      	ldr	r1, [pc, #20]	@ (801692c <uxr_init_output_reliable_stream+0x6c>)
 8016916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801691a:	f8c0 100e 	str.w	r1, [r0, #14]
 801691e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016922:	2300      	movs	r3, #0
 8016924:	8242      	strh	r2, [r0, #18]
 8016926:	8403      	strh	r3, [r0, #32]
 8016928:	4770      	bx	lr
 801692a:	bf00      	nop
 801692c:	ffff0000 	.word	0xffff0000

08016930 <uxr_reset_output_reliable_stream>:
 8016930:	8901      	ldrh	r1, [r0, #8]
 8016932:	b1b1      	cbz	r1, 8016962 <uxr_reset_output_reliable_stream+0x32>
 8016934:	f04f 0c00 	mov.w	ip, #0
 8016938:	4663      	mov	r3, ip
 801693a:	fbb3 f2f1 	udiv	r2, r3, r1
 801693e:	fb01 3312 	mls	r3, r1, r2, r3
 8016942:	b29b      	uxth	r3, r3
 8016944:	6842      	ldr	r2, [r0, #4]
 8016946:	fbb2 f2f1 	udiv	r2, r2, r1
 801694a:	6801      	ldr	r1, [r0, #0]
 801694c:	fb02 f303 	mul.w	r3, r2, r3
 8016950:	7b02      	ldrb	r2, [r0, #12]
 8016952:	50ca      	str	r2, [r1, r3]
 8016954:	f10c 0c01 	add.w	ip, ip, #1
 8016958:	8901      	ldrh	r1, [r0, #8]
 801695a:	fa1f f38c 	uxth.w	r3, ip
 801695e:	4299      	cmp	r1, r3
 8016960:	d8eb      	bhi.n	801693a <uxr_reset_output_reliable_stream+0xa>
 8016962:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016966:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801696a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801696e:	4904      	ldr	r1, [pc, #16]	@ (8016980 <uxr_reset_output_reliable_stream+0x50>)
 8016970:	f8c0 100e 	str.w	r1, [r0, #14]
 8016974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016978:	2300      	movs	r3, #0
 801697a:	8242      	strh	r2, [r0, #18]
 801697c:	8403      	strh	r3, [r0, #32]
 801697e:	4770      	bx	lr
 8016980:	ffff0000 	.word	0xffff0000

08016984 <uxr_prepare_reliable_buffer_to_write>:
 8016984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016988:	4604      	mov	r4, r0
 801698a:	b091      	sub	sp, #68	@ 0x44
 801698c:	8900      	ldrh	r0, [r0, #8]
 801698e:	89e6      	ldrh	r6, [r4, #14]
 8016990:	6823      	ldr	r3, [r4, #0]
 8016992:	9204      	str	r2, [sp, #16]
 8016994:	fbb6 f2f0 	udiv	r2, r6, r0
 8016998:	fb00 6212 	mls	r2, r0, r2, r6
 801699c:	b292      	uxth	r2, r2
 801699e:	6865      	ldr	r5, [r4, #4]
 80169a0:	fbb5 f5f0 	udiv	r5, r5, r0
 80169a4:	fb05 3202 	mla	r2, r5, r2, r3
 80169a8:	3204      	adds	r2, #4
 80169aa:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80169ae:	f894 900c 	ldrb.w	r9, [r4, #12]
 80169b2:	9203      	str	r2, [sp, #12]
 80169b4:	468b      	mov	fp, r1
 80169b6:	1f2f      	subs	r7, r5, #4
 80169b8:	2800      	cmp	r0, #0
 80169ba:	f000 814c 	beq.w	8016c56 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80169be:	f04f 0c00 	mov.w	ip, #0
 80169c2:	46e2      	mov	sl, ip
 80169c4:	4661      	mov	r1, ip
 80169c6:	fbb1 f2f0 	udiv	r2, r1, r0
 80169ca:	fb00 1212 	mls	r2, r0, r2, r1
 80169ce:	b292      	uxth	r2, r2
 80169d0:	fb05 f202 	mul.w	r2, r5, r2
 80169d4:	f10c 0c01 	add.w	ip, ip, #1
 80169d8:	589a      	ldr	r2, [r3, r2]
 80169da:	454a      	cmp	r2, r9
 80169dc:	bf08      	it	eq
 80169de:	f10a 0a01 	addeq.w	sl, sl, #1
 80169e2:	fa1f f18c 	uxth.w	r1, ip
 80169e6:	bf08      	it	eq
 80169e8:	fa1f fa8a 	uxtheq.w	sl, sl
 80169ec:	4281      	cmp	r1, r0
 80169ee:	d3ea      	bcc.n	80169c6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80169f0:	4640      	mov	r0, r8
 80169f2:	2104      	movs	r1, #4
 80169f4:	f8cd a014 	str.w	sl, [sp, #20]
 80169f8:	f7f5 fb56 	bl	800c0a8 <ucdr_alignment>
 80169fc:	4480      	add	r8, r0
 80169fe:	eb08 020b 	add.w	r2, r8, fp
 8016a02:	42ba      	cmp	r2, r7
 8016a04:	f240 80cd 	bls.w	8016ba2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016a08:	7b22      	ldrb	r2, [r4, #12]
 8016a0a:	445a      	add	r2, fp
 8016a0c:	42ba      	cmp	r2, r7
 8016a0e:	f240 80b5 	bls.w	8016b7c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016a12:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016a16:	33fc      	adds	r3, #252	@ 0xfc
 8016a18:	b2ba      	uxth	r2, r7
 8016a1a:	4413      	add	r3, r2
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	fb0a f903 	mul.w	r9, sl, r3
 8016a22:	45d9      	cmp	r9, fp
 8016a24:	9305      	str	r3, [sp, #20]
 8016a26:	9306      	str	r3, [sp, #24]
 8016a28:	f0c0 80b7 	bcc.w	8016b9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a2c:	f108 0304 	add.w	r3, r8, #4
 8016a30:	42bb      	cmp	r3, r7
 8016a32:	f080 80db 	bcs.w	8016bec <uxr_prepare_reliable_buffer_to_write+0x268>
 8016a36:	f1a2 0904 	sub.w	r9, r2, #4
 8016a3a:	eba9 0908 	sub.w	r9, r9, r8
 8016a3e:	9b05      	ldr	r3, [sp, #20]
 8016a40:	fa1f f989 	uxth.w	r9, r9
 8016a44:	ebab 0b09 	sub.w	fp, fp, r9
 8016a48:	fbbb f2f3 	udiv	r2, fp, r3
 8016a4c:	fb03 b312 	mls	r3, r3, r2, fp
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f000 80c8 	beq.w	8016be6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016a56:	3201      	adds	r2, #1
 8016a58:	b292      	uxth	r2, r2
 8016a5a:	9306      	str	r3, [sp, #24]
 8016a5c:	4552      	cmp	r2, sl
 8016a5e:	f200 809c 	bhi.w	8016b9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a62:	f10d 0b20 	add.w	fp, sp, #32
 8016a66:	2a00      	cmp	r2, #0
 8016a68:	d042      	beq.n	8016af0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016a6a:	f8cd 801c 	str.w	r8, [sp, #28]
 8016a6e:	f04f 0a00 	mov.w	sl, #0
 8016a72:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a76:	9505      	str	r5, [sp, #20]
 8016a78:	f10d 0b20 	add.w	fp, sp, #32
 8016a7c:	4615      	mov	r5, r2
 8016a7e:	e000      	b.n	8016a82 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016a80:	46c1      	mov	r9, r8
 8016a82:	8920      	ldrh	r0, [r4, #8]
 8016a84:	fbb6 f2f0 	udiv	r2, r6, r0
 8016a88:	fb00 6112 	mls	r1, r0, r2, r6
 8016a8c:	b28a      	uxth	r2, r1
 8016a8e:	6863      	ldr	r3, [r4, #4]
 8016a90:	fbb3 f1f0 	udiv	r1, r3, r0
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	fb02 f101 	mul.w	r1, r2, r1
 8016a9a:	3104      	adds	r1, #4
 8016a9c:	4419      	add	r1, r3
 8016a9e:	4658      	mov	r0, fp
 8016aa0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016aa4:	9200      	str	r2, [sp, #0]
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	463a      	mov	r2, r7
 8016aaa:	f7f5 fae7 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8016aae:	464a      	mov	r2, r9
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	210d      	movs	r1, #13
 8016ab4:	4658      	mov	r0, fp
 8016ab6:	f7fa f83f 	bl	8010b38 <uxr_buffer_submessage_header>
 8016aba:	8921      	ldrh	r1, [r4, #8]
 8016abc:	fbb6 f2f1 	udiv	r2, r6, r1
 8016ac0:	fb01 6212 	mls	r2, r1, r2, r6
 8016ac4:	b292      	uxth	r2, r2
 8016ac6:	6863      	ldr	r3, [r4, #4]
 8016ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8016acc:	fb02 f303 	mul.w	r3, r2, r3
 8016ad0:	6822      	ldr	r2, [r4, #0]
 8016ad2:	4630      	mov	r0, r6
 8016ad4:	50d7      	str	r7, [r2, r3]
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	f000 f9c4 	bl	8016e64 <uxr_seq_num_add>
 8016adc:	f10a 0a01 	add.w	sl, sl, #1
 8016ae0:	fa1f f38a 	uxth.w	r3, sl
 8016ae4:	429d      	cmp	r5, r3
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	d8ca      	bhi.n	8016a80 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016aea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016aee:	9d05      	ldr	r5, [sp, #20]
 8016af0:	8920      	ldrh	r0, [r4, #8]
 8016af2:	fbb6 f3f0 	udiv	r3, r6, r0
 8016af6:	fb00 6313 	mls	r3, r0, r3, r6
 8016afa:	b299      	uxth	r1, r3
 8016afc:	6863      	ldr	r3, [r4, #4]
 8016afe:	fbb3 f3f0 	udiv	r3, r3, r0
 8016b02:	fb01 f303 	mul.w	r3, r1, r3
 8016b06:	6821      	ldr	r1, [r4, #0]
 8016b08:	3304      	adds	r3, #4
 8016b0a:	4419      	add	r1, r3
 8016b0c:	463a      	mov	r2, r7
 8016b0e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016b12:	9000      	str	r0, [sp, #0]
 8016b14:	2300      	movs	r3, #0
 8016b16:	4658      	mov	r0, fp
 8016b18:	f7f5 fab0 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8016b1c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016b20:	4658      	mov	r0, fp
 8016b22:	fa1f f289 	uxth.w	r2, r9
 8016b26:	2302      	movs	r3, #2
 8016b28:	210d      	movs	r1, #13
 8016b2a:	f7fa f805 	bl	8010b38 <uxr_buffer_submessage_header>
 8016b2e:	9b03      	ldr	r3, [sp, #12]
 8016b30:	8927      	ldrh	r7, [r4, #8]
 8016b32:	7b20      	ldrb	r0, [r4, #12]
 8016b34:	f108 0104 	add.w	r1, r8, #4
 8016b38:	440b      	add	r3, r1
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016b40:	fb07 6313 	mls	r3, r7, r3, r6
 8016b44:	f1a5 0208 	sub.w	r2, r5, #8
 8016b48:	b29d      	uxth	r5, r3
 8016b4a:	3004      	adds	r0, #4
 8016b4c:	6863      	ldr	r3, [r4, #4]
 8016b4e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016b52:	fb05 f303 	mul.w	r3, r5, r3
 8016b56:	6825      	ldr	r5, [r4, #0]
 8016b58:	4448      	add	r0, r9
 8016b5a:	50e8      	str	r0, [r5, r3]
 8016b5c:	9d04      	ldr	r5, [sp, #16]
 8016b5e:	eba2 0208 	sub.w	r2, r2, r8
 8016b62:	4628      	mov	r0, r5
 8016b64:	f7f5 fa9c 	bl	800c0a0 <ucdr_init_buffer>
 8016b68:	4628      	mov	r0, r5
 8016b6a:	493c      	ldr	r1, [pc, #240]	@ (8016c5c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016b6c:	4622      	mov	r2, r4
 8016b6e:	f7f5 fa6b 	bl	800c048 <ucdr_set_on_full_buffer_callback>
 8016b72:	2001      	movs	r0, #1
 8016b74:	81e6      	strh	r6, [r4, #14]
 8016b76:	b011      	add	sp, #68	@ 0x44
 8016b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7c:	2101      	movs	r1, #1
 8016b7e:	89e0      	ldrh	r0, [r4, #14]
 8016b80:	f000 f970 	bl	8016e64 <uxr_seq_num_add>
 8016b84:	8921      	ldrh	r1, [r4, #8]
 8016b86:	4605      	mov	r5, r0
 8016b88:	8a60      	ldrh	r0, [r4, #18]
 8016b8a:	f000 f96b 	bl	8016e64 <uxr_seq_num_add>
 8016b8e:	4601      	mov	r1, r0
 8016b90:	4628      	mov	r0, r5
 8016b92:	f000 f96f 	bl	8016e74 <uxr_seq_num_cmp>
 8016b96:	2800      	cmp	r0, #0
 8016b98:	dd42      	ble.n	8016c20 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	b011      	add	sp, #68	@ 0x44
 8016b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba2:	8921      	ldrh	r1, [r4, #8]
 8016ba4:	8a60      	ldrh	r0, [r4, #18]
 8016ba6:	9205      	str	r2, [sp, #20]
 8016ba8:	f000 f95c 	bl	8016e64 <uxr_seq_num_add>
 8016bac:	4601      	mov	r1, r0
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f000 f960 	bl	8016e74 <uxr_seq_num_cmp>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	9a05      	ldr	r2, [sp, #20]
 8016bb8:	dcef      	bgt.n	8016b9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016bba:	8927      	ldrh	r7, [r4, #8]
 8016bbc:	fbb6 f3f7 	udiv	r3, r6, r7
 8016bc0:	fb07 6313 	mls	r3, r7, r3, r6
 8016bc4:	b29d      	uxth	r5, r3
 8016bc6:	6863      	ldr	r3, [r4, #4]
 8016bc8:	6824      	ldr	r4, [r4, #0]
 8016bca:	fbb3 f3f7 	udiv	r3, r3, r7
 8016bce:	fb05 f303 	mul.w	r3, r5, r3
 8016bd2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016bd6:	50e2      	str	r2, [r4, r3]
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f8cd 8000 	str.w	r8, [sp]
 8016bde:	f7f5 fa4d 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8016be2:	2001      	movs	r0, #1
 8016be4:	e7da      	b.n	8016b9c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016be6:	b293      	uxth	r3, r2
 8016be8:	461a      	mov	r2, r3
 8016bea:	e737      	b.n	8016a5c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016bec:	4630      	mov	r0, r6
 8016bee:	2101      	movs	r1, #1
 8016bf0:	9207      	str	r2, [sp, #28]
 8016bf2:	f000 f937 	bl	8016e64 <uxr_seq_num_add>
 8016bf6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016bfa:	fbb0 f1fc 	udiv	r1, r0, ip
 8016bfe:	fb0c 0111 	mls	r1, ip, r1, r0
 8016c02:	4606      	mov	r6, r0
 8016c04:	b288      	uxth	r0, r1
 8016c06:	6863      	ldr	r3, [r4, #4]
 8016c08:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c0c:	6823      	ldr	r3, [r4, #0]
 8016c0e:	9a07      	ldr	r2, [sp, #28]
 8016c10:	fb00 f101 	mul.w	r1, r0, r1
 8016c14:	3104      	adds	r1, #4
 8016c16:	440b      	add	r3, r1
 8016c18:	9303      	str	r3, [sp, #12]
 8016c1a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016c1e:	e70a      	b.n	8016a36 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016c20:	8921      	ldrh	r1, [r4, #8]
 8016c22:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c26:	fb01 5313 	mls	r3, r1, r3, r5
 8016c2a:	b29a      	uxth	r2, r3
 8016c2c:	6863      	ldr	r3, [r4, #4]
 8016c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016c32:	6821      	ldr	r1, [r4, #0]
 8016c34:	9804      	ldr	r0, [sp, #16]
 8016c36:	fb02 f303 	mul.w	r3, r2, r3
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	7b22      	ldrb	r2, [r4, #12]
 8016c3e:	4419      	add	r1, r3
 8016c40:	445a      	add	r2, fp
 8016c42:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c46:	7b23      	ldrb	r3, [r4, #12]
 8016c48:	9300      	str	r3, [sp, #0]
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f7f5 fa16 	bl	800c07c <ucdr_init_buffer_origin_offset>
 8016c50:	81e5      	strh	r5, [r4, #14]
 8016c52:	2001      	movs	r0, #1
 8016c54:	e7a2      	b.n	8016b9c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016c56:	4682      	mov	sl, r0
 8016c58:	e6ca      	b.n	80169f0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016c5a:	bf00      	nop
 8016c5c:	08016865 	.word	0x08016865

08016c60 <uxr_prepare_next_reliable_buffer_to_send>:
 8016c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c62:	4604      	mov	r4, r0
 8016c64:	460f      	mov	r7, r1
 8016c66:	8a00      	ldrh	r0, [r0, #16]
 8016c68:	2101      	movs	r1, #1
 8016c6a:	4616      	mov	r6, r2
 8016c6c:	461d      	mov	r5, r3
 8016c6e:	f000 f8f9 	bl	8016e64 <uxr_seq_num_add>
 8016c72:	8028      	strh	r0, [r5, #0]
 8016c74:	8922      	ldrh	r2, [r4, #8]
 8016c76:	fbb0 f3f2 	udiv	r3, r0, r2
 8016c7a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016c7e:	fa1f fc8c 	uxth.w	ip, ip
 8016c82:	6863      	ldr	r3, [r4, #4]
 8016c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c88:	fb0c fc03 	mul.w	ip, ip, r3
 8016c8c:	6823      	ldr	r3, [r4, #0]
 8016c8e:	89e1      	ldrh	r1, [r4, #14]
 8016c90:	f10c 0c04 	add.w	ip, ip, #4
 8016c94:	4463      	add	r3, ip
 8016c96:	603b      	str	r3, [r7, #0]
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	449c      	add	ip, r3
 8016c9c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016ca0:	6033      	str	r3, [r6, #0]
 8016ca2:	f000 f8e7 	bl	8016e74 <uxr_seq_num_cmp>
 8016ca6:	2800      	cmp	r0, #0
 8016ca8:	dd01      	ble.n	8016cae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016caa:	2000      	movs	r0, #0
 8016cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cae:	7b23      	ldrb	r3, [r4, #12]
 8016cb0:	6832      	ldr	r2, [r6, #0]
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d9f9      	bls.n	8016caa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016cb6:	8a61      	ldrh	r1, [r4, #18]
 8016cb8:	8a20      	ldrh	r0, [r4, #16]
 8016cba:	f000 f8d7 	bl	8016e6c <uxr_seq_num_sub>
 8016cbe:	8923      	ldrh	r3, [r4, #8]
 8016cc0:	4283      	cmp	r3, r0
 8016cc2:	d0f2      	beq.n	8016caa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016cc4:	8828      	ldrh	r0, [r5, #0]
 8016cc6:	89e3      	ldrh	r3, [r4, #14]
 8016cc8:	8220      	strh	r0, [r4, #16]
 8016cca:	4298      	cmp	r0, r3
 8016ccc:	d001      	beq.n	8016cd2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016cce:	2001      	movs	r0, #1
 8016cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd2:	2101      	movs	r1, #1
 8016cd4:	f000 f8c6 	bl	8016e64 <uxr_seq_num_add>
 8016cd8:	81e0      	strh	r0, [r4, #14]
 8016cda:	2001      	movs	r0, #1
 8016cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cde:	bf00      	nop

08016ce0 <uxr_update_output_stream_heartbeat_timestamp>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	8a01      	ldrh	r1, [r0, #16]
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	8a40      	ldrh	r0, [r0, #18]
 8016ce8:	4615      	mov	r5, r2
 8016cea:	461e      	mov	r6, r3
 8016cec:	f000 f8c2 	bl	8016e74 <uxr_seq_num_cmp>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	db07      	blt.n	8016d04 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016cf8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016cfc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d00:	2000      	movs	r0, #0
 8016d02:	bd70      	pop	{r4, r5, r6, pc}
 8016d04:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d08:	b940      	cbnz	r0, 8016d1c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	f884 3020 	strb.w	r3, [r4, #32]
 8016d10:	3564      	adds	r5, #100	@ 0x64
 8016d12:	f146 0600 	adc.w	r6, r6, #0
 8016d16:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016d1a:	bd70      	pop	{r4, r5, r6, pc}
 8016d1c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d20:	4295      	cmp	r5, r2
 8016d22:	eb76 0303 	sbcs.w	r3, r6, r3
 8016d26:	bfa5      	ittet	ge
 8016d28:	3001      	addge	r0, #1
 8016d2a:	f884 0020 	strbge.w	r0, [r4, #32]
 8016d2e:	2000      	movlt	r0, #0
 8016d30:	2001      	movge	r0, #1
 8016d32:	e7ed      	b.n	8016d10 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016d34 <uxr_begin_output_nack_buffer_it>:
 8016d34:	8a40      	ldrh	r0, [r0, #18]
 8016d36:	4770      	bx	lr

08016d38 <uxr_next_reliable_nack_buffer_to_send>:
 8016d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d3c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016d40:	b082      	sub	sp, #8
 8016d42:	f1b8 0f00 	cmp.w	r8, #0
 8016d46:	d011      	beq.n	8016d6c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016d48:	4604      	mov	r4, r0
 8016d4a:	8818      	ldrh	r0, [r3, #0]
 8016d4c:	460e      	mov	r6, r1
 8016d4e:	4617      	mov	r7, r2
 8016d50:	461d      	mov	r5, r3
 8016d52:	2101      	movs	r1, #1
 8016d54:	f000 f886 	bl	8016e64 <uxr_seq_num_add>
 8016d58:	8028      	strh	r0, [r5, #0]
 8016d5a:	8a21      	ldrh	r1, [r4, #16]
 8016d5c:	f000 f88a 	bl	8016e74 <uxr_seq_num_cmp>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	dd07      	ble.n	8016d74 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016d64:	f04f 0800 	mov.w	r8, #0
 8016d68:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016d6c:	4640      	mov	r0, r8
 8016d6e:	b002      	add	sp, #8
 8016d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d74:	8921      	ldrh	r1, [r4, #8]
 8016d76:	8828      	ldrh	r0, [r5, #0]
 8016d78:	6823      	ldr	r3, [r4, #0]
 8016d7a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016d7e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016d82:	fa1f f28c 	uxth.w	r2, ip
 8016d86:	9301      	str	r3, [sp, #4]
 8016d88:	6863      	ldr	r3, [r4, #4]
 8016d8a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016d8e:	9b01      	ldr	r3, [sp, #4]
 8016d90:	fb02 fc0c 	mul.w	ip, r2, ip
 8016d94:	f10c 0c04 	add.w	ip, ip, #4
 8016d98:	4463      	add	r3, ip
 8016d9a:	6033      	str	r3, [r6, #0]
 8016d9c:	6823      	ldr	r3, [r4, #0]
 8016d9e:	4463      	add	r3, ip
 8016da0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016da4:	603b      	str	r3, [r7, #0]
 8016da6:	7b22      	ldrb	r2, [r4, #12]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d0d2      	beq.n	8016d52 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016dac:	4640      	mov	r0, r8
 8016dae:	b002      	add	sp, #8
 8016db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016db4 <uxr_process_acknack>:
 8016db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db6:	4604      	mov	r4, r0
 8016db8:	460e      	mov	r6, r1
 8016dba:	4610      	mov	r0, r2
 8016dbc:	2101      	movs	r1, #1
 8016dbe:	f000 f855 	bl	8016e6c <uxr_seq_num_sub>
 8016dc2:	8a61      	ldrh	r1, [r4, #18]
 8016dc4:	f000 f852 	bl	8016e6c <uxr_seq_num_sub>
 8016dc8:	b1c0      	cbz	r0, 8016dfc <uxr_process_acknack+0x48>
 8016dca:	4605      	mov	r5, r0
 8016dcc:	2700      	movs	r7, #0
 8016dce:	2101      	movs	r1, #1
 8016dd0:	8a60      	ldrh	r0, [r4, #18]
 8016dd2:	f000 f847 	bl	8016e64 <uxr_seq_num_add>
 8016dd6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016dda:	fbb0 f1fc 	udiv	r1, r0, ip
 8016dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016de2:	fb0c 0111 	mls	r1, ip, r1, r0
 8016de6:	b289      	uxth	r1, r1
 8016de8:	3701      	adds	r7, #1
 8016dea:	fbb3 f3fc 	udiv	r3, r3, ip
 8016dee:	fb01 f303 	mul.w	r3, r1, r3
 8016df2:	42bd      	cmp	r5, r7
 8016df4:	7b21      	ldrb	r1, [r4, #12]
 8016df6:	8260      	strh	r0, [r4, #18]
 8016df8:	50d1      	str	r1, [r2, r3]
 8016dfa:	d1e8      	bne.n	8016dce <uxr_process_acknack+0x1a>
 8016dfc:	3e00      	subs	r6, #0
 8016dfe:	f04f 0300 	mov.w	r3, #0
 8016e02:	bf18      	it	ne
 8016e04:	2601      	movne	r6, #1
 8016e06:	f884 3020 	strb.w	r3, [r4, #32]
 8016e0a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e10 <uxr_is_output_up_to_date>:
 8016e10:	8a01      	ldrh	r1, [r0, #16]
 8016e12:	8a40      	ldrh	r0, [r0, #18]
 8016e14:	b508      	push	{r3, lr}
 8016e16:	f000 f82d 	bl	8016e74 <uxr_seq_num_cmp>
 8016e1a:	fab0 f080 	clz	r0, r0
 8016e1e:	0940      	lsrs	r0, r0, #5
 8016e20:	bd08      	pop	{r3, pc}
 8016e22:	bf00      	nop

08016e24 <get_available_free_slots>:
 8016e24:	8902      	ldrh	r2, [r0, #8]
 8016e26:	b1da      	cbz	r2, 8016e60 <get_available_free_slots+0x3c>
 8016e28:	b530      	push	{r4, r5, lr}
 8016e2a:	2100      	movs	r1, #0
 8016e2c:	6843      	ldr	r3, [r0, #4]
 8016e2e:	6805      	ldr	r5, [r0, #0]
 8016e30:	7b04      	ldrb	r4, [r0, #12]
 8016e32:	fbb3 fef2 	udiv	lr, r3, r2
 8016e36:	4608      	mov	r0, r1
 8016e38:	460b      	mov	r3, r1
 8016e3a:	fbb3 fcf2 	udiv	ip, r3, r2
 8016e3e:	fb02 331c 	mls	r3, r2, ip, r3
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	fb0e f303 	mul.w	r3, lr, r3
 8016e48:	3101      	adds	r1, #1
 8016e4a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016e4e:	4564      	cmp	r4, ip
 8016e50:	bf08      	it	eq
 8016e52:	3001      	addeq	r0, #1
 8016e54:	b28b      	uxth	r3, r1
 8016e56:	bf08      	it	eq
 8016e58:	b280      	uxtheq	r0, r0
 8016e5a:	4293      	cmp	r3, r2
 8016e5c:	d3ed      	bcc.n	8016e3a <get_available_free_slots+0x16>
 8016e5e:	bd30      	pop	{r4, r5, pc}
 8016e60:	4610      	mov	r0, r2
 8016e62:	4770      	bx	lr

08016e64 <uxr_seq_num_add>:
 8016e64:	4408      	add	r0, r1
 8016e66:	b280      	uxth	r0, r0
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop

08016e6c <uxr_seq_num_sub>:
 8016e6c:	1a40      	subs	r0, r0, r1
 8016e6e:	b280      	uxth	r0, r0
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop

08016e74 <uxr_seq_num_cmp>:
 8016e74:	4288      	cmp	r0, r1
 8016e76:	d011      	beq.n	8016e9c <uxr_seq_num_cmp+0x28>
 8016e78:	d309      	bcc.n	8016e8e <uxr_seq_num_cmp+0x1a>
 8016e7a:	4288      	cmp	r0, r1
 8016e7c:	d910      	bls.n	8016ea0 <uxr_seq_num_cmp+0x2c>
 8016e7e:	1a40      	subs	r0, r0, r1
 8016e80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016e84:	bfd4      	ite	le
 8016e86:	2001      	movle	r0, #1
 8016e88:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016e8c:	4770      	bx	lr
 8016e8e:	1a0b      	subs	r3, r1, r0
 8016e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016e94:	daf1      	bge.n	8016e7a <uxr_seq_num_cmp+0x6>
 8016e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e9a:	4770      	bx	lr
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	4770      	bx	lr
 8016ea0:	2001      	movs	r0, #1
 8016ea2:	4770      	bx	lr

08016ea4 <uxr_init_framing_io>:
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	7041      	strb	r1, [r0, #1]
 8016ea8:	7003      	strb	r3, [r0, #0]
 8016eaa:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop

08016eb0 <uxr_write_framed_msg>:
 8016eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb4:	4617      	mov	r7, r2
 8016eb6:	7842      	ldrb	r2, [r0, #1]
 8016eb8:	b083      	sub	sp, #12
 8016eba:	460e      	mov	r6, r1
 8016ebc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8016ec0:	469a      	mov	sl, r3
 8016ec2:	2901      	cmp	r1, #1
 8016ec4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8016ec8:	4604      	mov	r4, r0
 8016eca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8016ece:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8016ed2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8016ed6:	f240 8137 	bls.w	8017148 <uxr_write_framed_msg+0x298>
 8016eda:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8016ede:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8016ee2:	2901      	cmp	r1, #1
 8016ee4:	f04f 0202 	mov.w	r2, #2
 8016ee8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016eec:	f240 808f 	bls.w	801700e <uxr_write_framed_msg+0x15e>
 8016ef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ef2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8016ef6:	b2dd      	uxtb	r5, r3
 8016ef8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8016efc:	2203      	movs	r2, #3
 8016efe:	2901      	cmp	r1, #1
 8016f00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016f04:	f240 809a 	bls.w	801703c <uxr_write_framed_msg+0x18c>
 8016f08:	18a1      	adds	r1, r4, r2
 8016f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f0c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8016f10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016f14:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8016f18:	3201      	adds	r2, #1
 8016f1a:	2801      	cmp	r0, #1
 8016f1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016f20:	f240 80a0 	bls.w	8017064 <uxr_write_framed_msg+0x1b4>
 8016f24:	18a0      	adds	r0, r4, r2
 8016f26:	3201      	adds	r2, #1
 8016f28:	b2d2      	uxtb	r2, r2
 8016f2a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016f2e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f000 80a9 	beq.w	801708a <uxr_write_framed_msg+0x1da>
 8016f38:	f04f 0900 	mov.w	r9, #0
 8016f3c:	46c8      	mov	r8, r9
 8016f3e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016f42:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016f46:	2901      	cmp	r1, #1
 8016f48:	f240 80c3 	bls.w	80170d2 <uxr_write_framed_msg+0x222>
 8016f4c:	2a29      	cmp	r2, #41	@ 0x29
 8016f4e:	f200 809f 	bhi.w	8017090 <uxr_write_framed_msg+0x1e0>
 8016f52:	18a1      	adds	r1, r4, r2
 8016f54:	3201      	adds	r2, #1
 8016f56:	b2d2      	uxtb	r2, r2
 8016f58:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8016f5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016f60:	ea89 0303 	eor.w	r3, r9, r3
 8016f64:	498c      	ldr	r1, [pc, #560]	@ (8017198 <uxr_write_framed_msg+0x2e8>)
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	f108 0801 	add.w	r8, r8, #1
 8016f6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016f70:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8016f74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f76:	4543      	cmp	r3, r8
 8016f78:	d8e1      	bhi.n	8016f3e <uxr_write_framed_msg+0x8e>
 8016f7a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016f7e:	fa5f f889 	uxtb.w	r8, r9
 8016f82:	9301      	str	r3, [sp, #4]
 8016f84:	f04f 0900 	mov.w	r9, #0
 8016f88:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8016f8c:	fa5f f18a 	uxtb.w	r1, sl
 8016f90:	2901      	cmp	r1, #1
 8016f92:	d921      	bls.n	8016fd8 <uxr_write_framed_msg+0x128>
 8016f94:	2a29      	cmp	r2, #41	@ 0x29
 8016f96:	f240 80af 	bls.w	80170f8 <uxr_write_framed_msg+0x248>
 8016f9a:	2500      	movs	r5, #0
 8016f9c:	e000      	b.n	8016fa0 <uxr_write_framed_msg+0xf0>
 8016f9e:	b160      	cbz	r0, 8016fba <uxr_write_framed_msg+0x10a>
 8016fa0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016fa4:	1b52      	subs	r2, r2, r5
 8016fa6:	465b      	mov	r3, fp
 8016fa8:	4421      	add	r1, r4
 8016faa:	4638      	mov	r0, r7
 8016fac:	47b0      	blx	r6
 8016fae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016fb2:	4405      	add	r5, r0
 8016fb4:	4295      	cmp	r5, r2
 8016fb6:	d3f2      	bcc.n	8016f9e <uxr_write_framed_msg+0xee>
 8016fb8:	d003      	beq.n	8016fc2 <uxr_write_framed_msg+0x112>
 8016fba:	2000      	movs	r0, #0
 8016fbc:	b003      	add	sp, #12
 8016fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fc2:	fa5f f18a 	uxtb.w	r1, sl
 8016fc6:	f04f 0300 	mov.w	r3, #0
 8016fca:	2901      	cmp	r1, #1
 8016fcc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016fd0:	f04f 0200 	mov.w	r2, #0
 8016fd4:	f200 8090 	bhi.w	80170f8 <uxr_write_framed_msg+0x248>
 8016fd8:	1c51      	adds	r1, r2, #1
 8016fda:	b2c9      	uxtb	r1, r1
 8016fdc:	2929      	cmp	r1, #41	@ 0x29
 8016fde:	d8dc      	bhi.n	8016f9a <uxr_write_framed_msg+0xea>
 8016fe0:	18a5      	adds	r5, r4, r2
 8016fe2:	4421      	add	r1, r4
 8016fe4:	3202      	adds	r2, #2
 8016fe6:	f088 0820 	eor.w	r8, r8, #32
 8016fea:	4648      	mov	r0, r9
 8016fec:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8016ff0:	b2d2      	uxtb	r2, r2
 8016ff2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8016ff6:	f04f 0901 	mov.w	r9, #1
 8016ffa:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8016ffe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017002:	2800      	cmp	r0, #0
 8017004:	f040 8085 	bne.w	8017112 <uxr_write_framed_msg+0x262>
 8017008:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801700c:	e7bc      	b.n	8016f88 <uxr_write_framed_msg+0xd8>
 801700e:	4611      	mov	r1, r2
 8017010:	f04f 0c03 	mov.w	ip, #3
 8017014:	2204      	movs	r2, #4
 8017016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017018:	4421      	add	r1, r4
 801701a:	b2dd      	uxtb	r5, r3
 801701c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8017020:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8017024:	44a4      	add	ip, r4
 8017026:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801702a:	f080 0020 	eor.w	r0, r0, #32
 801702e:	2901      	cmp	r1, #1
 8017030:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8017034:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017038:	f63f af66 	bhi.w	8016f08 <uxr_write_framed_msg+0x58>
 801703c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801703e:	18a0      	adds	r0, r4, r2
 8017040:	f085 0520 	eor.w	r5, r5, #32
 8017044:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017048:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801704c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8017050:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8017054:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017058:	3202      	adds	r2, #2
 801705a:	2801      	cmp	r0, #1
 801705c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017060:	f63f af60 	bhi.w	8016f24 <uxr_write_framed_msg+0x74>
 8017064:	1c50      	adds	r0, r2, #1
 8017066:	18a5      	adds	r5, r4, r2
 8017068:	fa54 f080 	uxtab	r0, r4, r0
 801706c:	3202      	adds	r2, #2
 801706e:	f081 0120 	eor.w	r1, r1, #32
 8017072:	b2d2      	uxtb	r2, r2
 8017074:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017078:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801707c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017080:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017084:	2b00      	cmp	r3, #0
 8017086:	f47f af57 	bne.w	8016f38 <uxr_write_framed_msg+0x88>
 801708a:	9301      	str	r3, [sp, #4]
 801708c:	4698      	mov	r8, r3
 801708e:	e779      	b.n	8016f84 <uxr_write_framed_msg+0xd4>
 8017090:	2500      	movs	r5, #0
 8017092:	e001      	b.n	8017098 <uxr_write_framed_msg+0x1e8>
 8017094:	2800      	cmp	r0, #0
 8017096:	d090      	beq.n	8016fba <uxr_write_framed_msg+0x10a>
 8017098:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801709c:	1b52      	subs	r2, r2, r5
 801709e:	465b      	mov	r3, fp
 80170a0:	4421      	add	r1, r4
 80170a2:	4638      	mov	r0, r7
 80170a4:	47b0      	blx	r6
 80170a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80170aa:	4405      	add	r5, r0
 80170ac:	4295      	cmp	r5, r2
 80170ae:	d3f1      	bcc.n	8017094 <uxr_write_framed_msg+0x1e4>
 80170b0:	d183      	bne.n	8016fba <uxr_write_framed_msg+0x10a>
 80170b2:	f04f 0300 	mov.w	r3, #0
 80170b6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80170ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80170bc:	4543      	cmp	r3, r8
 80170be:	d964      	bls.n	801718a <uxr_write_framed_msg+0x2da>
 80170c0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80170c4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80170c8:	2901      	cmp	r1, #1
 80170ca:	f04f 0200 	mov.w	r2, #0
 80170ce:	f63f af3d 	bhi.w	8016f4c <uxr_write_framed_msg+0x9c>
 80170d2:	1c51      	adds	r1, r2, #1
 80170d4:	b2c9      	uxtb	r1, r1
 80170d6:	2929      	cmp	r1, #41	@ 0x29
 80170d8:	d8da      	bhi.n	8017090 <uxr_write_framed_msg+0x1e0>
 80170da:	18a0      	adds	r0, r4, r2
 80170dc:	4421      	add	r1, r4
 80170de:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80170e2:	3202      	adds	r2, #2
 80170e4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80170e8:	b2d2      	uxtb	r2, r2
 80170ea:	f083 0020 	eor.w	r0, r3, #32
 80170ee:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80170f2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80170f6:	e733      	b.n	8016f60 <uxr_write_framed_msg+0xb0>
 80170f8:	18a1      	adds	r1, r4, r2
 80170fa:	3201      	adds	r2, #1
 80170fc:	4648      	mov	r0, r9
 80170fe:	b2d2      	uxtb	r2, r2
 8017100:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017104:	f04f 0901 	mov.w	r9, #1
 8017108:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801710c:	2800      	cmp	r0, #0
 801710e:	f43f af7b 	beq.w	8017008 <uxr_write_framed_msg+0x158>
 8017112:	2500      	movs	r5, #0
 8017114:	e002      	b.n	801711c <uxr_write_framed_msg+0x26c>
 8017116:	2800      	cmp	r0, #0
 8017118:	f43f af4f 	beq.w	8016fba <uxr_write_framed_msg+0x10a>
 801711c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017120:	1b52      	subs	r2, r2, r5
 8017122:	465b      	mov	r3, fp
 8017124:	4421      	add	r1, r4
 8017126:	4638      	mov	r0, r7
 8017128:	47b0      	blx	r6
 801712a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801712e:	4405      	add	r5, r0
 8017130:	4295      	cmp	r5, r2
 8017132:	d3f0      	bcc.n	8017116 <uxr_write_framed_msg+0x266>
 8017134:	f47f af41 	bne.w	8016fba <uxr_write_framed_msg+0x10a>
 8017138:	2300      	movs	r3, #0
 801713a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801713e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017140:	b298      	uxth	r0, r3
 8017142:	b003      	add	sp, #12
 8017144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017148:	217d      	movs	r1, #125	@ 0x7d
 801714a:	f082 0220 	eor.w	r2, r2, #32
 801714e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8017152:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017156:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801715a:	2901      	cmp	r1, #1
 801715c:	f04f 0203 	mov.w	r2, #3
 8017160:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017164:	d804      	bhi.n	8017170 <uxr_write_framed_msg+0x2c0>
 8017166:	4611      	mov	r1, r2
 8017168:	f04f 0c04 	mov.w	ip, #4
 801716c:	2205      	movs	r2, #5
 801716e:	e752      	b.n	8017016 <uxr_write_framed_msg+0x166>
 8017170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017172:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017176:	b2dd      	uxtb	r5, r3
 8017178:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801717c:	2204      	movs	r2, #4
 801717e:	2901      	cmp	r1, #1
 8017180:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017184:	f63f aec0 	bhi.w	8016f08 <uxr_write_framed_msg+0x58>
 8017188:	e758      	b.n	801703c <uxr_write_framed_msg+0x18c>
 801718a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801718e:	fa5f f889 	uxtb.w	r8, r9
 8017192:	9301      	str	r3, [sp, #4]
 8017194:	2200      	movs	r2, #0
 8017196:	e6f5      	b.n	8016f84 <uxr_write_framed_msg+0xd4>
 8017198:	0801b800 	.word	0x0801b800

0801719c <uxr_framing_read_transport>:
 801719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a0:	4604      	mov	r4, r0
 80171a2:	b083      	sub	sp, #12
 80171a4:	461f      	mov	r7, r3
 80171a6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80171aa:	4689      	mov	r9, r1
 80171ac:	4692      	mov	sl, r2
 80171ae:	f7f9 fd09 	bl	8010bc4 <uxr_millis>
 80171b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80171b6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80171ba:	42b3      	cmp	r3, r6
 80171bc:	4680      	mov	r8, r0
 80171be:	d061      	beq.n	8017284 <uxr_framing_read_transport+0xe8>
 80171c0:	d81c      	bhi.n	80171fc <uxr_framing_read_transport+0x60>
 80171c2:	1e75      	subs	r5, r6, #1
 80171c4:	1aed      	subs	r5, r5, r3
 80171c6:	b2ed      	uxtb	r5, r5
 80171c8:	2600      	movs	r6, #0
 80171ca:	455d      	cmp	r5, fp
 80171cc:	d81f      	bhi.n	801720e <uxr_framing_read_transport+0x72>
 80171ce:	19ab      	adds	r3, r5, r6
 80171d0:	455b      	cmp	r3, fp
 80171d2:	bf84      	itt	hi
 80171d4:	ebab 0605 	subhi.w	r6, fp, r5
 80171d8:	b2f6      	uxtbhi	r6, r6
 80171da:	b9ed      	cbnz	r5, 8017218 <uxr_framing_read_transport+0x7c>
 80171dc:	f04f 0b00 	mov.w	fp, #0
 80171e0:	f7f9 fcf0 	bl	8010bc4 <uxr_millis>
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	eba0 0808 	sub.w	r8, r0, r8
 80171ea:	eba3 0308 	sub.w	r3, r3, r8
 80171ee:	4658      	mov	r0, fp
 80171f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171f4:	603b      	str	r3, [r7, #0]
 80171f6:	b003      	add	sp, #12
 80171f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fc:	2e00      	cmp	r6, #0
 80171fe:	d049      	beq.n	8017294 <uxr_framing_read_transport+0xf8>
 8017200:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017204:	b2ed      	uxtb	r5, r5
 8017206:	3e01      	subs	r6, #1
 8017208:	455d      	cmp	r5, fp
 801720a:	b2f6      	uxtb	r6, r6
 801720c:	d9df      	bls.n	80171ce <uxr_framing_read_transport+0x32>
 801720e:	fa5f f58b 	uxtb.w	r5, fp
 8017212:	2600      	movs	r6, #0
 8017214:	2d00      	cmp	r5, #0
 8017216:	d0e1      	beq.n	80171dc <uxr_framing_read_transport+0x40>
 8017218:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801721c:	3102      	adds	r1, #2
 801721e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017220:	9300      	str	r3, [sp, #0]
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	4421      	add	r1, r4
 8017226:	462a      	mov	r2, r5
 8017228:	4650      	mov	r0, sl
 801722a:	47c8      	blx	r9
 801722c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017230:	4a1a      	ldr	r2, [pc, #104]	@ (801729c <uxr_framing_read_transport+0x100>)
 8017232:	4403      	add	r3, r0
 8017234:	0859      	lsrs	r1, r3, #1
 8017236:	fba2 2101 	umull	r2, r1, r2, r1
 801723a:	0889      	lsrs	r1, r1, #2
 801723c:	222a      	movs	r2, #42	@ 0x2a
 801723e:	fb02 3111 	mls	r1, r2, r1, r3
 8017242:	4683      	mov	fp, r0
 8017244:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8017248:	2800      	cmp	r0, #0
 801724a:	d0c7      	beq.n	80171dc <uxr_framing_read_transport+0x40>
 801724c:	42a8      	cmp	r0, r5
 801724e:	d1c7      	bne.n	80171e0 <uxr_framing_read_transport+0x44>
 8017250:	2e00      	cmp	r6, #0
 8017252:	d0c5      	beq.n	80171e0 <uxr_framing_read_transport+0x44>
 8017254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017256:	9300      	str	r3, [sp, #0]
 8017258:	3102      	adds	r1, #2
 801725a:	4632      	mov	r2, r6
 801725c:	4421      	add	r1, r4
 801725e:	2300      	movs	r3, #0
 8017260:	4650      	mov	r0, sl
 8017262:	47c8      	blx	r9
 8017264:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017268:	4a0c      	ldr	r2, [pc, #48]	@ (801729c <uxr_framing_read_transport+0x100>)
 801726a:	180b      	adds	r3, r1, r0
 801726c:	0859      	lsrs	r1, r3, #1
 801726e:	fba2 1201 	umull	r1, r2, r2, r1
 8017272:	0892      	lsrs	r2, r2, #2
 8017274:	212a      	movs	r1, #42	@ 0x2a
 8017276:	fb01 3312 	mls	r3, r1, r2, r3
 801727a:	eb00 0b05 	add.w	fp, r0, r5
 801727e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017282:	e7ad      	b.n	80171e0 <uxr_framing_read_transport+0x44>
 8017284:	2600      	movs	r6, #0
 8017286:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801728a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801728c:	d9bf      	bls.n	801720e <uxr_framing_read_transport+0x72>
 801728e:	2102      	movs	r1, #2
 8017290:	2529      	movs	r5, #41	@ 0x29
 8017292:	e7c4      	b.n	801721e <uxr_framing_read_transport+0x82>
 8017294:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017298:	b2ed      	uxtb	r5, r5
 801729a:	e796      	b.n	80171ca <uxr_framing_read_transport+0x2e>
 801729c:	30c30c31 	.word	0x30c30c31

080172a0 <uxr_read_framed_msg>:
 80172a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a4:	461e      	mov	r6, r3
 80172a6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80172aa:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80172ae:	429d      	cmp	r5, r3
 80172b0:	b083      	sub	sp, #12
 80172b2:	4604      	mov	r4, r0
 80172b4:	4688      	mov	r8, r1
 80172b6:	4691      	mov	r9, r2
 80172b8:	f000 8188 	beq.w	80175cc <uxr_read_framed_msg+0x32c>
 80172bc:	7823      	ldrb	r3, [r4, #0]
 80172be:	4dc1      	ldr	r5, [pc, #772]	@ (80175c4 <uxr_read_framed_msg+0x324>)
 80172c0:	4fc1      	ldr	r7, [pc, #772]	@ (80175c8 <uxr_read_framed_msg+0x328>)
 80172c2:	2b07      	cmp	r3, #7
 80172c4:	d8fd      	bhi.n	80172c2 <uxr_read_framed_msg+0x22>
 80172c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80172ca:	0115      	.short	0x0115
 80172cc:	00d600f6 	.word	0x00d600f6
 80172d0:	009000b9 	.word	0x009000b9
 80172d4:	0030004d 	.word	0x0030004d
 80172d8:	0008      	.short	0x0008
 80172da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80172de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80172e2:	4299      	cmp	r1, r3
 80172e4:	f000 814a 	beq.w	801757c <uxr_read_framed_msg+0x2dc>
 80172e8:	18e2      	adds	r2, r4, r3
 80172ea:	7892      	ldrb	r2, [r2, #2]
 80172ec:	2a7d      	cmp	r2, #125	@ 0x7d
 80172ee:	f000 8199 	beq.w	8017624 <uxr_read_framed_msg+0x384>
 80172f2:	3301      	adds	r3, #1
 80172f4:	0858      	lsrs	r0, r3, #1
 80172f6:	fba5 1000 	umull	r1, r0, r5, r0
 80172fa:	0880      	lsrs	r0, r0, #2
 80172fc:	212a      	movs	r1, #42	@ 0x2a
 80172fe:	fb01 3310 	mls	r3, r1, r0, r3
 8017302:	2a7e      	cmp	r2, #126	@ 0x7e
 8017304:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017308:	f000 8252 	beq.w	80177b0 <uxr_read_framed_msg+0x510>
 801730c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801730e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017314:	b29b      	uxth	r3, r3
 8017316:	2200      	movs	r2, #0
 8017318:	4299      	cmp	r1, r3
 801731a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801731c:	7022      	strb	r2, [r4, #0]
 801731e:	f000 8179 	beq.w	8017614 <uxr_read_framed_msg+0x374>
 8017322:	2000      	movs	r0, #0
 8017324:	b003      	add	sp, #12
 8017326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801732a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801732e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017332:	4299      	cmp	r1, r3
 8017334:	f000 8131 	beq.w	801759a <uxr_read_framed_msg+0x2fa>
 8017338:	18e2      	adds	r2, r4, r3
 801733a:	7890      	ldrb	r0, [r2, #2]
 801733c:	287d      	cmp	r0, #125	@ 0x7d
 801733e:	f000 8190 	beq.w	8017662 <uxr_read_framed_msg+0x3c2>
 8017342:	3301      	adds	r3, #1
 8017344:	085a      	lsrs	r2, r3, #1
 8017346:	fba5 1202 	umull	r1, r2, r5, r2
 801734a:	0892      	lsrs	r2, r2, #2
 801734c:	212a      	movs	r1, #42	@ 0x2a
 801734e:	fb01 3312 	mls	r3, r1, r2, r3
 8017352:	287e      	cmp	r0, #126	@ 0x7e
 8017354:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017358:	f000 821a 	beq.w	8017790 <uxr_read_framed_msg+0x4f0>
 801735c:	2307      	movs	r3, #7
 801735e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8017360:	7023      	strb	r3, [r4, #0]
 8017362:	e7ae      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 8017364:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017366:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801736a:	459e      	cmp	lr, r3
 801736c:	d938      	bls.n	80173e0 <uxr_read_framed_msg+0x140>
 801736e:	ee07 8a90 	vmov	s15, r8
 8017372:	212a      	movs	r1, #42	@ 0x2a
 8017374:	e020      	b.n	80173b8 <uxr_read_framed_msg+0x118>
 8017376:	f89b c002 	ldrb.w	ip, [fp, #2]
 801737a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801737e:	f000 80d4 	beq.w	801752a <uxr_read_framed_msg+0x28a>
 8017382:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017386:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801738a:	f000 8219 	beq.w	80177c0 <uxr_read_framed_msg+0x520>
 801738e:	f806 c003 	strb.w	ip, [r6, r3]
 8017392:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017396:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017398:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801739c:	ea8a 000c 	eor.w	r0, sl, ip
 80173a0:	b2c0      	uxtb	r0, r0
 80173a2:	3301      	adds	r3, #1
 80173a4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80173ae:	4573      	cmp	r3, lr
 80173b0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80173b2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80173b4:	f080 8120 	bcs.w	80175f8 <uxr_read_framed_msg+0x358>
 80173b8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80173bc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80173c0:	f100 0c01 	add.w	ip, r0, #1
 80173c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80173c8:	fba5 8202 	umull	r8, r2, r5, r2
 80173cc:	0892      	lsrs	r2, r2, #2
 80173ce:	4582      	cmp	sl, r0
 80173d0:	eb04 0b00 	add.w	fp, r4, r0
 80173d4:	fb01 c212 	mls	r2, r1, r2, ip
 80173d8:	d1cd      	bne.n	8017376 <uxr_read_framed_msg+0xd6>
 80173da:	ee17 8a90 	vmov	r8, s15
 80173de:	459e      	cmp	lr, r3
 80173e0:	f040 8111 	bne.w	8017606 <uxr_read_framed_msg+0x366>
 80173e4:	2306      	movs	r3, #6
 80173e6:	7023      	strb	r3, [r4, #0]
 80173e8:	e76b      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 80173ea:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80173ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80173f2:	4298      	cmp	r0, r3
 80173f4:	f000 80c2 	beq.w	801757c <uxr_read_framed_msg+0x2dc>
 80173f8:	18e2      	adds	r2, r4, r3
 80173fa:	7891      	ldrb	r1, [r2, #2]
 80173fc:	297d      	cmp	r1, #125	@ 0x7d
 80173fe:	f000 814c 	beq.w	801769a <uxr_read_framed_msg+0x3fa>
 8017402:	3301      	adds	r3, #1
 8017404:	085a      	lsrs	r2, r3, #1
 8017406:	fba5 0202 	umull	r0, r2, r5, r2
 801740a:	0892      	lsrs	r2, r2, #2
 801740c:	202a      	movs	r0, #42	@ 0x2a
 801740e:	fb00 3312 	mls	r3, r0, r2, r3
 8017412:	297e      	cmp	r1, #126	@ 0x7e
 8017414:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017418:	f000 81ca 	beq.w	80177b0 <uxr_read_framed_msg+0x510>
 801741c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801741e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017422:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017424:	b29b      	uxth	r3, r3
 8017426:	2000      	movs	r0, #0
 8017428:	428b      	cmp	r3, r1
 801742a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801742c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801742e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8017430:	f240 80df 	bls.w	80175f2 <uxr_read_framed_msg+0x352>
 8017434:	7020      	strb	r0, [r4, #0]
 8017436:	b003      	add	sp, #12
 8017438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017440:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017444:	4299      	cmp	r1, r3
 8017446:	f000 80a8 	beq.w	801759a <uxr_read_framed_msg+0x2fa>
 801744a:	18e2      	adds	r2, r4, r3
 801744c:	7890      	ldrb	r0, [r2, #2]
 801744e:	287d      	cmp	r0, #125	@ 0x7d
 8017450:	f000 8164 	beq.w	801771c <uxr_read_framed_msg+0x47c>
 8017454:	3301      	adds	r3, #1
 8017456:	085a      	lsrs	r2, r3, #1
 8017458:	fba5 1202 	umull	r1, r2, r5, r2
 801745c:	0892      	lsrs	r2, r2, #2
 801745e:	212a      	movs	r1, #42	@ 0x2a
 8017460:	fb01 3312 	mls	r3, r1, r2, r3
 8017464:	287e      	cmp	r0, #126	@ 0x7e
 8017466:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801746a:	f000 8191 	beq.w	8017790 <uxr_read_framed_msg+0x4f0>
 801746e:	2304      	movs	r3, #4
 8017470:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017472:	7023      	strb	r3, [r4, #0]
 8017474:	e725      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 8017476:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801747a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801747e:	4290      	cmp	r0, r2
 8017480:	f000 80b3 	beq.w	80175ea <uxr_read_framed_msg+0x34a>
 8017484:	18a3      	adds	r3, r4, r2
 8017486:	7899      	ldrb	r1, [r3, #2]
 8017488:	297d      	cmp	r1, #125	@ 0x7d
 801748a:	f000 8164 	beq.w	8017756 <uxr_read_framed_msg+0x4b6>
 801748e:	3201      	adds	r2, #1
 8017490:	0850      	lsrs	r0, r2, #1
 8017492:	fba5 3000 	umull	r3, r0, r5, r0
 8017496:	0880      	lsrs	r0, r0, #2
 8017498:	232a      	movs	r3, #42	@ 0x2a
 801749a:	fb03 2210 	mls	r2, r3, r0, r2
 801749e:	297e      	cmp	r1, #126	@ 0x7e
 80174a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80174a4:	f000 8188 	beq.w	80177b8 <uxr_read_framed_msg+0x518>
 80174a8:	7863      	ldrb	r3, [r4, #1]
 80174aa:	428b      	cmp	r3, r1
 80174ac:	bf0c      	ite	eq
 80174ae:	2303      	moveq	r3, #3
 80174b0:	2300      	movne	r3, #0
 80174b2:	7023      	strb	r3, [r4, #0]
 80174b4:	e705      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 80174b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80174ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80174be:	2200      	movs	r2, #0
 80174c0:	4299      	cmp	r1, r3
 80174c2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80174c6:	d06c      	beq.n	80175a2 <uxr_read_framed_msg+0x302>
 80174c8:	18e2      	adds	r2, r4, r3
 80174ca:	7890      	ldrb	r0, [r2, #2]
 80174cc:	287d      	cmp	r0, #125	@ 0x7d
 80174ce:	f000 8101 	beq.w	80176d4 <uxr_read_framed_msg+0x434>
 80174d2:	3301      	adds	r3, #1
 80174d4:	085a      	lsrs	r2, r3, #1
 80174d6:	fba5 1202 	umull	r1, r2, r5, r2
 80174da:	0892      	lsrs	r2, r2, #2
 80174dc:	212a      	movs	r1, #42	@ 0x2a
 80174de:	fb01 3312 	mls	r3, r1, r2, r3
 80174e2:	287e      	cmp	r0, #126	@ 0x7e
 80174e4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80174e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80174ec:	d059      	beq.n	80175a2 <uxr_read_framed_msg+0x302>
 80174ee:	2302      	movs	r3, #2
 80174f0:	7023      	strb	r3, [r4, #0]
 80174f2:	e6e6      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 80174f4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80174f8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80174fc:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017500:	1c51      	adds	r1, r2, #1
 8017502:	084b      	lsrs	r3, r1, #1
 8017504:	fba5 c303 	umull	ip, r3, r5, r3
 8017508:	089b      	lsrs	r3, r3, #2
 801750a:	fb0e 1313 	mls	r3, lr, r3, r1
 801750e:	4592      	cmp	sl, r2
 8017510:	eb04 0002 	add.w	r0, r4, r2
 8017514:	b2da      	uxtb	r2, r3
 8017516:	f43f af04 	beq.w	8017322 <uxr_read_framed_msg+0x82>
 801751a:	7883      	ldrb	r3, [r0, #2]
 801751c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017520:	2b7e      	cmp	r3, #126	@ 0x7e
 8017522:	d1ed      	bne.n	8017500 <uxr_read_framed_msg+0x260>
 8017524:	2301      	movs	r3, #1
 8017526:	7023      	strb	r3, [r4, #0]
 8017528:	e6cb      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 801752a:	f100 0c01 	add.w	ip, r0, #1
 801752e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017532:	fba5 8202 	umull	r8, r2, r5, r2
 8017536:	0892      	lsrs	r2, r2, #2
 8017538:	fb01 c212 	mls	r2, r1, r2, ip
 801753c:	eb04 0c02 	add.w	ip, r4, r2
 8017540:	b2d2      	uxtb	r2, r2
 8017542:	4592      	cmp	sl, r2
 8017544:	f100 0002 	add.w	r0, r0, #2
 8017548:	f43f af47 	beq.w	80173da <uxr_read_framed_msg+0x13a>
 801754c:	0842      	lsrs	r2, r0, #1
 801754e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017552:	fba5 8202 	umull	r8, r2, r5, r2
 8017556:	0892      	lsrs	r2, r2, #2
 8017558:	fb01 0012 	mls	r0, r1, r2, r0
 801755c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017560:	f08a 0c20 	eor.w	ip, sl, #32
 8017564:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017568:	f47f af11 	bne.w	801738e <uxr_read_framed_msg+0xee>
 801756c:	459e      	cmp	lr, r3
 801756e:	ee17 8a90 	vmov	r8, s15
 8017572:	f43f af37 	beq.w	80173e4 <uxr_read_framed_msg+0x144>
 8017576:	2301      	movs	r3, #1
 8017578:	7023      	strb	r3, [r4, #0]
 801757a:	e6a2      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 801757c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801757e:	9300      	str	r3, [sp, #0]
 8017580:	2301      	movs	r3, #1
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017586:	464a      	mov	r2, r9
 8017588:	4641      	mov	r1, r8
 801758a:	4620      	mov	r0, r4
 801758c:	f7ff fe06 	bl	801719c <uxr_framing_read_transport>
 8017590:	2800      	cmp	r0, #0
 8017592:	f43f aec6 	beq.w	8017322 <uxr_read_framed_msg+0x82>
 8017596:	7823      	ldrb	r3, [r4, #0]
 8017598:	e693      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 801759a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	2302      	movs	r3, #2
 80175a0:	e7ef      	b.n	8017582 <uxr_read_framed_msg+0x2e2>
 80175a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175a4:	9300      	str	r3, [sp, #0]
 80175a6:	2304      	movs	r3, #4
 80175a8:	9301      	str	r3, [sp, #4]
 80175aa:	464a      	mov	r2, r9
 80175ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175ae:	4641      	mov	r1, r8
 80175b0:	4620      	mov	r0, r4
 80175b2:	f7ff fdf3 	bl	801719c <uxr_framing_read_transport>
 80175b6:	2800      	cmp	r0, #0
 80175b8:	d1ed      	bne.n	8017596 <uxr_read_framed_msg+0x2f6>
 80175ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80175be:	2b7e      	cmp	r3, #126	@ 0x7e
 80175c0:	d0e9      	beq.n	8017596 <uxr_read_framed_msg+0x2f6>
 80175c2:	e6ae      	b.n	8017322 <uxr_read_framed_msg+0x82>
 80175c4:	30c30c31 	.word	0x30c30c31
 80175c8:	0801b800 	.word	0x0801b800
 80175cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175ce:	9300      	str	r3, [sp, #0]
 80175d0:	2305      	movs	r3, #5
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175d6:	f7ff fde1 	bl	801719c <uxr_framing_read_transport>
 80175da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80175de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80175e2:	429a      	cmp	r2, r3
 80175e4:	f43f ae9d 	beq.w	8017322 <uxr_read_framed_msg+0x82>
 80175e8:	e668      	b.n	80172bc <uxr_read_framed_msg+0x1c>
 80175ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175ec:	9300      	str	r3, [sp, #0]
 80175ee:	2303      	movs	r3, #3
 80175f0:	e7c7      	b.n	8017582 <uxr_read_framed_msg+0x2e2>
 80175f2:	2305      	movs	r3, #5
 80175f4:	7023      	strb	r3, [r4, #0]
 80175f6:	e664      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 80175f8:	ee17 8a90 	vmov	r8, s15
 80175fc:	f43f aef2 	beq.w	80173e4 <uxr_read_framed_msg+0x144>
 8017600:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017604:	d08e      	beq.n	8017524 <uxr_read_framed_msg+0x284>
 8017606:	ebae 0303 	sub.w	r3, lr, r3
 801760a:	3302      	adds	r3, #2
 801760c:	9301      	str	r3, [sp, #4]
 801760e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	e7b7      	b.n	8017584 <uxr_read_framed_msg+0x2e4>
 8017614:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017616:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801761a:	7013      	strb	r3, [r2, #0]
 801761c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801761e:	b003      	add	sp, #12
 8017620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017624:	f103 0c01 	add.w	ip, r3, #1
 8017628:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801762c:	fba5 0202 	umull	r0, r2, r5, r2
 8017630:	0892      	lsrs	r2, r2, #2
 8017632:	202a      	movs	r0, #42	@ 0x2a
 8017634:	fb00 c212 	mls	r2, r0, r2, ip
 8017638:	fa5f fc82 	uxtb.w	ip, r2
 801763c:	4561      	cmp	r1, ip
 801763e:	d09d      	beq.n	801757c <uxr_read_framed_msg+0x2dc>
 8017640:	3302      	adds	r3, #2
 8017642:	4422      	add	r2, r4
 8017644:	0859      	lsrs	r1, r3, #1
 8017646:	7892      	ldrb	r2, [r2, #2]
 8017648:	fba5 c101 	umull	ip, r1, r5, r1
 801764c:	0889      	lsrs	r1, r1, #2
 801764e:	fb00 3311 	mls	r3, r0, r1, r3
 8017652:	2a7e      	cmp	r2, #126	@ 0x7e
 8017654:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017658:	f000 80aa 	beq.w	80177b0 <uxr_read_framed_msg+0x510>
 801765c:	f082 0220 	eor.w	r2, r2, #32
 8017660:	e654      	b.n	801730c <uxr_read_framed_msg+0x6c>
 8017662:	1c58      	adds	r0, r3, #1
 8017664:	0842      	lsrs	r2, r0, #1
 8017666:	fba5 c202 	umull	ip, r2, r5, r2
 801766a:	0892      	lsrs	r2, r2, #2
 801766c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017670:	fb0c 0212 	mls	r2, ip, r2, r0
 8017674:	b2d0      	uxtb	r0, r2
 8017676:	4281      	cmp	r1, r0
 8017678:	d08f      	beq.n	801759a <uxr_read_framed_msg+0x2fa>
 801767a:	4422      	add	r2, r4
 801767c:	3302      	adds	r3, #2
 801767e:	7890      	ldrb	r0, [r2, #2]
 8017680:	085a      	lsrs	r2, r3, #1
 8017682:	fba5 1202 	umull	r1, r2, r5, r2
 8017686:	0892      	lsrs	r2, r2, #2
 8017688:	fb0c 3312 	mls	r3, ip, r2, r3
 801768c:	287e      	cmp	r0, #126	@ 0x7e
 801768e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017692:	d07d      	beq.n	8017790 <uxr_read_framed_msg+0x4f0>
 8017694:	f080 0020 	eor.w	r0, r0, #32
 8017698:	e660      	b.n	801735c <uxr_read_framed_msg+0xbc>
 801769a:	1c59      	adds	r1, r3, #1
 801769c:	084a      	lsrs	r2, r1, #1
 801769e:	fba5 c202 	umull	ip, r2, r5, r2
 80176a2:	0892      	lsrs	r2, r2, #2
 80176a4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80176a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80176ac:	b2d1      	uxtb	r1, r2
 80176ae:	4288      	cmp	r0, r1
 80176b0:	f43f af64 	beq.w	801757c <uxr_read_framed_msg+0x2dc>
 80176b4:	4422      	add	r2, r4
 80176b6:	3302      	adds	r3, #2
 80176b8:	7891      	ldrb	r1, [r2, #2]
 80176ba:	085a      	lsrs	r2, r3, #1
 80176bc:	fba5 0202 	umull	r0, r2, r5, r2
 80176c0:	0892      	lsrs	r2, r2, #2
 80176c2:	fb0c 3312 	mls	r3, ip, r2, r3
 80176c6:	297e      	cmp	r1, #126	@ 0x7e
 80176c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80176cc:	d070      	beq.n	80177b0 <uxr_read_framed_msg+0x510>
 80176ce:	f081 0120 	eor.w	r1, r1, #32
 80176d2:	e6a3      	b.n	801741c <uxr_read_framed_msg+0x17c>
 80176d4:	f103 0c01 	add.w	ip, r3, #1
 80176d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80176dc:	fba5 0202 	umull	r0, r2, r5, r2
 80176e0:	0892      	lsrs	r2, r2, #2
 80176e2:	202a      	movs	r0, #42	@ 0x2a
 80176e4:	fb00 c212 	mls	r2, r0, r2, ip
 80176e8:	fa5f fc82 	uxtb.w	ip, r2
 80176ec:	4561      	cmp	r1, ip
 80176ee:	f43f af58 	beq.w	80175a2 <uxr_read_framed_msg+0x302>
 80176f2:	4422      	add	r2, r4
 80176f4:	3302      	adds	r3, #2
 80176f6:	7891      	ldrb	r1, [r2, #2]
 80176f8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80176fc:	085a      	lsrs	r2, r3, #1
 80176fe:	fba5 c202 	umull	ip, r2, r5, r2
 8017702:	0892      	lsrs	r2, r2, #2
 8017704:	fb00 3312 	mls	r3, r0, r2, r3
 8017708:	297e      	cmp	r1, #126	@ 0x7e
 801770a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801770e:	f43f af48 	beq.w	80175a2 <uxr_read_framed_msg+0x302>
 8017712:	f081 0120 	eor.w	r1, r1, #32
 8017716:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801771a:	e6e8      	b.n	80174ee <uxr_read_framed_msg+0x24e>
 801771c:	1c58      	adds	r0, r3, #1
 801771e:	0842      	lsrs	r2, r0, #1
 8017720:	fba5 c202 	umull	ip, r2, r5, r2
 8017724:	0892      	lsrs	r2, r2, #2
 8017726:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801772a:	fb0c 0212 	mls	r2, ip, r2, r0
 801772e:	b2d0      	uxtb	r0, r2
 8017730:	4281      	cmp	r1, r0
 8017732:	f43f af32 	beq.w	801759a <uxr_read_framed_msg+0x2fa>
 8017736:	4422      	add	r2, r4
 8017738:	3302      	adds	r3, #2
 801773a:	7890      	ldrb	r0, [r2, #2]
 801773c:	085a      	lsrs	r2, r3, #1
 801773e:	fba5 1202 	umull	r1, r2, r5, r2
 8017742:	0892      	lsrs	r2, r2, #2
 8017744:	fb0c 3312 	mls	r3, ip, r2, r3
 8017748:	287e      	cmp	r0, #126	@ 0x7e
 801774a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801774e:	d01f      	beq.n	8017790 <uxr_read_framed_msg+0x4f0>
 8017750:	f080 0020 	eor.w	r0, r0, #32
 8017754:	e68b      	b.n	801746e <uxr_read_framed_msg+0x1ce>
 8017756:	1c51      	adds	r1, r2, #1
 8017758:	084b      	lsrs	r3, r1, #1
 801775a:	fba5 c303 	umull	ip, r3, r5, r3
 801775e:	089b      	lsrs	r3, r3, #2
 8017760:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017764:	fb0c 1313 	mls	r3, ip, r3, r1
 8017768:	b2d9      	uxtb	r1, r3
 801776a:	4288      	cmp	r0, r1
 801776c:	f43f af3d 	beq.w	80175ea <uxr_read_framed_msg+0x34a>
 8017770:	3202      	adds	r2, #2
 8017772:	4423      	add	r3, r4
 8017774:	0850      	lsrs	r0, r2, #1
 8017776:	789b      	ldrb	r3, [r3, #2]
 8017778:	fba5 1000 	umull	r1, r0, r5, r0
 801777c:	0880      	lsrs	r0, r0, #2
 801777e:	fb0c 2210 	mls	r2, ip, r0, r2
 8017782:	2b7e      	cmp	r3, #126	@ 0x7e
 8017784:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017788:	d016      	beq.n	80177b8 <uxr_read_framed_msg+0x518>
 801778a:	f083 0120 	eor.w	r1, r3, #32
 801778e:	e68b      	b.n	80174a8 <uxr_read_framed_msg+0x208>
 8017790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017792:	9300      	str	r3, [sp, #0]
 8017794:	2302      	movs	r3, #2
 8017796:	9301      	str	r3, [sp, #4]
 8017798:	464a      	mov	r2, r9
 801779a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801779c:	4641      	mov	r1, r8
 801779e:	4620      	mov	r0, r4
 80177a0:	f7ff fcfc 	bl	801719c <uxr_framing_read_transport>
 80177a4:	2800      	cmp	r0, #0
 80177a6:	f47f aef6 	bne.w	8017596 <uxr_read_framed_msg+0x2f6>
 80177aa:	2301      	movs	r3, #1
 80177ac:	7023      	strb	r3, [r4, #0]
 80177ae:	e588      	b.n	80172c2 <uxr_read_framed_msg+0x22>
 80177b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177b2:	9300      	str	r3, [sp, #0]
 80177b4:	2301      	movs	r3, #1
 80177b6:	e7ee      	b.n	8017796 <uxr_read_framed_msg+0x4f6>
 80177b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177ba:	9300      	str	r3, [sp, #0]
 80177bc:	2303      	movs	r3, #3
 80177be:	e7ea      	b.n	8017796 <uxr_read_framed_msg+0x4f6>
 80177c0:	ee17 8a90 	vmov	r8, s15
 80177c4:	e6ae      	b.n	8017524 <uxr_read_framed_msg+0x284>
 80177c6:	bf00      	nop

080177c8 <rcl_get_default_domain_id>:
 80177c8:	b530      	push	{r4, r5, lr}
 80177ca:	b083      	sub	sp, #12
 80177cc:	2300      	movs	r3, #0
 80177ce:	9300      	str	r3, [sp, #0]
 80177d0:	b1d0      	cbz	r0, 8017808 <rcl_get_default_domain_id+0x40>
 80177d2:	4604      	mov	r4, r0
 80177d4:	4669      	mov	r1, sp
 80177d6:	4815      	ldr	r0, [pc, #84]	@ (801782c <rcl_get_default_domain_id+0x64>)
 80177d8:	f7f6 f90c 	bl	800d9f4 <rcutils_get_env>
 80177dc:	4602      	mov	r2, r0
 80177de:	b110      	cbz	r0, 80177e6 <rcl_get_default_domain_id+0x1e>
 80177e0:	2001      	movs	r0, #1
 80177e2:	b003      	add	sp, #12
 80177e4:	bd30      	pop	{r4, r5, pc}
 80177e6:	9b00      	ldr	r3, [sp, #0]
 80177e8:	b18b      	cbz	r3, 801780e <rcl_get_default_domain_id+0x46>
 80177ea:	7818      	ldrb	r0, [r3, #0]
 80177ec:	2800      	cmp	r0, #0
 80177ee:	d0f8      	beq.n	80177e2 <rcl_get_default_domain_id+0x1a>
 80177f0:	a901      	add	r1, sp, #4
 80177f2:	4618      	mov	r0, r3
 80177f4:	9201      	str	r2, [sp, #4]
 80177f6:	f000 fd6b 	bl	80182d0 <strtoul>
 80177fa:	4605      	mov	r5, r0
 80177fc:	b150      	cbz	r0, 8017814 <rcl_get_default_domain_id+0x4c>
 80177fe:	1c43      	adds	r3, r0, #1
 8017800:	d00d      	beq.n	801781e <rcl_get_default_domain_id+0x56>
 8017802:	6025      	str	r5, [r4, #0]
 8017804:	2000      	movs	r0, #0
 8017806:	e7ec      	b.n	80177e2 <rcl_get_default_domain_id+0x1a>
 8017808:	200b      	movs	r0, #11
 801780a:	b003      	add	sp, #12
 801780c:	bd30      	pop	{r4, r5, pc}
 801780e:	4618      	mov	r0, r3
 8017810:	b003      	add	sp, #12
 8017812:	bd30      	pop	{r4, r5, pc}
 8017814:	9b01      	ldr	r3, [sp, #4]
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d0f2      	beq.n	8017802 <rcl_get_default_domain_id+0x3a>
 801781c:	e7e0      	b.n	80177e0 <rcl_get_default_domain_id+0x18>
 801781e:	f001 f8eb 	bl	80189f8 <__errno>
 8017822:	6803      	ldr	r3, [r0, #0]
 8017824:	2b22      	cmp	r3, #34	@ 0x22
 8017826:	d1ec      	bne.n	8017802 <rcl_get_default_domain_id+0x3a>
 8017828:	e7da      	b.n	80177e0 <rcl_get_default_domain_id+0x18>
 801782a:	bf00      	nop
 801782c:	0801ba00 	.word	0x0801ba00

08017830 <rcl_expand_topic_name>:
 8017830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	b08b      	sub	sp, #44	@ 0x2c
 8017836:	9306      	str	r3, [sp, #24]
 8017838:	2800      	cmp	r0, #0
 801783a:	f000 80ad 	beq.w	8017998 <rcl_expand_topic_name+0x168>
 801783e:	460e      	mov	r6, r1
 8017840:	2900      	cmp	r1, #0
 8017842:	f000 80a9 	beq.w	8017998 <rcl_expand_topic_name+0x168>
 8017846:	4617      	mov	r7, r2
 8017848:	2a00      	cmp	r2, #0
 801784a:	f000 80a5 	beq.w	8017998 <rcl_expand_topic_name+0x168>
 801784e:	2b00      	cmp	r3, #0
 8017850:	f000 80a2 	beq.w	8017998 <rcl_expand_topic_name+0x168>
 8017854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017856:	2b00      	cmp	r3, #0
 8017858:	f000 809e 	beq.w	8017998 <rcl_expand_topic_name+0x168>
 801785c:	2200      	movs	r2, #0
 801785e:	a909      	add	r1, sp, #36	@ 0x24
 8017860:	4680      	mov	r8, r0
 8017862:	f000 f949 	bl	8017af8 <rcl_validate_topic_name>
 8017866:	4604      	mov	r4, r0
 8017868:	2800      	cmp	r0, #0
 801786a:	f040 8096 	bne.w	801799a <rcl_expand_topic_name+0x16a>
 801786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017870:	2b00      	cmp	r3, #0
 8017872:	f040 809a 	bne.w	80179aa <rcl_expand_topic_name+0x17a>
 8017876:	4602      	mov	r2, r0
 8017878:	a909      	add	r1, sp, #36	@ 0x24
 801787a:	4630      	mov	r0, r6
 801787c:	f7f6 fb44 	bl	800df08 <rmw_validate_node_name>
 8017880:	2800      	cmp	r0, #0
 8017882:	f040 808e 	bne.w	80179a2 <rcl_expand_topic_name+0x172>
 8017886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017888:	2a00      	cmp	r2, #0
 801788a:	f040 8093 	bne.w	80179b4 <rcl_expand_topic_name+0x184>
 801788e:	a909      	add	r1, sp, #36	@ 0x24
 8017890:	4638      	mov	r0, r7
 8017892:	f7f6 fb1b 	bl	800decc <rmw_validate_namespace>
 8017896:	2800      	cmp	r0, #0
 8017898:	f040 8083 	bne.w	80179a2 <rcl_expand_topic_name+0x172>
 801789c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801789e:	2c00      	cmp	r4, #0
 80178a0:	f040 80ed 	bne.w	8017a7e <rcl_expand_topic_name+0x24e>
 80178a4:	217b      	movs	r1, #123	@ 0x7b
 80178a6:	4640      	mov	r0, r8
 80178a8:	f000 ffc4 	bl	8018834 <strchr>
 80178ac:	f898 3000 	ldrb.w	r3, [r8]
 80178b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80178b2:	4605      	mov	r5, r0
 80178b4:	f000 809e 	beq.w	80179f4 <rcl_expand_topic_name+0x1c4>
 80178b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80178ba:	f040 80a2 	bne.w	8017a02 <rcl_expand_topic_name+0x1d2>
 80178be:	4638      	mov	r0, r7
 80178c0:	f7e8 fcb0 	bl	8000224 <strlen>
 80178c4:	4a82      	ldr	r2, [pc, #520]	@ (8017ad0 <rcl_expand_topic_name+0x2a0>)
 80178c6:	4b83      	ldr	r3, [pc, #524]	@ (8017ad4 <rcl_expand_topic_name+0x2a4>)
 80178c8:	2801      	cmp	r0, #1
 80178ca:	bf18      	it	ne
 80178cc:	4613      	movne	r3, r2
 80178ce:	9302      	str	r3, [sp, #8]
 80178d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80178d2:	9300      	str	r3, [sp, #0]
 80178d4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80178d8:	f108 0301 	add.w	r3, r8, #1
 80178dc:	9305      	str	r3, [sp, #20]
 80178de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80178e2:	9301      	str	r3, [sp, #4]
 80178e4:	ab14      	add	r3, sp, #80	@ 0x50
 80178e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80178e8:	f7f6 f8ce 	bl	800da88 <rcutils_format_string_limit>
 80178ec:	4682      	mov	sl, r0
 80178ee:	2800      	cmp	r0, #0
 80178f0:	f000 80c7 	beq.w	8017a82 <rcl_expand_topic_name+0x252>
 80178f4:	2d00      	cmp	r5, #0
 80178f6:	f000 80a2 	beq.w	8017a3e <rcl_expand_topic_name+0x20e>
 80178fa:	217b      	movs	r1, #123	@ 0x7b
 80178fc:	f000 ff9a 	bl	8018834 <strchr>
 8017900:	46d1      	mov	r9, sl
 8017902:	4605      	mov	r5, r0
 8017904:	9407      	str	r4, [sp, #28]
 8017906:	46d3      	mov	fp, sl
 8017908:	464c      	mov	r4, r9
 801790a:	2d00      	cmp	r5, #0
 801790c:	f000 80be 	beq.w	8017a8c <rcl_expand_topic_name+0x25c>
 8017910:	217d      	movs	r1, #125	@ 0x7d
 8017912:	4620      	mov	r0, r4
 8017914:	f000 ff8e 	bl	8018834 <strchr>
 8017918:	eba0 0905 	sub.w	r9, r0, r5
 801791c:	f109 0a01 	add.w	sl, r9, #1
 8017920:	486d      	ldr	r0, [pc, #436]	@ (8017ad8 <rcl_expand_topic_name+0x2a8>)
 8017922:	4652      	mov	r2, sl
 8017924:	4629      	mov	r1, r5
 8017926:	f000 ff92 	bl	801884e <strncmp>
 801792a:	2800      	cmp	r0, #0
 801792c:	d067      	beq.n	80179fe <rcl_expand_topic_name+0x1ce>
 801792e:	486b      	ldr	r0, [pc, #428]	@ (8017adc <rcl_expand_topic_name+0x2ac>)
 8017930:	4652      	mov	r2, sl
 8017932:	4629      	mov	r1, r5
 8017934:	f000 ff8b 	bl	801884e <strncmp>
 8017938:	b130      	cbz	r0, 8017948 <rcl_expand_topic_name+0x118>
 801793a:	4869      	ldr	r0, [pc, #420]	@ (8017ae0 <rcl_expand_topic_name+0x2b0>)
 801793c:	4652      	mov	r2, sl
 801793e:	4629      	mov	r1, r5
 8017940:	f000 ff85 	bl	801884e <strncmp>
 8017944:	2800      	cmp	r0, #0
 8017946:	d137      	bne.n	80179b8 <rcl_expand_topic_name+0x188>
 8017948:	46b9      	mov	r9, r7
 801794a:	ab16      	add	r3, sp, #88	@ 0x58
 801794c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017950:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017954:	ab14      	add	r3, sp, #80	@ 0x50
 8017956:	4628      	mov	r0, r5
 8017958:	cb0c      	ldmia	r3, {r2, r3}
 801795a:	4651      	mov	r1, sl
 801795c:	f7f6 f9d0 	bl	800dd00 <rcutils_strndup>
 8017960:	4605      	mov	r5, r0
 8017962:	2800      	cmp	r0, #0
 8017964:	f000 809c 	beq.w	8017aa0 <rcl_expand_topic_name+0x270>
 8017968:	464a      	mov	r2, r9
 801796a:	4620      	mov	r0, r4
 801796c:	ab14      	add	r3, sp, #80	@ 0x50
 801796e:	4629      	mov	r1, r5
 8017970:	f7f6 f8c4 	bl	800dafc <rcutils_repl_str>
 8017974:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017976:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017978:	4604      	mov	r4, r0
 801797a:	4628      	mov	r0, r5
 801797c:	4798      	blx	r3
 801797e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017980:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017982:	4658      	mov	r0, fp
 8017984:	4798      	blx	r3
 8017986:	2c00      	cmp	r4, #0
 8017988:	d07b      	beq.n	8017a82 <rcl_expand_topic_name+0x252>
 801798a:	217b      	movs	r1, #123	@ 0x7b
 801798c:	4620      	mov	r0, r4
 801798e:	f000 ff51 	bl	8018834 <strchr>
 8017992:	46a3      	mov	fp, r4
 8017994:	4605      	mov	r5, r0
 8017996:	e7b8      	b.n	801790a <rcl_expand_topic_name+0xda>
 8017998:	240b      	movs	r4, #11
 801799a:	4620      	mov	r0, r4
 801799c:	b00b      	add	sp, #44	@ 0x2c
 801799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a2:	f7fa fbdf 	bl	8012164 <rcl_convert_rmw_ret_to_rcl_ret>
 80179a6:	4604      	mov	r4, r0
 80179a8:	e7f7      	b.n	801799a <rcl_expand_topic_name+0x16a>
 80179aa:	2467      	movs	r4, #103	@ 0x67
 80179ac:	4620      	mov	r0, r4
 80179ae:	b00b      	add	sp, #44	@ 0x2c
 80179b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179b4:	24c9      	movs	r4, #201	@ 0xc9
 80179b6:	e7f0      	b.n	801799a <rcl_expand_topic_name+0x16a>
 80179b8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80179bc:	9806      	ldr	r0, [sp, #24]
 80179be:	1c69      	adds	r1, r5, #1
 80179c0:	f7fd fad8 	bl	8014f74 <rcutils_string_map_getn>
 80179c4:	4681      	mov	r9, r0
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d1bf      	bne.n	801794a <rcl_expand_topic_name+0x11a>
 80179ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179cc:	aa16      	add	r2, sp, #88	@ 0x58
 80179ce:	6018      	str	r0, [r3, #0]
 80179d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80179d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80179d6:	ab14      	add	r3, sp, #80	@ 0x50
 80179d8:	cb0c      	ldmia	r3, {r2, r3}
 80179da:	4651      	mov	r1, sl
 80179dc:	4628      	mov	r0, r5
 80179de:	f7f6 f98f 	bl	800dd00 <rcutils_strndup>
 80179e2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80179e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80179e6:	4798      	blx	r3
 80179e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80179ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80179ec:	4658      	mov	r0, fp
 80179ee:	2469      	movs	r4, #105	@ 0x69
 80179f0:	4798      	blx	r3
 80179f2:	e7d2      	b.n	801799a <rcl_expand_topic_name+0x16a>
 80179f4:	2800      	cmp	r0, #0
 80179f6:	d05b      	beq.n	8017ab0 <rcl_expand_topic_name+0x280>
 80179f8:	46c1      	mov	r9, r8
 80179fa:	46a2      	mov	sl, r4
 80179fc:	e782      	b.n	8017904 <rcl_expand_topic_name+0xd4>
 80179fe:	46b1      	mov	r9, r6
 8017a00:	e7a3      	b.n	801794a <rcl_expand_topic_name+0x11a>
 8017a02:	2800      	cmp	r0, #0
 8017a04:	d1f8      	bne.n	80179f8 <rcl_expand_topic_name+0x1c8>
 8017a06:	4638      	mov	r0, r7
 8017a08:	f7e8 fc0c 	bl	8000224 <strlen>
 8017a0c:	4a35      	ldr	r2, [pc, #212]	@ (8017ae4 <rcl_expand_topic_name+0x2b4>)
 8017a0e:	4b36      	ldr	r3, [pc, #216]	@ (8017ae8 <rcl_expand_topic_name+0x2b8>)
 8017a10:	f8cd 8010 	str.w	r8, [sp, #16]
 8017a14:	2801      	cmp	r0, #1
 8017a16:	bf18      	it	ne
 8017a18:	4613      	movne	r3, r2
 8017a1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017a1e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017a22:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017a24:	9703      	str	r7, [sp, #12]
 8017a26:	9200      	str	r2, [sp, #0]
 8017a28:	ab14      	add	r3, sp, #80	@ 0x50
 8017a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a2c:	f7f6 f82c 	bl	800da88 <rcutils_format_string_limit>
 8017a30:	4682      	mov	sl, r0
 8017a32:	4653      	mov	r3, sl
 8017a34:	b32b      	cbz	r3, 8017a82 <rcl_expand_topic_name+0x252>
 8017a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017a38:	f8c3 a000 	str.w	sl, [r3]
 8017a3c:	e7ad      	b.n	801799a <rcl_expand_topic_name+0x16a>
 8017a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8017a42:	2b2f      	cmp	r3, #47	@ 0x2f
 8017a44:	d0f7      	beq.n	8017a36 <rcl_expand_topic_name+0x206>
 8017a46:	4638      	mov	r0, r7
 8017a48:	f7e8 fbec 	bl	8000224 <strlen>
 8017a4c:	4a25      	ldr	r2, [pc, #148]	@ (8017ae4 <rcl_expand_topic_name+0x2b4>)
 8017a4e:	4b26      	ldr	r3, [pc, #152]	@ (8017ae8 <rcl_expand_topic_name+0x2b8>)
 8017a50:	f8cd a010 	str.w	sl, [sp, #16]
 8017a54:	2801      	cmp	r0, #1
 8017a56:	bf18      	it	ne
 8017a58:	4613      	movne	r3, r2
 8017a5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017a5e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017a62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017a64:	9703      	str	r7, [sp, #12]
 8017a66:	9200      	str	r2, [sp, #0]
 8017a68:	ab14      	add	r3, sp, #80	@ 0x50
 8017a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a6c:	f7f6 f80c 	bl	800da88 <rcutils_format_string_limit>
 8017a70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017a72:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017a74:	4605      	mov	r5, r0
 8017a76:	4650      	mov	r0, sl
 8017a78:	4798      	blx	r3
 8017a7a:	46aa      	mov	sl, r5
 8017a7c:	e7d9      	b.n	8017a32 <rcl_expand_topic_name+0x202>
 8017a7e:	24ca      	movs	r4, #202	@ 0xca
 8017a80:	e78b      	b.n	801799a <rcl_expand_topic_name+0x16a>
 8017a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017a84:	2300      	movs	r3, #0
 8017a86:	6013      	str	r3, [r2, #0]
 8017a88:	240a      	movs	r4, #10
 8017a8a:	e786      	b.n	801799a <rcl_expand_topic_name+0x16a>
 8017a8c:	465b      	mov	r3, fp
 8017a8e:	9c07      	ldr	r4, [sp, #28]
 8017a90:	46da      	mov	sl, fp
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d1d3      	bne.n	8017a3e <rcl_expand_topic_name+0x20e>
 8017a96:	f898 3000 	ldrb.w	r3, [r8]
 8017a9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8017a9c:	d0cb      	beq.n	8017a36 <rcl_expand_topic_name+0x206>
 8017a9e:	e7b2      	b.n	8017a06 <rcl_expand_topic_name+0x1d6>
 8017aa0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017aa4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017aa6:	6015      	str	r5, [r2, #0]
 8017aa8:	4658      	mov	r0, fp
 8017aaa:	4798      	blx	r3
 8017aac:	240a      	movs	r4, #10
 8017aae:	e774      	b.n	801799a <rcl_expand_topic_name+0x16a>
 8017ab0:	ab17      	add	r3, sp, #92	@ 0x5c
 8017ab2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ab6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017aba:	ab14      	add	r3, sp, #80	@ 0x50
 8017abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017abe:	4640      	mov	r0, r8
 8017ac0:	f7f6 f8fc 	bl	800dcbc <rcutils_strdup>
 8017ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	6018      	str	r0, [r3, #0]
 8017aca:	bf08      	it	eq
 8017acc:	240a      	moveq	r4, #10
 8017ace:	e764      	b.n	801799a <rcl_expand_topic_name+0x16a>
 8017ad0:	0801ba10 	.word	0x0801ba10
 8017ad4:	0801b5cc 	.word	0x0801b5cc
 8017ad8:	0801ba18 	.word	0x0801ba18
 8017adc:	0801ba20 	.word	0x0801ba20
 8017ae0:	0801ba28 	.word	0x0801ba28
 8017ae4:	0801b074 	.word	0x0801b074
 8017ae8:	0801b06c 	.word	0x0801b06c

08017aec <rcl_get_default_topic_name_substitutions>:
 8017aec:	2800      	cmp	r0, #0
 8017aee:	bf0c      	ite	eq
 8017af0:	200b      	moveq	r0, #11
 8017af2:	2000      	movne	r0, #0
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop

08017af8 <rcl_validate_topic_name>:
 8017af8:	2800      	cmp	r0, #0
 8017afa:	d07a      	beq.n	8017bf2 <rcl_validate_topic_name+0xfa>
 8017afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b00:	460e      	mov	r6, r1
 8017b02:	2900      	cmp	r1, #0
 8017b04:	d07c      	beq.n	8017c00 <rcl_validate_topic_name+0x108>
 8017b06:	4617      	mov	r7, r2
 8017b08:	4605      	mov	r5, r0
 8017b0a:	f7e8 fb8b 	bl	8000224 <strlen>
 8017b0e:	b1b0      	cbz	r0, 8017b3e <rcl_validate_topic_name+0x46>
 8017b10:	f895 9000 	ldrb.w	r9, [r5]
 8017b14:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017c98 <rcl_validate_topic_name+0x1a0>
 8017b18:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017b1c:	f013 0304 	ands.w	r3, r3, #4
 8017b20:	d169      	bne.n	8017bf6 <rcl_validate_topic_name+0xfe>
 8017b22:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017b26:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017b2a:	2a2f      	cmp	r2, #47	@ 0x2f
 8017b2c:	d10e      	bne.n	8017b4c <rcl_validate_topic_name+0x54>
 8017b2e:	2202      	movs	r2, #2
 8017b30:	6032      	str	r2, [r6, #0]
 8017b32:	b36f      	cbz	r7, 8017b90 <rcl_validate_topic_name+0x98>
 8017b34:	f8c7 8000 	str.w	r8, [r7]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b3e:	2301      	movs	r3, #1
 8017b40:	6033      	str	r3, [r6, #0]
 8017b42:	b32f      	cbz	r7, 8017b90 <rcl_validate_topic_name+0x98>
 8017b44:	2000      	movs	r0, #0
 8017b46:	6038      	str	r0, [r7, #0]
 8017b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b4c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017b50:	461c      	mov	r4, r3
 8017b52:	4619      	mov	r1, r3
 8017b54:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017b58:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017b5c:	f1be 0f09 	cmp.w	lr, #9
 8017b60:	d919      	bls.n	8017b96 <rcl_validate_topic_name+0x9e>
 8017b62:	f022 0e20 	bic.w	lr, r2, #32
 8017b66:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017b6a:	f1be 0f19 	cmp.w	lr, #25
 8017b6e:	d912      	bls.n	8017b96 <rcl_validate_topic_name+0x9e>
 8017b70:	2a5f      	cmp	r2, #95	@ 0x5f
 8017b72:	d019      	beq.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017b74:	2a2f      	cmp	r2, #47	@ 0x2f
 8017b76:	d051      	beq.n	8017c1c <rcl_validate_topic_name+0x124>
 8017b78:	2a7e      	cmp	r2, #126	@ 0x7e
 8017b7a:	d048      	beq.n	8017c0e <rcl_validate_topic_name+0x116>
 8017b7c:	2a7b      	cmp	r2, #123	@ 0x7b
 8017b7e:	d054      	beq.n	8017c2a <rcl_validate_topic_name+0x132>
 8017b80:	2a7d      	cmp	r2, #125	@ 0x7d
 8017b82:	d161      	bne.n	8017c48 <rcl_validate_topic_name+0x150>
 8017b84:	2c00      	cmp	r4, #0
 8017b86:	d155      	bne.n	8017c34 <rcl_validate_topic_name+0x13c>
 8017b88:	2305      	movs	r3, #5
 8017b8a:	6033      	str	r3, [r6, #0]
 8017b8c:	b107      	cbz	r7, 8017b90 <rcl_validate_topic_name+0x98>
 8017b8e:	6039      	str	r1, [r7, #0]
 8017b90:	2000      	movs	r0, #0
 8017b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b9a:	0752      	lsls	r2, r2, #29
 8017b9c:	d504      	bpl.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017b9e:	b11c      	cbz	r4, 8017ba8 <rcl_validate_topic_name+0xb0>
 8017ba0:	b111      	cbz	r1, 8017ba8 <rcl_validate_topic_name+0xb0>
 8017ba2:	1e4a      	subs	r2, r1, #1
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d02d      	beq.n	8017c04 <rcl_validate_topic_name+0x10c>
 8017ba8:	3101      	adds	r1, #1
 8017baa:	4288      	cmp	r0, r1
 8017bac:	d1d2      	bne.n	8017b54 <rcl_validate_topic_name+0x5c>
 8017bae:	2c00      	cmp	r4, #0
 8017bb0:	d145      	bne.n	8017c3e <rcl_validate_topic_name+0x146>
 8017bb2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017bb6:	d04f      	beq.n	8017c58 <rcl_validate_topic_name+0x160>
 8017bb8:	4620      	mov	r0, r4
 8017bba:	2301      	movs	r3, #1
 8017bbc:	e006      	b.n	8017bcc <rcl_validate_topic_name+0xd4>
 8017bbe:	428b      	cmp	r3, r1
 8017bc0:	f105 0501 	add.w	r5, r5, #1
 8017bc4:	f103 0201 	add.w	r2, r3, #1
 8017bc8:	d236      	bcs.n	8017c38 <rcl_validate_topic_name+0x140>
 8017bca:	4613      	mov	r3, r2
 8017bcc:	4580      	cmp	r8, r0
 8017bce:	f100 0001 	add.w	r0, r0, #1
 8017bd2:	d0f4      	beq.n	8017bbe <rcl_validate_topic_name+0xc6>
 8017bd4:	782a      	ldrb	r2, [r5, #0]
 8017bd6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017bd8:	d1f1      	bne.n	8017bbe <rcl_validate_topic_name+0xc6>
 8017bda:	786a      	ldrb	r2, [r5, #1]
 8017bdc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017be0:	0754      	lsls	r4, r2, #29
 8017be2:	d5ec      	bpl.n	8017bbe <rcl_validate_topic_name+0xc6>
 8017be4:	2204      	movs	r2, #4
 8017be6:	6032      	str	r2, [r6, #0]
 8017be8:	2f00      	cmp	r7, #0
 8017bea:	d0d1      	beq.n	8017b90 <rcl_validate_topic_name+0x98>
 8017bec:	603b      	str	r3, [r7, #0]
 8017bee:	2000      	movs	r0, #0
 8017bf0:	e7aa      	b.n	8017b48 <rcl_validate_topic_name+0x50>
 8017bf2:	200b      	movs	r0, #11
 8017bf4:	4770      	bx	lr
 8017bf6:	2304      	movs	r3, #4
 8017bf8:	6033      	str	r3, [r6, #0]
 8017bfa:	2f00      	cmp	r7, #0
 8017bfc:	d1a2      	bne.n	8017b44 <rcl_validate_topic_name+0x4c>
 8017bfe:	e7c7      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c00:	200b      	movs	r0, #11
 8017c02:	e7a1      	b.n	8017b48 <rcl_validate_topic_name+0x50>
 8017c04:	2309      	movs	r3, #9
 8017c06:	6033      	str	r3, [r6, #0]
 8017c08:	2f00      	cmp	r7, #0
 8017c0a:	d1c0      	bne.n	8017b8e <rcl_validate_topic_name+0x96>
 8017c0c:	e7c0      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c0e:	2900      	cmp	r1, #0
 8017c10:	d0ca      	beq.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017c12:	2306      	movs	r3, #6
 8017c14:	6033      	str	r3, [r6, #0]
 8017c16:	2f00      	cmp	r7, #0
 8017c18:	d1b9      	bne.n	8017b8e <rcl_validate_topic_name+0x96>
 8017c1a:	e7b9      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c1c:	2c00      	cmp	r4, #0
 8017c1e:	d0c3      	beq.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017c20:	2308      	movs	r3, #8
 8017c22:	6033      	str	r3, [r6, #0]
 8017c24:	2f00      	cmp	r7, #0
 8017c26:	d1b2      	bne.n	8017b8e <rcl_validate_topic_name+0x96>
 8017c28:	e7b2      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c2a:	2c00      	cmp	r4, #0
 8017c2c:	d1f8      	bne.n	8017c20 <rcl_validate_topic_name+0x128>
 8017c2e:	460b      	mov	r3, r1
 8017c30:	2401      	movs	r4, #1
 8017c32:	e7b9      	b.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017c34:	2400      	movs	r4, #0
 8017c36:	e7b7      	b.n	8017ba8 <rcl_validate_topic_name+0xb0>
 8017c38:	2000      	movs	r0, #0
 8017c3a:	6030      	str	r0, [r6, #0]
 8017c3c:	e784      	b.n	8017b48 <rcl_validate_topic_name+0x50>
 8017c3e:	2205      	movs	r2, #5
 8017c40:	6032      	str	r2, [r6, #0]
 8017c42:	2f00      	cmp	r7, #0
 8017c44:	d1d2      	bne.n	8017bec <rcl_validate_topic_name+0xf4>
 8017c46:	e7a3      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c48:	2c00      	cmp	r4, #0
 8017c4a:	bf14      	ite	ne
 8017c4c:	2308      	movne	r3, #8
 8017c4e:	2303      	moveq	r3, #3
 8017c50:	6033      	str	r3, [r6, #0]
 8017c52:	2f00      	cmp	r7, #0
 8017c54:	d19b      	bne.n	8017b8e <rcl_validate_topic_name+0x96>
 8017c56:	e79b      	b.n	8017b90 <rcl_validate_topic_name+0x98>
 8017c58:	2301      	movs	r3, #1
 8017c5a:	e00a      	b.n	8017c72 <rcl_validate_topic_name+0x17a>
 8017c5c:	2c01      	cmp	r4, #1
 8017c5e:	d013      	beq.n	8017c88 <rcl_validate_topic_name+0x190>
 8017c60:	4299      	cmp	r1, r3
 8017c62:	f104 0401 	add.w	r4, r4, #1
 8017c66:	f105 0501 	add.w	r5, r5, #1
 8017c6a:	f103 0201 	add.w	r2, r3, #1
 8017c6e:	d9e3      	bls.n	8017c38 <rcl_validate_topic_name+0x140>
 8017c70:	4613      	mov	r3, r2
 8017c72:	45a0      	cmp	r8, r4
 8017c74:	d0f4      	beq.n	8017c60 <rcl_validate_topic_name+0x168>
 8017c76:	782a      	ldrb	r2, [r5, #0]
 8017c78:	2a2f      	cmp	r2, #47	@ 0x2f
 8017c7a:	d1ef      	bne.n	8017c5c <rcl_validate_topic_name+0x164>
 8017c7c:	786a      	ldrb	r2, [r5, #1]
 8017c7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017c82:	0752      	lsls	r2, r2, #29
 8017c84:	d5ec      	bpl.n	8017c60 <rcl_validate_topic_name+0x168>
 8017c86:	e7ad      	b.n	8017be4 <rcl_validate_topic_name+0xec>
 8017c88:	2307      	movs	r3, #7
 8017c8a:	6033      	str	r3, [r6, #0]
 8017c8c:	2f00      	cmp	r7, #0
 8017c8e:	f43f af7f 	beq.w	8017b90 <rcl_validate_topic_name+0x98>
 8017c92:	603c      	str	r4, [r7, #0]
 8017c94:	2000      	movs	r0, #0
 8017c96:	e757      	b.n	8017b48 <rcl_validate_topic_name+0x50>
 8017c98:	0801baa4 	.word	0x0801baa4

08017c9c <on_status>:
 8017c9c:	b082      	sub	sp, #8
 8017c9e:	b002      	add	sp, #8
 8017ca0:	4770      	bx	lr
 8017ca2:	bf00      	nop

08017ca4 <on_topic>:
 8017ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca8:	4a22      	ldr	r2, [pc, #136]	@ (8017d34 <on_topic+0x90>)
 8017caa:	b094      	sub	sp, #80	@ 0x50
 8017cac:	6812      	ldr	r2, [r2, #0]
 8017cae:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017cb0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017cb4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017cb8:	b3c2      	cbz	r2, 8017d2c <on_topic+0x88>
 8017cba:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017cbe:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017cc2:	e001      	b.n	8017cc8 <on_topic+0x24>
 8017cc4:	6852      	ldr	r2, [r2, #4]
 8017cc6:	b38a      	cbz	r2, 8017d2c <on_topic+0x88>
 8017cc8:	6894      	ldr	r4, [r2, #8]
 8017cca:	8aa3      	ldrh	r3, [r4, #20]
 8017ccc:	428b      	cmp	r3, r1
 8017cce:	d1f9      	bne.n	8017cc4 <on_topic+0x20>
 8017cd0:	7da3      	ldrb	r3, [r4, #22]
 8017cd2:	4283      	cmp	r3, r0
 8017cd4:	d1f6      	bne.n	8017cc4 <on_topic+0x20>
 8017cd6:	2248      	movs	r2, #72	@ 0x48
 8017cd8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017cdc:	4668      	mov	r0, sp
 8017cde:	f000 fec0 	bl	8018a62 <memcpy>
 8017ce2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017ce6:	cb0c      	ldmia	r3, {r2, r3}
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f7f7 f805 	bl	800ecf8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017cee:	4607      	mov	r7, r0
 8017cf0:	b1e0      	cbz	r0, 8017d2c <on_topic+0x88>
 8017cf2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017cf6:	4632      	mov	r2, r6
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	f108 0110 	add.w	r1, r8, #16
 8017cfe:	f7fe f9d3 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8017d02:	b930      	cbnz	r0, 8017d12 <on_topic+0x6e>
 8017d04:	480c      	ldr	r0, [pc, #48]	@ (8017d38 <on_topic+0x94>)
 8017d06:	4639      	mov	r1, r7
 8017d08:	b014      	add	sp, #80	@ 0x50
 8017d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d0e:	f7fd ba8d 	b.w	801522c <put_memory>
 8017d12:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017d16:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017d1a:	f7fe f8ef 	bl	8015efc <rmw_uros_epoch_nanos>
 8017d1e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017d22:	2305      	movs	r3, #5
 8017d24:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017d28:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017d2c:	b014      	add	sp, #80	@ 0x50
 8017d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d32:	bf00      	nop
 8017d34:	20010dc4 	.word	0x20010dc4
 8017d38:	20010db4 	.word	0x20010db4

08017d3c <on_request>:
 8017d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d40:	4823      	ldr	r0, [pc, #140]	@ (8017dd0 <on_request+0x94>)
 8017d42:	b094      	sub	sp, #80	@ 0x50
 8017d44:	6800      	ldr	r0, [r0, #0]
 8017d46:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017d48:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017d4c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d03b      	beq.n	8017dca <on_request+0x8e>
 8017d52:	461d      	mov	r5, r3
 8017d54:	e001      	b.n	8017d5a <on_request+0x1e>
 8017d56:	6840      	ldr	r0, [r0, #4]
 8017d58:	b3b8      	cbz	r0, 8017dca <on_request+0x8e>
 8017d5a:	6884      	ldr	r4, [r0, #8]
 8017d5c:	8b21      	ldrh	r1, [r4, #24]
 8017d5e:	4291      	cmp	r1, r2
 8017d60:	d1f9      	bne.n	8017d56 <on_request+0x1a>
 8017d62:	2248      	movs	r2, #72	@ 0x48
 8017d64:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017d68:	4668      	mov	r0, sp
 8017d6a:	f000 fe7a 	bl	8018a62 <memcpy>
 8017d6e:	f104 0320 	add.w	r3, r4, #32
 8017d72:	cb0c      	ldmia	r3, {r2, r3}
 8017d74:	4620      	mov	r0, r4
 8017d76:	f7f6 ffbf 	bl	800ecf8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017d7a:	4680      	mov	r8, r0
 8017d7c:	b328      	cbz	r0, 8017dca <on_request+0x8e>
 8017d7e:	4638      	mov	r0, r7
 8017d80:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017d84:	4632      	mov	r2, r6
 8017d86:	f107 0110 	add.w	r1, r7, #16
 8017d8a:	f7fe f98d 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8017d8e:	b930      	cbnz	r0, 8017d9e <on_request+0x62>
 8017d90:	4810      	ldr	r0, [pc, #64]	@ (8017dd4 <on_request+0x98>)
 8017d92:	4641      	mov	r1, r8
 8017d94:	b014      	add	sp, #80	@ 0x50
 8017d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d9a:	f7fd ba47 	b.w	801522c <put_memory>
 8017d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017da0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017da4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017da8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017dac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017db4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017db8:	f7fe f8a0 	bl	8015efc <rmw_uros_epoch_nanos>
 8017dbc:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017dc0:	2303      	movs	r3, #3
 8017dc2:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017dc6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017dca:	b014      	add	sp, #80	@ 0x50
 8017dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dd0:	20010d94 	.word	0x20010d94
 8017dd4:	20010db4 	.word	0x20010db4

08017dd8 <on_reply>:
 8017dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ddc:	4821      	ldr	r0, [pc, #132]	@ (8017e64 <on_reply+0x8c>)
 8017dde:	b094      	sub	sp, #80	@ 0x50
 8017de0:	6800      	ldr	r0, [r0, #0]
 8017de2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017de4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017de8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017dea:	b3b8      	cbz	r0, 8017e5c <on_reply+0x84>
 8017dec:	461d      	mov	r5, r3
 8017dee:	e001      	b.n	8017df4 <on_reply+0x1c>
 8017df0:	6840      	ldr	r0, [r0, #4]
 8017df2:	b398      	cbz	r0, 8017e5c <on_reply+0x84>
 8017df4:	6884      	ldr	r4, [r0, #8]
 8017df6:	8b21      	ldrh	r1, [r4, #24]
 8017df8:	4291      	cmp	r1, r2
 8017dfa:	d1f9      	bne.n	8017df0 <on_reply+0x18>
 8017dfc:	2248      	movs	r2, #72	@ 0x48
 8017dfe:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017e02:	4668      	mov	r0, sp
 8017e04:	f000 fe2d 	bl	8018a62 <memcpy>
 8017e08:	f104 0320 	add.w	r3, r4, #32
 8017e0c:	cb0c      	ldmia	r3, {r2, r3}
 8017e0e:	4620      	mov	r0, r4
 8017e10:	f7f6 ff72 	bl	800ecf8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017e14:	4680      	mov	r8, r0
 8017e16:	b308      	cbz	r0, 8017e5c <on_reply+0x84>
 8017e18:	4638      	mov	r0, r7
 8017e1a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017e1e:	4632      	mov	r2, r6
 8017e20:	f107 0110 	add.w	r1, r7, #16
 8017e24:	f7fe f940 	bl	80160a8 <ucdr_deserialize_array_uint8_t>
 8017e28:	b930      	cbnz	r0, 8017e38 <on_reply+0x60>
 8017e2a:	480f      	ldr	r0, [pc, #60]	@ (8017e68 <on_reply+0x90>)
 8017e2c:	4641      	mov	r1, r8
 8017e2e:	b014      	add	sp, #80	@ 0x50
 8017e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e34:	f7fd b9fa 	b.w	801522c <put_memory>
 8017e38:	2200      	movs	r2, #0
 8017e3a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017e3e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017e42:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017e46:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017e4a:	f7fe f857 	bl	8015efc <rmw_uros_epoch_nanos>
 8017e4e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017e52:	2304      	movs	r3, #4
 8017e54:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017e58:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017e5c:	b014      	add	sp, #80	@ 0x50
 8017e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e62:	bf00      	nop
 8017e64:	2000c4a4 	.word	0x2000c4a4
 8017e68:	20010db4 	.word	0x20010db4

08017e6c <calloc>:
 8017e6c:	4b02      	ldr	r3, [pc, #8]	@ (8017e78 <calloc+0xc>)
 8017e6e:	460a      	mov	r2, r1
 8017e70:	4601      	mov	r1, r0
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	f000 b802 	b.w	8017e7c <_calloc_r>
 8017e78:	20000204 	.word	0x20000204

08017e7c <_calloc_r>:
 8017e7c:	b570      	push	{r4, r5, r6, lr}
 8017e7e:	fba1 5402 	umull	r5, r4, r1, r2
 8017e82:	b93c      	cbnz	r4, 8017e94 <_calloc_r+0x18>
 8017e84:	4629      	mov	r1, r5
 8017e86:	f000 f887 	bl	8017f98 <_malloc_r>
 8017e8a:	4606      	mov	r6, r0
 8017e8c:	b928      	cbnz	r0, 8017e9a <_calloc_r+0x1e>
 8017e8e:	2600      	movs	r6, #0
 8017e90:	4630      	mov	r0, r6
 8017e92:	bd70      	pop	{r4, r5, r6, pc}
 8017e94:	220c      	movs	r2, #12
 8017e96:	6002      	str	r2, [r0, #0]
 8017e98:	e7f9      	b.n	8017e8e <_calloc_r+0x12>
 8017e9a:	462a      	mov	r2, r5
 8017e9c:	4621      	mov	r1, r4
 8017e9e:	f000 fcc1 	bl	8018824 <memset>
 8017ea2:	e7f5      	b.n	8017e90 <_calloc_r+0x14>

08017ea4 <getenv>:
 8017ea4:	b507      	push	{r0, r1, r2, lr}
 8017ea6:	4b04      	ldr	r3, [pc, #16]	@ (8017eb8 <getenv+0x14>)
 8017ea8:	4601      	mov	r1, r0
 8017eaa:	aa01      	add	r2, sp, #4
 8017eac:	6818      	ldr	r0, [r3, #0]
 8017eae:	f000 f805 	bl	8017ebc <_findenv_r>
 8017eb2:	b003      	add	sp, #12
 8017eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017eb8:	20000204 	.word	0x20000204

08017ebc <_findenv_r>:
 8017ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017f30 <_findenv_r+0x74>
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	4689      	mov	r9, r1
 8017ec8:	4617      	mov	r7, r2
 8017eca:	f000 fdf7 	bl	8018abc <__env_lock>
 8017ece:	f8da 4000 	ldr.w	r4, [sl]
 8017ed2:	b134      	cbz	r4, 8017ee2 <_findenv_r+0x26>
 8017ed4:	464b      	mov	r3, r9
 8017ed6:	4698      	mov	r8, r3
 8017ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017edc:	b13a      	cbz	r2, 8017eee <_findenv_r+0x32>
 8017ede:	2a3d      	cmp	r2, #61	@ 0x3d
 8017ee0:	d1f9      	bne.n	8017ed6 <_findenv_r+0x1a>
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f000 fdf0 	bl	8018ac8 <__env_unlock>
 8017ee8:	2000      	movs	r0, #0
 8017eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eee:	eba8 0809 	sub.w	r8, r8, r9
 8017ef2:	46a3      	mov	fp, r4
 8017ef4:	f854 0b04 	ldr.w	r0, [r4], #4
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d0f2      	beq.n	8017ee2 <_findenv_r+0x26>
 8017efc:	4642      	mov	r2, r8
 8017efe:	4649      	mov	r1, r9
 8017f00:	f000 fca5 	bl	801884e <strncmp>
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d1f4      	bne.n	8017ef2 <_findenv_r+0x36>
 8017f08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017f0c:	eb03 0508 	add.w	r5, r3, r8
 8017f10:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017f14:	2b3d      	cmp	r3, #61	@ 0x3d
 8017f16:	d1ec      	bne.n	8017ef2 <_findenv_r+0x36>
 8017f18:	f8da 3000 	ldr.w	r3, [sl]
 8017f1c:	ebab 0303 	sub.w	r3, fp, r3
 8017f20:	109b      	asrs	r3, r3, #2
 8017f22:	4630      	mov	r0, r6
 8017f24:	603b      	str	r3, [r7, #0]
 8017f26:	f000 fdcf 	bl	8018ac8 <__env_unlock>
 8017f2a:	1c68      	adds	r0, r5, #1
 8017f2c:	e7dd      	b.n	8017eea <_findenv_r+0x2e>
 8017f2e:	bf00      	nop
 8017f30:	2000000c 	.word	0x2000000c

08017f34 <malloc>:
 8017f34:	4b02      	ldr	r3, [pc, #8]	@ (8017f40 <malloc+0xc>)
 8017f36:	4601      	mov	r1, r0
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	f000 b82d 	b.w	8017f98 <_malloc_r>
 8017f3e:	bf00      	nop
 8017f40:	20000204 	.word	0x20000204

08017f44 <free>:
 8017f44:	4b02      	ldr	r3, [pc, #8]	@ (8017f50 <free+0xc>)
 8017f46:	4601      	mov	r1, r0
 8017f48:	6818      	ldr	r0, [r3, #0]
 8017f4a:	f000 bdc3 	b.w	8018ad4 <_free_r>
 8017f4e:	bf00      	nop
 8017f50:	20000204 	.word	0x20000204

08017f54 <sbrk_aligned>:
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	4e0f      	ldr	r6, [pc, #60]	@ (8017f94 <sbrk_aligned+0x40>)
 8017f58:	460c      	mov	r4, r1
 8017f5a:	6831      	ldr	r1, [r6, #0]
 8017f5c:	4605      	mov	r5, r0
 8017f5e:	b911      	cbnz	r1, 8017f66 <sbrk_aligned+0x12>
 8017f60:	f000 fd28 	bl	80189b4 <_sbrk_r>
 8017f64:	6030      	str	r0, [r6, #0]
 8017f66:	4621      	mov	r1, r4
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f000 fd23 	bl	80189b4 <_sbrk_r>
 8017f6e:	1c43      	adds	r3, r0, #1
 8017f70:	d103      	bne.n	8017f7a <sbrk_aligned+0x26>
 8017f72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017f76:	4620      	mov	r0, r4
 8017f78:	bd70      	pop	{r4, r5, r6, pc}
 8017f7a:	1cc4      	adds	r4, r0, #3
 8017f7c:	f024 0403 	bic.w	r4, r4, #3
 8017f80:	42a0      	cmp	r0, r4
 8017f82:	d0f8      	beq.n	8017f76 <sbrk_aligned+0x22>
 8017f84:	1a21      	subs	r1, r4, r0
 8017f86:	4628      	mov	r0, r5
 8017f88:	f000 fd14 	bl	80189b4 <_sbrk_r>
 8017f8c:	3001      	adds	r0, #1
 8017f8e:	d1f2      	bne.n	8017f76 <sbrk_aligned+0x22>
 8017f90:	e7ef      	b.n	8017f72 <sbrk_aligned+0x1e>
 8017f92:	bf00      	nop
 8017f94:	20010ecc 	.word	0x20010ecc

08017f98 <_malloc_r>:
 8017f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f9c:	1ccd      	adds	r5, r1, #3
 8017f9e:	f025 0503 	bic.w	r5, r5, #3
 8017fa2:	3508      	adds	r5, #8
 8017fa4:	2d0c      	cmp	r5, #12
 8017fa6:	bf38      	it	cc
 8017fa8:	250c      	movcc	r5, #12
 8017faa:	2d00      	cmp	r5, #0
 8017fac:	4606      	mov	r6, r0
 8017fae:	db01      	blt.n	8017fb4 <_malloc_r+0x1c>
 8017fb0:	42a9      	cmp	r1, r5
 8017fb2:	d904      	bls.n	8017fbe <_malloc_r+0x26>
 8017fb4:	230c      	movs	r3, #12
 8017fb6:	6033      	str	r3, [r6, #0]
 8017fb8:	2000      	movs	r0, #0
 8017fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018094 <_malloc_r+0xfc>
 8017fc2:	f000 f869 	bl	8018098 <__malloc_lock>
 8017fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8017fca:	461c      	mov	r4, r3
 8017fcc:	bb44      	cbnz	r4, 8018020 <_malloc_r+0x88>
 8017fce:	4629      	mov	r1, r5
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	f7ff ffbf 	bl	8017f54 <sbrk_aligned>
 8017fd6:	1c43      	adds	r3, r0, #1
 8017fd8:	4604      	mov	r4, r0
 8017fda:	d158      	bne.n	801808e <_malloc_r+0xf6>
 8017fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8017fe0:	4627      	mov	r7, r4
 8017fe2:	2f00      	cmp	r7, #0
 8017fe4:	d143      	bne.n	801806e <_malloc_r+0xd6>
 8017fe6:	2c00      	cmp	r4, #0
 8017fe8:	d04b      	beq.n	8018082 <_malloc_r+0xea>
 8017fea:	6823      	ldr	r3, [r4, #0]
 8017fec:	4639      	mov	r1, r7
 8017fee:	4630      	mov	r0, r6
 8017ff0:	eb04 0903 	add.w	r9, r4, r3
 8017ff4:	f000 fcde 	bl	80189b4 <_sbrk_r>
 8017ff8:	4581      	cmp	r9, r0
 8017ffa:	d142      	bne.n	8018082 <_malloc_r+0xea>
 8017ffc:	6821      	ldr	r1, [r4, #0]
 8017ffe:	1a6d      	subs	r5, r5, r1
 8018000:	4629      	mov	r1, r5
 8018002:	4630      	mov	r0, r6
 8018004:	f7ff ffa6 	bl	8017f54 <sbrk_aligned>
 8018008:	3001      	adds	r0, #1
 801800a:	d03a      	beq.n	8018082 <_malloc_r+0xea>
 801800c:	6823      	ldr	r3, [r4, #0]
 801800e:	442b      	add	r3, r5
 8018010:	6023      	str	r3, [r4, #0]
 8018012:	f8d8 3000 	ldr.w	r3, [r8]
 8018016:	685a      	ldr	r2, [r3, #4]
 8018018:	bb62      	cbnz	r2, 8018074 <_malloc_r+0xdc>
 801801a:	f8c8 7000 	str.w	r7, [r8]
 801801e:	e00f      	b.n	8018040 <_malloc_r+0xa8>
 8018020:	6822      	ldr	r2, [r4, #0]
 8018022:	1b52      	subs	r2, r2, r5
 8018024:	d420      	bmi.n	8018068 <_malloc_r+0xd0>
 8018026:	2a0b      	cmp	r2, #11
 8018028:	d917      	bls.n	801805a <_malloc_r+0xc2>
 801802a:	1961      	adds	r1, r4, r5
 801802c:	42a3      	cmp	r3, r4
 801802e:	6025      	str	r5, [r4, #0]
 8018030:	bf18      	it	ne
 8018032:	6059      	strne	r1, [r3, #4]
 8018034:	6863      	ldr	r3, [r4, #4]
 8018036:	bf08      	it	eq
 8018038:	f8c8 1000 	streq.w	r1, [r8]
 801803c:	5162      	str	r2, [r4, r5]
 801803e:	604b      	str	r3, [r1, #4]
 8018040:	4630      	mov	r0, r6
 8018042:	f000 f82f 	bl	80180a4 <__malloc_unlock>
 8018046:	f104 000b 	add.w	r0, r4, #11
 801804a:	1d23      	adds	r3, r4, #4
 801804c:	f020 0007 	bic.w	r0, r0, #7
 8018050:	1ac2      	subs	r2, r0, r3
 8018052:	bf1c      	itt	ne
 8018054:	1a1b      	subne	r3, r3, r0
 8018056:	50a3      	strne	r3, [r4, r2]
 8018058:	e7af      	b.n	8017fba <_malloc_r+0x22>
 801805a:	6862      	ldr	r2, [r4, #4]
 801805c:	42a3      	cmp	r3, r4
 801805e:	bf0c      	ite	eq
 8018060:	f8c8 2000 	streq.w	r2, [r8]
 8018064:	605a      	strne	r2, [r3, #4]
 8018066:	e7eb      	b.n	8018040 <_malloc_r+0xa8>
 8018068:	4623      	mov	r3, r4
 801806a:	6864      	ldr	r4, [r4, #4]
 801806c:	e7ae      	b.n	8017fcc <_malloc_r+0x34>
 801806e:	463c      	mov	r4, r7
 8018070:	687f      	ldr	r7, [r7, #4]
 8018072:	e7b6      	b.n	8017fe2 <_malloc_r+0x4a>
 8018074:	461a      	mov	r2, r3
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	42a3      	cmp	r3, r4
 801807a:	d1fb      	bne.n	8018074 <_malloc_r+0xdc>
 801807c:	2300      	movs	r3, #0
 801807e:	6053      	str	r3, [r2, #4]
 8018080:	e7de      	b.n	8018040 <_malloc_r+0xa8>
 8018082:	230c      	movs	r3, #12
 8018084:	6033      	str	r3, [r6, #0]
 8018086:	4630      	mov	r0, r6
 8018088:	f000 f80c 	bl	80180a4 <__malloc_unlock>
 801808c:	e794      	b.n	8017fb8 <_malloc_r+0x20>
 801808e:	6005      	str	r5, [r0, #0]
 8018090:	e7d6      	b.n	8018040 <_malloc_r+0xa8>
 8018092:	bf00      	nop
 8018094:	20010ed0 	.word	0x20010ed0

08018098 <__malloc_lock>:
 8018098:	4801      	ldr	r0, [pc, #4]	@ (80180a0 <__malloc_lock+0x8>)
 801809a:	f000 bcd8 	b.w	8018a4e <__retarget_lock_acquire_recursive>
 801809e:	bf00      	nop
 80180a0:	20011015 	.word	0x20011015

080180a4 <__malloc_unlock>:
 80180a4:	4801      	ldr	r0, [pc, #4]	@ (80180ac <__malloc_unlock+0x8>)
 80180a6:	f000 bcd3 	b.w	8018a50 <__retarget_lock_release_recursive>
 80180aa:	bf00      	nop
 80180ac:	20011015 	.word	0x20011015

080180b0 <srand>:
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	4b10      	ldr	r3, [pc, #64]	@ (80180f4 <srand+0x44>)
 80180b4:	681d      	ldr	r5, [r3, #0]
 80180b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80180b8:	4604      	mov	r4, r0
 80180ba:	b9b3      	cbnz	r3, 80180ea <srand+0x3a>
 80180bc:	2018      	movs	r0, #24
 80180be:	f7ff ff39 	bl	8017f34 <malloc>
 80180c2:	4602      	mov	r2, r0
 80180c4:	6328      	str	r0, [r5, #48]	@ 0x30
 80180c6:	b920      	cbnz	r0, 80180d2 <srand+0x22>
 80180c8:	4b0b      	ldr	r3, [pc, #44]	@ (80180f8 <srand+0x48>)
 80180ca:	480c      	ldr	r0, [pc, #48]	@ (80180fc <srand+0x4c>)
 80180cc:	2146      	movs	r1, #70	@ 0x46
 80180ce:	f000 fcd7 	bl	8018a80 <__assert_func>
 80180d2:	490b      	ldr	r1, [pc, #44]	@ (8018100 <srand+0x50>)
 80180d4:	4b0b      	ldr	r3, [pc, #44]	@ (8018104 <srand+0x54>)
 80180d6:	e9c0 1300 	strd	r1, r3, [r0]
 80180da:	4b0b      	ldr	r3, [pc, #44]	@ (8018108 <srand+0x58>)
 80180dc:	6083      	str	r3, [r0, #8]
 80180de:	230b      	movs	r3, #11
 80180e0:	8183      	strh	r3, [r0, #12]
 80180e2:	2100      	movs	r1, #0
 80180e4:	2001      	movs	r0, #1
 80180e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80180ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80180ec:	2200      	movs	r2, #0
 80180ee:	611c      	str	r4, [r3, #16]
 80180f0:	615a      	str	r2, [r3, #20]
 80180f2:	bd38      	pop	{r3, r4, r5, pc}
 80180f4:	20000204 	.word	0x20000204
 80180f8:	0801ba34 	.word	0x0801ba34
 80180fc:	0801ba4b 	.word	0x0801ba4b
 8018100:	abcd330e 	.word	0xabcd330e
 8018104:	e66d1234 	.word	0xe66d1234
 8018108:	0005deec 	.word	0x0005deec

0801810c <rand>:
 801810c:	4b16      	ldr	r3, [pc, #88]	@ (8018168 <rand+0x5c>)
 801810e:	b510      	push	{r4, lr}
 8018110:	681c      	ldr	r4, [r3, #0]
 8018112:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018114:	b9b3      	cbnz	r3, 8018144 <rand+0x38>
 8018116:	2018      	movs	r0, #24
 8018118:	f7ff ff0c 	bl	8017f34 <malloc>
 801811c:	4602      	mov	r2, r0
 801811e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018120:	b920      	cbnz	r0, 801812c <rand+0x20>
 8018122:	4b12      	ldr	r3, [pc, #72]	@ (801816c <rand+0x60>)
 8018124:	4812      	ldr	r0, [pc, #72]	@ (8018170 <rand+0x64>)
 8018126:	2152      	movs	r1, #82	@ 0x52
 8018128:	f000 fcaa 	bl	8018a80 <__assert_func>
 801812c:	4911      	ldr	r1, [pc, #68]	@ (8018174 <rand+0x68>)
 801812e:	4b12      	ldr	r3, [pc, #72]	@ (8018178 <rand+0x6c>)
 8018130:	e9c0 1300 	strd	r1, r3, [r0]
 8018134:	4b11      	ldr	r3, [pc, #68]	@ (801817c <rand+0x70>)
 8018136:	6083      	str	r3, [r0, #8]
 8018138:	230b      	movs	r3, #11
 801813a:	8183      	strh	r3, [r0, #12]
 801813c:	2100      	movs	r1, #0
 801813e:	2001      	movs	r0, #1
 8018140:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018144:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018146:	480e      	ldr	r0, [pc, #56]	@ (8018180 <rand+0x74>)
 8018148:	690b      	ldr	r3, [r1, #16]
 801814a:	694c      	ldr	r4, [r1, #20]
 801814c:	4a0d      	ldr	r2, [pc, #52]	@ (8018184 <rand+0x78>)
 801814e:	4358      	muls	r0, r3
 8018150:	fb02 0004 	mla	r0, r2, r4, r0
 8018154:	fba3 3202 	umull	r3, r2, r3, r2
 8018158:	3301      	adds	r3, #1
 801815a:	eb40 0002 	adc.w	r0, r0, r2
 801815e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018162:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018166:	bd10      	pop	{r4, pc}
 8018168:	20000204 	.word	0x20000204
 801816c:	0801ba34 	.word	0x0801ba34
 8018170:	0801ba4b 	.word	0x0801ba4b
 8018174:	abcd330e 	.word	0xabcd330e
 8018178:	e66d1234 	.word	0xe66d1234
 801817c:	0005deec 	.word	0x0005deec
 8018180:	5851f42d 	.word	0x5851f42d
 8018184:	4c957f2d 	.word	0x4c957f2d

08018188 <realloc>:
 8018188:	4b02      	ldr	r3, [pc, #8]	@ (8018194 <realloc+0xc>)
 801818a:	460a      	mov	r2, r1
 801818c:	4601      	mov	r1, r0
 801818e:	6818      	ldr	r0, [r3, #0]
 8018190:	f000 b802 	b.w	8018198 <_realloc_r>
 8018194:	20000204 	.word	0x20000204

08018198 <_realloc_r>:
 8018198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801819c:	4680      	mov	r8, r0
 801819e:	4615      	mov	r5, r2
 80181a0:	460c      	mov	r4, r1
 80181a2:	b921      	cbnz	r1, 80181ae <_realloc_r+0x16>
 80181a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181a8:	4611      	mov	r1, r2
 80181aa:	f7ff bef5 	b.w	8017f98 <_malloc_r>
 80181ae:	b92a      	cbnz	r2, 80181bc <_realloc_r+0x24>
 80181b0:	f000 fc90 	bl	8018ad4 <_free_r>
 80181b4:	2400      	movs	r4, #0
 80181b6:	4620      	mov	r0, r4
 80181b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181bc:	f000 fcd4 	bl	8018b68 <_malloc_usable_size_r>
 80181c0:	4285      	cmp	r5, r0
 80181c2:	4606      	mov	r6, r0
 80181c4:	d802      	bhi.n	80181cc <_realloc_r+0x34>
 80181c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80181ca:	d8f4      	bhi.n	80181b6 <_realloc_r+0x1e>
 80181cc:	4629      	mov	r1, r5
 80181ce:	4640      	mov	r0, r8
 80181d0:	f7ff fee2 	bl	8017f98 <_malloc_r>
 80181d4:	4607      	mov	r7, r0
 80181d6:	2800      	cmp	r0, #0
 80181d8:	d0ec      	beq.n	80181b4 <_realloc_r+0x1c>
 80181da:	42b5      	cmp	r5, r6
 80181dc:	462a      	mov	r2, r5
 80181de:	4621      	mov	r1, r4
 80181e0:	bf28      	it	cs
 80181e2:	4632      	movcs	r2, r6
 80181e4:	f000 fc3d 	bl	8018a62 <memcpy>
 80181e8:	4621      	mov	r1, r4
 80181ea:	4640      	mov	r0, r8
 80181ec:	f000 fc72 	bl	8018ad4 <_free_r>
 80181f0:	463c      	mov	r4, r7
 80181f2:	e7e0      	b.n	80181b6 <_realloc_r+0x1e>

080181f4 <_strtoul_l.constprop.0>:
 80181f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181f8:	4e34      	ldr	r6, [pc, #208]	@ (80182cc <_strtoul_l.constprop.0+0xd8>)
 80181fa:	4686      	mov	lr, r0
 80181fc:	460d      	mov	r5, r1
 80181fe:	4628      	mov	r0, r5
 8018200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018204:	5d37      	ldrb	r7, [r6, r4]
 8018206:	f017 0708 	ands.w	r7, r7, #8
 801820a:	d1f8      	bne.n	80181fe <_strtoul_l.constprop.0+0xa>
 801820c:	2c2d      	cmp	r4, #45	@ 0x2d
 801820e:	d12f      	bne.n	8018270 <_strtoul_l.constprop.0+0x7c>
 8018210:	782c      	ldrb	r4, [r5, #0]
 8018212:	2701      	movs	r7, #1
 8018214:	1c85      	adds	r5, r0, #2
 8018216:	f033 0010 	bics.w	r0, r3, #16
 801821a:	d109      	bne.n	8018230 <_strtoul_l.constprop.0+0x3c>
 801821c:	2c30      	cmp	r4, #48	@ 0x30
 801821e:	d12c      	bne.n	801827a <_strtoul_l.constprop.0+0x86>
 8018220:	7828      	ldrb	r0, [r5, #0]
 8018222:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018226:	2858      	cmp	r0, #88	@ 0x58
 8018228:	d127      	bne.n	801827a <_strtoul_l.constprop.0+0x86>
 801822a:	786c      	ldrb	r4, [r5, #1]
 801822c:	2310      	movs	r3, #16
 801822e:	3502      	adds	r5, #2
 8018230:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018234:	2600      	movs	r6, #0
 8018236:	fbb8 f8f3 	udiv	r8, r8, r3
 801823a:	fb03 f908 	mul.w	r9, r3, r8
 801823e:	ea6f 0909 	mvn.w	r9, r9
 8018242:	4630      	mov	r0, r6
 8018244:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018248:	f1bc 0f09 	cmp.w	ip, #9
 801824c:	d81c      	bhi.n	8018288 <_strtoul_l.constprop.0+0x94>
 801824e:	4664      	mov	r4, ip
 8018250:	42a3      	cmp	r3, r4
 8018252:	dd2a      	ble.n	80182aa <_strtoul_l.constprop.0+0xb6>
 8018254:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018258:	d007      	beq.n	801826a <_strtoul_l.constprop.0+0x76>
 801825a:	4580      	cmp	r8, r0
 801825c:	d322      	bcc.n	80182a4 <_strtoul_l.constprop.0+0xb0>
 801825e:	d101      	bne.n	8018264 <_strtoul_l.constprop.0+0x70>
 8018260:	45a1      	cmp	r9, r4
 8018262:	db1f      	blt.n	80182a4 <_strtoul_l.constprop.0+0xb0>
 8018264:	fb00 4003 	mla	r0, r0, r3, r4
 8018268:	2601      	movs	r6, #1
 801826a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801826e:	e7e9      	b.n	8018244 <_strtoul_l.constprop.0+0x50>
 8018270:	2c2b      	cmp	r4, #43	@ 0x2b
 8018272:	bf04      	itt	eq
 8018274:	782c      	ldrbeq	r4, [r5, #0]
 8018276:	1c85      	addeq	r5, r0, #2
 8018278:	e7cd      	b.n	8018216 <_strtoul_l.constprop.0+0x22>
 801827a:	2b00      	cmp	r3, #0
 801827c:	d1d8      	bne.n	8018230 <_strtoul_l.constprop.0+0x3c>
 801827e:	2c30      	cmp	r4, #48	@ 0x30
 8018280:	bf0c      	ite	eq
 8018282:	2308      	moveq	r3, #8
 8018284:	230a      	movne	r3, #10
 8018286:	e7d3      	b.n	8018230 <_strtoul_l.constprop.0+0x3c>
 8018288:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801828c:	f1bc 0f19 	cmp.w	ip, #25
 8018290:	d801      	bhi.n	8018296 <_strtoul_l.constprop.0+0xa2>
 8018292:	3c37      	subs	r4, #55	@ 0x37
 8018294:	e7dc      	b.n	8018250 <_strtoul_l.constprop.0+0x5c>
 8018296:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801829a:	f1bc 0f19 	cmp.w	ip, #25
 801829e:	d804      	bhi.n	80182aa <_strtoul_l.constprop.0+0xb6>
 80182a0:	3c57      	subs	r4, #87	@ 0x57
 80182a2:	e7d5      	b.n	8018250 <_strtoul_l.constprop.0+0x5c>
 80182a4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80182a8:	e7df      	b.n	801826a <_strtoul_l.constprop.0+0x76>
 80182aa:	1c73      	adds	r3, r6, #1
 80182ac:	d106      	bne.n	80182bc <_strtoul_l.constprop.0+0xc8>
 80182ae:	2322      	movs	r3, #34	@ 0x22
 80182b0:	f8ce 3000 	str.w	r3, [lr]
 80182b4:	4630      	mov	r0, r6
 80182b6:	b932      	cbnz	r2, 80182c6 <_strtoul_l.constprop.0+0xd2>
 80182b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182bc:	b107      	cbz	r7, 80182c0 <_strtoul_l.constprop.0+0xcc>
 80182be:	4240      	negs	r0, r0
 80182c0:	2a00      	cmp	r2, #0
 80182c2:	d0f9      	beq.n	80182b8 <_strtoul_l.constprop.0+0xc4>
 80182c4:	b106      	cbz	r6, 80182c8 <_strtoul_l.constprop.0+0xd4>
 80182c6:	1e69      	subs	r1, r5, #1
 80182c8:	6011      	str	r1, [r2, #0]
 80182ca:	e7f5      	b.n	80182b8 <_strtoul_l.constprop.0+0xc4>
 80182cc:	0801baa4 	.word	0x0801baa4

080182d0 <strtoul>:
 80182d0:	4613      	mov	r3, r2
 80182d2:	460a      	mov	r2, r1
 80182d4:	4601      	mov	r1, r0
 80182d6:	4802      	ldr	r0, [pc, #8]	@ (80182e0 <strtoul+0x10>)
 80182d8:	6800      	ldr	r0, [r0, #0]
 80182da:	f7ff bf8b 	b.w	80181f4 <_strtoul_l.constprop.0>
 80182de:	bf00      	nop
 80182e0:	20000204 	.word	0x20000204

080182e4 <std>:
 80182e4:	2300      	movs	r3, #0
 80182e6:	b510      	push	{r4, lr}
 80182e8:	4604      	mov	r4, r0
 80182ea:	e9c0 3300 	strd	r3, r3, [r0]
 80182ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80182f2:	6083      	str	r3, [r0, #8]
 80182f4:	8181      	strh	r1, [r0, #12]
 80182f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80182f8:	81c2      	strh	r2, [r0, #14]
 80182fa:	6183      	str	r3, [r0, #24]
 80182fc:	4619      	mov	r1, r3
 80182fe:	2208      	movs	r2, #8
 8018300:	305c      	adds	r0, #92	@ 0x5c
 8018302:	f000 fa8f 	bl	8018824 <memset>
 8018306:	4b0d      	ldr	r3, [pc, #52]	@ (801833c <std+0x58>)
 8018308:	6263      	str	r3, [r4, #36]	@ 0x24
 801830a:	4b0d      	ldr	r3, [pc, #52]	@ (8018340 <std+0x5c>)
 801830c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801830e:	4b0d      	ldr	r3, [pc, #52]	@ (8018344 <std+0x60>)
 8018310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018312:	4b0d      	ldr	r3, [pc, #52]	@ (8018348 <std+0x64>)
 8018314:	6323      	str	r3, [r4, #48]	@ 0x30
 8018316:	4b0d      	ldr	r3, [pc, #52]	@ (801834c <std+0x68>)
 8018318:	6224      	str	r4, [r4, #32]
 801831a:	429c      	cmp	r4, r3
 801831c:	d006      	beq.n	801832c <std+0x48>
 801831e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018322:	4294      	cmp	r4, r2
 8018324:	d002      	beq.n	801832c <std+0x48>
 8018326:	33d0      	adds	r3, #208	@ 0xd0
 8018328:	429c      	cmp	r4, r3
 801832a:	d105      	bne.n	8018338 <std+0x54>
 801832c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018334:	f000 bb8a 	b.w	8018a4c <__retarget_lock_init_recursive>
 8018338:	bd10      	pop	{r4, pc}
 801833a:	bf00      	nop
 801833c:	080185b1 	.word	0x080185b1
 8018340:	080185d3 	.word	0x080185d3
 8018344:	0801860b 	.word	0x0801860b
 8018348:	0801862f 	.word	0x0801862f
 801834c:	20010ed4 	.word	0x20010ed4

08018350 <stdio_exit_handler>:
 8018350:	4a02      	ldr	r2, [pc, #8]	@ (801835c <stdio_exit_handler+0xc>)
 8018352:	4903      	ldr	r1, [pc, #12]	@ (8018360 <stdio_exit_handler+0x10>)
 8018354:	4803      	ldr	r0, [pc, #12]	@ (8018364 <stdio_exit_handler+0x14>)
 8018356:	f000 b869 	b.w	801842c <_fwalk_sglue>
 801835a:	bf00      	nop
 801835c:	200001f8 	.word	0x200001f8
 8018360:	080194d1 	.word	0x080194d1
 8018364:	20000208 	.word	0x20000208

08018368 <cleanup_stdio>:
 8018368:	6841      	ldr	r1, [r0, #4]
 801836a:	4b0c      	ldr	r3, [pc, #48]	@ (801839c <cleanup_stdio+0x34>)
 801836c:	4299      	cmp	r1, r3
 801836e:	b510      	push	{r4, lr}
 8018370:	4604      	mov	r4, r0
 8018372:	d001      	beq.n	8018378 <cleanup_stdio+0x10>
 8018374:	f001 f8ac 	bl	80194d0 <_fflush_r>
 8018378:	68a1      	ldr	r1, [r4, #8]
 801837a:	4b09      	ldr	r3, [pc, #36]	@ (80183a0 <cleanup_stdio+0x38>)
 801837c:	4299      	cmp	r1, r3
 801837e:	d002      	beq.n	8018386 <cleanup_stdio+0x1e>
 8018380:	4620      	mov	r0, r4
 8018382:	f001 f8a5 	bl	80194d0 <_fflush_r>
 8018386:	68e1      	ldr	r1, [r4, #12]
 8018388:	4b06      	ldr	r3, [pc, #24]	@ (80183a4 <cleanup_stdio+0x3c>)
 801838a:	4299      	cmp	r1, r3
 801838c:	d004      	beq.n	8018398 <cleanup_stdio+0x30>
 801838e:	4620      	mov	r0, r4
 8018390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018394:	f001 b89c 	b.w	80194d0 <_fflush_r>
 8018398:	bd10      	pop	{r4, pc}
 801839a:	bf00      	nop
 801839c:	20010ed4 	.word	0x20010ed4
 80183a0:	20010f3c 	.word	0x20010f3c
 80183a4:	20010fa4 	.word	0x20010fa4

080183a8 <global_stdio_init.part.0>:
 80183a8:	b510      	push	{r4, lr}
 80183aa:	4b0b      	ldr	r3, [pc, #44]	@ (80183d8 <global_stdio_init.part.0+0x30>)
 80183ac:	4c0b      	ldr	r4, [pc, #44]	@ (80183dc <global_stdio_init.part.0+0x34>)
 80183ae:	4a0c      	ldr	r2, [pc, #48]	@ (80183e0 <global_stdio_init.part.0+0x38>)
 80183b0:	601a      	str	r2, [r3, #0]
 80183b2:	4620      	mov	r0, r4
 80183b4:	2200      	movs	r2, #0
 80183b6:	2104      	movs	r1, #4
 80183b8:	f7ff ff94 	bl	80182e4 <std>
 80183bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80183c0:	2201      	movs	r2, #1
 80183c2:	2109      	movs	r1, #9
 80183c4:	f7ff ff8e 	bl	80182e4 <std>
 80183c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80183cc:	2202      	movs	r2, #2
 80183ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183d2:	2112      	movs	r1, #18
 80183d4:	f7ff bf86 	b.w	80182e4 <std>
 80183d8:	2001100c 	.word	0x2001100c
 80183dc:	20010ed4 	.word	0x20010ed4
 80183e0:	08018351 	.word	0x08018351

080183e4 <__sfp_lock_acquire>:
 80183e4:	4801      	ldr	r0, [pc, #4]	@ (80183ec <__sfp_lock_acquire+0x8>)
 80183e6:	f000 bb32 	b.w	8018a4e <__retarget_lock_acquire_recursive>
 80183ea:	bf00      	nop
 80183ec:	20011016 	.word	0x20011016

080183f0 <__sfp_lock_release>:
 80183f0:	4801      	ldr	r0, [pc, #4]	@ (80183f8 <__sfp_lock_release+0x8>)
 80183f2:	f000 bb2d 	b.w	8018a50 <__retarget_lock_release_recursive>
 80183f6:	bf00      	nop
 80183f8:	20011016 	.word	0x20011016

080183fc <__sinit>:
 80183fc:	b510      	push	{r4, lr}
 80183fe:	4604      	mov	r4, r0
 8018400:	f7ff fff0 	bl	80183e4 <__sfp_lock_acquire>
 8018404:	6a23      	ldr	r3, [r4, #32]
 8018406:	b11b      	cbz	r3, 8018410 <__sinit+0x14>
 8018408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801840c:	f7ff bff0 	b.w	80183f0 <__sfp_lock_release>
 8018410:	4b04      	ldr	r3, [pc, #16]	@ (8018424 <__sinit+0x28>)
 8018412:	6223      	str	r3, [r4, #32]
 8018414:	4b04      	ldr	r3, [pc, #16]	@ (8018428 <__sinit+0x2c>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d1f5      	bne.n	8018408 <__sinit+0xc>
 801841c:	f7ff ffc4 	bl	80183a8 <global_stdio_init.part.0>
 8018420:	e7f2      	b.n	8018408 <__sinit+0xc>
 8018422:	bf00      	nop
 8018424:	08018369 	.word	0x08018369
 8018428:	2001100c 	.word	0x2001100c

0801842c <_fwalk_sglue>:
 801842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018430:	4607      	mov	r7, r0
 8018432:	4688      	mov	r8, r1
 8018434:	4614      	mov	r4, r2
 8018436:	2600      	movs	r6, #0
 8018438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801843c:	f1b9 0901 	subs.w	r9, r9, #1
 8018440:	d505      	bpl.n	801844e <_fwalk_sglue+0x22>
 8018442:	6824      	ldr	r4, [r4, #0]
 8018444:	2c00      	cmp	r4, #0
 8018446:	d1f7      	bne.n	8018438 <_fwalk_sglue+0xc>
 8018448:	4630      	mov	r0, r6
 801844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801844e:	89ab      	ldrh	r3, [r5, #12]
 8018450:	2b01      	cmp	r3, #1
 8018452:	d907      	bls.n	8018464 <_fwalk_sglue+0x38>
 8018454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018458:	3301      	adds	r3, #1
 801845a:	d003      	beq.n	8018464 <_fwalk_sglue+0x38>
 801845c:	4629      	mov	r1, r5
 801845e:	4638      	mov	r0, r7
 8018460:	47c0      	blx	r8
 8018462:	4306      	orrs	r6, r0
 8018464:	3568      	adds	r5, #104	@ 0x68
 8018466:	e7e9      	b.n	801843c <_fwalk_sglue+0x10>

08018468 <iprintf>:
 8018468:	b40f      	push	{r0, r1, r2, r3}
 801846a:	b507      	push	{r0, r1, r2, lr}
 801846c:	4906      	ldr	r1, [pc, #24]	@ (8018488 <iprintf+0x20>)
 801846e:	ab04      	add	r3, sp, #16
 8018470:	6808      	ldr	r0, [r1, #0]
 8018472:	f853 2b04 	ldr.w	r2, [r3], #4
 8018476:	6881      	ldr	r1, [r0, #8]
 8018478:	9301      	str	r3, [sp, #4]
 801847a:	f000 fcff 	bl	8018e7c <_vfiprintf_r>
 801847e:	b003      	add	sp, #12
 8018480:	f85d eb04 	ldr.w	lr, [sp], #4
 8018484:	b004      	add	sp, #16
 8018486:	4770      	bx	lr
 8018488:	20000204 	.word	0x20000204

0801848c <_puts_r>:
 801848c:	6a03      	ldr	r3, [r0, #32]
 801848e:	b570      	push	{r4, r5, r6, lr}
 8018490:	6884      	ldr	r4, [r0, #8]
 8018492:	4605      	mov	r5, r0
 8018494:	460e      	mov	r6, r1
 8018496:	b90b      	cbnz	r3, 801849c <_puts_r+0x10>
 8018498:	f7ff ffb0 	bl	80183fc <__sinit>
 801849c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801849e:	07db      	lsls	r3, r3, #31
 80184a0:	d405      	bmi.n	80184ae <_puts_r+0x22>
 80184a2:	89a3      	ldrh	r3, [r4, #12]
 80184a4:	0598      	lsls	r0, r3, #22
 80184a6:	d402      	bmi.n	80184ae <_puts_r+0x22>
 80184a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184aa:	f000 fad0 	bl	8018a4e <__retarget_lock_acquire_recursive>
 80184ae:	89a3      	ldrh	r3, [r4, #12]
 80184b0:	0719      	lsls	r1, r3, #28
 80184b2:	d502      	bpl.n	80184ba <_puts_r+0x2e>
 80184b4:	6923      	ldr	r3, [r4, #16]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d135      	bne.n	8018526 <_puts_r+0x9a>
 80184ba:	4621      	mov	r1, r4
 80184bc:	4628      	mov	r0, r5
 80184be:	f000 f931 	bl	8018724 <__swsetup_r>
 80184c2:	b380      	cbz	r0, 8018526 <_puts_r+0x9a>
 80184c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80184c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184ca:	07da      	lsls	r2, r3, #31
 80184cc:	d405      	bmi.n	80184da <_puts_r+0x4e>
 80184ce:	89a3      	ldrh	r3, [r4, #12]
 80184d0:	059b      	lsls	r3, r3, #22
 80184d2:	d402      	bmi.n	80184da <_puts_r+0x4e>
 80184d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184d6:	f000 fabb 	bl	8018a50 <__retarget_lock_release_recursive>
 80184da:	4628      	mov	r0, r5
 80184dc:	bd70      	pop	{r4, r5, r6, pc}
 80184de:	2b00      	cmp	r3, #0
 80184e0:	da04      	bge.n	80184ec <_puts_r+0x60>
 80184e2:	69a2      	ldr	r2, [r4, #24]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	dc17      	bgt.n	8018518 <_puts_r+0x8c>
 80184e8:	290a      	cmp	r1, #10
 80184ea:	d015      	beq.n	8018518 <_puts_r+0x8c>
 80184ec:	6823      	ldr	r3, [r4, #0]
 80184ee:	1c5a      	adds	r2, r3, #1
 80184f0:	6022      	str	r2, [r4, #0]
 80184f2:	7019      	strb	r1, [r3, #0]
 80184f4:	68a3      	ldr	r3, [r4, #8]
 80184f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80184fa:	3b01      	subs	r3, #1
 80184fc:	60a3      	str	r3, [r4, #8]
 80184fe:	2900      	cmp	r1, #0
 8018500:	d1ed      	bne.n	80184de <_puts_r+0x52>
 8018502:	2b00      	cmp	r3, #0
 8018504:	da11      	bge.n	801852a <_puts_r+0x9e>
 8018506:	4622      	mov	r2, r4
 8018508:	210a      	movs	r1, #10
 801850a:	4628      	mov	r0, r5
 801850c:	f000 f8cc 	bl	80186a8 <__swbuf_r>
 8018510:	3001      	adds	r0, #1
 8018512:	d0d7      	beq.n	80184c4 <_puts_r+0x38>
 8018514:	250a      	movs	r5, #10
 8018516:	e7d7      	b.n	80184c8 <_puts_r+0x3c>
 8018518:	4622      	mov	r2, r4
 801851a:	4628      	mov	r0, r5
 801851c:	f000 f8c4 	bl	80186a8 <__swbuf_r>
 8018520:	3001      	adds	r0, #1
 8018522:	d1e7      	bne.n	80184f4 <_puts_r+0x68>
 8018524:	e7ce      	b.n	80184c4 <_puts_r+0x38>
 8018526:	3e01      	subs	r6, #1
 8018528:	e7e4      	b.n	80184f4 <_puts_r+0x68>
 801852a:	6823      	ldr	r3, [r4, #0]
 801852c:	1c5a      	adds	r2, r3, #1
 801852e:	6022      	str	r2, [r4, #0]
 8018530:	220a      	movs	r2, #10
 8018532:	701a      	strb	r2, [r3, #0]
 8018534:	e7ee      	b.n	8018514 <_puts_r+0x88>
	...

08018538 <puts>:
 8018538:	4b02      	ldr	r3, [pc, #8]	@ (8018544 <puts+0xc>)
 801853a:	4601      	mov	r1, r0
 801853c:	6818      	ldr	r0, [r3, #0]
 801853e:	f7ff bfa5 	b.w	801848c <_puts_r>
 8018542:	bf00      	nop
 8018544:	20000204 	.word	0x20000204

08018548 <sniprintf>:
 8018548:	b40c      	push	{r2, r3}
 801854a:	b530      	push	{r4, r5, lr}
 801854c:	4b17      	ldr	r3, [pc, #92]	@ (80185ac <sniprintf+0x64>)
 801854e:	1e0c      	subs	r4, r1, #0
 8018550:	681d      	ldr	r5, [r3, #0]
 8018552:	b09d      	sub	sp, #116	@ 0x74
 8018554:	da08      	bge.n	8018568 <sniprintf+0x20>
 8018556:	238b      	movs	r3, #139	@ 0x8b
 8018558:	602b      	str	r3, [r5, #0]
 801855a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801855e:	b01d      	add	sp, #116	@ 0x74
 8018560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018564:	b002      	add	sp, #8
 8018566:	4770      	bx	lr
 8018568:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801856c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018570:	bf14      	ite	ne
 8018572:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018576:	4623      	moveq	r3, r4
 8018578:	9304      	str	r3, [sp, #16]
 801857a:	9307      	str	r3, [sp, #28]
 801857c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018580:	9002      	str	r0, [sp, #8]
 8018582:	9006      	str	r0, [sp, #24]
 8018584:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018588:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801858a:	ab21      	add	r3, sp, #132	@ 0x84
 801858c:	a902      	add	r1, sp, #8
 801858e:	4628      	mov	r0, r5
 8018590:	9301      	str	r3, [sp, #4]
 8018592:	f000 fb4d 	bl	8018c30 <_svfiprintf_r>
 8018596:	1c43      	adds	r3, r0, #1
 8018598:	bfbc      	itt	lt
 801859a:	238b      	movlt	r3, #139	@ 0x8b
 801859c:	602b      	strlt	r3, [r5, #0]
 801859e:	2c00      	cmp	r4, #0
 80185a0:	d0dd      	beq.n	801855e <sniprintf+0x16>
 80185a2:	9b02      	ldr	r3, [sp, #8]
 80185a4:	2200      	movs	r2, #0
 80185a6:	701a      	strb	r2, [r3, #0]
 80185a8:	e7d9      	b.n	801855e <sniprintf+0x16>
 80185aa:	bf00      	nop
 80185ac:	20000204 	.word	0x20000204

080185b0 <__sread>:
 80185b0:	b510      	push	{r4, lr}
 80185b2:	460c      	mov	r4, r1
 80185b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185b8:	f000 f9ea 	bl	8018990 <_read_r>
 80185bc:	2800      	cmp	r0, #0
 80185be:	bfab      	itete	ge
 80185c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80185c2:	89a3      	ldrhlt	r3, [r4, #12]
 80185c4:	181b      	addge	r3, r3, r0
 80185c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80185ca:	bfac      	ite	ge
 80185cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80185ce:	81a3      	strhlt	r3, [r4, #12]
 80185d0:	bd10      	pop	{r4, pc}

080185d2 <__swrite>:
 80185d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185d6:	461f      	mov	r7, r3
 80185d8:	898b      	ldrh	r3, [r1, #12]
 80185da:	05db      	lsls	r3, r3, #23
 80185dc:	4605      	mov	r5, r0
 80185de:	460c      	mov	r4, r1
 80185e0:	4616      	mov	r6, r2
 80185e2:	d505      	bpl.n	80185f0 <__swrite+0x1e>
 80185e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185e8:	2302      	movs	r3, #2
 80185ea:	2200      	movs	r2, #0
 80185ec:	f000 f9be 	bl	801896c <_lseek_r>
 80185f0:	89a3      	ldrh	r3, [r4, #12]
 80185f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80185fa:	81a3      	strh	r3, [r4, #12]
 80185fc:	4632      	mov	r2, r6
 80185fe:	463b      	mov	r3, r7
 8018600:	4628      	mov	r0, r5
 8018602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018606:	f000 b9e5 	b.w	80189d4 <_write_r>

0801860a <__sseek>:
 801860a:	b510      	push	{r4, lr}
 801860c:	460c      	mov	r4, r1
 801860e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018612:	f000 f9ab 	bl	801896c <_lseek_r>
 8018616:	1c43      	adds	r3, r0, #1
 8018618:	89a3      	ldrh	r3, [r4, #12]
 801861a:	bf15      	itete	ne
 801861c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801861e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018626:	81a3      	strheq	r3, [r4, #12]
 8018628:	bf18      	it	ne
 801862a:	81a3      	strhne	r3, [r4, #12]
 801862c:	bd10      	pop	{r4, pc}

0801862e <__sclose>:
 801862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018632:	f000 b935 	b.w	80188a0 <_close_r>

08018636 <_vsniprintf_r>:
 8018636:	b530      	push	{r4, r5, lr}
 8018638:	4614      	mov	r4, r2
 801863a:	2c00      	cmp	r4, #0
 801863c:	b09b      	sub	sp, #108	@ 0x6c
 801863e:	4605      	mov	r5, r0
 8018640:	461a      	mov	r2, r3
 8018642:	da05      	bge.n	8018650 <_vsniprintf_r+0x1a>
 8018644:	238b      	movs	r3, #139	@ 0x8b
 8018646:	6003      	str	r3, [r0, #0]
 8018648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801864c:	b01b      	add	sp, #108	@ 0x6c
 801864e:	bd30      	pop	{r4, r5, pc}
 8018650:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018654:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018658:	bf14      	ite	ne
 801865a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801865e:	4623      	moveq	r3, r4
 8018660:	9302      	str	r3, [sp, #8]
 8018662:	9305      	str	r3, [sp, #20]
 8018664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018668:	9100      	str	r1, [sp, #0]
 801866a:	9104      	str	r1, [sp, #16]
 801866c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018670:	4669      	mov	r1, sp
 8018672:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018674:	f000 fadc 	bl	8018c30 <_svfiprintf_r>
 8018678:	1c43      	adds	r3, r0, #1
 801867a:	bfbc      	itt	lt
 801867c:	238b      	movlt	r3, #139	@ 0x8b
 801867e:	602b      	strlt	r3, [r5, #0]
 8018680:	2c00      	cmp	r4, #0
 8018682:	d0e3      	beq.n	801864c <_vsniprintf_r+0x16>
 8018684:	9b00      	ldr	r3, [sp, #0]
 8018686:	2200      	movs	r2, #0
 8018688:	701a      	strb	r2, [r3, #0]
 801868a:	e7df      	b.n	801864c <_vsniprintf_r+0x16>

0801868c <vsniprintf>:
 801868c:	b507      	push	{r0, r1, r2, lr}
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	4613      	mov	r3, r2
 8018692:	460a      	mov	r2, r1
 8018694:	4601      	mov	r1, r0
 8018696:	4803      	ldr	r0, [pc, #12]	@ (80186a4 <vsniprintf+0x18>)
 8018698:	6800      	ldr	r0, [r0, #0]
 801869a:	f7ff ffcc 	bl	8018636 <_vsniprintf_r>
 801869e:	b003      	add	sp, #12
 80186a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80186a4:	20000204 	.word	0x20000204

080186a8 <__swbuf_r>:
 80186a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186aa:	460e      	mov	r6, r1
 80186ac:	4614      	mov	r4, r2
 80186ae:	4605      	mov	r5, r0
 80186b0:	b118      	cbz	r0, 80186ba <__swbuf_r+0x12>
 80186b2:	6a03      	ldr	r3, [r0, #32]
 80186b4:	b90b      	cbnz	r3, 80186ba <__swbuf_r+0x12>
 80186b6:	f7ff fea1 	bl	80183fc <__sinit>
 80186ba:	69a3      	ldr	r3, [r4, #24]
 80186bc:	60a3      	str	r3, [r4, #8]
 80186be:	89a3      	ldrh	r3, [r4, #12]
 80186c0:	071a      	lsls	r2, r3, #28
 80186c2:	d501      	bpl.n	80186c8 <__swbuf_r+0x20>
 80186c4:	6923      	ldr	r3, [r4, #16]
 80186c6:	b943      	cbnz	r3, 80186da <__swbuf_r+0x32>
 80186c8:	4621      	mov	r1, r4
 80186ca:	4628      	mov	r0, r5
 80186cc:	f000 f82a 	bl	8018724 <__swsetup_r>
 80186d0:	b118      	cbz	r0, 80186da <__swbuf_r+0x32>
 80186d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80186d6:	4638      	mov	r0, r7
 80186d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	6922      	ldr	r2, [r4, #16]
 80186de:	1a98      	subs	r0, r3, r2
 80186e0:	6963      	ldr	r3, [r4, #20]
 80186e2:	b2f6      	uxtb	r6, r6
 80186e4:	4283      	cmp	r3, r0
 80186e6:	4637      	mov	r7, r6
 80186e8:	dc05      	bgt.n	80186f6 <__swbuf_r+0x4e>
 80186ea:	4621      	mov	r1, r4
 80186ec:	4628      	mov	r0, r5
 80186ee:	f000 feef 	bl	80194d0 <_fflush_r>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d1ed      	bne.n	80186d2 <__swbuf_r+0x2a>
 80186f6:	68a3      	ldr	r3, [r4, #8]
 80186f8:	3b01      	subs	r3, #1
 80186fa:	60a3      	str	r3, [r4, #8]
 80186fc:	6823      	ldr	r3, [r4, #0]
 80186fe:	1c5a      	adds	r2, r3, #1
 8018700:	6022      	str	r2, [r4, #0]
 8018702:	701e      	strb	r6, [r3, #0]
 8018704:	6962      	ldr	r2, [r4, #20]
 8018706:	1c43      	adds	r3, r0, #1
 8018708:	429a      	cmp	r2, r3
 801870a:	d004      	beq.n	8018716 <__swbuf_r+0x6e>
 801870c:	89a3      	ldrh	r3, [r4, #12]
 801870e:	07db      	lsls	r3, r3, #31
 8018710:	d5e1      	bpl.n	80186d6 <__swbuf_r+0x2e>
 8018712:	2e0a      	cmp	r6, #10
 8018714:	d1df      	bne.n	80186d6 <__swbuf_r+0x2e>
 8018716:	4621      	mov	r1, r4
 8018718:	4628      	mov	r0, r5
 801871a:	f000 fed9 	bl	80194d0 <_fflush_r>
 801871e:	2800      	cmp	r0, #0
 8018720:	d0d9      	beq.n	80186d6 <__swbuf_r+0x2e>
 8018722:	e7d6      	b.n	80186d2 <__swbuf_r+0x2a>

08018724 <__swsetup_r>:
 8018724:	b538      	push	{r3, r4, r5, lr}
 8018726:	4b29      	ldr	r3, [pc, #164]	@ (80187cc <__swsetup_r+0xa8>)
 8018728:	4605      	mov	r5, r0
 801872a:	6818      	ldr	r0, [r3, #0]
 801872c:	460c      	mov	r4, r1
 801872e:	b118      	cbz	r0, 8018738 <__swsetup_r+0x14>
 8018730:	6a03      	ldr	r3, [r0, #32]
 8018732:	b90b      	cbnz	r3, 8018738 <__swsetup_r+0x14>
 8018734:	f7ff fe62 	bl	80183fc <__sinit>
 8018738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801873c:	0719      	lsls	r1, r3, #28
 801873e:	d422      	bmi.n	8018786 <__swsetup_r+0x62>
 8018740:	06da      	lsls	r2, r3, #27
 8018742:	d407      	bmi.n	8018754 <__swsetup_r+0x30>
 8018744:	2209      	movs	r2, #9
 8018746:	602a      	str	r2, [r5, #0]
 8018748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801874c:	81a3      	strh	r3, [r4, #12]
 801874e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018752:	e033      	b.n	80187bc <__swsetup_r+0x98>
 8018754:	0758      	lsls	r0, r3, #29
 8018756:	d512      	bpl.n	801877e <__swsetup_r+0x5a>
 8018758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801875a:	b141      	cbz	r1, 801876e <__swsetup_r+0x4a>
 801875c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018760:	4299      	cmp	r1, r3
 8018762:	d002      	beq.n	801876a <__swsetup_r+0x46>
 8018764:	4628      	mov	r0, r5
 8018766:	f000 f9b5 	bl	8018ad4 <_free_r>
 801876a:	2300      	movs	r3, #0
 801876c:	6363      	str	r3, [r4, #52]	@ 0x34
 801876e:	89a3      	ldrh	r3, [r4, #12]
 8018770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018774:	81a3      	strh	r3, [r4, #12]
 8018776:	2300      	movs	r3, #0
 8018778:	6063      	str	r3, [r4, #4]
 801877a:	6923      	ldr	r3, [r4, #16]
 801877c:	6023      	str	r3, [r4, #0]
 801877e:	89a3      	ldrh	r3, [r4, #12]
 8018780:	f043 0308 	orr.w	r3, r3, #8
 8018784:	81a3      	strh	r3, [r4, #12]
 8018786:	6923      	ldr	r3, [r4, #16]
 8018788:	b94b      	cbnz	r3, 801879e <__swsetup_r+0x7a>
 801878a:	89a3      	ldrh	r3, [r4, #12]
 801878c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018794:	d003      	beq.n	801879e <__swsetup_r+0x7a>
 8018796:	4621      	mov	r1, r4
 8018798:	4628      	mov	r0, r5
 801879a:	f000 fef9 	bl	8019590 <__smakebuf_r>
 801879e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187a2:	f013 0201 	ands.w	r2, r3, #1
 80187a6:	d00a      	beq.n	80187be <__swsetup_r+0x9a>
 80187a8:	2200      	movs	r2, #0
 80187aa:	60a2      	str	r2, [r4, #8]
 80187ac:	6962      	ldr	r2, [r4, #20]
 80187ae:	4252      	negs	r2, r2
 80187b0:	61a2      	str	r2, [r4, #24]
 80187b2:	6922      	ldr	r2, [r4, #16]
 80187b4:	b942      	cbnz	r2, 80187c8 <__swsetup_r+0xa4>
 80187b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187ba:	d1c5      	bne.n	8018748 <__swsetup_r+0x24>
 80187bc:	bd38      	pop	{r3, r4, r5, pc}
 80187be:	0799      	lsls	r1, r3, #30
 80187c0:	bf58      	it	pl
 80187c2:	6962      	ldrpl	r2, [r4, #20]
 80187c4:	60a2      	str	r2, [r4, #8]
 80187c6:	e7f4      	b.n	80187b2 <__swsetup_r+0x8e>
 80187c8:	2000      	movs	r0, #0
 80187ca:	e7f7      	b.n	80187bc <__swsetup_r+0x98>
 80187cc:	20000204 	.word	0x20000204

080187d0 <memcmp>:
 80187d0:	b510      	push	{r4, lr}
 80187d2:	3901      	subs	r1, #1
 80187d4:	4402      	add	r2, r0
 80187d6:	4290      	cmp	r0, r2
 80187d8:	d101      	bne.n	80187de <memcmp+0xe>
 80187da:	2000      	movs	r0, #0
 80187dc:	e005      	b.n	80187ea <memcmp+0x1a>
 80187de:	7803      	ldrb	r3, [r0, #0]
 80187e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80187e4:	42a3      	cmp	r3, r4
 80187e6:	d001      	beq.n	80187ec <memcmp+0x1c>
 80187e8:	1b18      	subs	r0, r3, r4
 80187ea:	bd10      	pop	{r4, pc}
 80187ec:	3001      	adds	r0, #1
 80187ee:	e7f2      	b.n	80187d6 <memcmp+0x6>

080187f0 <memmove>:
 80187f0:	4288      	cmp	r0, r1
 80187f2:	b510      	push	{r4, lr}
 80187f4:	eb01 0402 	add.w	r4, r1, r2
 80187f8:	d902      	bls.n	8018800 <memmove+0x10>
 80187fa:	4284      	cmp	r4, r0
 80187fc:	4623      	mov	r3, r4
 80187fe:	d807      	bhi.n	8018810 <memmove+0x20>
 8018800:	1e43      	subs	r3, r0, #1
 8018802:	42a1      	cmp	r1, r4
 8018804:	d008      	beq.n	8018818 <memmove+0x28>
 8018806:	f811 2b01 	ldrb.w	r2, [r1], #1
 801880a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801880e:	e7f8      	b.n	8018802 <memmove+0x12>
 8018810:	4402      	add	r2, r0
 8018812:	4601      	mov	r1, r0
 8018814:	428a      	cmp	r2, r1
 8018816:	d100      	bne.n	801881a <memmove+0x2a>
 8018818:	bd10      	pop	{r4, pc}
 801881a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801881e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018822:	e7f7      	b.n	8018814 <memmove+0x24>

08018824 <memset>:
 8018824:	4402      	add	r2, r0
 8018826:	4603      	mov	r3, r0
 8018828:	4293      	cmp	r3, r2
 801882a:	d100      	bne.n	801882e <memset+0xa>
 801882c:	4770      	bx	lr
 801882e:	f803 1b01 	strb.w	r1, [r3], #1
 8018832:	e7f9      	b.n	8018828 <memset+0x4>

08018834 <strchr>:
 8018834:	b2c9      	uxtb	r1, r1
 8018836:	4603      	mov	r3, r0
 8018838:	4618      	mov	r0, r3
 801883a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801883e:	b112      	cbz	r2, 8018846 <strchr+0x12>
 8018840:	428a      	cmp	r2, r1
 8018842:	d1f9      	bne.n	8018838 <strchr+0x4>
 8018844:	4770      	bx	lr
 8018846:	2900      	cmp	r1, #0
 8018848:	bf18      	it	ne
 801884a:	2000      	movne	r0, #0
 801884c:	4770      	bx	lr

0801884e <strncmp>:
 801884e:	b510      	push	{r4, lr}
 8018850:	b16a      	cbz	r2, 801886e <strncmp+0x20>
 8018852:	3901      	subs	r1, #1
 8018854:	1884      	adds	r4, r0, r2
 8018856:	f810 2b01 	ldrb.w	r2, [r0], #1
 801885a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801885e:	429a      	cmp	r2, r3
 8018860:	d103      	bne.n	801886a <strncmp+0x1c>
 8018862:	42a0      	cmp	r0, r4
 8018864:	d001      	beq.n	801886a <strncmp+0x1c>
 8018866:	2a00      	cmp	r2, #0
 8018868:	d1f5      	bne.n	8018856 <strncmp+0x8>
 801886a:	1ad0      	subs	r0, r2, r3
 801886c:	bd10      	pop	{r4, pc}
 801886e:	4610      	mov	r0, r2
 8018870:	e7fc      	b.n	801886c <strncmp+0x1e>

08018872 <strstr>:
 8018872:	780a      	ldrb	r2, [r1, #0]
 8018874:	b570      	push	{r4, r5, r6, lr}
 8018876:	b96a      	cbnz	r2, 8018894 <strstr+0x22>
 8018878:	bd70      	pop	{r4, r5, r6, pc}
 801887a:	429a      	cmp	r2, r3
 801887c:	d109      	bne.n	8018892 <strstr+0x20>
 801887e:	460c      	mov	r4, r1
 8018880:	4605      	mov	r5, r0
 8018882:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018886:	2b00      	cmp	r3, #0
 8018888:	d0f6      	beq.n	8018878 <strstr+0x6>
 801888a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801888e:	429e      	cmp	r6, r3
 8018890:	d0f7      	beq.n	8018882 <strstr+0x10>
 8018892:	3001      	adds	r0, #1
 8018894:	7803      	ldrb	r3, [r0, #0]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d1ef      	bne.n	801887a <strstr+0x8>
 801889a:	4618      	mov	r0, r3
 801889c:	e7ec      	b.n	8018878 <strstr+0x6>
	...

080188a0 <_close_r>:
 80188a0:	b538      	push	{r3, r4, r5, lr}
 80188a2:	4d06      	ldr	r5, [pc, #24]	@ (80188bc <_close_r+0x1c>)
 80188a4:	2300      	movs	r3, #0
 80188a6:	4604      	mov	r4, r0
 80188a8:	4608      	mov	r0, r1
 80188aa:	602b      	str	r3, [r5, #0]
 80188ac:	f7ea fc82 	bl	80031b4 <_close>
 80188b0:	1c43      	adds	r3, r0, #1
 80188b2:	d102      	bne.n	80188ba <_close_r+0x1a>
 80188b4:	682b      	ldr	r3, [r5, #0]
 80188b6:	b103      	cbz	r3, 80188ba <_close_r+0x1a>
 80188b8:	6023      	str	r3, [r4, #0]
 80188ba:	bd38      	pop	{r3, r4, r5, pc}
 80188bc:	20011010 	.word	0x20011010

080188c0 <_reclaim_reent>:
 80188c0:	4b29      	ldr	r3, [pc, #164]	@ (8018968 <_reclaim_reent+0xa8>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	4283      	cmp	r3, r0
 80188c6:	b570      	push	{r4, r5, r6, lr}
 80188c8:	4604      	mov	r4, r0
 80188ca:	d04b      	beq.n	8018964 <_reclaim_reent+0xa4>
 80188cc:	69c3      	ldr	r3, [r0, #28]
 80188ce:	b1ab      	cbz	r3, 80188fc <_reclaim_reent+0x3c>
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	b16b      	cbz	r3, 80188f0 <_reclaim_reent+0x30>
 80188d4:	2500      	movs	r5, #0
 80188d6:	69e3      	ldr	r3, [r4, #28]
 80188d8:	68db      	ldr	r3, [r3, #12]
 80188da:	5959      	ldr	r1, [r3, r5]
 80188dc:	2900      	cmp	r1, #0
 80188de:	d13b      	bne.n	8018958 <_reclaim_reent+0x98>
 80188e0:	3504      	adds	r5, #4
 80188e2:	2d80      	cmp	r5, #128	@ 0x80
 80188e4:	d1f7      	bne.n	80188d6 <_reclaim_reent+0x16>
 80188e6:	69e3      	ldr	r3, [r4, #28]
 80188e8:	4620      	mov	r0, r4
 80188ea:	68d9      	ldr	r1, [r3, #12]
 80188ec:	f000 f8f2 	bl	8018ad4 <_free_r>
 80188f0:	69e3      	ldr	r3, [r4, #28]
 80188f2:	6819      	ldr	r1, [r3, #0]
 80188f4:	b111      	cbz	r1, 80188fc <_reclaim_reent+0x3c>
 80188f6:	4620      	mov	r0, r4
 80188f8:	f000 f8ec 	bl	8018ad4 <_free_r>
 80188fc:	6961      	ldr	r1, [r4, #20]
 80188fe:	b111      	cbz	r1, 8018906 <_reclaim_reent+0x46>
 8018900:	4620      	mov	r0, r4
 8018902:	f000 f8e7 	bl	8018ad4 <_free_r>
 8018906:	69e1      	ldr	r1, [r4, #28]
 8018908:	b111      	cbz	r1, 8018910 <_reclaim_reent+0x50>
 801890a:	4620      	mov	r0, r4
 801890c:	f000 f8e2 	bl	8018ad4 <_free_r>
 8018910:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018912:	b111      	cbz	r1, 801891a <_reclaim_reent+0x5a>
 8018914:	4620      	mov	r0, r4
 8018916:	f000 f8dd 	bl	8018ad4 <_free_r>
 801891a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801891c:	b111      	cbz	r1, 8018924 <_reclaim_reent+0x64>
 801891e:	4620      	mov	r0, r4
 8018920:	f000 f8d8 	bl	8018ad4 <_free_r>
 8018924:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018926:	b111      	cbz	r1, 801892e <_reclaim_reent+0x6e>
 8018928:	4620      	mov	r0, r4
 801892a:	f000 f8d3 	bl	8018ad4 <_free_r>
 801892e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018930:	b111      	cbz	r1, 8018938 <_reclaim_reent+0x78>
 8018932:	4620      	mov	r0, r4
 8018934:	f000 f8ce 	bl	8018ad4 <_free_r>
 8018938:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801893a:	b111      	cbz	r1, 8018942 <_reclaim_reent+0x82>
 801893c:	4620      	mov	r0, r4
 801893e:	f000 f8c9 	bl	8018ad4 <_free_r>
 8018942:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018944:	b111      	cbz	r1, 801894c <_reclaim_reent+0x8c>
 8018946:	4620      	mov	r0, r4
 8018948:	f000 f8c4 	bl	8018ad4 <_free_r>
 801894c:	6a23      	ldr	r3, [r4, #32]
 801894e:	b14b      	cbz	r3, 8018964 <_reclaim_reent+0xa4>
 8018950:	4620      	mov	r0, r4
 8018952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018956:	4718      	bx	r3
 8018958:	680e      	ldr	r6, [r1, #0]
 801895a:	4620      	mov	r0, r4
 801895c:	f000 f8ba 	bl	8018ad4 <_free_r>
 8018960:	4631      	mov	r1, r6
 8018962:	e7bb      	b.n	80188dc <_reclaim_reent+0x1c>
 8018964:	bd70      	pop	{r4, r5, r6, pc}
 8018966:	bf00      	nop
 8018968:	20000204 	.word	0x20000204

0801896c <_lseek_r>:
 801896c:	b538      	push	{r3, r4, r5, lr}
 801896e:	4d07      	ldr	r5, [pc, #28]	@ (801898c <_lseek_r+0x20>)
 8018970:	4604      	mov	r4, r0
 8018972:	4608      	mov	r0, r1
 8018974:	4611      	mov	r1, r2
 8018976:	2200      	movs	r2, #0
 8018978:	602a      	str	r2, [r5, #0]
 801897a:	461a      	mov	r2, r3
 801897c:	f7ea fc41 	bl	8003202 <_lseek>
 8018980:	1c43      	adds	r3, r0, #1
 8018982:	d102      	bne.n	801898a <_lseek_r+0x1e>
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	b103      	cbz	r3, 801898a <_lseek_r+0x1e>
 8018988:	6023      	str	r3, [r4, #0]
 801898a:	bd38      	pop	{r3, r4, r5, pc}
 801898c:	20011010 	.word	0x20011010

08018990 <_read_r>:
 8018990:	b538      	push	{r3, r4, r5, lr}
 8018992:	4d07      	ldr	r5, [pc, #28]	@ (80189b0 <_read_r+0x20>)
 8018994:	4604      	mov	r4, r0
 8018996:	4608      	mov	r0, r1
 8018998:	4611      	mov	r1, r2
 801899a:	2200      	movs	r2, #0
 801899c:	602a      	str	r2, [r5, #0]
 801899e:	461a      	mov	r2, r3
 80189a0:	f7ea fbcf 	bl	8003142 <_read>
 80189a4:	1c43      	adds	r3, r0, #1
 80189a6:	d102      	bne.n	80189ae <_read_r+0x1e>
 80189a8:	682b      	ldr	r3, [r5, #0]
 80189aa:	b103      	cbz	r3, 80189ae <_read_r+0x1e>
 80189ac:	6023      	str	r3, [r4, #0]
 80189ae:	bd38      	pop	{r3, r4, r5, pc}
 80189b0:	20011010 	.word	0x20011010

080189b4 <_sbrk_r>:
 80189b4:	b538      	push	{r3, r4, r5, lr}
 80189b6:	4d06      	ldr	r5, [pc, #24]	@ (80189d0 <_sbrk_r+0x1c>)
 80189b8:	2300      	movs	r3, #0
 80189ba:	4604      	mov	r4, r0
 80189bc:	4608      	mov	r0, r1
 80189be:	602b      	str	r3, [r5, #0]
 80189c0:	f7ea fc2c 	bl	800321c <_sbrk>
 80189c4:	1c43      	adds	r3, r0, #1
 80189c6:	d102      	bne.n	80189ce <_sbrk_r+0x1a>
 80189c8:	682b      	ldr	r3, [r5, #0]
 80189ca:	b103      	cbz	r3, 80189ce <_sbrk_r+0x1a>
 80189cc:	6023      	str	r3, [r4, #0]
 80189ce:	bd38      	pop	{r3, r4, r5, pc}
 80189d0:	20011010 	.word	0x20011010

080189d4 <_write_r>:
 80189d4:	b538      	push	{r3, r4, r5, lr}
 80189d6:	4d07      	ldr	r5, [pc, #28]	@ (80189f4 <_write_r+0x20>)
 80189d8:	4604      	mov	r4, r0
 80189da:	4608      	mov	r0, r1
 80189dc:	4611      	mov	r1, r2
 80189de:	2200      	movs	r2, #0
 80189e0:	602a      	str	r2, [r5, #0]
 80189e2:	461a      	mov	r2, r3
 80189e4:	f7ea fbca 	bl	800317c <_write>
 80189e8:	1c43      	adds	r3, r0, #1
 80189ea:	d102      	bne.n	80189f2 <_write_r+0x1e>
 80189ec:	682b      	ldr	r3, [r5, #0]
 80189ee:	b103      	cbz	r3, 80189f2 <_write_r+0x1e>
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	bd38      	pop	{r3, r4, r5, pc}
 80189f4:	20011010 	.word	0x20011010

080189f8 <__errno>:
 80189f8:	4b01      	ldr	r3, [pc, #4]	@ (8018a00 <__errno+0x8>)
 80189fa:	6818      	ldr	r0, [r3, #0]
 80189fc:	4770      	bx	lr
 80189fe:	bf00      	nop
 8018a00:	20000204 	.word	0x20000204

08018a04 <__libc_init_array>:
 8018a04:	b570      	push	{r4, r5, r6, lr}
 8018a06:	4d0d      	ldr	r5, [pc, #52]	@ (8018a3c <__libc_init_array+0x38>)
 8018a08:	4c0d      	ldr	r4, [pc, #52]	@ (8018a40 <__libc_init_array+0x3c>)
 8018a0a:	1b64      	subs	r4, r4, r5
 8018a0c:	10a4      	asrs	r4, r4, #2
 8018a0e:	2600      	movs	r6, #0
 8018a10:	42a6      	cmp	r6, r4
 8018a12:	d109      	bne.n	8018a28 <__libc_init_array+0x24>
 8018a14:	4d0b      	ldr	r5, [pc, #44]	@ (8018a44 <__libc_init_array+0x40>)
 8018a16:	4c0c      	ldr	r4, [pc, #48]	@ (8018a48 <__libc_init_array+0x44>)
 8018a18:	f002 f81e 	bl	801aa58 <_init>
 8018a1c:	1b64      	subs	r4, r4, r5
 8018a1e:	10a4      	asrs	r4, r4, #2
 8018a20:	2600      	movs	r6, #0
 8018a22:	42a6      	cmp	r6, r4
 8018a24:	d105      	bne.n	8018a32 <__libc_init_array+0x2e>
 8018a26:	bd70      	pop	{r4, r5, r6, pc}
 8018a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a2c:	4798      	blx	r3
 8018a2e:	3601      	adds	r6, #1
 8018a30:	e7ee      	b.n	8018a10 <__libc_init_array+0xc>
 8018a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a36:	4798      	blx	r3
 8018a38:	3601      	adds	r6, #1
 8018a3a:	e7f2      	b.n	8018a22 <__libc_init_array+0x1e>
 8018a3c:	0801be08 	.word	0x0801be08
 8018a40:	0801be08 	.word	0x0801be08
 8018a44:	0801be08 	.word	0x0801be08
 8018a48:	0801be14 	.word	0x0801be14

08018a4c <__retarget_lock_init_recursive>:
 8018a4c:	4770      	bx	lr

08018a4e <__retarget_lock_acquire_recursive>:
 8018a4e:	4770      	bx	lr

08018a50 <__retarget_lock_release_recursive>:
 8018a50:	4770      	bx	lr

08018a52 <strcpy>:
 8018a52:	4603      	mov	r3, r0
 8018a54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a58:	f803 2b01 	strb.w	r2, [r3], #1
 8018a5c:	2a00      	cmp	r2, #0
 8018a5e:	d1f9      	bne.n	8018a54 <strcpy+0x2>
 8018a60:	4770      	bx	lr

08018a62 <memcpy>:
 8018a62:	440a      	add	r2, r1
 8018a64:	4291      	cmp	r1, r2
 8018a66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018a6a:	d100      	bne.n	8018a6e <memcpy+0xc>
 8018a6c:	4770      	bx	lr
 8018a6e:	b510      	push	{r4, lr}
 8018a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a78:	4291      	cmp	r1, r2
 8018a7a:	d1f9      	bne.n	8018a70 <memcpy+0xe>
 8018a7c:	bd10      	pop	{r4, pc}
	...

08018a80 <__assert_func>:
 8018a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a82:	4614      	mov	r4, r2
 8018a84:	461a      	mov	r2, r3
 8018a86:	4b09      	ldr	r3, [pc, #36]	@ (8018aac <__assert_func+0x2c>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	4605      	mov	r5, r0
 8018a8c:	68d8      	ldr	r0, [r3, #12]
 8018a8e:	b954      	cbnz	r4, 8018aa6 <__assert_func+0x26>
 8018a90:	4b07      	ldr	r3, [pc, #28]	@ (8018ab0 <__assert_func+0x30>)
 8018a92:	461c      	mov	r4, r3
 8018a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a98:	9100      	str	r1, [sp, #0]
 8018a9a:	462b      	mov	r3, r5
 8018a9c:	4905      	ldr	r1, [pc, #20]	@ (8018ab4 <__assert_func+0x34>)
 8018a9e:	f000 fd3f 	bl	8019520 <fiprintf>
 8018aa2:	f000 fdd3 	bl	801964c <abort>
 8018aa6:	4b04      	ldr	r3, [pc, #16]	@ (8018ab8 <__assert_func+0x38>)
 8018aa8:	e7f4      	b.n	8018a94 <__assert_func+0x14>
 8018aaa:	bf00      	nop
 8018aac:	20000204 	.word	0x20000204
 8018ab0:	0801bbdf 	.word	0x0801bbdf
 8018ab4:	0801bbb1 	.word	0x0801bbb1
 8018ab8:	0801bba4 	.word	0x0801bba4

08018abc <__env_lock>:
 8018abc:	4801      	ldr	r0, [pc, #4]	@ (8018ac4 <__env_lock+0x8>)
 8018abe:	f7ff bfc6 	b.w	8018a4e <__retarget_lock_acquire_recursive>
 8018ac2:	bf00      	nop
 8018ac4:	20011014 	.word	0x20011014

08018ac8 <__env_unlock>:
 8018ac8:	4801      	ldr	r0, [pc, #4]	@ (8018ad0 <__env_unlock+0x8>)
 8018aca:	f7ff bfc1 	b.w	8018a50 <__retarget_lock_release_recursive>
 8018ace:	bf00      	nop
 8018ad0:	20011014 	.word	0x20011014

08018ad4 <_free_r>:
 8018ad4:	b538      	push	{r3, r4, r5, lr}
 8018ad6:	4605      	mov	r5, r0
 8018ad8:	2900      	cmp	r1, #0
 8018ada:	d041      	beq.n	8018b60 <_free_r+0x8c>
 8018adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ae0:	1f0c      	subs	r4, r1, #4
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	bfb8      	it	lt
 8018ae6:	18e4      	addlt	r4, r4, r3
 8018ae8:	f7ff fad6 	bl	8018098 <__malloc_lock>
 8018aec:	4a1d      	ldr	r2, [pc, #116]	@ (8018b64 <_free_r+0x90>)
 8018aee:	6813      	ldr	r3, [r2, #0]
 8018af0:	b933      	cbnz	r3, 8018b00 <_free_r+0x2c>
 8018af2:	6063      	str	r3, [r4, #4]
 8018af4:	6014      	str	r4, [r2, #0]
 8018af6:	4628      	mov	r0, r5
 8018af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018afc:	f7ff bad2 	b.w	80180a4 <__malloc_unlock>
 8018b00:	42a3      	cmp	r3, r4
 8018b02:	d908      	bls.n	8018b16 <_free_r+0x42>
 8018b04:	6820      	ldr	r0, [r4, #0]
 8018b06:	1821      	adds	r1, r4, r0
 8018b08:	428b      	cmp	r3, r1
 8018b0a:	bf01      	itttt	eq
 8018b0c:	6819      	ldreq	r1, [r3, #0]
 8018b0e:	685b      	ldreq	r3, [r3, #4]
 8018b10:	1809      	addeq	r1, r1, r0
 8018b12:	6021      	streq	r1, [r4, #0]
 8018b14:	e7ed      	b.n	8018af2 <_free_r+0x1e>
 8018b16:	461a      	mov	r2, r3
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	b10b      	cbz	r3, 8018b20 <_free_r+0x4c>
 8018b1c:	42a3      	cmp	r3, r4
 8018b1e:	d9fa      	bls.n	8018b16 <_free_r+0x42>
 8018b20:	6811      	ldr	r1, [r2, #0]
 8018b22:	1850      	adds	r0, r2, r1
 8018b24:	42a0      	cmp	r0, r4
 8018b26:	d10b      	bne.n	8018b40 <_free_r+0x6c>
 8018b28:	6820      	ldr	r0, [r4, #0]
 8018b2a:	4401      	add	r1, r0
 8018b2c:	1850      	adds	r0, r2, r1
 8018b2e:	4283      	cmp	r3, r0
 8018b30:	6011      	str	r1, [r2, #0]
 8018b32:	d1e0      	bne.n	8018af6 <_free_r+0x22>
 8018b34:	6818      	ldr	r0, [r3, #0]
 8018b36:	685b      	ldr	r3, [r3, #4]
 8018b38:	6053      	str	r3, [r2, #4]
 8018b3a:	4408      	add	r0, r1
 8018b3c:	6010      	str	r0, [r2, #0]
 8018b3e:	e7da      	b.n	8018af6 <_free_r+0x22>
 8018b40:	d902      	bls.n	8018b48 <_free_r+0x74>
 8018b42:	230c      	movs	r3, #12
 8018b44:	602b      	str	r3, [r5, #0]
 8018b46:	e7d6      	b.n	8018af6 <_free_r+0x22>
 8018b48:	6820      	ldr	r0, [r4, #0]
 8018b4a:	1821      	adds	r1, r4, r0
 8018b4c:	428b      	cmp	r3, r1
 8018b4e:	bf04      	itt	eq
 8018b50:	6819      	ldreq	r1, [r3, #0]
 8018b52:	685b      	ldreq	r3, [r3, #4]
 8018b54:	6063      	str	r3, [r4, #4]
 8018b56:	bf04      	itt	eq
 8018b58:	1809      	addeq	r1, r1, r0
 8018b5a:	6021      	streq	r1, [r4, #0]
 8018b5c:	6054      	str	r4, [r2, #4]
 8018b5e:	e7ca      	b.n	8018af6 <_free_r+0x22>
 8018b60:	bd38      	pop	{r3, r4, r5, pc}
 8018b62:	bf00      	nop
 8018b64:	20010ed0 	.word	0x20010ed0

08018b68 <_malloc_usable_size_r>:
 8018b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b6c:	1f18      	subs	r0, r3, #4
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	bfbc      	itt	lt
 8018b72:	580b      	ldrlt	r3, [r1, r0]
 8018b74:	18c0      	addlt	r0, r0, r3
 8018b76:	4770      	bx	lr

08018b78 <__ssputs_r>:
 8018b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b7c:	688e      	ldr	r6, [r1, #8]
 8018b7e:	461f      	mov	r7, r3
 8018b80:	42be      	cmp	r6, r7
 8018b82:	680b      	ldr	r3, [r1, #0]
 8018b84:	4682      	mov	sl, r0
 8018b86:	460c      	mov	r4, r1
 8018b88:	4690      	mov	r8, r2
 8018b8a:	d82d      	bhi.n	8018be8 <__ssputs_r+0x70>
 8018b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018b90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018b94:	d026      	beq.n	8018be4 <__ssputs_r+0x6c>
 8018b96:	6965      	ldr	r5, [r4, #20]
 8018b98:	6909      	ldr	r1, [r1, #16]
 8018b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b9e:	eba3 0901 	sub.w	r9, r3, r1
 8018ba2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018ba6:	1c7b      	adds	r3, r7, #1
 8018ba8:	444b      	add	r3, r9
 8018baa:	106d      	asrs	r5, r5, #1
 8018bac:	429d      	cmp	r5, r3
 8018bae:	bf38      	it	cc
 8018bb0:	461d      	movcc	r5, r3
 8018bb2:	0553      	lsls	r3, r2, #21
 8018bb4:	d527      	bpl.n	8018c06 <__ssputs_r+0x8e>
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f7ff f9ee 	bl	8017f98 <_malloc_r>
 8018bbc:	4606      	mov	r6, r0
 8018bbe:	b360      	cbz	r0, 8018c1a <__ssputs_r+0xa2>
 8018bc0:	6921      	ldr	r1, [r4, #16]
 8018bc2:	464a      	mov	r2, r9
 8018bc4:	f7ff ff4d 	bl	8018a62 <memcpy>
 8018bc8:	89a3      	ldrh	r3, [r4, #12]
 8018bca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018bd2:	81a3      	strh	r3, [r4, #12]
 8018bd4:	6126      	str	r6, [r4, #16]
 8018bd6:	6165      	str	r5, [r4, #20]
 8018bd8:	444e      	add	r6, r9
 8018bda:	eba5 0509 	sub.w	r5, r5, r9
 8018bde:	6026      	str	r6, [r4, #0]
 8018be0:	60a5      	str	r5, [r4, #8]
 8018be2:	463e      	mov	r6, r7
 8018be4:	42be      	cmp	r6, r7
 8018be6:	d900      	bls.n	8018bea <__ssputs_r+0x72>
 8018be8:	463e      	mov	r6, r7
 8018bea:	6820      	ldr	r0, [r4, #0]
 8018bec:	4632      	mov	r2, r6
 8018bee:	4641      	mov	r1, r8
 8018bf0:	f7ff fdfe 	bl	80187f0 <memmove>
 8018bf4:	68a3      	ldr	r3, [r4, #8]
 8018bf6:	1b9b      	subs	r3, r3, r6
 8018bf8:	60a3      	str	r3, [r4, #8]
 8018bfa:	6823      	ldr	r3, [r4, #0]
 8018bfc:	4433      	add	r3, r6
 8018bfe:	6023      	str	r3, [r4, #0]
 8018c00:	2000      	movs	r0, #0
 8018c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c06:	462a      	mov	r2, r5
 8018c08:	f7ff fac6 	bl	8018198 <_realloc_r>
 8018c0c:	4606      	mov	r6, r0
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d1e0      	bne.n	8018bd4 <__ssputs_r+0x5c>
 8018c12:	6921      	ldr	r1, [r4, #16]
 8018c14:	4650      	mov	r0, sl
 8018c16:	f7ff ff5d 	bl	8018ad4 <_free_r>
 8018c1a:	230c      	movs	r3, #12
 8018c1c:	f8ca 3000 	str.w	r3, [sl]
 8018c20:	89a3      	ldrh	r3, [r4, #12]
 8018c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c26:	81a3      	strh	r3, [r4, #12]
 8018c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c2c:	e7e9      	b.n	8018c02 <__ssputs_r+0x8a>
	...

08018c30 <_svfiprintf_r>:
 8018c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	4698      	mov	r8, r3
 8018c36:	898b      	ldrh	r3, [r1, #12]
 8018c38:	061b      	lsls	r3, r3, #24
 8018c3a:	b09d      	sub	sp, #116	@ 0x74
 8018c3c:	4607      	mov	r7, r0
 8018c3e:	460d      	mov	r5, r1
 8018c40:	4614      	mov	r4, r2
 8018c42:	d510      	bpl.n	8018c66 <_svfiprintf_r+0x36>
 8018c44:	690b      	ldr	r3, [r1, #16]
 8018c46:	b973      	cbnz	r3, 8018c66 <_svfiprintf_r+0x36>
 8018c48:	2140      	movs	r1, #64	@ 0x40
 8018c4a:	f7ff f9a5 	bl	8017f98 <_malloc_r>
 8018c4e:	6028      	str	r0, [r5, #0]
 8018c50:	6128      	str	r0, [r5, #16]
 8018c52:	b930      	cbnz	r0, 8018c62 <_svfiprintf_r+0x32>
 8018c54:	230c      	movs	r3, #12
 8018c56:	603b      	str	r3, [r7, #0]
 8018c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c5c:	b01d      	add	sp, #116	@ 0x74
 8018c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c62:	2340      	movs	r3, #64	@ 0x40
 8018c64:	616b      	str	r3, [r5, #20]
 8018c66:	2300      	movs	r3, #0
 8018c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c6a:	2320      	movs	r3, #32
 8018c6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c74:	2330      	movs	r3, #48	@ 0x30
 8018c76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018e14 <_svfiprintf_r+0x1e4>
 8018c7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018c7e:	f04f 0901 	mov.w	r9, #1
 8018c82:	4623      	mov	r3, r4
 8018c84:	469a      	mov	sl, r3
 8018c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c8a:	b10a      	cbz	r2, 8018c90 <_svfiprintf_r+0x60>
 8018c8c:	2a25      	cmp	r2, #37	@ 0x25
 8018c8e:	d1f9      	bne.n	8018c84 <_svfiprintf_r+0x54>
 8018c90:	ebba 0b04 	subs.w	fp, sl, r4
 8018c94:	d00b      	beq.n	8018cae <_svfiprintf_r+0x7e>
 8018c96:	465b      	mov	r3, fp
 8018c98:	4622      	mov	r2, r4
 8018c9a:	4629      	mov	r1, r5
 8018c9c:	4638      	mov	r0, r7
 8018c9e:	f7ff ff6b 	bl	8018b78 <__ssputs_r>
 8018ca2:	3001      	adds	r0, #1
 8018ca4:	f000 80a7 	beq.w	8018df6 <_svfiprintf_r+0x1c6>
 8018ca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018caa:	445a      	add	r2, fp
 8018cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8018cae:	f89a 3000 	ldrb.w	r3, [sl]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	f000 809f 	beq.w	8018df6 <_svfiprintf_r+0x1c6>
 8018cb8:	2300      	movs	r3, #0
 8018cba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018cc2:	f10a 0a01 	add.w	sl, sl, #1
 8018cc6:	9304      	str	r3, [sp, #16]
 8018cc8:	9307      	str	r3, [sp, #28]
 8018cca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018cce:	931a      	str	r3, [sp, #104]	@ 0x68
 8018cd0:	4654      	mov	r4, sl
 8018cd2:	2205      	movs	r2, #5
 8018cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cd8:	484e      	ldr	r0, [pc, #312]	@ (8018e14 <_svfiprintf_r+0x1e4>)
 8018cda:	f7e7 fab1 	bl	8000240 <memchr>
 8018cde:	9a04      	ldr	r2, [sp, #16]
 8018ce0:	b9d8      	cbnz	r0, 8018d1a <_svfiprintf_r+0xea>
 8018ce2:	06d0      	lsls	r0, r2, #27
 8018ce4:	bf44      	itt	mi
 8018ce6:	2320      	movmi	r3, #32
 8018ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018cec:	0711      	lsls	r1, r2, #28
 8018cee:	bf44      	itt	mi
 8018cf0:	232b      	movmi	r3, #43	@ 0x2b
 8018cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8018cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cfc:	d015      	beq.n	8018d2a <_svfiprintf_r+0xfa>
 8018cfe:	9a07      	ldr	r2, [sp, #28]
 8018d00:	4654      	mov	r4, sl
 8018d02:	2000      	movs	r0, #0
 8018d04:	f04f 0c0a 	mov.w	ip, #10
 8018d08:	4621      	mov	r1, r4
 8018d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d0e:	3b30      	subs	r3, #48	@ 0x30
 8018d10:	2b09      	cmp	r3, #9
 8018d12:	d94b      	bls.n	8018dac <_svfiprintf_r+0x17c>
 8018d14:	b1b0      	cbz	r0, 8018d44 <_svfiprintf_r+0x114>
 8018d16:	9207      	str	r2, [sp, #28]
 8018d18:	e014      	b.n	8018d44 <_svfiprintf_r+0x114>
 8018d1a:	eba0 0308 	sub.w	r3, r0, r8
 8018d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8018d22:	4313      	orrs	r3, r2
 8018d24:	9304      	str	r3, [sp, #16]
 8018d26:	46a2      	mov	sl, r4
 8018d28:	e7d2      	b.n	8018cd0 <_svfiprintf_r+0xa0>
 8018d2a:	9b03      	ldr	r3, [sp, #12]
 8018d2c:	1d19      	adds	r1, r3, #4
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	9103      	str	r1, [sp, #12]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	bfbb      	ittet	lt
 8018d36:	425b      	neglt	r3, r3
 8018d38:	f042 0202 	orrlt.w	r2, r2, #2
 8018d3c:	9307      	strge	r3, [sp, #28]
 8018d3e:	9307      	strlt	r3, [sp, #28]
 8018d40:	bfb8      	it	lt
 8018d42:	9204      	strlt	r2, [sp, #16]
 8018d44:	7823      	ldrb	r3, [r4, #0]
 8018d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8018d48:	d10a      	bne.n	8018d60 <_svfiprintf_r+0x130>
 8018d4a:	7863      	ldrb	r3, [r4, #1]
 8018d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d4e:	d132      	bne.n	8018db6 <_svfiprintf_r+0x186>
 8018d50:	9b03      	ldr	r3, [sp, #12]
 8018d52:	1d1a      	adds	r2, r3, #4
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	9203      	str	r2, [sp, #12]
 8018d58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018d5c:	3402      	adds	r4, #2
 8018d5e:	9305      	str	r3, [sp, #20]
 8018d60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018e24 <_svfiprintf_r+0x1f4>
 8018d64:	7821      	ldrb	r1, [r4, #0]
 8018d66:	2203      	movs	r2, #3
 8018d68:	4650      	mov	r0, sl
 8018d6a:	f7e7 fa69 	bl	8000240 <memchr>
 8018d6e:	b138      	cbz	r0, 8018d80 <_svfiprintf_r+0x150>
 8018d70:	9b04      	ldr	r3, [sp, #16]
 8018d72:	eba0 000a 	sub.w	r0, r0, sl
 8018d76:	2240      	movs	r2, #64	@ 0x40
 8018d78:	4082      	lsls	r2, r0
 8018d7a:	4313      	orrs	r3, r2
 8018d7c:	3401      	adds	r4, #1
 8018d7e:	9304      	str	r3, [sp, #16]
 8018d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d84:	4824      	ldr	r0, [pc, #144]	@ (8018e18 <_svfiprintf_r+0x1e8>)
 8018d86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d8a:	2206      	movs	r2, #6
 8018d8c:	f7e7 fa58 	bl	8000240 <memchr>
 8018d90:	2800      	cmp	r0, #0
 8018d92:	d036      	beq.n	8018e02 <_svfiprintf_r+0x1d2>
 8018d94:	4b21      	ldr	r3, [pc, #132]	@ (8018e1c <_svfiprintf_r+0x1ec>)
 8018d96:	bb1b      	cbnz	r3, 8018de0 <_svfiprintf_r+0x1b0>
 8018d98:	9b03      	ldr	r3, [sp, #12]
 8018d9a:	3307      	adds	r3, #7
 8018d9c:	f023 0307 	bic.w	r3, r3, #7
 8018da0:	3308      	adds	r3, #8
 8018da2:	9303      	str	r3, [sp, #12]
 8018da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018da6:	4433      	add	r3, r6
 8018da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8018daa:	e76a      	b.n	8018c82 <_svfiprintf_r+0x52>
 8018dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8018db0:	460c      	mov	r4, r1
 8018db2:	2001      	movs	r0, #1
 8018db4:	e7a8      	b.n	8018d08 <_svfiprintf_r+0xd8>
 8018db6:	2300      	movs	r3, #0
 8018db8:	3401      	adds	r4, #1
 8018dba:	9305      	str	r3, [sp, #20]
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	f04f 0c0a 	mov.w	ip, #10
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018dc8:	3a30      	subs	r2, #48	@ 0x30
 8018dca:	2a09      	cmp	r2, #9
 8018dcc:	d903      	bls.n	8018dd6 <_svfiprintf_r+0x1a6>
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d0c6      	beq.n	8018d60 <_svfiprintf_r+0x130>
 8018dd2:	9105      	str	r1, [sp, #20]
 8018dd4:	e7c4      	b.n	8018d60 <_svfiprintf_r+0x130>
 8018dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018dda:	4604      	mov	r4, r0
 8018ddc:	2301      	movs	r3, #1
 8018dde:	e7f0      	b.n	8018dc2 <_svfiprintf_r+0x192>
 8018de0:	ab03      	add	r3, sp, #12
 8018de2:	9300      	str	r3, [sp, #0]
 8018de4:	462a      	mov	r2, r5
 8018de6:	4b0e      	ldr	r3, [pc, #56]	@ (8018e20 <_svfiprintf_r+0x1f0>)
 8018de8:	a904      	add	r1, sp, #16
 8018dea:	4638      	mov	r0, r7
 8018dec:	f3af 8000 	nop.w
 8018df0:	1c42      	adds	r2, r0, #1
 8018df2:	4606      	mov	r6, r0
 8018df4:	d1d6      	bne.n	8018da4 <_svfiprintf_r+0x174>
 8018df6:	89ab      	ldrh	r3, [r5, #12]
 8018df8:	065b      	lsls	r3, r3, #25
 8018dfa:	f53f af2d 	bmi.w	8018c58 <_svfiprintf_r+0x28>
 8018dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e00:	e72c      	b.n	8018c5c <_svfiprintf_r+0x2c>
 8018e02:	ab03      	add	r3, sp, #12
 8018e04:	9300      	str	r3, [sp, #0]
 8018e06:	462a      	mov	r2, r5
 8018e08:	4b05      	ldr	r3, [pc, #20]	@ (8018e20 <_svfiprintf_r+0x1f0>)
 8018e0a:	a904      	add	r1, sp, #16
 8018e0c:	4638      	mov	r0, r7
 8018e0e:	f000 f9bb 	bl	8019188 <_printf_i>
 8018e12:	e7ed      	b.n	8018df0 <_svfiprintf_r+0x1c0>
 8018e14:	0801bbe0 	.word	0x0801bbe0
 8018e18:	0801bbea 	.word	0x0801bbea
 8018e1c:	00000000 	.word	0x00000000
 8018e20:	08018b79 	.word	0x08018b79
 8018e24:	0801bbe6 	.word	0x0801bbe6

08018e28 <__sfputc_r>:
 8018e28:	6893      	ldr	r3, [r2, #8]
 8018e2a:	3b01      	subs	r3, #1
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	b410      	push	{r4}
 8018e30:	6093      	str	r3, [r2, #8]
 8018e32:	da08      	bge.n	8018e46 <__sfputc_r+0x1e>
 8018e34:	6994      	ldr	r4, [r2, #24]
 8018e36:	42a3      	cmp	r3, r4
 8018e38:	db01      	blt.n	8018e3e <__sfputc_r+0x16>
 8018e3a:	290a      	cmp	r1, #10
 8018e3c:	d103      	bne.n	8018e46 <__sfputc_r+0x1e>
 8018e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e42:	f7ff bc31 	b.w	80186a8 <__swbuf_r>
 8018e46:	6813      	ldr	r3, [r2, #0]
 8018e48:	1c58      	adds	r0, r3, #1
 8018e4a:	6010      	str	r0, [r2, #0]
 8018e4c:	7019      	strb	r1, [r3, #0]
 8018e4e:	4608      	mov	r0, r1
 8018e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e54:	4770      	bx	lr

08018e56 <__sfputs_r>:
 8018e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e58:	4606      	mov	r6, r0
 8018e5a:	460f      	mov	r7, r1
 8018e5c:	4614      	mov	r4, r2
 8018e5e:	18d5      	adds	r5, r2, r3
 8018e60:	42ac      	cmp	r4, r5
 8018e62:	d101      	bne.n	8018e68 <__sfputs_r+0x12>
 8018e64:	2000      	movs	r0, #0
 8018e66:	e007      	b.n	8018e78 <__sfputs_r+0x22>
 8018e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e6c:	463a      	mov	r2, r7
 8018e6e:	4630      	mov	r0, r6
 8018e70:	f7ff ffda 	bl	8018e28 <__sfputc_r>
 8018e74:	1c43      	adds	r3, r0, #1
 8018e76:	d1f3      	bne.n	8018e60 <__sfputs_r+0xa>
 8018e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e7c <_vfiprintf_r>:
 8018e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e80:	460d      	mov	r5, r1
 8018e82:	b09d      	sub	sp, #116	@ 0x74
 8018e84:	4614      	mov	r4, r2
 8018e86:	4698      	mov	r8, r3
 8018e88:	4606      	mov	r6, r0
 8018e8a:	b118      	cbz	r0, 8018e94 <_vfiprintf_r+0x18>
 8018e8c:	6a03      	ldr	r3, [r0, #32]
 8018e8e:	b90b      	cbnz	r3, 8018e94 <_vfiprintf_r+0x18>
 8018e90:	f7ff fab4 	bl	80183fc <__sinit>
 8018e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e96:	07d9      	lsls	r1, r3, #31
 8018e98:	d405      	bmi.n	8018ea6 <_vfiprintf_r+0x2a>
 8018e9a:	89ab      	ldrh	r3, [r5, #12]
 8018e9c:	059a      	lsls	r2, r3, #22
 8018e9e:	d402      	bmi.n	8018ea6 <_vfiprintf_r+0x2a>
 8018ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ea2:	f7ff fdd4 	bl	8018a4e <__retarget_lock_acquire_recursive>
 8018ea6:	89ab      	ldrh	r3, [r5, #12]
 8018ea8:	071b      	lsls	r3, r3, #28
 8018eaa:	d501      	bpl.n	8018eb0 <_vfiprintf_r+0x34>
 8018eac:	692b      	ldr	r3, [r5, #16]
 8018eae:	b99b      	cbnz	r3, 8018ed8 <_vfiprintf_r+0x5c>
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	4630      	mov	r0, r6
 8018eb4:	f7ff fc36 	bl	8018724 <__swsetup_r>
 8018eb8:	b170      	cbz	r0, 8018ed8 <_vfiprintf_r+0x5c>
 8018eba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ebc:	07dc      	lsls	r4, r3, #31
 8018ebe:	d504      	bpl.n	8018eca <_vfiprintf_r+0x4e>
 8018ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ec4:	b01d      	add	sp, #116	@ 0x74
 8018ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eca:	89ab      	ldrh	r3, [r5, #12]
 8018ecc:	0598      	lsls	r0, r3, #22
 8018ece:	d4f7      	bmi.n	8018ec0 <_vfiprintf_r+0x44>
 8018ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ed2:	f7ff fdbd 	bl	8018a50 <__retarget_lock_release_recursive>
 8018ed6:	e7f3      	b.n	8018ec0 <_vfiprintf_r+0x44>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8018edc:	2320      	movs	r3, #32
 8018ede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ee6:	2330      	movs	r3, #48	@ 0x30
 8018ee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019098 <_vfiprintf_r+0x21c>
 8018eec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018ef0:	f04f 0901 	mov.w	r9, #1
 8018ef4:	4623      	mov	r3, r4
 8018ef6:	469a      	mov	sl, r3
 8018ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018efc:	b10a      	cbz	r2, 8018f02 <_vfiprintf_r+0x86>
 8018efe:	2a25      	cmp	r2, #37	@ 0x25
 8018f00:	d1f9      	bne.n	8018ef6 <_vfiprintf_r+0x7a>
 8018f02:	ebba 0b04 	subs.w	fp, sl, r4
 8018f06:	d00b      	beq.n	8018f20 <_vfiprintf_r+0xa4>
 8018f08:	465b      	mov	r3, fp
 8018f0a:	4622      	mov	r2, r4
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	4630      	mov	r0, r6
 8018f10:	f7ff ffa1 	bl	8018e56 <__sfputs_r>
 8018f14:	3001      	adds	r0, #1
 8018f16:	f000 80a7 	beq.w	8019068 <_vfiprintf_r+0x1ec>
 8018f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f1c:	445a      	add	r2, fp
 8018f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f20:	f89a 3000 	ldrb.w	r3, [sl]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 809f 	beq.w	8019068 <_vfiprintf_r+0x1ec>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f34:	f10a 0a01 	add.w	sl, sl, #1
 8018f38:	9304      	str	r3, [sp, #16]
 8018f3a:	9307      	str	r3, [sp, #28]
 8018f3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8018f42:	4654      	mov	r4, sl
 8018f44:	2205      	movs	r2, #5
 8018f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f4a:	4853      	ldr	r0, [pc, #332]	@ (8019098 <_vfiprintf_r+0x21c>)
 8018f4c:	f7e7 f978 	bl	8000240 <memchr>
 8018f50:	9a04      	ldr	r2, [sp, #16]
 8018f52:	b9d8      	cbnz	r0, 8018f8c <_vfiprintf_r+0x110>
 8018f54:	06d1      	lsls	r1, r2, #27
 8018f56:	bf44      	itt	mi
 8018f58:	2320      	movmi	r3, #32
 8018f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f5e:	0713      	lsls	r3, r2, #28
 8018f60:	bf44      	itt	mi
 8018f62:	232b      	movmi	r3, #43	@ 0x2b
 8018f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f68:	f89a 3000 	ldrb.w	r3, [sl]
 8018f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f6e:	d015      	beq.n	8018f9c <_vfiprintf_r+0x120>
 8018f70:	9a07      	ldr	r2, [sp, #28]
 8018f72:	4654      	mov	r4, sl
 8018f74:	2000      	movs	r0, #0
 8018f76:	f04f 0c0a 	mov.w	ip, #10
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f80:	3b30      	subs	r3, #48	@ 0x30
 8018f82:	2b09      	cmp	r3, #9
 8018f84:	d94b      	bls.n	801901e <_vfiprintf_r+0x1a2>
 8018f86:	b1b0      	cbz	r0, 8018fb6 <_vfiprintf_r+0x13a>
 8018f88:	9207      	str	r2, [sp, #28]
 8018f8a:	e014      	b.n	8018fb6 <_vfiprintf_r+0x13a>
 8018f8c:	eba0 0308 	sub.w	r3, r0, r8
 8018f90:	fa09 f303 	lsl.w	r3, r9, r3
 8018f94:	4313      	orrs	r3, r2
 8018f96:	9304      	str	r3, [sp, #16]
 8018f98:	46a2      	mov	sl, r4
 8018f9a:	e7d2      	b.n	8018f42 <_vfiprintf_r+0xc6>
 8018f9c:	9b03      	ldr	r3, [sp, #12]
 8018f9e:	1d19      	adds	r1, r3, #4
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	9103      	str	r1, [sp, #12]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	bfbb      	ittet	lt
 8018fa8:	425b      	neglt	r3, r3
 8018faa:	f042 0202 	orrlt.w	r2, r2, #2
 8018fae:	9307      	strge	r3, [sp, #28]
 8018fb0:	9307      	strlt	r3, [sp, #28]
 8018fb2:	bfb8      	it	lt
 8018fb4:	9204      	strlt	r2, [sp, #16]
 8018fb6:	7823      	ldrb	r3, [r4, #0]
 8018fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018fba:	d10a      	bne.n	8018fd2 <_vfiprintf_r+0x156>
 8018fbc:	7863      	ldrb	r3, [r4, #1]
 8018fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fc0:	d132      	bne.n	8019028 <_vfiprintf_r+0x1ac>
 8018fc2:	9b03      	ldr	r3, [sp, #12]
 8018fc4:	1d1a      	adds	r2, r3, #4
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	9203      	str	r2, [sp, #12]
 8018fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018fce:	3402      	adds	r4, #2
 8018fd0:	9305      	str	r3, [sp, #20]
 8018fd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80190a8 <_vfiprintf_r+0x22c>
 8018fd6:	7821      	ldrb	r1, [r4, #0]
 8018fd8:	2203      	movs	r2, #3
 8018fda:	4650      	mov	r0, sl
 8018fdc:	f7e7 f930 	bl	8000240 <memchr>
 8018fe0:	b138      	cbz	r0, 8018ff2 <_vfiprintf_r+0x176>
 8018fe2:	9b04      	ldr	r3, [sp, #16]
 8018fe4:	eba0 000a 	sub.w	r0, r0, sl
 8018fe8:	2240      	movs	r2, #64	@ 0x40
 8018fea:	4082      	lsls	r2, r0
 8018fec:	4313      	orrs	r3, r2
 8018fee:	3401      	adds	r4, #1
 8018ff0:	9304      	str	r3, [sp, #16]
 8018ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ff6:	4829      	ldr	r0, [pc, #164]	@ (801909c <_vfiprintf_r+0x220>)
 8018ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018ffc:	2206      	movs	r2, #6
 8018ffe:	f7e7 f91f 	bl	8000240 <memchr>
 8019002:	2800      	cmp	r0, #0
 8019004:	d03f      	beq.n	8019086 <_vfiprintf_r+0x20a>
 8019006:	4b26      	ldr	r3, [pc, #152]	@ (80190a0 <_vfiprintf_r+0x224>)
 8019008:	bb1b      	cbnz	r3, 8019052 <_vfiprintf_r+0x1d6>
 801900a:	9b03      	ldr	r3, [sp, #12]
 801900c:	3307      	adds	r3, #7
 801900e:	f023 0307 	bic.w	r3, r3, #7
 8019012:	3308      	adds	r3, #8
 8019014:	9303      	str	r3, [sp, #12]
 8019016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019018:	443b      	add	r3, r7
 801901a:	9309      	str	r3, [sp, #36]	@ 0x24
 801901c:	e76a      	b.n	8018ef4 <_vfiprintf_r+0x78>
 801901e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019022:	460c      	mov	r4, r1
 8019024:	2001      	movs	r0, #1
 8019026:	e7a8      	b.n	8018f7a <_vfiprintf_r+0xfe>
 8019028:	2300      	movs	r3, #0
 801902a:	3401      	adds	r4, #1
 801902c:	9305      	str	r3, [sp, #20]
 801902e:	4619      	mov	r1, r3
 8019030:	f04f 0c0a 	mov.w	ip, #10
 8019034:	4620      	mov	r0, r4
 8019036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801903a:	3a30      	subs	r2, #48	@ 0x30
 801903c:	2a09      	cmp	r2, #9
 801903e:	d903      	bls.n	8019048 <_vfiprintf_r+0x1cc>
 8019040:	2b00      	cmp	r3, #0
 8019042:	d0c6      	beq.n	8018fd2 <_vfiprintf_r+0x156>
 8019044:	9105      	str	r1, [sp, #20]
 8019046:	e7c4      	b.n	8018fd2 <_vfiprintf_r+0x156>
 8019048:	fb0c 2101 	mla	r1, ip, r1, r2
 801904c:	4604      	mov	r4, r0
 801904e:	2301      	movs	r3, #1
 8019050:	e7f0      	b.n	8019034 <_vfiprintf_r+0x1b8>
 8019052:	ab03      	add	r3, sp, #12
 8019054:	9300      	str	r3, [sp, #0]
 8019056:	462a      	mov	r2, r5
 8019058:	4b12      	ldr	r3, [pc, #72]	@ (80190a4 <_vfiprintf_r+0x228>)
 801905a:	a904      	add	r1, sp, #16
 801905c:	4630      	mov	r0, r6
 801905e:	f3af 8000 	nop.w
 8019062:	4607      	mov	r7, r0
 8019064:	1c78      	adds	r0, r7, #1
 8019066:	d1d6      	bne.n	8019016 <_vfiprintf_r+0x19a>
 8019068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801906a:	07d9      	lsls	r1, r3, #31
 801906c:	d405      	bmi.n	801907a <_vfiprintf_r+0x1fe>
 801906e:	89ab      	ldrh	r3, [r5, #12]
 8019070:	059a      	lsls	r2, r3, #22
 8019072:	d402      	bmi.n	801907a <_vfiprintf_r+0x1fe>
 8019074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019076:	f7ff fceb 	bl	8018a50 <__retarget_lock_release_recursive>
 801907a:	89ab      	ldrh	r3, [r5, #12]
 801907c:	065b      	lsls	r3, r3, #25
 801907e:	f53f af1f 	bmi.w	8018ec0 <_vfiprintf_r+0x44>
 8019082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019084:	e71e      	b.n	8018ec4 <_vfiprintf_r+0x48>
 8019086:	ab03      	add	r3, sp, #12
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	462a      	mov	r2, r5
 801908c:	4b05      	ldr	r3, [pc, #20]	@ (80190a4 <_vfiprintf_r+0x228>)
 801908e:	a904      	add	r1, sp, #16
 8019090:	4630      	mov	r0, r6
 8019092:	f000 f879 	bl	8019188 <_printf_i>
 8019096:	e7e4      	b.n	8019062 <_vfiprintf_r+0x1e6>
 8019098:	0801bbe0 	.word	0x0801bbe0
 801909c:	0801bbea 	.word	0x0801bbea
 80190a0:	00000000 	.word	0x00000000
 80190a4:	08018e57 	.word	0x08018e57
 80190a8:	0801bbe6 	.word	0x0801bbe6

080190ac <_printf_common>:
 80190ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190b0:	4616      	mov	r6, r2
 80190b2:	4698      	mov	r8, r3
 80190b4:	688a      	ldr	r2, [r1, #8]
 80190b6:	690b      	ldr	r3, [r1, #16]
 80190b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80190bc:	4293      	cmp	r3, r2
 80190be:	bfb8      	it	lt
 80190c0:	4613      	movlt	r3, r2
 80190c2:	6033      	str	r3, [r6, #0]
 80190c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80190c8:	4607      	mov	r7, r0
 80190ca:	460c      	mov	r4, r1
 80190cc:	b10a      	cbz	r2, 80190d2 <_printf_common+0x26>
 80190ce:	3301      	adds	r3, #1
 80190d0:	6033      	str	r3, [r6, #0]
 80190d2:	6823      	ldr	r3, [r4, #0]
 80190d4:	0699      	lsls	r1, r3, #26
 80190d6:	bf42      	ittt	mi
 80190d8:	6833      	ldrmi	r3, [r6, #0]
 80190da:	3302      	addmi	r3, #2
 80190dc:	6033      	strmi	r3, [r6, #0]
 80190de:	6825      	ldr	r5, [r4, #0]
 80190e0:	f015 0506 	ands.w	r5, r5, #6
 80190e4:	d106      	bne.n	80190f4 <_printf_common+0x48>
 80190e6:	f104 0a19 	add.w	sl, r4, #25
 80190ea:	68e3      	ldr	r3, [r4, #12]
 80190ec:	6832      	ldr	r2, [r6, #0]
 80190ee:	1a9b      	subs	r3, r3, r2
 80190f0:	42ab      	cmp	r3, r5
 80190f2:	dc26      	bgt.n	8019142 <_printf_common+0x96>
 80190f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80190f8:	6822      	ldr	r2, [r4, #0]
 80190fa:	3b00      	subs	r3, #0
 80190fc:	bf18      	it	ne
 80190fe:	2301      	movne	r3, #1
 8019100:	0692      	lsls	r2, r2, #26
 8019102:	d42b      	bmi.n	801915c <_printf_common+0xb0>
 8019104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019108:	4641      	mov	r1, r8
 801910a:	4638      	mov	r0, r7
 801910c:	47c8      	blx	r9
 801910e:	3001      	adds	r0, #1
 8019110:	d01e      	beq.n	8019150 <_printf_common+0xa4>
 8019112:	6823      	ldr	r3, [r4, #0]
 8019114:	6922      	ldr	r2, [r4, #16]
 8019116:	f003 0306 	and.w	r3, r3, #6
 801911a:	2b04      	cmp	r3, #4
 801911c:	bf02      	ittt	eq
 801911e:	68e5      	ldreq	r5, [r4, #12]
 8019120:	6833      	ldreq	r3, [r6, #0]
 8019122:	1aed      	subeq	r5, r5, r3
 8019124:	68a3      	ldr	r3, [r4, #8]
 8019126:	bf0c      	ite	eq
 8019128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801912c:	2500      	movne	r5, #0
 801912e:	4293      	cmp	r3, r2
 8019130:	bfc4      	itt	gt
 8019132:	1a9b      	subgt	r3, r3, r2
 8019134:	18ed      	addgt	r5, r5, r3
 8019136:	2600      	movs	r6, #0
 8019138:	341a      	adds	r4, #26
 801913a:	42b5      	cmp	r5, r6
 801913c:	d11a      	bne.n	8019174 <_printf_common+0xc8>
 801913e:	2000      	movs	r0, #0
 8019140:	e008      	b.n	8019154 <_printf_common+0xa8>
 8019142:	2301      	movs	r3, #1
 8019144:	4652      	mov	r2, sl
 8019146:	4641      	mov	r1, r8
 8019148:	4638      	mov	r0, r7
 801914a:	47c8      	blx	r9
 801914c:	3001      	adds	r0, #1
 801914e:	d103      	bne.n	8019158 <_printf_common+0xac>
 8019150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019158:	3501      	adds	r5, #1
 801915a:	e7c6      	b.n	80190ea <_printf_common+0x3e>
 801915c:	18e1      	adds	r1, r4, r3
 801915e:	1c5a      	adds	r2, r3, #1
 8019160:	2030      	movs	r0, #48	@ 0x30
 8019162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019166:	4422      	add	r2, r4
 8019168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801916c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019170:	3302      	adds	r3, #2
 8019172:	e7c7      	b.n	8019104 <_printf_common+0x58>
 8019174:	2301      	movs	r3, #1
 8019176:	4622      	mov	r2, r4
 8019178:	4641      	mov	r1, r8
 801917a:	4638      	mov	r0, r7
 801917c:	47c8      	blx	r9
 801917e:	3001      	adds	r0, #1
 8019180:	d0e6      	beq.n	8019150 <_printf_common+0xa4>
 8019182:	3601      	adds	r6, #1
 8019184:	e7d9      	b.n	801913a <_printf_common+0x8e>
	...

08019188 <_printf_i>:
 8019188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801918c:	7e0f      	ldrb	r7, [r1, #24]
 801918e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019190:	2f78      	cmp	r7, #120	@ 0x78
 8019192:	4691      	mov	r9, r2
 8019194:	4680      	mov	r8, r0
 8019196:	460c      	mov	r4, r1
 8019198:	469a      	mov	sl, r3
 801919a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801919e:	d807      	bhi.n	80191b0 <_printf_i+0x28>
 80191a0:	2f62      	cmp	r7, #98	@ 0x62
 80191a2:	d80a      	bhi.n	80191ba <_printf_i+0x32>
 80191a4:	2f00      	cmp	r7, #0
 80191a6:	f000 80d2 	beq.w	801934e <_printf_i+0x1c6>
 80191aa:	2f58      	cmp	r7, #88	@ 0x58
 80191ac:	f000 80b9 	beq.w	8019322 <_printf_i+0x19a>
 80191b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80191b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80191b8:	e03a      	b.n	8019230 <_printf_i+0xa8>
 80191ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80191be:	2b15      	cmp	r3, #21
 80191c0:	d8f6      	bhi.n	80191b0 <_printf_i+0x28>
 80191c2:	a101      	add	r1, pc, #4	@ (adr r1, 80191c8 <_printf_i+0x40>)
 80191c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191c8:	08019221 	.word	0x08019221
 80191cc:	08019235 	.word	0x08019235
 80191d0:	080191b1 	.word	0x080191b1
 80191d4:	080191b1 	.word	0x080191b1
 80191d8:	080191b1 	.word	0x080191b1
 80191dc:	080191b1 	.word	0x080191b1
 80191e0:	08019235 	.word	0x08019235
 80191e4:	080191b1 	.word	0x080191b1
 80191e8:	080191b1 	.word	0x080191b1
 80191ec:	080191b1 	.word	0x080191b1
 80191f0:	080191b1 	.word	0x080191b1
 80191f4:	08019335 	.word	0x08019335
 80191f8:	0801925f 	.word	0x0801925f
 80191fc:	080192ef 	.word	0x080192ef
 8019200:	080191b1 	.word	0x080191b1
 8019204:	080191b1 	.word	0x080191b1
 8019208:	08019357 	.word	0x08019357
 801920c:	080191b1 	.word	0x080191b1
 8019210:	0801925f 	.word	0x0801925f
 8019214:	080191b1 	.word	0x080191b1
 8019218:	080191b1 	.word	0x080191b1
 801921c:	080192f7 	.word	0x080192f7
 8019220:	6833      	ldr	r3, [r6, #0]
 8019222:	1d1a      	adds	r2, r3, #4
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	6032      	str	r2, [r6, #0]
 8019228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801922c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019230:	2301      	movs	r3, #1
 8019232:	e09d      	b.n	8019370 <_printf_i+0x1e8>
 8019234:	6833      	ldr	r3, [r6, #0]
 8019236:	6820      	ldr	r0, [r4, #0]
 8019238:	1d19      	adds	r1, r3, #4
 801923a:	6031      	str	r1, [r6, #0]
 801923c:	0606      	lsls	r6, r0, #24
 801923e:	d501      	bpl.n	8019244 <_printf_i+0xbc>
 8019240:	681d      	ldr	r5, [r3, #0]
 8019242:	e003      	b.n	801924c <_printf_i+0xc4>
 8019244:	0645      	lsls	r5, r0, #25
 8019246:	d5fb      	bpl.n	8019240 <_printf_i+0xb8>
 8019248:	f9b3 5000 	ldrsh.w	r5, [r3]
 801924c:	2d00      	cmp	r5, #0
 801924e:	da03      	bge.n	8019258 <_printf_i+0xd0>
 8019250:	232d      	movs	r3, #45	@ 0x2d
 8019252:	426d      	negs	r5, r5
 8019254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019258:	4859      	ldr	r0, [pc, #356]	@ (80193c0 <_printf_i+0x238>)
 801925a:	230a      	movs	r3, #10
 801925c:	e011      	b.n	8019282 <_printf_i+0xfa>
 801925e:	6821      	ldr	r1, [r4, #0]
 8019260:	6833      	ldr	r3, [r6, #0]
 8019262:	0608      	lsls	r0, r1, #24
 8019264:	f853 5b04 	ldr.w	r5, [r3], #4
 8019268:	d402      	bmi.n	8019270 <_printf_i+0xe8>
 801926a:	0649      	lsls	r1, r1, #25
 801926c:	bf48      	it	mi
 801926e:	b2ad      	uxthmi	r5, r5
 8019270:	2f6f      	cmp	r7, #111	@ 0x6f
 8019272:	4853      	ldr	r0, [pc, #332]	@ (80193c0 <_printf_i+0x238>)
 8019274:	6033      	str	r3, [r6, #0]
 8019276:	bf14      	ite	ne
 8019278:	230a      	movne	r3, #10
 801927a:	2308      	moveq	r3, #8
 801927c:	2100      	movs	r1, #0
 801927e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019282:	6866      	ldr	r6, [r4, #4]
 8019284:	60a6      	str	r6, [r4, #8]
 8019286:	2e00      	cmp	r6, #0
 8019288:	bfa2      	ittt	ge
 801928a:	6821      	ldrge	r1, [r4, #0]
 801928c:	f021 0104 	bicge.w	r1, r1, #4
 8019290:	6021      	strge	r1, [r4, #0]
 8019292:	b90d      	cbnz	r5, 8019298 <_printf_i+0x110>
 8019294:	2e00      	cmp	r6, #0
 8019296:	d04b      	beq.n	8019330 <_printf_i+0x1a8>
 8019298:	4616      	mov	r6, r2
 801929a:	fbb5 f1f3 	udiv	r1, r5, r3
 801929e:	fb03 5711 	mls	r7, r3, r1, r5
 80192a2:	5dc7      	ldrb	r7, [r0, r7]
 80192a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80192a8:	462f      	mov	r7, r5
 80192aa:	42bb      	cmp	r3, r7
 80192ac:	460d      	mov	r5, r1
 80192ae:	d9f4      	bls.n	801929a <_printf_i+0x112>
 80192b0:	2b08      	cmp	r3, #8
 80192b2:	d10b      	bne.n	80192cc <_printf_i+0x144>
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	07df      	lsls	r7, r3, #31
 80192b8:	d508      	bpl.n	80192cc <_printf_i+0x144>
 80192ba:	6923      	ldr	r3, [r4, #16]
 80192bc:	6861      	ldr	r1, [r4, #4]
 80192be:	4299      	cmp	r1, r3
 80192c0:	bfde      	ittt	le
 80192c2:	2330      	movle	r3, #48	@ 0x30
 80192c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80192c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80192cc:	1b92      	subs	r2, r2, r6
 80192ce:	6122      	str	r2, [r4, #16]
 80192d0:	f8cd a000 	str.w	sl, [sp]
 80192d4:	464b      	mov	r3, r9
 80192d6:	aa03      	add	r2, sp, #12
 80192d8:	4621      	mov	r1, r4
 80192da:	4640      	mov	r0, r8
 80192dc:	f7ff fee6 	bl	80190ac <_printf_common>
 80192e0:	3001      	adds	r0, #1
 80192e2:	d14a      	bne.n	801937a <_printf_i+0x1f2>
 80192e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192e8:	b004      	add	sp, #16
 80192ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ee:	6823      	ldr	r3, [r4, #0]
 80192f0:	f043 0320 	orr.w	r3, r3, #32
 80192f4:	6023      	str	r3, [r4, #0]
 80192f6:	4833      	ldr	r0, [pc, #204]	@ (80193c4 <_printf_i+0x23c>)
 80192f8:	2778      	movs	r7, #120	@ 0x78
 80192fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80192fe:	6823      	ldr	r3, [r4, #0]
 8019300:	6831      	ldr	r1, [r6, #0]
 8019302:	061f      	lsls	r7, r3, #24
 8019304:	f851 5b04 	ldr.w	r5, [r1], #4
 8019308:	d402      	bmi.n	8019310 <_printf_i+0x188>
 801930a:	065f      	lsls	r7, r3, #25
 801930c:	bf48      	it	mi
 801930e:	b2ad      	uxthmi	r5, r5
 8019310:	6031      	str	r1, [r6, #0]
 8019312:	07d9      	lsls	r1, r3, #31
 8019314:	bf44      	itt	mi
 8019316:	f043 0320 	orrmi.w	r3, r3, #32
 801931a:	6023      	strmi	r3, [r4, #0]
 801931c:	b11d      	cbz	r5, 8019326 <_printf_i+0x19e>
 801931e:	2310      	movs	r3, #16
 8019320:	e7ac      	b.n	801927c <_printf_i+0xf4>
 8019322:	4827      	ldr	r0, [pc, #156]	@ (80193c0 <_printf_i+0x238>)
 8019324:	e7e9      	b.n	80192fa <_printf_i+0x172>
 8019326:	6823      	ldr	r3, [r4, #0]
 8019328:	f023 0320 	bic.w	r3, r3, #32
 801932c:	6023      	str	r3, [r4, #0]
 801932e:	e7f6      	b.n	801931e <_printf_i+0x196>
 8019330:	4616      	mov	r6, r2
 8019332:	e7bd      	b.n	80192b0 <_printf_i+0x128>
 8019334:	6833      	ldr	r3, [r6, #0]
 8019336:	6825      	ldr	r5, [r4, #0]
 8019338:	6961      	ldr	r1, [r4, #20]
 801933a:	1d18      	adds	r0, r3, #4
 801933c:	6030      	str	r0, [r6, #0]
 801933e:	062e      	lsls	r6, r5, #24
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	d501      	bpl.n	8019348 <_printf_i+0x1c0>
 8019344:	6019      	str	r1, [r3, #0]
 8019346:	e002      	b.n	801934e <_printf_i+0x1c6>
 8019348:	0668      	lsls	r0, r5, #25
 801934a:	d5fb      	bpl.n	8019344 <_printf_i+0x1bc>
 801934c:	8019      	strh	r1, [r3, #0]
 801934e:	2300      	movs	r3, #0
 8019350:	6123      	str	r3, [r4, #16]
 8019352:	4616      	mov	r6, r2
 8019354:	e7bc      	b.n	80192d0 <_printf_i+0x148>
 8019356:	6833      	ldr	r3, [r6, #0]
 8019358:	1d1a      	adds	r2, r3, #4
 801935a:	6032      	str	r2, [r6, #0]
 801935c:	681e      	ldr	r6, [r3, #0]
 801935e:	6862      	ldr	r2, [r4, #4]
 8019360:	2100      	movs	r1, #0
 8019362:	4630      	mov	r0, r6
 8019364:	f7e6 ff6c 	bl	8000240 <memchr>
 8019368:	b108      	cbz	r0, 801936e <_printf_i+0x1e6>
 801936a:	1b80      	subs	r0, r0, r6
 801936c:	6060      	str	r0, [r4, #4]
 801936e:	6863      	ldr	r3, [r4, #4]
 8019370:	6123      	str	r3, [r4, #16]
 8019372:	2300      	movs	r3, #0
 8019374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019378:	e7aa      	b.n	80192d0 <_printf_i+0x148>
 801937a:	6923      	ldr	r3, [r4, #16]
 801937c:	4632      	mov	r2, r6
 801937e:	4649      	mov	r1, r9
 8019380:	4640      	mov	r0, r8
 8019382:	47d0      	blx	sl
 8019384:	3001      	adds	r0, #1
 8019386:	d0ad      	beq.n	80192e4 <_printf_i+0x15c>
 8019388:	6823      	ldr	r3, [r4, #0]
 801938a:	079b      	lsls	r3, r3, #30
 801938c:	d413      	bmi.n	80193b6 <_printf_i+0x22e>
 801938e:	68e0      	ldr	r0, [r4, #12]
 8019390:	9b03      	ldr	r3, [sp, #12]
 8019392:	4298      	cmp	r0, r3
 8019394:	bfb8      	it	lt
 8019396:	4618      	movlt	r0, r3
 8019398:	e7a6      	b.n	80192e8 <_printf_i+0x160>
 801939a:	2301      	movs	r3, #1
 801939c:	4632      	mov	r2, r6
 801939e:	4649      	mov	r1, r9
 80193a0:	4640      	mov	r0, r8
 80193a2:	47d0      	blx	sl
 80193a4:	3001      	adds	r0, #1
 80193a6:	d09d      	beq.n	80192e4 <_printf_i+0x15c>
 80193a8:	3501      	adds	r5, #1
 80193aa:	68e3      	ldr	r3, [r4, #12]
 80193ac:	9903      	ldr	r1, [sp, #12]
 80193ae:	1a5b      	subs	r3, r3, r1
 80193b0:	42ab      	cmp	r3, r5
 80193b2:	dcf2      	bgt.n	801939a <_printf_i+0x212>
 80193b4:	e7eb      	b.n	801938e <_printf_i+0x206>
 80193b6:	2500      	movs	r5, #0
 80193b8:	f104 0619 	add.w	r6, r4, #25
 80193bc:	e7f5      	b.n	80193aa <_printf_i+0x222>
 80193be:	bf00      	nop
 80193c0:	0801bbf1 	.word	0x0801bbf1
 80193c4:	0801bc02 	.word	0x0801bc02

080193c8 <__sflush_r>:
 80193c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80193cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193d0:	0716      	lsls	r6, r2, #28
 80193d2:	4605      	mov	r5, r0
 80193d4:	460c      	mov	r4, r1
 80193d6:	d454      	bmi.n	8019482 <__sflush_r+0xba>
 80193d8:	684b      	ldr	r3, [r1, #4]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	dc02      	bgt.n	80193e4 <__sflush_r+0x1c>
 80193de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	dd48      	ble.n	8019476 <__sflush_r+0xae>
 80193e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193e6:	2e00      	cmp	r6, #0
 80193e8:	d045      	beq.n	8019476 <__sflush_r+0xae>
 80193ea:	2300      	movs	r3, #0
 80193ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80193f0:	682f      	ldr	r7, [r5, #0]
 80193f2:	6a21      	ldr	r1, [r4, #32]
 80193f4:	602b      	str	r3, [r5, #0]
 80193f6:	d030      	beq.n	801945a <__sflush_r+0x92>
 80193f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80193fa:	89a3      	ldrh	r3, [r4, #12]
 80193fc:	0759      	lsls	r1, r3, #29
 80193fe:	d505      	bpl.n	801940c <__sflush_r+0x44>
 8019400:	6863      	ldr	r3, [r4, #4]
 8019402:	1ad2      	subs	r2, r2, r3
 8019404:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019406:	b10b      	cbz	r3, 801940c <__sflush_r+0x44>
 8019408:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801940a:	1ad2      	subs	r2, r2, r3
 801940c:	2300      	movs	r3, #0
 801940e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019410:	6a21      	ldr	r1, [r4, #32]
 8019412:	4628      	mov	r0, r5
 8019414:	47b0      	blx	r6
 8019416:	1c43      	adds	r3, r0, #1
 8019418:	89a3      	ldrh	r3, [r4, #12]
 801941a:	d106      	bne.n	801942a <__sflush_r+0x62>
 801941c:	6829      	ldr	r1, [r5, #0]
 801941e:	291d      	cmp	r1, #29
 8019420:	d82b      	bhi.n	801947a <__sflush_r+0xb2>
 8019422:	4a2a      	ldr	r2, [pc, #168]	@ (80194cc <__sflush_r+0x104>)
 8019424:	410a      	asrs	r2, r1
 8019426:	07d6      	lsls	r6, r2, #31
 8019428:	d427      	bmi.n	801947a <__sflush_r+0xb2>
 801942a:	2200      	movs	r2, #0
 801942c:	6062      	str	r2, [r4, #4]
 801942e:	04d9      	lsls	r1, r3, #19
 8019430:	6922      	ldr	r2, [r4, #16]
 8019432:	6022      	str	r2, [r4, #0]
 8019434:	d504      	bpl.n	8019440 <__sflush_r+0x78>
 8019436:	1c42      	adds	r2, r0, #1
 8019438:	d101      	bne.n	801943e <__sflush_r+0x76>
 801943a:	682b      	ldr	r3, [r5, #0]
 801943c:	b903      	cbnz	r3, 8019440 <__sflush_r+0x78>
 801943e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019442:	602f      	str	r7, [r5, #0]
 8019444:	b1b9      	cbz	r1, 8019476 <__sflush_r+0xae>
 8019446:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801944a:	4299      	cmp	r1, r3
 801944c:	d002      	beq.n	8019454 <__sflush_r+0x8c>
 801944e:	4628      	mov	r0, r5
 8019450:	f7ff fb40 	bl	8018ad4 <_free_r>
 8019454:	2300      	movs	r3, #0
 8019456:	6363      	str	r3, [r4, #52]	@ 0x34
 8019458:	e00d      	b.n	8019476 <__sflush_r+0xae>
 801945a:	2301      	movs	r3, #1
 801945c:	4628      	mov	r0, r5
 801945e:	47b0      	blx	r6
 8019460:	4602      	mov	r2, r0
 8019462:	1c50      	adds	r0, r2, #1
 8019464:	d1c9      	bne.n	80193fa <__sflush_r+0x32>
 8019466:	682b      	ldr	r3, [r5, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d0c6      	beq.n	80193fa <__sflush_r+0x32>
 801946c:	2b1d      	cmp	r3, #29
 801946e:	d001      	beq.n	8019474 <__sflush_r+0xac>
 8019470:	2b16      	cmp	r3, #22
 8019472:	d11e      	bne.n	80194b2 <__sflush_r+0xea>
 8019474:	602f      	str	r7, [r5, #0]
 8019476:	2000      	movs	r0, #0
 8019478:	e022      	b.n	80194c0 <__sflush_r+0xf8>
 801947a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801947e:	b21b      	sxth	r3, r3
 8019480:	e01b      	b.n	80194ba <__sflush_r+0xf2>
 8019482:	690f      	ldr	r7, [r1, #16]
 8019484:	2f00      	cmp	r7, #0
 8019486:	d0f6      	beq.n	8019476 <__sflush_r+0xae>
 8019488:	0793      	lsls	r3, r2, #30
 801948a:	680e      	ldr	r6, [r1, #0]
 801948c:	bf08      	it	eq
 801948e:	694b      	ldreq	r3, [r1, #20]
 8019490:	600f      	str	r7, [r1, #0]
 8019492:	bf18      	it	ne
 8019494:	2300      	movne	r3, #0
 8019496:	eba6 0807 	sub.w	r8, r6, r7
 801949a:	608b      	str	r3, [r1, #8]
 801949c:	f1b8 0f00 	cmp.w	r8, #0
 80194a0:	dde9      	ble.n	8019476 <__sflush_r+0xae>
 80194a2:	6a21      	ldr	r1, [r4, #32]
 80194a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80194a6:	4643      	mov	r3, r8
 80194a8:	463a      	mov	r2, r7
 80194aa:	4628      	mov	r0, r5
 80194ac:	47b0      	blx	r6
 80194ae:	2800      	cmp	r0, #0
 80194b0:	dc08      	bgt.n	80194c4 <__sflush_r+0xfc>
 80194b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194ba:	81a3      	strh	r3, [r4, #12]
 80194bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80194c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c4:	4407      	add	r7, r0
 80194c6:	eba8 0800 	sub.w	r8, r8, r0
 80194ca:	e7e7      	b.n	801949c <__sflush_r+0xd4>
 80194cc:	dfbffffe 	.word	0xdfbffffe

080194d0 <_fflush_r>:
 80194d0:	b538      	push	{r3, r4, r5, lr}
 80194d2:	690b      	ldr	r3, [r1, #16]
 80194d4:	4605      	mov	r5, r0
 80194d6:	460c      	mov	r4, r1
 80194d8:	b913      	cbnz	r3, 80194e0 <_fflush_r+0x10>
 80194da:	2500      	movs	r5, #0
 80194dc:	4628      	mov	r0, r5
 80194de:	bd38      	pop	{r3, r4, r5, pc}
 80194e0:	b118      	cbz	r0, 80194ea <_fflush_r+0x1a>
 80194e2:	6a03      	ldr	r3, [r0, #32]
 80194e4:	b90b      	cbnz	r3, 80194ea <_fflush_r+0x1a>
 80194e6:	f7fe ff89 	bl	80183fc <__sinit>
 80194ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d0f3      	beq.n	80194da <_fflush_r+0xa>
 80194f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80194f4:	07d0      	lsls	r0, r2, #31
 80194f6:	d404      	bmi.n	8019502 <_fflush_r+0x32>
 80194f8:	0599      	lsls	r1, r3, #22
 80194fa:	d402      	bmi.n	8019502 <_fflush_r+0x32>
 80194fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194fe:	f7ff faa6 	bl	8018a4e <__retarget_lock_acquire_recursive>
 8019502:	4628      	mov	r0, r5
 8019504:	4621      	mov	r1, r4
 8019506:	f7ff ff5f 	bl	80193c8 <__sflush_r>
 801950a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801950c:	07da      	lsls	r2, r3, #31
 801950e:	4605      	mov	r5, r0
 8019510:	d4e4      	bmi.n	80194dc <_fflush_r+0xc>
 8019512:	89a3      	ldrh	r3, [r4, #12]
 8019514:	059b      	lsls	r3, r3, #22
 8019516:	d4e1      	bmi.n	80194dc <_fflush_r+0xc>
 8019518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801951a:	f7ff fa99 	bl	8018a50 <__retarget_lock_release_recursive>
 801951e:	e7dd      	b.n	80194dc <_fflush_r+0xc>

08019520 <fiprintf>:
 8019520:	b40e      	push	{r1, r2, r3}
 8019522:	b503      	push	{r0, r1, lr}
 8019524:	4601      	mov	r1, r0
 8019526:	ab03      	add	r3, sp, #12
 8019528:	4805      	ldr	r0, [pc, #20]	@ (8019540 <fiprintf+0x20>)
 801952a:	f853 2b04 	ldr.w	r2, [r3], #4
 801952e:	6800      	ldr	r0, [r0, #0]
 8019530:	9301      	str	r3, [sp, #4]
 8019532:	f7ff fca3 	bl	8018e7c <_vfiprintf_r>
 8019536:	b002      	add	sp, #8
 8019538:	f85d eb04 	ldr.w	lr, [sp], #4
 801953c:	b003      	add	sp, #12
 801953e:	4770      	bx	lr
 8019540:	20000204 	.word	0x20000204

08019544 <__swhatbuf_r>:
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	460c      	mov	r4, r1
 8019548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801954c:	2900      	cmp	r1, #0
 801954e:	b096      	sub	sp, #88	@ 0x58
 8019550:	4615      	mov	r5, r2
 8019552:	461e      	mov	r6, r3
 8019554:	da0d      	bge.n	8019572 <__swhatbuf_r+0x2e>
 8019556:	89a3      	ldrh	r3, [r4, #12]
 8019558:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801955c:	f04f 0100 	mov.w	r1, #0
 8019560:	bf14      	ite	ne
 8019562:	2340      	movne	r3, #64	@ 0x40
 8019564:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019568:	2000      	movs	r0, #0
 801956a:	6031      	str	r1, [r6, #0]
 801956c:	602b      	str	r3, [r5, #0]
 801956e:	b016      	add	sp, #88	@ 0x58
 8019570:	bd70      	pop	{r4, r5, r6, pc}
 8019572:	466a      	mov	r2, sp
 8019574:	f000 f848 	bl	8019608 <_fstat_r>
 8019578:	2800      	cmp	r0, #0
 801957a:	dbec      	blt.n	8019556 <__swhatbuf_r+0x12>
 801957c:	9901      	ldr	r1, [sp, #4]
 801957e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019582:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019586:	4259      	negs	r1, r3
 8019588:	4159      	adcs	r1, r3
 801958a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801958e:	e7eb      	b.n	8019568 <__swhatbuf_r+0x24>

08019590 <__smakebuf_r>:
 8019590:	898b      	ldrh	r3, [r1, #12]
 8019592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019594:	079d      	lsls	r5, r3, #30
 8019596:	4606      	mov	r6, r0
 8019598:	460c      	mov	r4, r1
 801959a:	d507      	bpl.n	80195ac <__smakebuf_r+0x1c>
 801959c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80195a0:	6023      	str	r3, [r4, #0]
 80195a2:	6123      	str	r3, [r4, #16]
 80195a4:	2301      	movs	r3, #1
 80195a6:	6163      	str	r3, [r4, #20]
 80195a8:	b003      	add	sp, #12
 80195aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ac:	ab01      	add	r3, sp, #4
 80195ae:	466a      	mov	r2, sp
 80195b0:	f7ff ffc8 	bl	8019544 <__swhatbuf_r>
 80195b4:	9f00      	ldr	r7, [sp, #0]
 80195b6:	4605      	mov	r5, r0
 80195b8:	4639      	mov	r1, r7
 80195ba:	4630      	mov	r0, r6
 80195bc:	f7fe fcec 	bl	8017f98 <_malloc_r>
 80195c0:	b948      	cbnz	r0, 80195d6 <__smakebuf_r+0x46>
 80195c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195c6:	059a      	lsls	r2, r3, #22
 80195c8:	d4ee      	bmi.n	80195a8 <__smakebuf_r+0x18>
 80195ca:	f023 0303 	bic.w	r3, r3, #3
 80195ce:	f043 0302 	orr.w	r3, r3, #2
 80195d2:	81a3      	strh	r3, [r4, #12]
 80195d4:	e7e2      	b.n	801959c <__smakebuf_r+0xc>
 80195d6:	89a3      	ldrh	r3, [r4, #12]
 80195d8:	6020      	str	r0, [r4, #0]
 80195da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195de:	81a3      	strh	r3, [r4, #12]
 80195e0:	9b01      	ldr	r3, [sp, #4]
 80195e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80195e6:	b15b      	cbz	r3, 8019600 <__smakebuf_r+0x70>
 80195e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195ec:	4630      	mov	r0, r6
 80195ee:	f000 f81d 	bl	801962c <_isatty_r>
 80195f2:	b128      	cbz	r0, 8019600 <__smakebuf_r+0x70>
 80195f4:	89a3      	ldrh	r3, [r4, #12]
 80195f6:	f023 0303 	bic.w	r3, r3, #3
 80195fa:	f043 0301 	orr.w	r3, r3, #1
 80195fe:	81a3      	strh	r3, [r4, #12]
 8019600:	89a3      	ldrh	r3, [r4, #12]
 8019602:	431d      	orrs	r5, r3
 8019604:	81a5      	strh	r5, [r4, #12]
 8019606:	e7cf      	b.n	80195a8 <__smakebuf_r+0x18>

08019608 <_fstat_r>:
 8019608:	b538      	push	{r3, r4, r5, lr}
 801960a:	4d07      	ldr	r5, [pc, #28]	@ (8019628 <_fstat_r+0x20>)
 801960c:	2300      	movs	r3, #0
 801960e:	4604      	mov	r4, r0
 8019610:	4608      	mov	r0, r1
 8019612:	4611      	mov	r1, r2
 8019614:	602b      	str	r3, [r5, #0]
 8019616:	f7e9 fdd9 	bl	80031cc <_fstat>
 801961a:	1c43      	adds	r3, r0, #1
 801961c:	d102      	bne.n	8019624 <_fstat_r+0x1c>
 801961e:	682b      	ldr	r3, [r5, #0]
 8019620:	b103      	cbz	r3, 8019624 <_fstat_r+0x1c>
 8019622:	6023      	str	r3, [r4, #0]
 8019624:	bd38      	pop	{r3, r4, r5, pc}
 8019626:	bf00      	nop
 8019628:	20011010 	.word	0x20011010

0801962c <_isatty_r>:
 801962c:	b538      	push	{r3, r4, r5, lr}
 801962e:	4d06      	ldr	r5, [pc, #24]	@ (8019648 <_isatty_r+0x1c>)
 8019630:	2300      	movs	r3, #0
 8019632:	4604      	mov	r4, r0
 8019634:	4608      	mov	r0, r1
 8019636:	602b      	str	r3, [r5, #0]
 8019638:	f7e9 fdd8 	bl	80031ec <_isatty>
 801963c:	1c43      	adds	r3, r0, #1
 801963e:	d102      	bne.n	8019646 <_isatty_r+0x1a>
 8019640:	682b      	ldr	r3, [r5, #0]
 8019642:	b103      	cbz	r3, 8019646 <_isatty_r+0x1a>
 8019644:	6023      	str	r3, [r4, #0]
 8019646:	bd38      	pop	{r3, r4, r5, pc}
 8019648:	20011010 	.word	0x20011010

0801964c <abort>:
 801964c:	b508      	push	{r3, lr}
 801964e:	2006      	movs	r0, #6
 8019650:	f000 f82c 	bl	80196ac <raise>
 8019654:	2001      	movs	r0, #1
 8019656:	f7e9 fd69 	bl	800312c <_exit>

0801965a <_raise_r>:
 801965a:	291f      	cmp	r1, #31
 801965c:	b538      	push	{r3, r4, r5, lr}
 801965e:	4605      	mov	r5, r0
 8019660:	460c      	mov	r4, r1
 8019662:	d904      	bls.n	801966e <_raise_r+0x14>
 8019664:	2316      	movs	r3, #22
 8019666:	6003      	str	r3, [r0, #0]
 8019668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801966c:	bd38      	pop	{r3, r4, r5, pc}
 801966e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019670:	b112      	cbz	r2, 8019678 <_raise_r+0x1e>
 8019672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019676:	b94b      	cbnz	r3, 801968c <_raise_r+0x32>
 8019678:	4628      	mov	r0, r5
 801967a:	f000 f831 	bl	80196e0 <_getpid_r>
 801967e:	4622      	mov	r2, r4
 8019680:	4601      	mov	r1, r0
 8019682:	4628      	mov	r0, r5
 8019684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019688:	f000 b818 	b.w	80196bc <_kill_r>
 801968c:	2b01      	cmp	r3, #1
 801968e:	d00a      	beq.n	80196a6 <_raise_r+0x4c>
 8019690:	1c59      	adds	r1, r3, #1
 8019692:	d103      	bne.n	801969c <_raise_r+0x42>
 8019694:	2316      	movs	r3, #22
 8019696:	6003      	str	r3, [r0, #0]
 8019698:	2001      	movs	r0, #1
 801969a:	e7e7      	b.n	801966c <_raise_r+0x12>
 801969c:	2100      	movs	r1, #0
 801969e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80196a2:	4620      	mov	r0, r4
 80196a4:	4798      	blx	r3
 80196a6:	2000      	movs	r0, #0
 80196a8:	e7e0      	b.n	801966c <_raise_r+0x12>
	...

080196ac <raise>:
 80196ac:	4b02      	ldr	r3, [pc, #8]	@ (80196b8 <raise+0xc>)
 80196ae:	4601      	mov	r1, r0
 80196b0:	6818      	ldr	r0, [r3, #0]
 80196b2:	f7ff bfd2 	b.w	801965a <_raise_r>
 80196b6:	bf00      	nop
 80196b8:	20000204 	.word	0x20000204

080196bc <_kill_r>:
 80196bc:	b538      	push	{r3, r4, r5, lr}
 80196be:	4d07      	ldr	r5, [pc, #28]	@ (80196dc <_kill_r+0x20>)
 80196c0:	2300      	movs	r3, #0
 80196c2:	4604      	mov	r4, r0
 80196c4:	4608      	mov	r0, r1
 80196c6:	4611      	mov	r1, r2
 80196c8:	602b      	str	r3, [r5, #0]
 80196ca:	f7e9 fd1f 	bl	800310c <_kill>
 80196ce:	1c43      	adds	r3, r0, #1
 80196d0:	d102      	bne.n	80196d8 <_kill_r+0x1c>
 80196d2:	682b      	ldr	r3, [r5, #0]
 80196d4:	b103      	cbz	r3, 80196d8 <_kill_r+0x1c>
 80196d6:	6023      	str	r3, [r4, #0]
 80196d8:	bd38      	pop	{r3, r4, r5, pc}
 80196da:	bf00      	nop
 80196dc:	20011010 	.word	0x20011010

080196e0 <_getpid_r>:
 80196e0:	f7e9 bd0c 	b.w	80030fc <_getpid>

080196e4 <fmod>:
 80196e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196e6:	ed2d 8b02 	vpush	{d8}
 80196ea:	ec57 6b10 	vmov	r6, r7, d0
 80196ee:	ec55 4b11 	vmov	r4, r5, d1
 80196f2:	f000 fa4f 	bl	8019b94 <__ieee754_fmod>
 80196f6:	4622      	mov	r2, r4
 80196f8:	462b      	mov	r3, r5
 80196fa:	4630      	mov	r0, r6
 80196fc:	4639      	mov	r1, r7
 80196fe:	eeb0 8a40 	vmov.f32	s16, s0
 8019702:	eef0 8a60 	vmov.f32	s17, s1
 8019706:	f7e7 fa41 	bl	8000b8c <__aeabi_dcmpun>
 801970a:	b990      	cbnz	r0, 8019732 <fmod+0x4e>
 801970c:	2200      	movs	r2, #0
 801970e:	2300      	movs	r3, #0
 8019710:	4620      	mov	r0, r4
 8019712:	4629      	mov	r1, r5
 8019714:	f7e7 fa08 	bl	8000b28 <__aeabi_dcmpeq>
 8019718:	b158      	cbz	r0, 8019732 <fmod+0x4e>
 801971a:	f7ff f96d 	bl	80189f8 <__errno>
 801971e:	2321      	movs	r3, #33	@ 0x21
 8019720:	6003      	str	r3, [r0, #0]
 8019722:	2200      	movs	r2, #0
 8019724:	2300      	movs	r3, #0
 8019726:	4610      	mov	r0, r2
 8019728:	4619      	mov	r1, r3
 801972a:	f7e7 f8bf 	bl	80008ac <__aeabi_ddiv>
 801972e:	ec41 0b18 	vmov	d8, r0, r1
 8019732:	eeb0 0a48 	vmov.f32	s0, s16
 8019736:	eef0 0a68 	vmov.f32	s1, s17
 801973a:	ecbd 8b02 	vpop	{d8}
 801973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019740 <cos>:
 8019740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019742:	ec53 2b10 	vmov	r2, r3, d0
 8019746:	4826      	ldr	r0, [pc, #152]	@ (80197e0 <cos+0xa0>)
 8019748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801974c:	4281      	cmp	r1, r0
 801974e:	d806      	bhi.n	801975e <cos+0x1e>
 8019750:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80197d8 <cos+0x98>
 8019754:	b005      	add	sp, #20
 8019756:	f85d eb04 	ldr.w	lr, [sp], #4
 801975a:	f000 b899 	b.w	8019890 <__kernel_cos>
 801975e:	4821      	ldr	r0, [pc, #132]	@ (80197e4 <cos+0xa4>)
 8019760:	4281      	cmp	r1, r0
 8019762:	d908      	bls.n	8019776 <cos+0x36>
 8019764:	4610      	mov	r0, r2
 8019766:	4619      	mov	r1, r3
 8019768:	f7e6 fdbe 	bl	80002e8 <__aeabi_dsub>
 801976c:	ec41 0b10 	vmov	d0, r0, r1
 8019770:	b005      	add	sp, #20
 8019772:	f85d fb04 	ldr.w	pc, [sp], #4
 8019776:	4668      	mov	r0, sp
 8019778:	f000 fb16 	bl	8019da8 <__ieee754_rem_pio2>
 801977c:	f000 0003 	and.w	r0, r0, #3
 8019780:	2801      	cmp	r0, #1
 8019782:	d00b      	beq.n	801979c <cos+0x5c>
 8019784:	2802      	cmp	r0, #2
 8019786:	d015      	beq.n	80197b4 <cos+0x74>
 8019788:	b9d8      	cbnz	r0, 80197c2 <cos+0x82>
 801978a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801978e:	ed9d 0b00 	vldr	d0, [sp]
 8019792:	f000 f87d 	bl	8019890 <__kernel_cos>
 8019796:	ec51 0b10 	vmov	r0, r1, d0
 801979a:	e7e7      	b.n	801976c <cos+0x2c>
 801979c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197a0:	ed9d 0b00 	vldr	d0, [sp]
 80197a4:	f000 f93c 	bl	8019a20 <__kernel_sin>
 80197a8:	ec53 2b10 	vmov	r2, r3, d0
 80197ac:	4610      	mov	r0, r2
 80197ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80197b2:	e7db      	b.n	801976c <cos+0x2c>
 80197b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197b8:	ed9d 0b00 	vldr	d0, [sp]
 80197bc:	f000 f868 	bl	8019890 <__kernel_cos>
 80197c0:	e7f2      	b.n	80197a8 <cos+0x68>
 80197c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197c6:	ed9d 0b00 	vldr	d0, [sp]
 80197ca:	2001      	movs	r0, #1
 80197cc:	f000 f928 	bl	8019a20 <__kernel_sin>
 80197d0:	e7e1      	b.n	8019796 <cos+0x56>
 80197d2:	bf00      	nop
 80197d4:	f3af 8000 	nop.w
	...
 80197e0:	3fe921fb 	.word	0x3fe921fb
 80197e4:	7fefffff 	.word	0x7fefffff

080197e8 <sin>:
 80197e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197ea:	ec53 2b10 	vmov	r2, r3, d0
 80197ee:	4826      	ldr	r0, [pc, #152]	@ (8019888 <sin+0xa0>)
 80197f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80197f4:	4281      	cmp	r1, r0
 80197f6:	d807      	bhi.n	8019808 <sin+0x20>
 80197f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019880 <sin+0x98>
 80197fc:	2000      	movs	r0, #0
 80197fe:	b005      	add	sp, #20
 8019800:	f85d eb04 	ldr.w	lr, [sp], #4
 8019804:	f000 b90c 	b.w	8019a20 <__kernel_sin>
 8019808:	4820      	ldr	r0, [pc, #128]	@ (801988c <sin+0xa4>)
 801980a:	4281      	cmp	r1, r0
 801980c:	d908      	bls.n	8019820 <sin+0x38>
 801980e:	4610      	mov	r0, r2
 8019810:	4619      	mov	r1, r3
 8019812:	f7e6 fd69 	bl	80002e8 <__aeabi_dsub>
 8019816:	ec41 0b10 	vmov	d0, r0, r1
 801981a:	b005      	add	sp, #20
 801981c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019820:	4668      	mov	r0, sp
 8019822:	f000 fac1 	bl	8019da8 <__ieee754_rem_pio2>
 8019826:	f000 0003 	and.w	r0, r0, #3
 801982a:	2801      	cmp	r0, #1
 801982c:	d00c      	beq.n	8019848 <sin+0x60>
 801982e:	2802      	cmp	r0, #2
 8019830:	d011      	beq.n	8019856 <sin+0x6e>
 8019832:	b9e8      	cbnz	r0, 8019870 <sin+0x88>
 8019834:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019838:	ed9d 0b00 	vldr	d0, [sp]
 801983c:	2001      	movs	r0, #1
 801983e:	f000 f8ef 	bl	8019a20 <__kernel_sin>
 8019842:	ec51 0b10 	vmov	r0, r1, d0
 8019846:	e7e6      	b.n	8019816 <sin+0x2e>
 8019848:	ed9d 1b02 	vldr	d1, [sp, #8]
 801984c:	ed9d 0b00 	vldr	d0, [sp]
 8019850:	f000 f81e 	bl	8019890 <__kernel_cos>
 8019854:	e7f5      	b.n	8019842 <sin+0x5a>
 8019856:	ed9d 1b02 	vldr	d1, [sp, #8]
 801985a:	ed9d 0b00 	vldr	d0, [sp]
 801985e:	2001      	movs	r0, #1
 8019860:	f000 f8de 	bl	8019a20 <__kernel_sin>
 8019864:	ec53 2b10 	vmov	r2, r3, d0
 8019868:	4610      	mov	r0, r2
 801986a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801986e:	e7d2      	b.n	8019816 <sin+0x2e>
 8019870:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019874:	ed9d 0b00 	vldr	d0, [sp]
 8019878:	f000 f80a 	bl	8019890 <__kernel_cos>
 801987c:	e7f2      	b.n	8019864 <sin+0x7c>
 801987e:	bf00      	nop
	...
 8019888:	3fe921fb 	.word	0x3fe921fb
 801988c:	7fefffff 	.word	0x7fefffff

08019890 <__kernel_cos>:
 8019890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019894:	ec57 6b10 	vmov	r6, r7, d0
 8019898:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801989c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80198a0:	ed8d 1b00 	vstr	d1, [sp]
 80198a4:	d206      	bcs.n	80198b4 <__kernel_cos+0x24>
 80198a6:	4630      	mov	r0, r6
 80198a8:	4639      	mov	r1, r7
 80198aa:	f7e7 f985 	bl	8000bb8 <__aeabi_d2iz>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f000 8088 	beq.w	80199c4 <__kernel_cos+0x134>
 80198b4:	4632      	mov	r2, r6
 80198b6:	463b      	mov	r3, r7
 80198b8:	4630      	mov	r0, r6
 80198ba:	4639      	mov	r1, r7
 80198bc:	f7e6 fecc 	bl	8000658 <__aeabi_dmul>
 80198c0:	4b51      	ldr	r3, [pc, #324]	@ (8019a08 <__kernel_cos+0x178>)
 80198c2:	2200      	movs	r2, #0
 80198c4:	4604      	mov	r4, r0
 80198c6:	460d      	mov	r5, r1
 80198c8:	f7e6 fec6 	bl	8000658 <__aeabi_dmul>
 80198cc:	a340      	add	r3, pc, #256	@ (adr r3, 80199d0 <__kernel_cos+0x140>)
 80198ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d2:	4682      	mov	sl, r0
 80198d4:	468b      	mov	fp, r1
 80198d6:	4620      	mov	r0, r4
 80198d8:	4629      	mov	r1, r5
 80198da:	f7e6 febd 	bl	8000658 <__aeabi_dmul>
 80198de:	a33e      	add	r3, pc, #248	@ (adr r3, 80199d8 <__kernel_cos+0x148>)
 80198e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e4:	f7e6 fd02 	bl	80002ec <__adddf3>
 80198e8:	4622      	mov	r2, r4
 80198ea:	462b      	mov	r3, r5
 80198ec:	f7e6 feb4 	bl	8000658 <__aeabi_dmul>
 80198f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80199e0 <__kernel_cos+0x150>)
 80198f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f6:	f7e6 fcf7 	bl	80002e8 <__aeabi_dsub>
 80198fa:	4622      	mov	r2, r4
 80198fc:	462b      	mov	r3, r5
 80198fe:	f7e6 feab 	bl	8000658 <__aeabi_dmul>
 8019902:	a339      	add	r3, pc, #228	@ (adr r3, 80199e8 <__kernel_cos+0x158>)
 8019904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019908:	f7e6 fcf0 	bl	80002ec <__adddf3>
 801990c:	4622      	mov	r2, r4
 801990e:	462b      	mov	r3, r5
 8019910:	f7e6 fea2 	bl	8000658 <__aeabi_dmul>
 8019914:	a336      	add	r3, pc, #216	@ (adr r3, 80199f0 <__kernel_cos+0x160>)
 8019916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801991a:	f7e6 fce5 	bl	80002e8 <__aeabi_dsub>
 801991e:	4622      	mov	r2, r4
 8019920:	462b      	mov	r3, r5
 8019922:	f7e6 fe99 	bl	8000658 <__aeabi_dmul>
 8019926:	a334      	add	r3, pc, #208	@ (adr r3, 80199f8 <__kernel_cos+0x168>)
 8019928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801992c:	f7e6 fcde 	bl	80002ec <__adddf3>
 8019930:	4622      	mov	r2, r4
 8019932:	462b      	mov	r3, r5
 8019934:	f7e6 fe90 	bl	8000658 <__aeabi_dmul>
 8019938:	4622      	mov	r2, r4
 801993a:	462b      	mov	r3, r5
 801993c:	f7e6 fe8c 	bl	8000658 <__aeabi_dmul>
 8019940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019944:	4604      	mov	r4, r0
 8019946:	460d      	mov	r5, r1
 8019948:	4630      	mov	r0, r6
 801994a:	4639      	mov	r1, r7
 801994c:	f7e6 fe84 	bl	8000658 <__aeabi_dmul>
 8019950:	460b      	mov	r3, r1
 8019952:	4602      	mov	r2, r0
 8019954:	4629      	mov	r1, r5
 8019956:	4620      	mov	r0, r4
 8019958:	f7e6 fcc6 	bl	80002e8 <__aeabi_dsub>
 801995c:	4b2b      	ldr	r3, [pc, #172]	@ (8019a0c <__kernel_cos+0x17c>)
 801995e:	4598      	cmp	r8, r3
 8019960:	4606      	mov	r6, r0
 8019962:	460f      	mov	r7, r1
 8019964:	d810      	bhi.n	8019988 <__kernel_cos+0xf8>
 8019966:	4602      	mov	r2, r0
 8019968:	460b      	mov	r3, r1
 801996a:	4650      	mov	r0, sl
 801996c:	4659      	mov	r1, fp
 801996e:	f7e6 fcbb 	bl	80002e8 <__aeabi_dsub>
 8019972:	460b      	mov	r3, r1
 8019974:	4926      	ldr	r1, [pc, #152]	@ (8019a10 <__kernel_cos+0x180>)
 8019976:	4602      	mov	r2, r0
 8019978:	2000      	movs	r0, #0
 801997a:	f7e6 fcb5 	bl	80002e8 <__aeabi_dsub>
 801997e:	ec41 0b10 	vmov	d0, r0, r1
 8019982:	b003      	add	sp, #12
 8019984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019988:	4b22      	ldr	r3, [pc, #136]	@ (8019a14 <__kernel_cos+0x184>)
 801998a:	4921      	ldr	r1, [pc, #132]	@ (8019a10 <__kernel_cos+0x180>)
 801998c:	4598      	cmp	r8, r3
 801998e:	bf8c      	ite	hi
 8019990:	4d21      	ldrhi	r5, [pc, #132]	@ (8019a18 <__kernel_cos+0x188>)
 8019992:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8019996:	2400      	movs	r4, #0
 8019998:	4622      	mov	r2, r4
 801999a:	462b      	mov	r3, r5
 801999c:	2000      	movs	r0, #0
 801999e:	f7e6 fca3 	bl	80002e8 <__aeabi_dsub>
 80199a2:	4622      	mov	r2, r4
 80199a4:	4680      	mov	r8, r0
 80199a6:	4689      	mov	r9, r1
 80199a8:	462b      	mov	r3, r5
 80199aa:	4650      	mov	r0, sl
 80199ac:	4659      	mov	r1, fp
 80199ae:	f7e6 fc9b 	bl	80002e8 <__aeabi_dsub>
 80199b2:	4632      	mov	r2, r6
 80199b4:	463b      	mov	r3, r7
 80199b6:	f7e6 fc97 	bl	80002e8 <__aeabi_dsub>
 80199ba:	4602      	mov	r2, r0
 80199bc:	460b      	mov	r3, r1
 80199be:	4640      	mov	r0, r8
 80199c0:	4649      	mov	r1, r9
 80199c2:	e7da      	b.n	801997a <__kernel_cos+0xea>
 80199c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8019a00 <__kernel_cos+0x170>
 80199c8:	e7db      	b.n	8019982 <__kernel_cos+0xf2>
 80199ca:	bf00      	nop
 80199cc:	f3af 8000 	nop.w
 80199d0:	be8838d4 	.word	0xbe8838d4
 80199d4:	bda8fae9 	.word	0xbda8fae9
 80199d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80199dc:	3e21ee9e 	.word	0x3e21ee9e
 80199e0:	809c52ad 	.word	0x809c52ad
 80199e4:	3e927e4f 	.word	0x3e927e4f
 80199e8:	19cb1590 	.word	0x19cb1590
 80199ec:	3efa01a0 	.word	0x3efa01a0
 80199f0:	16c15177 	.word	0x16c15177
 80199f4:	3f56c16c 	.word	0x3f56c16c
 80199f8:	5555554c 	.word	0x5555554c
 80199fc:	3fa55555 	.word	0x3fa55555
 8019a00:	00000000 	.word	0x00000000
 8019a04:	3ff00000 	.word	0x3ff00000
 8019a08:	3fe00000 	.word	0x3fe00000
 8019a0c:	3fd33332 	.word	0x3fd33332
 8019a10:	3ff00000 	.word	0x3ff00000
 8019a14:	3fe90000 	.word	0x3fe90000
 8019a18:	3fd20000 	.word	0x3fd20000
 8019a1c:	00000000 	.word	0x00000000

08019a20 <__kernel_sin>:
 8019a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	ec55 4b10 	vmov	r4, r5, d0
 8019a28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019a2c:	b085      	sub	sp, #20
 8019a2e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8019a32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019a36:	4680      	mov	r8, r0
 8019a38:	d205      	bcs.n	8019a46 <__kernel_sin+0x26>
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	4629      	mov	r1, r5
 8019a3e:	f7e7 f8bb 	bl	8000bb8 <__aeabi_d2iz>
 8019a42:	2800      	cmp	r0, #0
 8019a44:	d052      	beq.n	8019aec <__kernel_sin+0xcc>
 8019a46:	4622      	mov	r2, r4
 8019a48:	462b      	mov	r3, r5
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	f7e6 fe03 	bl	8000658 <__aeabi_dmul>
 8019a52:	4682      	mov	sl, r0
 8019a54:	468b      	mov	fp, r1
 8019a56:	4602      	mov	r2, r0
 8019a58:	460b      	mov	r3, r1
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	4629      	mov	r1, r5
 8019a5e:	f7e6 fdfb 	bl	8000658 <__aeabi_dmul>
 8019a62:	a342      	add	r3, pc, #264	@ (adr r3, 8019b6c <__kernel_sin+0x14c>)
 8019a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a68:	e9cd 0100 	strd	r0, r1, [sp]
 8019a6c:	4650      	mov	r0, sl
 8019a6e:	4659      	mov	r1, fp
 8019a70:	f7e6 fdf2 	bl	8000658 <__aeabi_dmul>
 8019a74:	a33f      	add	r3, pc, #252	@ (adr r3, 8019b74 <__kernel_sin+0x154>)
 8019a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a7a:	f7e6 fc35 	bl	80002e8 <__aeabi_dsub>
 8019a7e:	4652      	mov	r2, sl
 8019a80:	465b      	mov	r3, fp
 8019a82:	f7e6 fde9 	bl	8000658 <__aeabi_dmul>
 8019a86:	a33d      	add	r3, pc, #244	@ (adr r3, 8019b7c <__kernel_sin+0x15c>)
 8019a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a8c:	f7e6 fc2e 	bl	80002ec <__adddf3>
 8019a90:	4652      	mov	r2, sl
 8019a92:	465b      	mov	r3, fp
 8019a94:	f7e6 fde0 	bl	8000658 <__aeabi_dmul>
 8019a98:	a33a      	add	r3, pc, #232	@ (adr r3, 8019b84 <__kernel_sin+0x164>)
 8019a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9e:	f7e6 fc23 	bl	80002e8 <__aeabi_dsub>
 8019aa2:	4652      	mov	r2, sl
 8019aa4:	465b      	mov	r3, fp
 8019aa6:	f7e6 fdd7 	bl	8000658 <__aeabi_dmul>
 8019aaa:	a338      	add	r3, pc, #224	@ (adr r3, 8019b8c <__kernel_sin+0x16c>)
 8019aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab0:	f7e6 fc1c 	bl	80002ec <__adddf3>
 8019ab4:	4606      	mov	r6, r0
 8019ab6:	460f      	mov	r7, r1
 8019ab8:	f1b8 0f00 	cmp.w	r8, #0
 8019abc:	d11b      	bne.n	8019af6 <__kernel_sin+0xd6>
 8019abe:	4602      	mov	r2, r0
 8019ac0:	460b      	mov	r3, r1
 8019ac2:	4650      	mov	r0, sl
 8019ac4:	4659      	mov	r1, fp
 8019ac6:	f7e6 fdc7 	bl	8000658 <__aeabi_dmul>
 8019aca:	a325      	add	r3, pc, #148	@ (adr r3, 8019b60 <__kernel_sin+0x140>)
 8019acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad0:	f7e6 fc0a 	bl	80002e8 <__aeabi_dsub>
 8019ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019ad8:	f7e6 fdbe 	bl	8000658 <__aeabi_dmul>
 8019adc:	4602      	mov	r2, r0
 8019ade:	460b      	mov	r3, r1
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	4629      	mov	r1, r5
 8019ae4:	f7e6 fc02 	bl	80002ec <__adddf3>
 8019ae8:	4604      	mov	r4, r0
 8019aea:	460d      	mov	r5, r1
 8019aec:	ec45 4b10 	vmov	d0, r4, r5
 8019af0:	b005      	add	sp, #20
 8019af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019afa:	4b1b      	ldr	r3, [pc, #108]	@ (8019b68 <__kernel_sin+0x148>)
 8019afc:	2200      	movs	r2, #0
 8019afe:	f7e6 fdab 	bl	8000658 <__aeabi_dmul>
 8019b02:	4632      	mov	r2, r6
 8019b04:	4680      	mov	r8, r0
 8019b06:	4689      	mov	r9, r1
 8019b08:	463b      	mov	r3, r7
 8019b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b0e:	f7e6 fda3 	bl	8000658 <__aeabi_dmul>
 8019b12:	4602      	mov	r2, r0
 8019b14:	460b      	mov	r3, r1
 8019b16:	4640      	mov	r0, r8
 8019b18:	4649      	mov	r1, r9
 8019b1a:	f7e6 fbe5 	bl	80002e8 <__aeabi_dsub>
 8019b1e:	4652      	mov	r2, sl
 8019b20:	465b      	mov	r3, fp
 8019b22:	f7e6 fd99 	bl	8000658 <__aeabi_dmul>
 8019b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019b2a:	f7e6 fbdd 	bl	80002e8 <__aeabi_dsub>
 8019b2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8019b60 <__kernel_sin+0x140>)
 8019b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b34:	4606      	mov	r6, r0
 8019b36:	460f      	mov	r7, r1
 8019b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b3c:	f7e6 fd8c 	bl	8000658 <__aeabi_dmul>
 8019b40:	4602      	mov	r2, r0
 8019b42:	460b      	mov	r3, r1
 8019b44:	4630      	mov	r0, r6
 8019b46:	4639      	mov	r1, r7
 8019b48:	f7e6 fbd0 	bl	80002ec <__adddf3>
 8019b4c:	4602      	mov	r2, r0
 8019b4e:	460b      	mov	r3, r1
 8019b50:	4620      	mov	r0, r4
 8019b52:	4629      	mov	r1, r5
 8019b54:	f7e6 fbc8 	bl	80002e8 <__aeabi_dsub>
 8019b58:	e7c6      	b.n	8019ae8 <__kernel_sin+0xc8>
 8019b5a:	bf00      	nop
 8019b5c:	f3af 8000 	nop.w
 8019b60:	55555549 	.word	0x55555549
 8019b64:	3fc55555 	.word	0x3fc55555
 8019b68:	3fe00000 	.word	0x3fe00000
 8019b6c:	5acfd57c 	.word	0x5acfd57c
 8019b70:	3de5d93a 	.word	0x3de5d93a
 8019b74:	8a2b9ceb 	.word	0x8a2b9ceb
 8019b78:	3e5ae5e6 	.word	0x3e5ae5e6
 8019b7c:	57b1fe7d 	.word	0x57b1fe7d
 8019b80:	3ec71de3 	.word	0x3ec71de3
 8019b84:	19c161d5 	.word	0x19c161d5
 8019b88:	3f2a01a0 	.word	0x3f2a01a0
 8019b8c:	1110f8a6 	.word	0x1110f8a6
 8019b90:	3f811111 	.word	0x3f811111

08019b94 <__ieee754_fmod>:
 8019b94:	ec53 2b11 	vmov	r2, r3, d1
 8019b98:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8019b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ba0:	ea52 040c 	orrs.w	r4, r2, ip
 8019ba4:	ec51 0b10 	vmov	r0, r1, d0
 8019ba8:	461e      	mov	r6, r3
 8019baa:	4617      	mov	r7, r2
 8019bac:	4696      	mov	lr, r2
 8019bae:	d00c      	beq.n	8019bca <__ieee754_fmod+0x36>
 8019bb0:	4c77      	ldr	r4, [pc, #476]	@ (8019d90 <__ieee754_fmod+0x1fc>)
 8019bb2:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8019bb6:	45a0      	cmp	r8, r4
 8019bb8:	4689      	mov	r9, r1
 8019bba:	d806      	bhi.n	8019bca <__ieee754_fmod+0x36>
 8019bbc:	4254      	negs	r4, r2
 8019bbe:	4d75      	ldr	r5, [pc, #468]	@ (8019d94 <__ieee754_fmod+0x200>)
 8019bc0:	4314      	orrs	r4, r2
 8019bc2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8019bc6:	42ac      	cmp	r4, r5
 8019bc8:	d909      	bls.n	8019bde <__ieee754_fmod+0x4a>
 8019bca:	f7e6 fd45 	bl	8000658 <__aeabi_dmul>
 8019bce:	4602      	mov	r2, r0
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	f7e6 fe6b 	bl	80008ac <__aeabi_ddiv>
 8019bd6:	ec41 0b10 	vmov	d0, r0, r1
 8019bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bde:	45e0      	cmp	r8, ip
 8019be0:	4682      	mov	sl, r0
 8019be2:	4604      	mov	r4, r0
 8019be4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8019be8:	dc09      	bgt.n	8019bfe <__ieee754_fmod+0x6a>
 8019bea:	dbf4      	blt.n	8019bd6 <__ieee754_fmod+0x42>
 8019bec:	4282      	cmp	r2, r0
 8019bee:	d8f2      	bhi.n	8019bd6 <__ieee754_fmod+0x42>
 8019bf0:	d105      	bne.n	8019bfe <__ieee754_fmod+0x6a>
 8019bf2:	4b69      	ldr	r3, [pc, #420]	@ (8019d98 <__ieee754_fmod+0x204>)
 8019bf4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8019bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019bfc:	e7eb      	b.n	8019bd6 <__ieee754_fmod+0x42>
 8019bfe:	4a65      	ldr	r2, [pc, #404]	@ (8019d94 <__ieee754_fmod+0x200>)
 8019c00:	ea19 0f02 	tst.w	r9, r2
 8019c04:	d148      	bne.n	8019c98 <__ieee754_fmod+0x104>
 8019c06:	f1b8 0f00 	cmp.w	r8, #0
 8019c0a:	d13d      	bne.n	8019c88 <__ieee754_fmod+0xf4>
 8019c0c:	4963      	ldr	r1, [pc, #396]	@ (8019d9c <__ieee754_fmod+0x208>)
 8019c0e:	4653      	mov	r3, sl
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	dc36      	bgt.n	8019c82 <__ieee754_fmod+0xee>
 8019c14:	4216      	tst	r6, r2
 8019c16:	d14f      	bne.n	8019cb8 <__ieee754_fmod+0x124>
 8019c18:	f1bc 0f00 	cmp.w	ip, #0
 8019c1c:	d144      	bne.n	8019ca8 <__ieee754_fmod+0x114>
 8019c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8019d9c <__ieee754_fmod+0x208>)
 8019c20:	463b      	mov	r3, r7
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	dc3d      	bgt.n	8019ca2 <__ieee754_fmod+0x10e>
 8019c26:	485e      	ldr	r0, [pc, #376]	@ (8019da0 <__ieee754_fmod+0x20c>)
 8019c28:	4281      	cmp	r1, r0
 8019c2a:	db4a      	blt.n	8019cc2 <__ieee754_fmod+0x12e>
 8019c2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019c30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019c34:	485a      	ldr	r0, [pc, #360]	@ (8019da0 <__ieee754_fmod+0x20c>)
 8019c36:	4282      	cmp	r2, r0
 8019c38:	db57      	blt.n	8019cea <__ieee754_fmod+0x156>
 8019c3a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8019c3e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8019c42:	1a89      	subs	r1, r1, r2
 8019c44:	1b98      	subs	r0, r3, r6
 8019c46:	eba4 070e 	sub.w	r7, r4, lr
 8019c4a:	2900      	cmp	r1, #0
 8019c4c:	d162      	bne.n	8019d14 <__ieee754_fmod+0x180>
 8019c4e:	4574      	cmp	r4, lr
 8019c50:	bf38      	it	cc
 8019c52:	f100 30ff 	addcc.w	r0, r0, #4294967295	@ 0xffffffff
 8019c56:	2800      	cmp	r0, #0
 8019c58:	bfa4      	itt	ge
 8019c5a:	463c      	movge	r4, r7
 8019c5c:	4603      	movge	r3, r0
 8019c5e:	ea53 0104 	orrs.w	r1, r3, r4
 8019c62:	d0c6      	beq.n	8019bf2 <__ieee754_fmod+0x5e>
 8019c64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019c68:	db69      	blt.n	8019d3e <__ieee754_fmod+0x1aa>
 8019c6a:	494d      	ldr	r1, [pc, #308]	@ (8019da0 <__ieee754_fmod+0x20c>)
 8019c6c:	428a      	cmp	r2, r1
 8019c6e:	db6c      	blt.n	8019d4a <__ieee754_fmod+0x1b6>
 8019c70:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019c74:	432b      	orrs	r3, r5
 8019c76:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8019c7a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019c7e:	4620      	mov	r0, r4
 8019c80:	e7a9      	b.n	8019bd6 <__ieee754_fmod+0x42>
 8019c82:	3901      	subs	r1, #1
 8019c84:	005b      	lsls	r3, r3, #1
 8019c86:	e7c3      	b.n	8019c10 <__ieee754_fmod+0x7c>
 8019c88:	4945      	ldr	r1, [pc, #276]	@ (8019da0 <__ieee754_fmod+0x20c>)
 8019c8a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	ddc0      	ble.n	8019c14 <__ieee754_fmod+0x80>
 8019c92:	3901      	subs	r1, #1
 8019c94:	005b      	lsls	r3, r3, #1
 8019c96:	e7fa      	b.n	8019c8e <__ieee754_fmod+0xfa>
 8019c98:	ea4f 5128 	mov.w	r1, r8, asr #20
 8019c9c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8019ca0:	e7b8      	b.n	8019c14 <__ieee754_fmod+0x80>
 8019ca2:	3a01      	subs	r2, #1
 8019ca4:	005b      	lsls	r3, r3, #1
 8019ca6:	e7bc      	b.n	8019c22 <__ieee754_fmod+0x8e>
 8019ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8019da0 <__ieee754_fmod+0x20c>)
 8019caa:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	ddb9      	ble.n	8019c26 <__ieee754_fmod+0x92>
 8019cb2:	3a01      	subs	r2, #1
 8019cb4:	005b      	lsls	r3, r3, #1
 8019cb6:	e7fa      	b.n	8019cae <__ieee754_fmod+0x11a>
 8019cb8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8019cbc:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8019cc0:	e7b1      	b.n	8019c26 <__ieee754_fmod+0x92>
 8019cc2:	1a40      	subs	r0, r0, r1
 8019cc4:	281f      	cmp	r0, #31
 8019cc6:	dc0a      	bgt.n	8019cde <__ieee754_fmod+0x14a>
 8019cc8:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8019ccc:	fa08 f800 	lsl.w	r8, r8, r0
 8019cd0:	fa2a f303 	lsr.w	r3, sl, r3
 8019cd4:	ea43 0308 	orr.w	r3, r3, r8
 8019cd8:	fa0a f400 	lsl.w	r4, sl, r0
 8019cdc:	e7aa      	b.n	8019c34 <__ieee754_fmod+0xa0>
 8019cde:	4b31      	ldr	r3, [pc, #196]	@ (8019da4 <__ieee754_fmod+0x210>)
 8019ce0:	1a5b      	subs	r3, r3, r1
 8019ce2:	fa0a f303 	lsl.w	r3, sl, r3
 8019ce6:	2400      	movs	r4, #0
 8019ce8:	e7a4      	b.n	8019c34 <__ieee754_fmod+0xa0>
 8019cea:	1a80      	subs	r0, r0, r2
 8019cec:	281f      	cmp	r0, #31
 8019cee:	dc0a      	bgt.n	8019d06 <__ieee754_fmod+0x172>
 8019cf0:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8019cf4:	fa0c fc00 	lsl.w	ip, ip, r0
 8019cf8:	fa27 f606 	lsr.w	r6, r7, r6
 8019cfc:	ea46 060c 	orr.w	r6, r6, ip
 8019d00:	fa07 fe00 	lsl.w	lr, r7, r0
 8019d04:	e79d      	b.n	8019c42 <__ieee754_fmod+0xae>
 8019d06:	4e27      	ldr	r6, [pc, #156]	@ (8019da4 <__ieee754_fmod+0x210>)
 8019d08:	1ab6      	subs	r6, r6, r2
 8019d0a:	fa07 f606 	lsl.w	r6, r7, r6
 8019d0e:	f04f 0e00 	mov.w	lr, #0
 8019d12:	e796      	b.n	8019c42 <__ieee754_fmod+0xae>
 8019d14:	4574      	cmp	r4, lr
 8019d16:	bf38      	it	cc
 8019d18:	f100 30ff 	addcc.w	r0, r0, #4294967295	@ 0xffffffff
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	da05      	bge.n	8019d2c <__ieee754_fmod+0x198>
 8019d20:	0fe0      	lsrs	r0, r4, #31
 8019d22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d26:	0064      	lsls	r4, r4, #1
 8019d28:	3901      	subs	r1, #1
 8019d2a:	e78b      	b.n	8019c44 <__ieee754_fmod+0xb0>
 8019d2c:	ea50 0307 	orrs.w	r3, r0, r7
 8019d30:	f43f af5f 	beq.w	8019bf2 <__ieee754_fmod+0x5e>
 8019d34:	0ffb      	lsrs	r3, r7, #31
 8019d36:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8019d3a:	007c      	lsls	r4, r7, #1
 8019d3c:	e7f4      	b.n	8019d28 <__ieee754_fmod+0x194>
 8019d3e:	0fe1      	lsrs	r1, r4, #31
 8019d40:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8019d44:	0064      	lsls	r4, r4, #1
 8019d46:	3a01      	subs	r2, #1
 8019d48:	e78c      	b.n	8019c64 <__ieee754_fmod+0xd0>
 8019d4a:	1a89      	subs	r1, r1, r2
 8019d4c:	2914      	cmp	r1, #20
 8019d4e:	dc0a      	bgt.n	8019d66 <__ieee754_fmod+0x1d2>
 8019d50:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8019d54:	fa03 f202 	lsl.w	r2, r3, r2
 8019d58:	40cc      	lsrs	r4, r1
 8019d5a:	4322      	orrs	r2, r4
 8019d5c:	410b      	asrs	r3, r1
 8019d5e:	ea43 0105 	orr.w	r1, r3, r5
 8019d62:	4610      	mov	r0, r2
 8019d64:	e737      	b.n	8019bd6 <__ieee754_fmod+0x42>
 8019d66:	291f      	cmp	r1, #31
 8019d68:	dc07      	bgt.n	8019d7a <__ieee754_fmod+0x1e6>
 8019d6a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8019d6e:	40cc      	lsrs	r4, r1
 8019d70:	fa03 f202 	lsl.w	r2, r3, r2
 8019d74:	4322      	orrs	r2, r4
 8019d76:	462b      	mov	r3, r5
 8019d78:	e7f1      	b.n	8019d5e <__ieee754_fmod+0x1ca>
 8019d7a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8019d7e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8019d82:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8019d86:	32e2      	adds	r2, #226	@ 0xe2
 8019d88:	fa43 f202 	asr.w	r2, r3, r2
 8019d8c:	e7f3      	b.n	8019d76 <__ieee754_fmod+0x1e2>
 8019d8e:	bf00      	nop
 8019d90:	7fefffff 	.word	0x7fefffff
 8019d94:	7ff00000 	.word	0x7ff00000
 8019d98:	0801bc18 	.word	0x0801bc18
 8019d9c:	fffffbed 	.word	0xfffffbed
 8019da0:	fffffc02 	.word	0xfffffc02
 8019da4:	fffffbe2 	.word	0xfffffbe2

08019da8 <__ieee754_rem_pio2>:
 8019da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dac:	ec57 6b10 	vmov	r6, r7, d0
 8019db0:	4bc5      	ldr	r3, [pc, #788]	@ (801a0c8 <__ieee754_rem_pio2+0x320>)
 8019db2:	b08d      	sub	sp, #52	@ 0x34
 8019db4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8019db8:	4598      	cmp	r8, r3
 8019dba:	4604      	mov	r4, r0
 8019dbc:	9704      	str	r7, [sp, #16]
 8019dbe:	d807      	bhi.n	8019dd0 <__ieee754_rem_pio2+0x28>
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	ed80 0b00 	vstr	d0, [r0]
 8019dc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019dcc:	2500      	movs	r5, #0
 8019dce:	e028      	b.n	8019e22 <__ieee754_rem_pio2+0x7a>
 8019dd0:	4bbe      	ldr	r3, [pc, #760]	@ (801a0cc <__ieee754_rem_pio2+0x324>)
 8019dd2:	4598      	cmp	r8, r3
 8019dd4:	d878      	bhi.n	8019ec8 <__ieee754_rem_pio2+0x120>
 8019dd6:	9b04      	ldr	r3, [sp, #16]
 8019dd8:	4dbd      	ldr	r5, [pc, #756]	@ (801a0d0 <__ieee754_rem_pio2+0x328>)
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	4630      	mov	r0, r6
 8019dde:	a3ac      	add	r3, pc, #688	@ (adr r3, 801a090 <__ieee754_rem_pio2+0x2e8>)
 8019de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019de4:	4639      	mov	r1, r7
 8019de6:	dd38      	ble.n	8019e5a <__ieee754_rem_pio2+0xb2>
 8019de8:	f7e6 fa7e 	bl	80002e8 <__aeabi_dsub>
 8019dec:	45a8      	cmp	r8, r5
 8019dee:	4606      	mov	r6, r0
 8019df0:	460f      	mov	r7, r1
 8019df2:	d01a      	beq.n	8019e2a <__ieee754_rem_pio2+0x82>
 8019df4:	a3a8      	add	r3, pc, #672	@ (adr r3, 801a098 <__ieee754_rem_pio2+0x2f0>)
 8019df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfa:	f7e6 fa75 	bl	80002e8 <__aeabi_dsub>
 8019dfe:	4602      	mov	r2, r0
 8019e00:	460b      	mov	r3, r1
 8019e02:	4680      	mov	r8, r0
 8019e04:	4689      	mov	r9, r1
 8019e06:	4630      	mov	r0, r6
 8019e08:	4639      	mov	r1, r7
 8019e0a:	f7e6 fa6d 	bl	80002e8 <__aeabi_dsub>
 8019e0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 801a098 <__ieee754_rem_pio2+0x2f0>)
 8019e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e14:	f7e6 fa68 	bl	80002e8 <__aeabi_dsub>
 8019e18:	e9c4 8900 	strd	r8, r9, [r4]
 8019e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e20:	2501      	movs	r5, #1
 8019e22:	4628      	mov	r0, r5
 8019e24:	b00d      	add	sp, #52	@ 0x34
 8019e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e2a:	a39d      	add	r3, pc, #628	@ (adr r3, 801a0a0 <__ieee754_rem_pio2+0x2f8>)
 8019e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e30:	f7e6 fa5a 	bl	80002e8 <__aeabi_dsub>
 8019e34:	a39c      	add	r3, pc, #624	@ (adr r3, 801a0a8 <__ieee754_rem_pio2+0x300>)
 8019e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3a:	4606      	mov	r6, r0
 8019e3c:	460f      	mov	r7, r1
 8019e3e:	f7e6 fa53 	bl	80002e8 <__aeabi_dsub>
 8019e42:	4602      	mov	r2, r0
 8019e44:	460b      	mov	r3, r1
 8019e46:	4680      	mov	r8, r0
 8019e48:	4689      	mov	r9, r1
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	4639      	mov	r1, r7
 8019e4e:	f7e6 fa4b 	bl	80002e8 <__aeabi_dsub>
 8019e52:	a395      	add	r3, pc, #596	@ (adr r3, 801a0a8 <__ieee754_rem_pio2+0x300>)
 8019e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e58:	e7dc      	b.n	8019e14 <__ieee754_rem_pio2+0x6c>
 8019e5a:	f7e6 fa47 	bl	80002ec <__adddf3>
 8019e5e:	45a8      	cmp	r8, r5
 8019e60:	4606      	mov	r6, r0
 8019e62:	460f      	mov	r7, r1
 8019e64:	d018      	beq.n	8019e98 <__ieee754_rem_pio2+0xf0>
 8019e66:	a38c      	add	r3, pc, #560	@ (adr r3, 801a098 <__ieee754_rem_pio2+0x2f0>)
 8019e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e6c:	f7e6 fa3e 	bl	80002ec <__adddf3>
 8019e70:	4602      	mov	r2, r0
 8019e72:	460b      	mov	r3, r1
 8019e74:	4680      	mov	r8, r0
 8019e76:	4689      	mov	r9, r1
 8019e78:	4630      	mov	r0, r6
 8019e7a:	4639      	mov	r1, r7
 8019e7c:	f7e6 fa34 	bl	80002e8 <__aeabi_dsub>
 8019e80:	a385      	add	r3, pc, #532	@ (adr r3, 801a098 <__ieee754_rem_pio2+0x2f0>)
 8019e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e86:	f7e6 fa31 	bl	80002ec <__adddf3>
 8019e8a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019e8e:	e9c4 8900 	strd	r8, r9, [r4]
 8019e92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e96:	e7c4      	b.n	8019e22 <__ieee754_rem_pio2+0x7a>
 8019e98:	a381      	add	r3, pc, #516	@ (adr r3, 801a0a0 <__ieee754_rem_pio2+0x2f8>)
 8019e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e9e:	f7e6 fa25 	bl	80002ec <__adddf3>
 8019ea2:	a381      	add	r3, pc, #516	@ (adr r3, 801a0a8 <__ieee754_rem_pio2+0x300>)
 8019ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea8:	4606      	mov	r6, r0
 8019eaa:	460f      	mov	r7, r1
 8019eac:	f7e6 fa1e 	bl	80002ec <__adddf3>
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	460b      	mov	r3, r1
 8019eb4:	4680      	mov	r8, r0
 8019eb6:	4689      	mov	r9, r1
 8019eb8:	4630      	mov	r0, r6
 8019eba:	4639      	mov	r1, r7
 8019ebc:	f7e6 fa14 	bl	80002e8 <__aeabi_dsub>
 8019ec0:	a379      	add	r3, pc, #484	@ (adr r3, 801a0a8 <__ieee754_rem_pio2+0x300>)
 8019ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec6:	e7de      	b.n	8019e86 <__ieee754_rem_pio2+0xde>
 8019ec8:	4b82      	ldr	r3, [pc, #520]	@ (801a0d4 <__ieee754_rem_pio2+0x32c>)
 8019eca:	4598      	cmp	r8, r3
 8019ecc:	f200 80d1 	bhi.w	801a072 <__ieee754_rem_pio2+0x2ca>
 8019ed0:	f000 f966 	bl	801a1a0 <fabs>
 8019ed4:	ec57 6b10 	vmov	r6, r7, d0
 8019ed8:	a375      	add	r3, pc, #468	@ (adr r3, 801a0b0 <__ieee754_rem_pio2+0x308>)
 8019eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ede:	4630      	mov	r0, r6
 8019ee0:	4639      	mov	r1, r7
 8019ee2:	f7e6 fbb9 	bl	8000658 <__aeabi_dmul>
 8019ee6:	4b7c      	ldr	r3, [pc, #496]	@ (801a0d8 <__ieee754_rem_pio2+0x330>)
 8019ee8:	2200      	movs	r2, #0
 8019eea:	f7e6 f9ff 	bl	80002ec <__adddf3>
 8019eee:	f7e6 fe63 	bl	8000bb8 <__aeabi_d2iz>
 8019ef2:	4605      	mov	r5, r0
 8019ef4:	f7e6 fb46 	bl	8000584 <__aeabi_i2d>
 8019ef8:	4602      	mov	r2, r0
 8019efa:	460b      	mov	r3, r1
 8019efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019f00:	a363      	add	r3, pc, #396	@ (adr r3, 801a090 <__ieee754_rem_pio2+0x2e8>)
 8019f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f06:	f7e6 fba7 	bl	8000658 <__aeabi_dmul>
 8019f0a:	4602      	mov	r2, r0
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	4630      	mov	r0, r6
 8019f10:	4639      	mov	r1, r7
 8019f12:	f7e6 f9e9 	bl	80002e8 <__aeabi_dsub>
 8019f16:	a360      	add	r3, pc, #384	@ (adr r3, 801a098 <__ieee754_rem_pio2+0x2f0>)
 8019f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f1c:	4682      	mov	sl, r0
 8019f1e:	468b      	mov	fp, r1
 8019f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f24:	f7e6 fb98 	bl	8000658 <__aeabi_dmul>
 8019f28:	2d1f      	cmp	r5, #31
 8019f2a:	4606      	mov	r6, r0
 8019f2c:	460f      	mov	r7, r1
 8019f2e:	dc0c      	bgt.n	8019f4a <__ieee754_rem_pio2+0x1a2>
 8019f30:	4b6a      	ldr	r3, [pc, #424]	@ (801a0dc <__ieee754_rem_pio2+0x334>)
 8019f32:	1e6a      	subs	r2, r5, #1
 8019f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f38:	4543      	cmp	r3, r8
 8019f3a:	d006      	beq.n	8019f4a <__ieee754_rem_pio2+0x1a2>
 8019f3c:	4632      	mov	r2, r6
 8019f3e:	463b      	mov	r3, r7
 8019f40:	4650      	mov	r0, sl
 8019f42:	4659      	mov	r1, fp
 8019f44:	f7e6 f9d0 	bl	80002e8 <__aeabi_dsub>
 8019f48:	e00e      	b.n	8019f68 <__ieee754_rem_pio2+0x1c0>
 8019f4a:	463b      	mov	r3, r7
 8019f4c:	4632      	mov	r2, r6
 8019f4e:	4650      	mov	r0, sl
 8019f50:	4659      	mov	r1, fp
 8019f52:	f7e6 f9c9 	bl	80002e8 <__aeabi_dsub>
 8019f56:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019f5a:	9305      	str	r3, [sp, #20]
 8019f5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019f60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8019f64:	2b10      	cmp	r3, #16
 8019f66:	dc02      	bgt.n	8019f6e <__ieee754_rem_pio2+0x1c6>
 8019f68:	e9c4 0100 	strd	r0, r1, [r4]
 8019f6c:	e039      	b.n	8019fe2 <__ieee754_rem_pio2+0x23a>
 8019f6e:	a34c      	add	r3, pc, #304	@ (adr r3, 801a0a0 <__ieee754_rem_pio2+0x2f8>)
 8019f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f78:	f7e6 fb6e 	bl	8000658 <__aeabi_dmul>
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	460f      	mov	r7, r1
 8019f80:	4602      	mov	r2, r0
 8019f82:	460b      	mov	r3, r1
 8019f84:	4650      	mov	r0, sl
 8019f86:	4659      	mov	r1, fp
 8019f88:	f7e6 f9ae 	bl	80002e8 <__aeabi_dsub>
 8019f8c:	4602      	mov	r2, r0
 8019f8e:	460b      	mov	r3, r1
 8019f90:	4680      	mov	r8, r0
 8019f92:	4689      	mov	r9, r1
 8019f94:	4650      	mov	r0, sl
 8019f96:	4659      	mov	r1, fp
 8019f98:	f7e6 f9a6 	bl	80002e8 <__aeabi_dsub>
 8019f9c:	4632      	mov	r2, r6
 8019f9e:	463b      	mov	r3, r7
 8019fa0:	f7e6 f9a2 	bl	80002e8 <__aeabi_dsub>
 8019fa4:	a340      	add	r3, pc, #256	@ (adr r3, 801a0a8 <__ieee754_rem_pio2+0x300>)
 8019fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019faa:	4606      	mov	r6, r0
 8019fac:	460f      	mov	r7, r1
 8019fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fb2:	f7e6 fb51 	bl	8000658 <__aeabi_dmul>
 8019fb6:	4632      	mov	r2, r6
 8019fb8:	463b      	mov	r3, r7
 8019fba:	f7e6 f995 	bl	80002e8 <__aeabi_dsub>
 8019fbe:	4602      	mov	r2, r0
 8019fc0:	460b      	mov	r3, r1
 8019fc2:	4606      	mov	r6, r0
 8019fc4:	460f      	mov	r7, r1
 8019fc6:	4640      	mov	r0, r8
 8019fc8:	4649      	mov	r1, r9
 8019fca:	f7e6 f98d 	bl	80002e8 <__aeabi_dsub>
 8019fce:	9a05      	ldr	r2, [sp, #20]
 8019fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019fd4:	1ad3      	subs	r3, r2, r3
 8019fd6:	2b31      	cmp	r3, #49	@ 0x31
 8019fd8:	dc20      	bgt.n	801a01c <__ieee754_rem_pio2+0x274>
 8019fda:	e9c4 0100 	strd	r0, r1, [r4]
 8019fde:	46c2      	mov	sl, r8
 8019fe0:	46cb      	mov	fp, r9
 8019fe2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019fe6:	4650      	mov	r0, sl
 8019fe8:	4642      	mov	r2, r8
 8019fea:	464b      	mov	r3, r9
 8019fec:	4659      	mov	r1, fp
 8019fee:	f7e6 f97b 	bl	80002e8 <__aeabi_dsub>
 8019ff2:	463b      	mov	r3, r7
 8019ff4:	4632      	mov	r2, r6
 8019ff6:	f7e6 f977 	bl	80002e8 <__aeabi_dsub>
 8019ffa:	9b04      	ldr	r3, [sp, #16]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a002:	f6bf af0e 	bge.w	8019e22 <__ieee754_rem_pio2+0x7a>
 801a006:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801a00a:	6063      	str	r3, [r4, #4]
 801a00c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a010:	f8c4 8000 	str.w	r8, [r4]
 801a014:	60a0      	str	r0, [r4, #8]
 801a016:	60e3      	str	r3, [r4, #12]
 801a018:	426d      	negs	r5, r5
 801a01a:	e702      	b.n	8019e22 <__ieee754_rem_pio2+0x7a>
 801a01c:	a326      	add	r3, pc, #152	@ (adr r3, 801a0b8 <__ieee754_rem_pio2+0x310>)
 801a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a026:	f7e6 fb17 	bl	8000658 <__aeabi_dmul>
 801a02a:	4606      	mov	r6, r0
 801a02c:	460f      	mov	r7, r1
 801a02e:	4602      	mov	r2, r0
 801a030:	460b      	mov	r3, r1
 801a032:	4640      	mov	r0, r8
 801a034:	4649      	mov	r1, r9
 801a036:	f7e6 f957 	bl	80002e8 <__aeabi_dsub>
 801a03a:	4602      	mov	r2, r0
 801a03c:	460b      	mov	r3, r1
 801a03e:	4682      	mov	sl, r0
 801a040:	468b      	mov	fp, r1
 801a042:	4640      	mov	r0, r8
 801a044:	4649      	mov	r1, r9
 801a046:	f7e6 f94f 	bl	80002e8 <__aeabi_dsub>
 801a04a:	4632      	mov	r2, r6
 801a04c:	463b      	mov	r3, r7
 801a04e:	f7e6 f94b 	bl	80002e8 <__aeabi_dsub>
 801a052:	a31b      	add	r3, pc, #108	@ (adr r3, 801a0c0 <__ieee754_rem_pio2+0x318>)
 801a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a058:	4606      	mov	r6, r0
 801a05a:	460f      	mov	r7, r1
 801a05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a060:	f7e6 fafa 	bl	8000658 <__aeabi_dmul>
 801a064:	4632      	mov	r2, r6
 801a066:	463b      	mov	r3, r7
 801a068:	f7e6 f93e 	bl	80002e8 <__aeabi_dsub>
 801a06c:	4606      	mov	r6, r0
 801a06e:	460f      	mov	r7, r1
 801a070:	e764      	b.n	8019f3c <__ieee754_rem_pio2+0x194>
 801a072:	4b1b      	ldr	r3, [pc, #108]	@ (801a0e0 <__ieee754_rem_pio2+0x338>)
 801a074:	4598      	cmp	r8, r3
 801a076:	d935      	bls.n	801a0e4 <__ieee754_rem_pio2+0x33c>
 801a078:	4632      	mov	r2, r6
 801a07a:	463b      	mov	r3, r7
 801a07c:	4630      	mov	r0, r6
 801a07e:	4639      	mov	r1, r7
 801a080:	f7e6 f932 	bl	80002e8 <__aeabi_dsub>
 801a084:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a088:	e9c4 0100 	strd	r0, r1, [r4]
 801a08c:	e69e      	b.n	8019dcc <__ieee754_rem_pio2+0x24>
 801a08e:	bf00      	nop
 801a090:	54400000 	.word	0x54400000
 801a094:	3ff921fb 	.word	0x3ff921fb
 801a098:	1a626331 	.word	0x1a626331
 801a09c:	3dd0b461 	.word	0x3dd0b461
 801a0a0:	1a600000 	.word	0x1a600000
 801a0a4:	3dd0b461 	.word	0x3dd0b461
 801a0a8:	2e037073 	.word	0x2e037073
 801a0ac:	3ba3198a 	.word	0x3ba3198a
 801a0b0:	6dc9c883 	.word	0x6dc9c883
 801a0b4:	3fe45f30 	.word	0x3fe45f30
 801a0b8:	2e000000 	.word	0x2e000000
 801a0bc:	3ba3198a 	.word	0x3ba3198a
 801a0c0:	252049c1 	.word	0x252049c1
 801a0c4:	397b839a 	.word	0x397b839a
 801a0c8:	3fe921fb 	.word	0x3fe921fb
 801a0cc:	4002d97b 	.word	0x4002d97b
 801a0d0:	3ff921fb 	.word	0x3ff921fb
 801a0d4:	413921fb 	.word	0x413921fb
 801a0d8:	3fe00000 	.word	0x3fe00000
 801a0dc:	0801bc28 	.word	0x0801bc28
 801a0e0:	7fefffff 	.word	0x7fefffff
 801a0e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a0e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801a0ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a0f0:	4630      	mov	r0, r6
 801a0f2:	460f      	mov	r7, r1
 801a0f4:	f7e6 fd60 	bl	8000bb8 <__aeabi_d2iz>
 801a0f8:	f7e6 fa44 	bl	8000584 <__aeabi_i2d>
 801a0fc:	4602      	mov	r2, r0
 801a0fe:	460b      	mov	r3, r1
 801a100:	4630      	mov	r0, r6
 801a102:	4639      	mov	r1, r7
 801a104:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a108:	f7e6 f8ee 	bl	80002e8 <__aeabi_dsub>
 801a10c:	4b22      	ldr	r3, [pc, #136]	@ (801a198 <__ieee754_rem_pio2+0x3f0>)
 801a10e:	2200      	movs	r2, #0
 801a110:	f7e6 faa2 	bl	8000658 <__aeabi_dmul>
 801a114:	460f      	mov	r7, r1
 801a116:	4606      	mov	r6, r0
 801a118:	f7e6 fd4e 	bl	8000bb8 <__aeabi_d2iz>
 801a11c:	f7e6 fa32 	bl	8000584 <__aeabi_i2d>
 801a120:	4602      	mov	r2, r0
 801a122:	460b      	mov	r3, r1
 801a124:	4630      	mov	r0, r6
 801a126:	4639      	mov	r1, r7
 801a128:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a12c:	f7e6 f8dc 	bl	80002e8 <__aeabi_dsub>
 801a130:	4b19      	ldr	r3, [pc, #100]	@ (801a198 <__ieee754_rem_pio2+0x3f0>)
 801a132:	2200      	movs	r2, #0
 801a134:	f7e6 fa90 	bl	8000658 <__aeabi_dmul>
 801a138:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801a13c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801a140:	f04f 0803 	mov.w	r8, #3
 801a144:	2600      	movs	r6, #0
 801a146:	2700      	movs	r7, #0
 801a148:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a14c:	4632      	mov	r2, r6
 801a14e:	463b      	mov	r3, r7
 801a150:	46c2      	mov	sl, r8
 801a152:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a156:	f7e6 fce7 	bl	8000b28 <__aeabi_dcmpeq>
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d1f4      	bne.n	801a148 <__ieee754_rem_pio2+0x3a0>
 801a15e:	4b0f      	ldr	r3, [pc, #60]	@ (801a19c <__ieee754_rem_pio2+0x3f4>)
 801a160:	9301      	str	r3, [sp, #4]
 801a162:	2302      	movs	r3, #2
 801a164:	9300      	str	r3, [sp, #0]
 801a166:	462a      	mov	r2, r5
 801a168:	4653      	mov	r3, sl
 801a16a:	4621      	mov	r1, r4
 801a16c:	a806      	add	r0, sp, #24
 801a16e:	f000 f81f 	bl	801a1b0 <__kernel_rem_pio2>
 801a172:	9b04      	ldr	r3, [sp, #16]
 801a174:	2b00      	cmp	r3, #0
 801a176:	4605      	mov	r5, r0
 801a178:	f6bf ae53 	bge.w	8019e22 <__ieee754_rem_pio2+0x7a>
 801a17c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801a180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a184:	e9c4 2300 	strd	r2, r3, [r4]
 801a188:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801a18c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a190:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801a194:	e740      	b.n	801a018 <__ieee754_rem_pio2+0x270>
 801a196:	bf00      	nop
 801a198:	41700000 	.word	0x41700000
 801a19c:	0801bca8 	.word	0x0801bca8

0801a1a0 <fabs>:
 801a1a0:	ec51 0b10 	vmov	r0, r1, d0
 801a1a4:	4602      	mov	r2, r0
 801a1a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a1aa:	ec43 2b10 	vmov	d0, r2, r3
 801a1ae:	4770      	bx	lr

0801a1b0 <__kernel_rem_pio2>:
 801a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b4:	ed2d 8b02 	vpush	{d8}
 801a1b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801a1bc:	f112 0f14 	cmn.w	r2, #20
 801a1c0:	9306      	str	r3, [sp, #24]
 801a1c2:	9104      	str	r1, [sp, #16]
 801a1c4:	4bbe      	ldr	r3, [pc, #760]	@ (801a4c0 <__kernel_rem_pio2+0x310>)
 801a1c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801a1c8:	9008      	str	r0, [sp, #32]
 801a1ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a1ce:	9300      	str	r3, [sp, #0]
 801a1d0:	9b06      	ldr	r3, [sp, #24]
 801a1d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a1d6:	bfa8      	it	ge
 801a1d8:	1ed4      	subge	r4, r2, #3
 801a1da:	9305      	str	r3, [sp, #20]
 801a1dc:	bfb2      	itee	lt
 801a1de:	2400      	movlt	r4, #0
 801a1e0:	2318      	movge	r3, #24
 801a1e2:	fb94 f4f3 	sdivge	r4, r4, r3
 801a1e6:	f06f 0317 	mvn.w	r3, #23
 801a1ea:	fb04 3303 	mla	r3, r4, r3, r3
 801a1ee:	eb03 0b02 	add.w	fp, r3, r2
 801a1f2:	9b00      	ldr	r3, [sp, #0]
 801a1f4:	9a05      	ldr	r2, [sp, #20]
 801a1f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801a4b0 <__kernel_rem_pio2+0x300>
 801a1fa:	eb03 0802 	add.w	r8, r3, r2
 801a1fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a200:	1aa7      	subs	r7, r4, r2
 801a202:	ae20      	add	r6, sp, #128	@ 0x80
 801a204:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a208:	2500      	movs	r5, #0
 801a20a:	4545      	cmp	r5, r8
 801a20c:	dd13      	ble.n	801a236 <__kernel_rem_pio2+0x86>
 801a20e:	9b06      	ldr	r3, [sp, #24]
 801a210:	aa20      	add	r2, sp, #128	@ 0x80
 801a212:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a216:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801a21a:	f04f 0800 	mov.w	r8, #0
 801a21e:	9b00      	ldr	r3, [sp, #0]
 801a220:	4598      	cmp	r8, r3
 801a222:	dc31      	bgt.n	801a288 <__kernel_rem_pio2+0xd8>
 801a224:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801a4b0 <__kernel_rem_pio2+0x300>
 801a228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a22c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a230:	462f      	mov	r7, r5
 801a232:	2600      	movs	r6, #0
 801a234:	e01b      	b.n	801a26e <__kernel_rem_pio2+0xbe>
 801a236:	42ef      	cmn	r7, r5
 801a238:	d407      	bmi.n	801a24a <__kernel_rem_pio2+0x9a>
 801a23a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a23e:	f7e6 f9a1 	bl	8000584 <__aeabi_i2d>
 801a242:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a246:	3501      	adds	r5, #1
 801a248:	e7df      	b.n	801a20a <__kernel_rem_pio2+0x5a>
 801a24a:	ec51 0b18 	vmov	r0, r1, d8
 801a24e:	e7f8      	b.n	801a242 <__kernel_rem_pio2+0x92>
 801a250:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a254:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a258:	f7e6 f9fe 	bl	8000658 <__aeabi_dmul>
 801a25c:	4602      	mov	r2, r0
 801a25e:	460b      	mov	r3, r1
 801a260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a264:	f7e6 f842 	bl	80002ec <__adddf3>
 801a268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a26c:	3601      	adds	r6, #1
 801a26e:	9b05      	ldr	r3, [sp, #20]
 801a270:	429e      	cmp	r6, r3
 801a272:	f1a7 0708 	sub.w	r7, r7, #8
 801a276:	ddeb      	ble.n	801a250 <__kernel_rem_pio2+0xa0>
 801a278:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a27c:	f108 0801 	add.w	r8, r8, #1
 801a280:	ecaa 7b02 	vstmia	sl!, {d7}
 801a284:	3508      	adds	r5, #8
 801a286:	e7ca      	b.n	801a21e <__kernel_rem_pio2+0x6e>
 801a288:	9b00      	ldr	r3, [sp, #0]
 801a28a:	f8dd 8000 	ldr.w	r8, [sp]
 801a28e:	aa0c      	add	r2, sp, #48	@ 0x30
 801a290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a294:	930a      	str	r3, [sp, #40]	@ 0x28
 801a296:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a298:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a29c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a29e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a2a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2a4:	ab98      	add	r3, sp, #608	@ 0x260
 801a2a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801a2ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2b2:	ac0c      	add	r4, sp, #48	@ 0x30
 801a2b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a2b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801a2ba:	46a1      	mov	r9, r4
 801a2bc:	46c2      	mov	sl, r8
 801a2be:	f1ba 0f00 	cmp.w	sl, #0
 801a2c2:	f1a5 0508 	sub.w	r5, r5, #8
 801a2c6:	dc77      	bgt.n	801a3b8 <__kernel_rem_pio2+0x208>
 801a2c8:	4658      	mov	r0, fp
 801a2ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 801a2ce:	f000 fac7 	bl	801a860 <scalbn>
 801a2d2:	ec57 6b10 	vmov	r6, r7, d0
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801a2dc:	4630      	mov	r0, r6
 801a2de:	4639      	mov	r1, r7
 801a2e0:	f7e6 f9ba 	bl	8000658 <__aeabi_dmul>
 801a2e4:	ec41 0b10 	vmov	d0, r0, r1
 801a2e8:	f000 fb3a 	bl	801a960 <floor>
 801a2ec:	4b75      	ldr	r3, [pc, #468]	@ (801a4c4 <__kernel_rem_pio2+0x314>)
 801a2ee:	ec51 0b10 	vmov	r0, r1, d0
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	f7e6 f9b0 	bl	8000658 <__aeabi_dmul>
 801a2f8:	4602      	mov	r2, r0
 801a2fa:	460b      	mov	r3, r1
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	4639      	mov	r1, r7
 801a300:	f7e5 fff2 	bl	80002e8 <__aeabi_dsub>
 801a304:	460f      	mov	r7, r1
 801a306:	4606      	mov	r6, r0
 801a308:	f7e6 fc56 	bl	8000bb8 <__aeabi_d2iz>
 801a30c:	9002      	str	r0, [sp, #8]
 801a30e:	f7e6 f939 	bl	8000584 <__aeabi_i2d>
 801a312:	4602      	mov	r2, r0
 801a314:	460b      	mov	r3, r1
 801a316:	4630      	mov	r0, r6
 801a318:	4639      	mov	r1, r7
 801a31a:	f7e5 ffe5 	bl	80002e8 <__aeabi_dsub>
 801a31e:	f1bb 0f00 	cmp.w	fp, #0
 801a322:	4606      	mov	r6, r0
 801a324:	460f      	mov	r7, r1
 801a326:	dd6c      	ble.n	801a402 <__kernel_rem_pio2+0x252>
 801a328:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801a32c:	ab0c      	add	r3, sp, #48	@ 0x30
 801a32e:	9d02      	ldr	r5, [sp, #8]
 801a330:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a334:	f1cb 0018 	rsb	r0, fp, #24
 801a338:	fa43 f200 	asr.w	r2, r3, r0
 801a33c:	4415      	add	r5, r2
 801a33e:	4082      	lsls	r2, r0
 801a340:	1a9b      	subs	r3, r3, r2
 801a342:	aa0c      	add	r2, sp, #48	@ 0x30
 801a344:	9502      	str	r5, [sp, #8]
 801a346:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a34a:	f1cb 0217 	rsb	r2, fp, #23
 801a34e:	fa43 f902 	asr.w	r9, r3, r2
 801a352:	f1b9 0f00 	cmp.w	r9, #0
 801a356:	dd64      	ble.n	801a422 <__kernel_rem_pio2+0x272>
 801a358:	9b02      	ldr	r3, [sp, #8]
 801a35a:	2200      	movs	r2, #0
 801a35c:	3301      	adds	r3, #1
 801a35e:	9302      	str	r3, [sp, #8]
 801a360:	4615      	mov	r5, r2
 801a362:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801a366:	4590      	cmp	r8, r2
 801a368:	f300 80b8 	bgt.w	801a4dc <__kernel_rem_pio2+0x32c>
 801a36c:	f1bb 0f00 	cmp.w	fp, #0
 801a370:	dd07      	ble.n	801a382 <__kernel_rem_pio2+0x1d2>
 801a372:	f1bb 0f01 	cmp.w	fp, #1
 801a376:	f000 80bf 	beq.w	801a4f8 <__kernel_rem_pio2+0x348>
 801a37a:	f1bb 0f02 	cmp.w	fp, #2
 801a37e:	f000 80c6 	beq.w	801a50e <__kernel_rem_pio2+0x35e>
 801a382:	f1b9 0f02 	cmp.w	r9, #2
 801a386:	d14c      	bne.n	801a422 <__kernel_rem_pio2+0x272>
 801a388:	4632      	mov	r2, r6
 801a38a:	463b      	mov	r3, r7
 801a38c:	494e      	ldr	r1, [pc, #312]	@ (801a4c8 <__kernel_rem_pio2+0x318>)
 801a38e:	2000      	movs	r0, #0
 801a390:	f7e5 ffaa 	bl	80002e8 <__aeabi_dsub>
 801a394:	4606      	mov	r6, r0
 801a396:	460f      	mov	r7, r1
 801a398:	2d00      	cmp	r5, #0
 801a39a:	d042      	beq.n	801a422 <__kernel_rem_pio2+0x272>
 801a39c:	4658      	mov	r0, fp
 801a39e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801a4b8 <__kernel_rem_pio2+0x308>
 801a3a2:	f000 fa5d 	bl	801a860 <scalbn>
 801a3a6:	4630      	mov	r0, r6
 801a3a8:	4639      	mov	r1, r7
 801a3aa:	ec53 2b10 	vmov	r2, r3, d0
 801a3ae:	f7e5 ff9b 	bl	80002e8 <__aeabi_dsub>
 801a3b2:	4606      	mov	r6, r0
 801a3b4:	460f      	mov	r7, r1
 801a3b6:	e034      	b.n	801a422 <__kernel_rem_pio2+0x272>
 801a3b8:	4b44      	ldr	r3, [pc, #272]	@ (801a4cc <__kernel_rem_pio2+0x31c>)
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3c0:	f7e6 f94a 	bl	8000658 <__aeabi_dmul>
 801a3c4:	f7e6 fbf8 	bl	8000bb8 <__aeabi_d2iz>
 801a3c8:	f7e6 f8dc 	bl	8000584 <__aeabi_i2d>
 801a3cc:	4b40      	ldr	r3, [pc, #256]	@ (801a4d0 <__kernel_rem_pio2+0x320>)
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	4606      	mov	r6, r0
 801a3d2:	460f      	mov	r7, r1
 801a3d4:	f7e6 f940 	bl	8000658 <__aeabi_dmul>
 801a3d8:	4602      	mov	r2, r0
 801a3da:	460b      	mov	r3, r1
 801a3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3e0:	f7e5 ff82 	bl	80002e8 <__aeabi_dsub>
 801a3e4:	f7e6 fbe8 	bl	8000bb8 <__aeabi_d2iz>
 801a3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a3ec:	f849 0b04 	str.w	r0, [r9], #4
 801a3f0:	4639      	mov	r1, r7
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f7e5 ff7a 	bl	80002ec <__adddf3>
 801a3f8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a400:	e75d      	b.n	801a2be <__kernel_rem_pio2+0x10e>
 801a402:	d107      	bne.n	801a414 <__kernel_rem_pio2+0x264>
 801a404:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801a408:	aa0c      	add	r2, sp, #48	@ 0x30
 801a40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a40e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801a412:	e79e      	b.n	801a352 <__kernel_rem_pio2+0x1a2>
 801a414:	4b2f      	ldr	r3, [pc, #188]	@ (801a4d4 <__kernel_rem_pio2+0x324>)
 801a416:	2200      	movs	r2, #0
 801a418:	f7e6 fba4 	bl	8000b64 <__aeabi_dcmpge>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d143      	bne.n	801a4a8 <__kernel_rem_pio2+0x2f8>
 801a420:	4681      	mov	r9, r0
 801a422:	2200      	movs	r2, #0
 801a424:	2300      	movs	r3, #0
 801a426:	4630      	mov	r0, r6
 801a428:	4639      	mov	r1, r7
 801a42a:	f7e6 fb7d 	bl	8000b28 <__aeabi_dcmpeq>
 801a42e:	2800      	cmp	r0, #0
 801a430:	f000 80bf 	beq.w	801a5b2 <__kernel_rem_pio2+0x402>
 801a434:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801a438:	2200      	movs	r2, #0
 801a43a:	9900      	ldr	r1, [sp, #0]
 801a43c:	428b      	cmp	r3, r1
 801a43e:	da6e      	bge.n	801a51e <__kernel_rem_pio2+0x36e>
 801a440:	2a00      	cmp	r2, #0
 801a442:	f000 8089 	beq.w	801a558 <__kernel_rem_pio2+0x3a8>
 801a446:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a44a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a44c:	f1ab 0b18 	sub.w	fp, fp, #24
 801a450:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d0f6      	beq.n	801a446 <__kernel_rem_pio2+0x296>
 801a458:	4658      	mov	r0, fp
 801a45a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801a4b8 <__kernel_rem_pio2+0x308>
 801a45e:	f000 f9ff 	bl	801a860 <scalbn>
 801a462:	f108 0301 	add.w	r3, r8, #1
 801a466:	00da      	lsls	r2, r3, #3
 801a468:	9205      	str	r2, [sp, #20]
 801a46a:	ec55 4b10 	vmov	r4, r5, d0
 801a46e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801a470:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801a4cc <__kernel_rem_pio2+0x31c>
 801a474:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801a478:	4646      	mov	r6, r8
 801a47a:	f04f 0a00 	mov.w	sl, #0
 801a47e:	2e00      	cmp	r6, #0
 801a480:	f280 80cf 	bge.w	801a622 <__kernel_rem_pio2+0x472>
 801a484:	4644      	mov	r4, r8
 801a486:	2c00      	cmp	r4, #0
 801a488:	f2c0 80fd 	blt.w	801a686 <__kernel_rem_pio2+0x4d6>
 801a48c:	4b12      	ldr	r3, [pc, #72]	@ (801a4d8 <__kernel_rem_pio2+0x328>)
 801a48e:	461f      	mov	r7, r3
 801a490:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a496:	9306      	str	r3, [sp, #24]
 801a498:	f04f 0a00 	mov.w	sl, #0
 801a49c:	f04f 0b00 	mov.w	fp, #0
 801a4a0:	2600      	movs	r6, #0
 801a4a2:	eba8 0504 	sub.w	r5, r8, r4
 801a4a6:	e0e2      	b.n	801a66e <__kernel_rem_pio2+0x4be>
 801a4a8:	f04f 0902 	mov.w	r9, #2
 801a4ac:	e754      	b.n	801a358 <__kernel_rem_pio2+0x1a8>
 801a4ae:	bf00      	nop
	...
 801a4bc:	3ff00000 	.word	0x3ff00000
 801a4c0:	0801bdf0 	.word	0x0801bdf0
 801a4c4:	40200000 	.word	0x40200000
 801a4c8:	3ff00000 	.word	0x3ff00000
 801a4cc:	3e700000 	.word	0x3e700000
 801a4d0:	41700000 	.word	0x41700000
 801a4d4:	3fe00000 	.word	0x3fe00000
 801a4d8:	0801bdb0 	.word	0x0801bdb0
 801a4dc:	f854 3b04 	ldr.w	r3, [r4], #4
 801a4e0:	b945      	cbnz	r5, 801a4f4 <__kernel_rem_pio2+0x344>
 801a4e2:	b123      	cbz	r3, 801a4ee <__kernel_rem_pio2+0x33e>
 801a4e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801a4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	3201      	adds	r2, #1
 801a4f0:	461d      	mov	r5, r3
 801a4f2:	e738      	b.n	801a366 <__kernel_rem_pio2+0x1b6>
 801a4f4:	1acb      	subs	r3, r1, r3
 801a4f6:	e7f7      	b.n	801a4e8 <__kernel_rem_pio2+0x338>
 801a4f8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801a4fc:	ab0c      	add	r3, sp, #48	@ 0x30
 801a4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a502:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a506:	a90c      	add	r1, sp, #48	@ 0x30
 801a508:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a50c:	e739      	b.n	801a382 <__kernel_rem_pio2+0x1d2>
 801a50e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801a512:	ab0c      	add	r3, sp, #48	@ 0x30
 801a514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a518:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a51c:	e7f3      	b.n	801a506 <__kernel_rem_pio2+0x356>
 801a51e:	a90c      	add	r1, sp, #48	@ 0x30
 801a520:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a524:	3b01      	subs	r3, #1
 801a526:	430a      	orrs	r2, r1
 801a528:	e787      	b.n	801a43a <__kernel_rem_pio2+0x28a>
 801a52a:	3401      	adds	r4, #1
 801a52c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a530:	2a00      	cmp	r2, #0
 801a532:	d0fa      	beq.n	801a52a <__kernel_rem_pio2+0x37a>
 801a534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a536:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a53a:	eb0d 0503 	add.w	r5, sp, r3
 801a53e:	9b06      	ldr	r3, [sp, #24]
 801a540:	aa20      	add	r2, sp, #128	@ 0x80
 801a542:	4443      	add	r3, r8
 801a544:	f108 0701 	add.w	r7, r8, #1
 801a548:	3d98      	subs	r5, #152	@ 0x98
 801a54a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801a54e:	4444      	add	r4, r8
 801a550:	42bc      	cmp	r4, r7
 801a552:	da04      	bge.n	801a55e <__kernel_rem_pio2+0x3ae>
 801a554:	46a0      	mov	r8, r4
 801a556:	e6a2      	b.n	801a29e <__kernel_rem_pio2+0xee>
 801a558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a55a:	2401      	movs	r4, #1
 801a55c:	e7e6      	b.n	801a52c <__kernel_rem_pio2+0x37c>
 801a55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a560:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a564:	f7e6 f80e 	bl	8000584 <__aeabi_i2d>
 801a568:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801a830 <__kernel_rem_pio2+0x680>
 801a56c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a570:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a578:	46b2      	mov	sl, r6
 801a57a:	f04f 0800 	mov.w	r8, #0
 801a57e:	9b05      	ldr	r3, [sp, #20]
 801a580:	4598      	cmp	r8, r3
 801a582:	dd05      	ble.n	801a590 <__kernel_rem_pio2+0x3e0>
 801a584:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a588:	3701      	adds	r7, #1
 801a58a:	eca5 7b02 	vstmia	r5!, {d7}
 801a58e:	e7df      	b.n	801a550 <__kernel_rem_pio2+0x3a0>
 801a590:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801a594:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a598:	f7e6 f85e 	bl	8000658 <__aeabi_dmul>
 801a59c:	4602      	mov	r2, r0
 801a59e:	460b      	mov	r3, r1
 801a5a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5a4:	f7e5 fea2 	bl	80002ec <__adddf3>
 801a5a8:	f108 0801 	add.w	r8, r8, #1
 801a5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a5b0:	e7e5      	b.n	801a57e <__kernel_rem_pio2+0x3ce>
 801a5b2:	f1cb 0000 	rsb	r0, fp, #0
 801a5b6:	ec47 6b10 	vmov	d0, r6, r7
 801a5ba:	f000 f951 	bl	801a860 <scalbn>
 801a5be:	ec55 4b10 	vmov	r4, r5, d0
 801a5c2:	4b9d      	ldr	r3, [pc, #628]	@ (801a838 <__kernel_rem_pio2+0x688>)
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	4629      	mov	r1, r5
 801a5ca:	f7e6 facb 	bl	8000b64 <__aeabi_dcmpge>
 801a5ce:	b300      	cbz	r0, 801a612 <__kernel_rem_pio2+0x462>
 801a5d0:	4b9a      	ldr	r3, [pc, #616]	@ (801a83c <__kernel_rem_pio2+0x68c>)
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	4629      	mov	r1, r5
 801a5d8:	f7e6 f83e 	bl	8000658 <__aeabi_dmul>
 801a5dc:	f7e6 faec 	bl	8000bb8 <__aeabi_d2iz>
 801a5e0:	4606      	mov	r6, r0
 801a5e2:	f7e5 ffcf 	bl	8000584 <__aeabi_i2d>
 801a5e6:	4b94      	ldr	r3, [pc, #592]	@ (801a838 <__kernel_rem_pio2+0x688>)
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	f7e6 f835 	bl	8000658 <__aeabi_dmul>
 801a5ee:	460b      	mov	r3, r1
 801a5f0:	4602      	mov	r2, r0
 801a5f2:	4629      	mov	r1, r5
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	f7e5 fe77 	bl	80002e8 <__aeabi_dsub>
 801a5fa:	f7e6 fadd 	bl	8000bb8 <__aeabi_d2iz>
 801a5fe:	ab0c      	add	r3, sp, #48	@ 0x30
 801a600:	f10b 0b18 	add.w	fp, fp, #24
 801a604:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801a608:	f108 0801 	add.w	r8, r8, #1
 801a60c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801a610:	e722      	b.n	801a458 <__kernel_rem_pio2+0x2a8>
 801a612:	4620      	mov	r0, r4
 801a614:	4629      	mov	r1, r5
 801a616:	f7e6 facf 	bl	8000bb8 <__aeabi_d2iz>
 801a61a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a61c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801a620:	e71a      	b.n	801a458 <__kernel_rem_pio2+0x2a8>
 801a622:	ab0c      	add	r3, sp, #48	@ 0x30
 801a624:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a628:	f7e5 ffac 	bl	8000584 <__aeabi_i2d>
 801a62c:	4622      	mov	r2, r4
 801a62e:	462b      	mov	r3, r5
 801a630:	f7e6 f812 	bl	8000658 <__aeabi_dmul>
 801a634:	4652      	mov	r2, sl
 801a636:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801a63a:	465b      	mov	r3, fp
 801a63c:	4620      	mov	r0, r4
 801a63e:	4629      	mov	r1, r5
 801a640:	f7e6 f80a 	bl	8000658 <__aeabi_dmul>
 801a644:	3e01      	subs	r6, #1
 801a646:	4604      	mov	r4, r0
 801a648:	460d      	mov	r5, r1
 801a64a:	e718      	b.n	801a47e <__kernel_rem_pio2+0x2ce>
 801a64c:	9906      	ldr	r1, [sp, #24]
 801a64e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801a652:	9106      	str	r1, [sp, #24]
 801a654:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801a658:	f7e5 fffe 	bl	8000658 <__aeabi_dmul>
 801a65c:	4602      	mov	r2, r0
 801a65e:	460b      	mov	r3, r1
 801a660:	4650      	mov	r0, sl
 801a662:	4659      	mov	r1, fp
 801a664:	f7e5 fe42 	bl	80002ec <__adddf3>
 801a668:	3601      	adds	r6, #1
 801a66a:	4682      	mov	sl, r0
 801a66c:	468b      	mov	fp, r1
 801a66e:	9b00      	ldr	r3, [sp, #0]
 801a670:	429e      	cmp	r6, r3
 801a672:	dc01      	bgt.n	801a678 <__kernel_rem_pio2+0x4c8>
 801a674:	42b5      	cmp	r5, r6
 801a676:	dae9      	bge.n	801a64c <__kernel_rem_pio2+0x49c>
 801a678:	ab48      	add	r3, sp, #288	@ 0x120
 801a67a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a67e:	e9c5 ab00 	strd	sl, fp, [r5]
 801a682:	3c01      	subs	r4, #1
 801a684:	e6ff      	b.n	801a486 <__kernel_rem_pio2+0x2d6>
 801a686:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801a688:	2b02      	cmp	r3, #2
 801a68a:	dc0b      	bgt.n	801a6a4 <__kernel_rem_pio2+0x4f4>
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	dc39      	bgt.n	801a704 <__kernel_rem_pio2+0x554>
 801a690:	d05d      	beq.n	801a74e <__kernel_rem_pio2+0x59e>
 801a692:	9b02      	ldr	r3, [sp, #8]
 801a694:	f003 0007 	and.w	r0, r3, #7
 801a698:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801a69c:	ecbd 8b02 	vpop	{d8}
 801a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801a6a6:	2b03      	cmp	r3, #3
 801a6a8:	d1f3      	bne.n	801a692 <__kernel_rem_pio2+0x4e2>
 801a6aa:	9b05      	ldr	r3, [sp, #20]
 801a6ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a6b0:	eb0d 0403 	add.w	r4, sp, r3
 801a6b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801a6b8:	4625      	mov	r5, r4
 801a6ba:	46c2      	mov	sl, r8
 801a6bc:	f1ba 0f00 	cmp.w	sl, #0
 801a6c0:	f1a5 0508 	sub.w	r5, r5, #8
 801a6c4:	dc6b      	bgt.n	801a79e <__kernel_rem_pio2+0x5ee>
 801a6c6:	4645      	mov	r5, r8
 801a6c8:	2d01      	cmp	r5, #1
 801a6ca:	f1a4 0408 	sub.w	r4, r4, #8
 801a6ce:	f300 8087 	bgt.w	801a7e0 <__kernel_rem_pio2+0x630>
 801a6d2:	9c05      	ldr	r4, [sp, #20]
 801a6d4:	ab48      	add	r3, sp, #288	@ 0x120
 801a6d6:	441c      	add	r4, r3
 801a6d8:	2000      	movs	r0, #0
 801a6da:	2100      	movs	r1, #0
 801a6dc:	f1b8 0f01 	cmp.w	r8, #1
 801a6e0:	f300 809c 	bgt.w	801a81c <__kernel_rem_pio2+0x66c>
 801a6e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801a6e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801a6ec:	f1b9 0f00 	cmp.w	r9, #0
 801a6f0:	f040 80a6 	bne.w	801a840 <__kernel_rem_pio2+0x690>
 801a6f4:	9b04      	ldr	r3, [sp, #16]
 801a6f6:	e9c3 7800 	strd	r7, r8, [r3]
 801a6fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a6fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a702:	e7c6      	b.n	801a692 <__kernel_rem_pio2+0x4e2>
 801a704:	9d05      	ldr	r5, [sp, #20]
 801a706:	ab48      	add	r3, sp, #288	@ 0x120
 801a708:	441d      	add	r5, r3
 801a70a:	4644      	mov	r4, r8
 801a70c:	2000      	movs	r0, #0
 801a70e:	2100      	movs	r1, #0
 801a710:	2c00      	cmp	r4, #0
 801a712:	da35      	bge.n	801a780 <__kernel_rem_pio2+0x5d0>
 801a714:	f1b9 0f00 	cmp.w	r9, #0
 801a718:	d038      	beq.n	801a78c <__kernel_rem_pio2+0x5dc>
 801a71a:	4602      	mov	r2, r0
 801a71c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a720:	9c04      	ldr	r4, [sp, #16]
 801a722:	e9c4 2300 	strd	r2, r3, [r4]
 801a726:	4602      	mov	r2, r0
 801a728:	460b      	mov	r3, r1
 801a72a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801a72e:	f7e5 fddb 	bl	80002e8 <__aeabi_dsub>
 801a732:	ad4a      	add	r5, sp, #296	@ 0x128
 801a734:	2401      	movs	r4, #1
 801a736:	45a0      	cmp	r8, r4
 801a738:	da2b      	bge.n	801a792 <__kernel_rem_pio2+0x5e2>
 801a73a:	f1b9 0f00 	cmp.w	r9, #0
 801a73e:	d002      	beq.n	801a746 <__kernel_rem_pio2+0x596>
 801a740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a744:	4619      	mov	r1, r3
 801a746:	9b04      	ldr	r3, [sp, #16]
 801a748:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a74c:	e7a1      	b.n	801a692 <__kernel_rem_pio2+0x4e2>
 801a74e:	9c05      	ldr	r4, [sp, #20]
 801a750:	ab48      	add	r3, sp, #288	@ 0x120
 801a752:	441c      	add	r4, r3
 801a754:	2000      	movs	r0, #0
 801a756:	2100      	movs	r1, #0
 801a758:	f1b8 0f00 	cmp.w	r8, #0
 801a75c:	da09      	bge.n	801a772 <__kernel_rem_pio2+0x5c2>
 801a75e:	f1b9 0f00 	cmp.w	r9, #0
 801a762:	d002      	beq.n	801a76a <__kernel_rem_pio2+0x5ba>
 801a764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a768:	4619      	mov	r1, r3
 801a76a:	9b04      	ldr	r3, [sp, #16]
 801a76c:	e9c3 0100 	strd	r0, r1, [r3]
 801a770:	e78f      	b.n	801a692 <__kernel_rem_pio2+0x4e2>
 801a772:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a776:	f7e5 fdb9 	bl	80002ec <__adddf3>
 801a77a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a77e:	e7eb      	b.n	801a758 <__kernel_rem_pio2+0x5a8>
 801a780:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801a784:	f7e5 fdb2 	bl	80002ec <__adddf3>
 801a788:	3c01      	subs	r4, #1
 801a78a:	e7c1      	b.n	801a710 <__kernel_rem_pio2+0x560>
 801a78c:	4602      	mov	r2, r0
 801a78e:	460b      	mov	r3, r1
 801a790:	e7c6      	b.n	801a720 <__kernel_rem_pio2+0x570>
 801a792:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801a796:	f7e5 fda9 	bl	80002ec <__adddf3>
 801a79a:	3401      	adds	r4, #1
 801a79c:	e7cb      	b.n	801a736 <__kernel_rem_pio2+0x586>
 801a79e:	ed95 7b00 	vldr	d7, [r5]
 801a7a2:	ed8d 7b00 	vstr	d7, [sp]
 801a7a6:	ed95 7b02 	vldr	d7, [r5, #8]
 801a7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7ae:	ec53 2b17 	vmov	r2, r3, d7
 801a7b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a7b6:	f7e5 fd99 	bl	80002ec <__adddf3>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	4606      	mov	r6, r0
 801a7c0:	460f      	mov	r7, r1
 801a7c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7c6:	f7e5 fd8f 	bl	80002e8 <__aeabi_dsub>
 801a7ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7ce:	f7e5 fd8d 	bl	80002ec <__adddf3>
 801a7d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a7d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801a7da:	e9c5 6700 	strd	r6, r7, [r5]
 801a7de:	e76d      	b.n	801a6bc <__kernel_rem_pio2+0x50c>
 801a7e0:	ed94 7b00 	vldr	d7, [r4]
 801a7e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801a7e8:	ec51 0b17 	vmov	r0, r1, d7
 801a7ec:	4652      	mov	r2, sl
 801a7ee:	465b      	mov	r3, fp
 801a7f0:	ed8d 7b00 	vstr	d7, [sp]
 801a7f4:	f7e5 fd7a 	bl	80002ec <__adddf3>
 801a7f8:	4602      	mov	r2, r0
 801a7fa:	460b      	mov	r3, r1
 801a7fc:	4606      	mov	r6, r0
 801a7fe:	460f      	mov	r7, r1
 801a800:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a804:	f7e5 fd70 	bl	80002e8 <__aeabi_dsub>
 801a808:	4652      	mov	r2, sl
 801a80a:	465b      	mov	r3, fp
 801a80c:	f7e5 fd6e 	bl	80002ec <__adddf3>
 801a810:	3d01      	subs	r5, #1
 801a812:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a816:	e9c4 6700 	strd	r6, r7, [r4]
 801a81a:	e755      	b.n	801a6c8 <__kernel_rem_pio2+0x518>
 801a81c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a820:	f7e5 fd64 	bl	80002ec <__adddf3>
 801a824:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a828:	e758      	b.n	801a6dc <__kernel_rem_pio2+0x52c>
 801a82a:	bf00      	nop
 801a82c:	f3af 8000 	nop.w
	...
 801a838:	41700000 	.word	0x41700000
 801a83c:	3e700000 	.word	0x3e700000
 801a840:	9b04      	ldr	r3, [sp, #16]
 801a842:	9a04      	ldr	r2, [sp, #16]
 801a844:	601f      	str	r7, [r3, #0]
 801a846:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801a84a:	605c      	str	r4, [r3, #4]
 801a84c:	609d      	str	r5, [r3, #8]
 801a84e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a852:	60d3      	str	r3, [r2, #12]
 801a854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a858:	6110      	str	r0, [r2, #16]
 801a85a:	6153      	str	r3, [r2, #20]
 801a85c:	e719      	b.n	801a692 <__kernel_rem_pio2+0x4e2>
 801a85e:	bf00      	nop

0801a860 <scalbn>:
 801a860:	b570      	push	{r4, r5, r6, lr}
 801a862:	ec55 4b10 	vmov	r4, r5, d0
 801a866:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801a86a:	4606      	mov	r6, r0
 801a86c:	462b      	mov	r3, r5
 801a86e:	b991      	cbnz	r1, 801a896 <scalbn+0x36>
 801a870:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801a874:	4323      	orrs	r3, r4
 801a876:	d03d      	beq.n	801a8f4 <scalbn+0x94>
 801a878:	4b35      	ldr	r3, [pc, #212]	@ (801a950 <scalbn+0xf0>)
 801a87a:	4620      	mov	r0, r4
 801a87c:	4629      	mov	r1, r5
 801a87e:	2200      	movs	r2, #0
 801a880:	f7e5 feea 	bl	8000658 <__aeabi_dmul>
 801a884:	4b33      	ldr	r3, [pc, #204]	@ (801a954 <scalbn+0xf4>)
 801a886:	429e      	cmp	r6, r3
 801a888:	4604      	mov	r4, r0
 801a88a:	460d      	mov	r5, r1
 801a88c:	da0f      	bge.n	801a8ae <scalbn+0x4e>
 801a88e:	a328      	add	r3, pc, #160	@ (adr r3, 801a930 <scalbn+0xd0>)
 801a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a894:	e01e      	b.n	801a8d4 <scalbn+0x74>
 801a896:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801a89a:	4291      	cmp	r1, r2
 801a89c:	d10b      	bne.n	801a8b6 <scalbn+0x56>
 801a89e:	4622      	mov	r2, r4
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	4629      	mov	r1, r5
 801a8a4:	f7e5 fd22 	bl	80002ec <__adddf3>
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	460d      	mov	r5, r1
 801a8ac:	e022      	b.n	801a8f4 <scalbn+0x94>
 801a8ae:	460b      	mov	r3, r1
 801a8b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801a8b4:	3936      	subs	r1, #54	@ 0x36
 801a8b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801a8ba:	4296      	cmp	r6, r2
 801a8bc:	dd0d      	ble.n	801a8da <scalbn+0x7a>
 801a8be:	2d00      	cmp	r5, #0
 801a8c0:	a11d      	add	r1, pc, #116	@ (adr r1, 801a938 <scalbn+0xd8>)
 801a8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8c6:	da02      	bge.n	801a8ce <scalbn+0x6e>
 801a8c8:	a11d      	add	r1, pc, #116	@ (adr r1, 801a940 <scalbn+0xe0>)
 801a8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8ce:	a31a      	add	r3, pc, #104	@ (adr r3, 801a938 <scalbn+0xd8>)
 801a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d4:	f7e5 fec0 	bl	8000658 <__aeabi_dmul>
 801a8d8:	e7e6      	b.n	801a8a8 <scalbn+0x48>
 801a8da:	1872      	adds	r2, r6, r1
 801a8dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801a8e0:	428a      	cmp	r2, r1
 801a8e2:	dcec      	bgt.n	801a8be <scalbn+0x5e>
 801a8e4:	2a00      	cmp	r2, #0
 801a8e6:	dd08      	ble.n	801a8fa <scalbn+0x9a>
 801a8e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a8ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801a8f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a8f4:	ec45 4b10 	vmov	d0, r4, r5
 801a8f8:	bd70      	pop	{r4, r5, r6, pc}
 801a8fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801a8fe:	da08      	bge.n	801a912 <scalbn+0xb2>
 801a900:	2d00      	cmp	r5, #0
 801a902:	a10b      	add	r1, pc, #44	@ (adr r1, 801a930 <scalbn+0xd0>)
 801a904:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a908:	dac1      	bge.n	801a88e <scalbn+0x2e>
 801a90a:	a10f      	add	r1, pc, #60	@ (adr r1, 801a948 <scalbn+0xe8>)
 801a90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a910:	e7bd      	b.n	801a88e <scalbn+0x2e>
 801a912:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a916:	3236      	adds	r2, #54	@ 0x36
 801a918:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801a91c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a920:	4620      	mov	r0, r4
 801a922:	4b0d      	ldr	r3, [pc, #52]	@ (801a958 <scalbn+0xf8>)
 801a924:	4629      	mov	r1, r5
 801a926:	2200      	movs	r2, #0
 801a928:	e7d4      	b.n	801a8d4 <scalbn+0x74>
 801a92a:	bf00      	nop
 801a92c:	f3af 8000 	nop.w
 801a930:	c2f8f359 	.word	0xc2f8f359
 801a934:	01a56e1f 	.word	0x01a56e1f
 801a938:	8800759c 	.word	0x8800759c
 801a93c:	7e37e43c 	.word	0x7e37e43c
 801a940:	8800759c 	.word	0x8800759c
 801a944:	fe37e43c 	.word	0xfe37e43c
 801a948:	c2f8f359 	.word	0xc2f8f359
 801a94c:	81a56e1f 	.word	0x81a56e1f
 801a950:	43500000 	.word	0x43500000
 801a954:	ffff3cb0 	.word	0xffff3cb0
 801a958:	3c900000 	.word	0x3c900000
 801a95c:	00000000 	.word	0x00000000

0801a960 <floor>:
 801a960:	ec51 0b10 	vmov	r0, r1, d0
 801a964:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a96c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801a970:	2e13      	cmp	r6, #19
 801a972:	460c      	mov	r4, r1
 801a974:	4605      	mov	r5, r0
 801a976:	4680      	mov	r8, r0
 801a978:	dc34      	bgt.n	801a9e4 <floor+0x84>
 801a97a:	2e00      	cmp	r6, #0
 801a97c:	da17      	bge.n	801a9ae <floor+0x4e>
 801a97e:	a332      	add	r3, pc, #200	@ (adr r3, 801aa48 <floor+0xe8>)
 801a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a984:	f7e5 fcb2 	bl	80002ec <__adddf3>
 801a988:	2200      	movs	r2, #0
 801a98a:	2300      	movs	r3, #0
 801a98c:	f7e6 f8f4 	bl	8000b78 <__aeabi_dcmpgt>
 801a990:	b150      	cbz	r0, 801a9a8 <floor+0x48>
 801a992:	2c00      	cmp	r4, #0
 801a994:	da55      	bge.n	801aa42 <floor+0xe2>
 801a996:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801a99a:	432c      	orrs	r4, r5
 801a99c:	2500      	movs	r5, #0
 801a99e:	42ac      	cmp	r4, r5
 801a9a0:	4c2b      	ldr	r4, [pc, #172]	@ (801aa50 <floor+0xf0>)
 801a9a2:	bf08      	it	eq
 801a9a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801a9a8:	4621      	mov	r1, r4
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	e023      	b.n	801a9f6 <floor+0x96>
 801a9ae:	4f29      	ldr	r7, [pc, #164]	@ (801aa54 <floor+0xf4>)
 801a9b0:	4137      	asrs	r7, r6
 801a9b2:	ea01 0307 	and.w	r3, r1, r7
 801a9b6:	4303      	orrs	r3, r0
 801a9b8:	d01d      	beq.n	801a9f6 <floor+0x96>
 801a9ba:	a323      	add	r3, pc, #140	@ (adr r3, 801aa48 <floor+0xe8>)
 801a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c0:	f7e5 fc94 	bl	80002ec <__adddf3>
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	f7e6 f8d6 	bl	8000b78 <__aeabi_dcmpgt>
 801a9cc:	2800      	cmp	r0, #0
 801a9ce:	d0eb      	beq.n	801a9a8 <floor+0x48>
 801a9d0:	2c00      	cmp	r4, #0
 801a9d2:	bfbe      	ittt	lt
 801a9d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801a9d8:	4133      	asrlt	r3, r6
 801a9da:	18e4      	addlt	r4, r4, r3
 801a9dc:	ea24 0407 	bic.w	r4, r4, r7
 801a9e0:	2500      	movs	r5, #0
 801a9e2:	e7e1      	b.n	801a9a8 <floor+0x48>
 801a9e4:	2e33      	cmp	r6, #51	@ 0x33
 801a9e6:	dd0a      	ble.n	801a9fe <floor+0x9e>
 801a9e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a9ec:	d103      	bne.n	801a9f6 <floor+0x96>
 801a9ee:	4602      	mov	r2, r0
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	f7e5 fc7b 	bl	80002ec <__adddf3>
 801a9f6:	ec41 0b10 	vmov	d0, r0, r1
 801a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801aa02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801aa06:	40df      	lsrs	r7, r3
 801aa08:	4207      	tst	r7, r0
 801aa0a:	d0f4      	beq.n	801a9f6 <floor+0x96>
 801aa0c:	a30e      	add	r3, pc, #56	@ (adr r3, 801aa48 <floor+0xe8>)
 801aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa12:	f7e5 fc6b 	bl	80002ec <__adddf3>
 801aa16:	2200      	movs	r2, #0
 801aa18:	2300      	movs	r3, #0
 801aa1a:	f7e6 f8ad 	bl	8000b78 <__aeabi_dcmpgt>
 801aa1e:	2800      	cmp	r0, #0
 801aa20:	d0c2      	beq.n	801a9a8 <floor+0x48>
 801aa22:	2c00      	cmp	r4, #0
 801aa24:	da0a      	bge.n	801aa3c <floor+0xdc>
 801aa26:	2e14      	cmp	r6, #20
 801aa28:	d101      	bne.n	801aa2e <floor+0xce>
 801aa2a:	3401      	adds	r4, #1
 801aa2c:	e006      	b.n	801aa3c <floor+0xdc>
 801aa2e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801aa32:	2301      	movs	r3, #1
 801aa34:	40b3      	lsls	r3, r6
 801aa36:	441d      	add	r5, r3
 801aa38:	4545      	cmp	r5, r8
 801aa3a:	d3f6      	bcc.n	801aa2a <floor+0xca>
 801aa3c:	ea25 0507 	bic.w	r5, r5, r7
 801aa40:	e7b2      	b.n	801a9a8 <floor+0x48>
 801aa42:	2500      	movs	r5, #0
 801aa44:	462c      	mov	r4, r5
 801aa46:	e7af      	b.n	801a9a8 <floor+0x48>
 801aa48:	8800759c 	.word	0x8800759c
 801aa4c:	7e37e43c 	.word	0x7e37e43c
 801aa50:	bff00000 	.word	0xbff00000
 801aa54:	000fffff 	.word	0x000fffff

0801aa58 <_init>:
 801aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa5a:	bf00      	nop
 801aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa5e:	bc08      	pop	{r3}
 801aa60:	469e      	mov	lr, r3
 801aa62:	4770      	bx	lr

0801aa64 <_fini>:
 801aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa66:	bf00      	nop
 801aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa6a:	bc08      	pop	{r3}
 801aa6c:	469e      	mov	lr, r3
 801aa6e:	4770      	bx	lr
